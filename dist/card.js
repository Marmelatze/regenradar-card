
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

      var $parcel$global = globalThis;
    
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire94c2"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire94c2"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("5k61a", function(module, exports) {

$parcel$export(module.exports, "init", () => init);
$parcel$export(module.exports, "forward", () => forward);
$parcel$export(module.exports, "inverse", () => inverse);
$parcel$export(module.exports, "names", () => names);
$parcel$export(module.exports, "default", () => $3e037cff57fd6873$export$2e2bcd8739ae039);
// Heavily based on this etmerc projection implementation
// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js

var $jEXtl = parcelRequire("jEXtl");

var $hGEgl = parcelRequire("hGEgl");

var $9WCjH = parcelRequire("9WCjH");

var $47B3Y = parcelRequire("47B3Y");

var $1o8BV = parcelRequire("1o8BV");

var $jMhd5 = parcelRequire("jMhd5");

var $fOd36 = parcelRequire("fOd36");

var $dbd4D = parcelRequire("dbd4D");
function init() {
    if (!this.approx && (isNaN(this.es) || this.es <= 0)) throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION["Fast_Transverse_Mercator"] in the WKT.');
    if (this.approx) {
        // When '+approx' is set, use tmerc instead
        (0, $jEXtl.default).init.apply(this);
        this.forward = (0, $jEXtl.default).forward;
        this.inverse = (0, $jEXtl.default).inverse;
    }
    this.x0 = this.x0 !== undefined ? this.x0 : 0;
    this.y0 = this.y0 !== undefined ? this.y0 : 0;
    this.long0 = this.long0 !== undefined ? this.long0 : 0;
    this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;
    this.cgb = [];
    this.cbg = [];
    this.utg = [];
    this.gtu = [];
    var f = this.es / (1 + Math.sqrt(1 - this.es));
    var n = f / (2 - f);
    var np = n;
    this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675))))));
    this.cbg[0] = n * (-2 + n * (2 / 3 + n * (4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));
    np = np * n;
    this.cgb[1] = np * (7 / 3 + n * (-1.6 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
    this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * (-13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));
    np = np * n;
    this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
    this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (1.6 + n * (-12686 / 2835))));
    np = np * n;
    this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
    this.cbg[3] = np * (1237 / 630 + n * (-2.4 + n * (-24832 / 14175)));
    np = np * n;
    this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
    this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));
    np = np * n;
    this.cgb[5] = np * (601676 / 22275);
    this.cbg[5] = np * (444337 / 155925);
    np = Math.pow(n, 2);
    this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));
    this.utg[0] = n * (-0.5 + n * (2 / 3 + n * (-37 / 96 + n * (1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
    this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));
    this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
    this.gtu[1] = np * (13 / 48 + n * (-0.6 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));
    np = np * n;
    this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720))));
    this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));
    np = np * n;
    this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
    this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));
    np = np * n;
    this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
    this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));
    np = np * n;
    this.utg[5] = np * (-20648693 / 638668800);
    this.gtu[5] = np * 0.6650675310896665;
    var Z = (0, $1o8BV.default)(this.cbg, this.lat0);
    this.Zb = -this.Qn * (Z + (0, $jMhd5.default)(this.gtu, 2 * Z));
}
function forward(p) {
    var Ce = (0, $dbd4D.default)(p.x - this.long0);
    var Cn = p.y;
    Cn = (0, $1o8BV.default)(this.cbg, Cn);
    var sin_Cn = Math.sin(Cn);
    var cos_Cn = Math.cos(Cn);
    var sin_Ce = Math.sin(Ce);
    var cos_Ce = Math.cos(Ce);
    Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
    Ce = Math.atan2(sin_Ce * cos_Cn, (0, $9WCjH.default)(sin_Cn, cos_Cn * cos_Ce));
    Ce = (0, $47B3Y.default)(Math.tan(Ce));
    var tmp = (0, $fOd36.default)(this.gtu, 2 * Cn, 2 * Ce);
    Cn = Cn + tmp[0];
    Ce = Ce + tmp[1];
    var x;
    var y;
    if (Math.abs(Ce) <= 2.623395162778) {
        x = this.a * (this.Qn * Ce) + this.x0;
        y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
    } else {
        x = Infinity;
        y = Infinity;
    }
    p.x = x;
    p.y = y;
    return p;
}
function inverse(p) {
    var Ce = (p.x - this.x0) * (1 / this.a);
    var Cn = (p.y - this.y0) * (1 / this.a);
    Cn = (Cn - this.Zb) / this.Qn;
    Ce = Ce / this.Qn;
    var lon;
    var lat;
    if (Math.abs(Ce) <= 2.623395162778) {
        var tmp = (0, $fOd36.default)(this.utg, 2 * Cn, 2 * Ce);
        Cn = Cn + tmp[0];
        Ce = Ce + tmp[1];
        Ce = Math.atan((0, $hGEgl.default)(Ce));
        var sin_Cn = Math.sin(Cn);
        var cos_Cn = Math.cos(Cn);
        var sin_Ce = Math.sin(Ce);
        var cos_Ce = Math.cos(Ce);
        Cn = Math.atan2(sin_Cn * cos_Ce, (0, $9WCjH.default)(sin_Ce, cos_Ce * cos_Cn));
        Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);
        lon = (0, $dbd4D.default)(Ce + this.long0);
        lat = (0, $1o8BV.default)(this.cgb, Cn);
    } else {
        lon = Infinity;
        lat = Infinity;
    }
    p.x = lon;
    p.y = lat;
    return p;
}
var names = [
    "Extended_Transverse_Mercator",
    "Extended Transverse Mercator",
    "etmerc",
    "Transverse_Mercator",
    "Transverse Mercator",
    "Gauss Kruger",
    "Gauss_Kruger",
    "tmerc"
];
var $3e037cff57fd6873$export$2e2bcd8739ae039 = {
    init: init,
    forward: forward,
    inverse: inverse,
    names: names
};

});
parcelRegister("jEXtl", function(module, exports) {

$parcel$export(module.exports, "default", () => $e4ffe2b2434d382e$export$2e2bcd8739ae039);
// Heavily based on this tmerc projection implementation
// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js

var $dMOv3 = parcelRequire("dMOv3");

var $doDgE = parcelRequire("doDgE");

var $jZzoQ = parcelRequire("jZzoQ");

var $dbd4D = parcelRequire("dbd4D");

var $7B7Eg = parcelRequire("7B7Eg");

var $9lchO = parcelRequire("9lchO");
function $e4ffe2b2434d382e$export$2cd8252107eb640b() {
    this.x0 = this.x0 !== undefined ? this.x0 : 0;
    this.y0 = this.y0 !== undefined ? this.y0 : 0;
    this.long0 = this.long0 !== undefined ? this.long0 : 0;
    this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;
    if (this.es) {
        this.en = (0, $dMOv3.default)(this.es);
        this.ml0 = (0, $doDgE.default)(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
    }
}
function $e4ffe2b2434d382e$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    var delta_lon = (0, $dbd4D.default)(lon - this.long0);
    var con;
    var x, y;
    var sin_phi = Math.sin(lat);
    var cos_phi = Math.cos(lat);
    if (!this.es) {
        var b = cos_phi * Math.sin(delta_lon);
        if (Math.abs(Math.abs(b) - 1) < (0, $7B7Eg.EPSLN)) return 93;
        else {
            x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
            y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
            b = Math.abs(y);
            if (b >= 1) {
                if (b - 1 > (0, $7B7Eg.EPSLN)) return 93;
                else y = 0;
            } else y = Math.acos(y);
            if (lat < 0) y = -y;
            y = this.a * this.k0 * (y - this.lat0) + this.y0;
        }
    } else {
        var al = cos_phi * delta_lon;
        var als = Math.pow(al, 2);
        var c = this.ep2 * Math.pow(cos_phi, 2);
        var cs = Math.pow(c, 2);
        var tq = Math.abs(cos_phi) > (0, $7B7Eg.EPSLN) ? Math.tan(lat) : 0;
        var t = Math.pow(tq, 2);
        var ts = Math.pow(t, 2);
        con = 1 - this.es * Math.pow(sin_phi, 2);
        al = al / Math.sqrt(con);
        var ml = (0, $doDgE.default)(lat, sin_phi, cos_phi, this.en);
        x = this.a * (this.k0 * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c + als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) + this.x0;
        y = this.a * (this.k0 * (ml - this.ml0 + sin_phi * delta_lon * al / 2 * (1 + als / 12 * (5 - t + 9 * c + 4 * cs + als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c + als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) + this.y0;
    }
    p.x = x;
    p.y = y;
    return p;
}
function $e4ffe2b2434d382e$export$70ae2c07e401031b(p) {
    var con, phi;
    var lat, lon;
    var x = (p.x - this.x0) * (1 / this.a);
    var y = (p.y - this.y0) * (1 / this.a);
    if (!this.es) {
        var f = Math.exp(x / this.k0);
        var g = 0.5 * (f - 1 / f);
        var temp = this.lat0 + y / this.k0;
        var h = Math.cos(temp);
        con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
        lat = Math.asin(con);
        if (y < 0) lat = -lat;
        if (g === 0 && h === 0) lon = 0;
        else lon = (0, $dbd4D.default)(Math.atan2(g, h) + this.long0);
    } else {
        con = this.ml0 + y / this.k0;
        phi = (0, $jZzoQ.default)(con, this.es, this.en);
        if (Math.abs(phi) < (0, $7B7Eg.HALF_PI)) {
            var sin_phi = Math.sin(phi);
            var cos_phi = Math.cos(phi);
            var tan_phi = Math.abs(cos_phi) > (0, $7B7Eg.EPSLN) ? Math.tan(phi) : 0;
            var c = this.ep2 * Math.pow(cos_phi, 2);
            var cs = Math.pow(c, 2);
            var t = Math.pow(tan_phi, 2);
            var ts = Math.pow(t, 2);
            con = 1 - this.es * Math.pow(sin_phi, 2);
            var d = x * Math.sqrt(con) / this.k0;
            var ds = Math.pow(d, 2);
            con = con * tan_phi;
            lat = phi - con * ds / (1 - this.es) * 0.5 * (1 - ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs - ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c - ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));
            lon = (0, $dbd4D.default)(this.long0 + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c - ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi);
        } else {
            lat = (0, $7B7Eg.HALF_PI) * (0, $9lchO.default)(y);
            lon = 0;
        }
    }
    p.x = lon;
    p.y = lat;
    return p;
}
var $e4ffe2b2434d382e$export$e4b2ac9215619f8d = [
    "Fast_Transverse_Mercator",
    "Fast Transverse Mercator"
];
var $e4ffe2b2434d382e$export$2e2bcd8739ae039 = {
    init: $e4ffe2b2434d382e$export$2cd8252107eb640b,
    forward: $e4ffe2b2434d382e$export$174bb771924e7eb1,
    inverse: $e4ffe2b2434d382e$export$70ae2c07e401031b,
    names: $e4ffe2b2434d382e$export$e4b2ac9215619f8d
};

});
parcelRegister("dMOv3", function(module, exports) {

$parcel$export(module.exports, "default", () => $a096ee4420b507d8$export$2e2bcd8739ae039);
var $a096ee4420b507d8$var$C00 = 1;
var $a096ee4420b507d8$var$C02 = 0.25;
var $a096ee4420b507d8$var$C04 = 0.046875;
var $a096ee4420b507d8$var$C06 = 0.01953125;
var $a096ee4420b507d8$var$C08 = 0.01068115234375;
var $a096ee4420b507d8$var$C22 = 0.75;
var $a096ee4420b507d8$var$C44 = 0.46875;
var $a096ee4420b507d8$var$C46 = 0.01302083333333333333;
var $a096ee4420b507d8$var$C48 = 0.00712076822916666666;
var $a096ee4420b507d8$var$C66 = 0.36458333333333333333;
var $a096ee4420b507d8$var$C68 = 0.00569661458333333333;
var $a096ee4420b507d8$var$C88 = 0.3076171875;
function $a096ee4420b507d8$export$2e2bcd8739ae039(es) {
    var en = [];
    en[0] = $a096ee4420b507d8$var$C00 - es * ($a096ee4420b507d8$var$C02 + es * ($a096ee4420b507d8$var$C04 + es * ($a096ee4420b507d8$var$C06 + es * $a096ee4420b507d8$var$C08)));
    en[1] = es * ($a096ee4420b507d8$var$C22 - es * ($a096ee4420b507d8$var$C04 + es * ($a096ee4420b507d8$var$C06 + es * $a096ee4420b507d8$var$C08)));
    var t = es * es;
    en[2] = t * ($a096ee4420b507d8$var$C44 - es * ($a096ee4420b507d8$var$C46 + es * $a096ee4420b507d8$var$C48));
    t *= es;
    en[3] = t * ($a096ee4420b507d8$var$C66 - es * $a096ee4420b507d8$var$C68);
    en[4] = t * es * $a096ee4420b507d8$var$C88;
    return en;
}

});

parcelRegister("doDgE", function(module, exports) {

$parcel$export(module.exports, "default", () => $9c0bf9fddf97ce3e$export$2e2bcd8739ae039);
function $9c0bf9fddf97ce3e$export$2e2bcd8739ae039(phi, sphi, cphi, en) {
    cphi *= sphi;
    sphi *= sphi;
    return en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4])));
}

});

parcelRegister("jZzoQ", function(module, exports) {

$parcel$export(module.exports, "default", () => $e8df2c7586634726$export$2e2bcd8739ae039);

var $doDgE = parcelRequire("doDgE");

var $7B7Eg = parcelRequire("7B7Eg");
var $e8df2c7586634726$var$MAX_ITER = 20;
function $e8df2c7586634726$export$2e2bcd8739ae039(arg, es, en) {
    var k = 1 / (1 - es);
    var phi = arg;
    for(var i = $e8df2c7586634726$var$MAX_ITER; i; --i){
        var s = Math.sin(phi);
        var t = 1 - es * s * s;
        //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;
        //phi -= t * (t * Math.sqrt(t)) * k;
        t = ((0, $doDgE.default)(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
        phi -= t;
        if (Math.abs(t) < (0, $7B7Eg.EPSLN)) return phi;
    }
    //..reportError("cass:pj_inv_mlfn: Convergence error");
    return phi;
}

});
parcelRegister("7B7Eg", function(module, exports) {

$parcel$export(module.exports, "PJD_3PARAM", () => $5881ebed9814380c$export$3a3ed3e590e8ec27);
$parcel$export(module.exports, "PJD_7PARAM", () => $5881ebed9814380c$export$8cab19b7f383a7a7);
$parcel$export(module.exports, "PJD_GRIDSHIFT", () => $5881ebed9814380c$export$83d26ae02793dd10);
$parcel$export(module.exports, "PJD_WGS84", () => $5881ebed9814380c$export$ab5bf8c731b6bbbb);
$parcel$export(module.exports, "PJD_NODATUM", () => $5881ebed9814380c$export$8df4c7729d8ed58d);
$parcel$export(module.exports, "SRS_WGS84_SEMIMAJOR", () => $5881ebed9814380c$export$d612c03b7390d945);
$parcel$export(module.exports, "SRS_WGS84_SEMIMINOR", () => $5881ebed9814380c$export$59af086d7527ec46);
$parcel$export(module.exports, "SRS_WGS84_ESQUARED", () => $5881ebed9814380c$export$9b798f9d78b99fc0);
$parcel$export(module.exports, "SEC_TO_RAD", () => $5881ebed9814380c$export$e0b9011552f3b2f7);
$parcel$export(module.exports, "HALF_PI", () => $5881ebed9814380c$export$f504979d7e0a75c7);
$parcel$export(module.exports, "SIXTH", () => $5881ebed9814380c$export$d7977f56a0faa834);
$parcel$export(module.exports, "RA4", () => $5881ebed9814380c$export$9e703428410a9c7b);
$parcel$export(module.exports, "RA6", () => $5881ebed9814380c$export$bb54dde5565ed6e3);
$parcel$export(module.exports, "EPSLN", () => $5881ebed9814380c$export$2aa89dbfb8b504bb);
$parcel$export(module.exports, "D2R", () => $5881ebed9814380c$export$ed6012a68c0f4a70);
$parcel$export(module.exports, "R2D", () => $5881ebed9814380c$export$456934b8be7498c3);
$parcel$export(module.exports, "FORTPI", () => $5881ebed9814380c$export$10cb69dd603c11b0);
$parcel$export(module.exports, "TWO_PI", () => $5881ebed9814380c$export$6eec49b1a6289c4e);
$parcel$export(module.exports, "SPI", () => $5881ebed9814380c$export$703a92fc6506ffb9);
var $5881ebed9814380c$export$3a3ed3e590e8ec27 = 1;
var $5881ebed9814380c$export$8cab19b7f383a7a7 = 2;
var $5881ebed9814380c$export$83d26ae02793dd10 = 3;
var $5881ebed9814380c$export$ab5bf8c731b6bbbb = 4; // WGS84 or equivalent
var $5881ebed9814380c$export$8df4c7729d8ed58d = 5; // WGS84 or equivalent
var $5881ebed9814380c$export$d612c03b7390d945 = 6378137.0; // only used in grid shift transforms
var $5881ebed9814380c$export$59af086d7527ec46 = 6356752.314; // only used in grid shift transforms
var $5881ebed9814380c$export$9b798f9d78b99fc0 = 0.0066943799901413165; // only used in grid shift transforms
var $5881ebed9814380c$export$e0b9011552f3b2f7 = 4.84813681109535993589914102357e-6;
var $5881ebed9814380c$export$f504979d7e0a75c7 = Math.PI / 2;
var $5881ebed9814380c$export$d7977f56a0faa834 = 0.1666666666666666667;
var $5881ebed9814380c$export$9e703428410a9c7b = 0.04722222222222222222;
var $5881ebed9814380c$export$bb54dde5565ed6e3 = 0.02215608465608465608;
var $5881ebed9814380c$export$2aa89dbfb8b504bb = 1.0e-10;
var $5881ebed9814380c$export$ed6012a68c0f4a70 = 0.01745329251994329577;
var $5881ebed9814380c$export$456934b8be7498c3 = 57.29577951308232088;
var $5881ebed9814380c$export$10cb69dd603c11b0 = Math.PI / 4;
var $5881ebed9814380c$export$6eec49b1a6289c4e = Math.PI * 2;
var $5881ebed9814380c$export$703a92fc6506ffb9 = 3.14159265359;

});


parcelRegister("dbd4D", function(module, exports) {

$parcel$export(module.exports, "default", () => $9986719d2ff72393$export$2e2bcd8739ae039);

var $7B7Eg = parcelRequire("7B7Eg");

var $9lchO = parcelRequire("9lchO");
function $9986719d2ff72393$export$2e2bcd8739ae039(x) {
    return Math.abs(x) <= (0, $7B7Eg.SPI) ? x : x - (0, $9lchO.default)(x) * (0, $7B7Eg.TWO_PI);
}

});
parcelRegister("9lchO", function(module, exports) {

$parcel$export(module.exports, "default", () => $6ccf9b0bd006a339$export$2e2bcd8739ae039);
function $6ccf9b0bd006a339$export$2e2bcd8739ae039(x) {
    return x < 0 ? -1 : 1;
}

});



parcelRegister("hGEgl", function(module, exports) {

$parcel$export(module.exports, "default", () => $ce059739c7c7b7c7$export$2e2bcd8739ae039);
function $ce059739c7c7b7c7$export$2e2bcd8739ae039(x) {
    var r = Math.exp(x);
    r = (r - 1 / r) / 2;
    return r;
}

});

parcelRegister("9WCjH", function(module, exports) {

$parcel$export(module.exports, "default", () => $73d740bf0846a2de$export$2e2bcd8739ae039);
function $73d740bf0846a2de$export$2e2bcd8739ae039(x, y) {
    x = Math.abs(x);
    y = Math.abs(y);
    var a = Math.max(x, y);
    var b = Math.min(x, y) / (a ? a : 1);
    return a * Math.sqrt(1 + Math.pow(b, 2));
}

});

parcelRegister("47B3Y", function(module, exports) {

$parcel$export(module.exports, "default", () => $300490d69255a18f$export$2e2bcd8739ae039);

var $9WCjH = parcelRequire("9WCjH");

var $7cl6N = parcelRequire("7cl6N");
function $300490d69255a18f$export$2e2bcd8739ae039(x) {
    var y = Math.abs(x);
    y = (0, $7cl6N.default)(y * (1 + y / ((0, $9WCjH.default)(1, y) + 1)));
    return x < 0 ? -y : y;
}

});
parcelRegister("7cl6N", function(module, exports) {

$parcel$export(module.exports, "default", () => $53da07238b57f28c$export$2e2bcd8739ae039);
function $53da07238b57f28c$export$2e2bcd8739ae039(x) {
    var y = 1 + x;
    var z = y - 1;
    return z === 0 ? x : x * Math.log(y) / z;
}

});


parcelRegister("1o8BV", function(module, exports) {

$parcel$export(module.exports, "default", () => $102eb63c8ac6e56e$export$2e2bcd8739ae039);
function $102eb63c8ac6e56e$export$2e2bcd8739ae039(pp, B) {
    var cos_2B = 2 * Math.cos(2 * B);
    var i = pp.length - 1;
    var h1 = pp[i];
    var h2 = 0;
    var h;
    while(--i >= 0){
        h = -h2 + cos_2B * h1 + pp[i];
        h2 = h1;
        h1 = h;
    }
    return B + h * Math.sin(2 * B);
}

});

parcelRegister("jMhd5", function(module, exports) {

$parcel$export(module.exports, "default", () => $e65fd98fcd4937b4$export$2e2bcd8739ae039);
function $e65fd98fcd4937b4$export$2e2bcd8739ae039(pp, arg_r) {
    var r = 2 * Math.cos(arg_r);
    var i = pp.length - 1;
    var hr1 = pp[i];
    var hr2 = 0;
    var hr;
    while(--i >= 0){
        hr = -hr2 + r * hr1 + pp[i];
        hr2 = hr1;
        hr1 = hr;
    }
    return Math.sin(arg_r) * hr;
}

});

parcelRegister("fOd36", function(module, exports) {

$parcel$export(module.exports, "default", () => $b825a5d13a9b034e$export$2e2bcd8739ae039);

var $hGEgl = parcelRequire("hGEgl");

var $3TctA = parcelRequire("3TctA");
function $b825a5d13a9b034e$export$2e2bcd8739ae039(pp, arg_r, arg_i) {
    var sin_arg_r = Math.sin(arg_r);
    var cos_arg_r = Math.cos(arg_r);
    var sinh_arg_i = (0, $hGEgl.default)(arg_i);
    var cosh_arg_i = (0, $3TctA.default)(arg_i);
    var r = 2 * cos_arg_r * cosh_arg_i;
    var i = -2 * sin_arg_r * sinh_arg_i;
    var j = pp.length - 1;
    var hr = pp[j];
    var hi1 = 0;
    var hr1 = 0;
    var hi = 0;
    var hr2;
    var hi2;
    while(--j >= 0){
        hr2 = hr1;
        hi2 = hi1;
        hr1 = hr;
        hi1 = hi;
        hr = -hr2 + r * hr1 - i * hi1 + pp[j];
        hi = -hi2 + i * hr1 + r * hi1;
    }
    r = sin_arg_r * cosh_arg_i;
    i = cos_arg_r * sinh_arg_i;
    return [
        r * hr - i * hi,
        r * hi + i * hr
    ];
}

});
parcelRegister("3TctA", function(module, exports) {

$parcel$export(module.exports, "default", () => $2d502fa933d591df$export$2e2bcd8739ae039);
function $2d502fa933d591df$export$2e2bcd8739ae039(x) {
    var r = Math.exp(x);
    r = (r + 1 / r) / 2;
    return r;
}

});



parcelRegister("2nJNQ", function(module, exports) {

$parcel$export(module.exports, "ssfn_", () => ssfn_);
$parcel$export(module.exports, "init", () => init);
$parcel$export(module.exports, "forward", () => forward);
$parcel$export(module.exports, "inverse", () => inverse);
$parcel$export(module.exports, "names", () => names);
$parcel$export(module.exports, "default", () => $1bc14248ab97445a$export$2e2bcd8739ae039);

var $7B7Eg = parcelRequire("7B7Eg");

var $9lchO = parcelRequire("9lchO");

var $4MKOs = parcelRequire("4MKOs");

var $biomK = parcelRequire("biomK");

var $i2VbV = parcelRequire("i2VbV");

var $dbd4D = parcelRequire("dbd4D");
function ssfn_(phit, sinphi, eccen) {
    sinphi *= eccen;
    return Math.tan(0.5 * ((0, $7B7Eg.HALF_PI) + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);
}
function init() {
    // setting default parameters
    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    this.lat0 = this.lat0 || 0;
    this.long0 = this.long0 || 0;
    this.coslat0 = Math.cos(this.lat0);
    this.sinlat0 = Math.sin(this.lat0);
    if (this.sphere) {
        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= (0, $7B7Eg.EPSLN)) this.k0 = 0.5 * (1 + (0, $9lchO.default)(this.lat0) * Math.sin(this.lat_ts));
    } else {
        if (Math.abs(this.coslat0) <= (0, $7B7Eg.EPSLN)) {
            if (this.lat0 > 0) //North pole
            //trace('stere:north pole');
            this.con = 1;
            else //South pole
            //trace('stere:south pole');
            this.con = -1;
        }
        this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));
        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= (0, $7B7Eg.EPSLN) && Math.abs(Math.cos(this.lat_ts)) > (0, $7B7Eg.EPSLN)) // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole
        // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987
        this.k0 = 0.5 * this.cons * (0, $4MKOs.default)(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / (0, $biomK.default)(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
        this.ms1 = (0, $4MKOs.default)(this.e, this.sinlat0, this.coslat0);
        this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - (0, $7B7Eg.HALF_PI);
        this.cosX0 = Math.cos(this.X0);
        this.sinX0 = Math.sin(this.X0);
    }
}
function forward(p) {
    var lon = p.x;
    var lat = p.y;
    var sinlat = Math.sin(lat);
    var coslat = Math.cos(lat);
    var A, X, sinX, cosX, ts, rh;
    var dlon = (0, $dbd4D.default)(lon - this.long0);
    if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= (0, $7B7Eg.EPSLN) && Math.abs(lat + this.lat0) <= (0, $7B7Eg.EPSLN)) {
        //case of the origine point
        //trace('stere:this is the origin point');
        p.x = NaN;
        p.y = NaN;
        return p;
    }
    if (this.sphere) {
        //trace('stere:sphere case');
        A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
        p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;
        p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
        return p;
    } else {
        X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - (0, $7B7Eg.HALF_PI);
        cosX = Math.cos(X);
        sinX = Math.sin(X);
        if (Math.abs(this.coslat0) <= (0, $7B7Eg.EPSLN)) {
            ts = (0, $biomK.default)(this.e, lat * this.con, this.con * sinlat);
            rh = 2 * this.a * this.k0 * ts / this.cons;
            p.x = this.x0 + rh * Math.sin(lon - this.long0);
            p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);
            //trace(p.toString());
            return p;
        } else if (Math.abs(this.sinlat0) < (0, $7B7Eg.EPSLN)) {
            //Eq
            //trace('stere:equateur');
            A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
            p.y = A * sinX;
        } else {
            //other case
            //trace('stere:normal case');
            A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
            p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
        }
        p.x = A * cosX * Math.sin(dlon) + this.x0;
    }
    //trace(p.toString());
    return p;
}
function inverse(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var lon, lat, ts, ce, Chi;
    var rh = Math.sqrt(p.x * p.x + p.y * p.y);
    if (this.sphere) {
        var c = 2 * Math.atan(rh / (2 * this.a * this.k0));
        lon = this.long0;
        lat = this.lat0;
        if (rh <= (0, $7B7Eg.EPSLN)) {
            p.x = lon;
            p.y = lat;
            return p;
        }
        lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);
        if (Math.abs(this.coslat0) < (0, $7B7Eg.EPSLN)) {
            if (this.lat0 > 0) lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x, -1 * p.y));
            else lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x, p.y));
        } else lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
        p.x = lon;
        p.y = lat;
        return p;
    } else if (Math.abs(this.coslat0) <= (0, $7B7Eg.EPSLN)) {
        if (rh <= (0, $7B7Eg.EPSLN)) {
            lat = this.lat0;
            lon = this.long0;
            p.x = lon;
            p.y = lat;
            //trace(p.toString());
            return p;
        }
        p.x *= this.con;
        p.y *= this.con;
        ts = rh * this.cons / (2 * this.a * this.k0);
        lat = this.con * (0, $i2VbV.default)(this.e, ts);
        lon = this.con * (0, $dbd4D.default)(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));
    } else {
        ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
        lon = this.long0;
        if (rh <= (0, $7B7Eg.EPSLN)) Chi = this.X0;
        else {
            Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
            lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
        }
        lat = -1 * (0, $i2VbV.default)(this.e, Math.tan(0.5 * ((0, $7B7Eg.HALF_PI) + Chi)));
    }
    p.x = lon;
    p.y = lat;
    //trace(p.toString());
    return p;
}
var names = [
    "stere",
    "Stereographic_South_Pole",
    "Polar Stereographic (variant B)",
    "Polar_Stereographic"
];
var $1bc14248ab97445a$export$2e2bcd8739ae039 = {
    init: init,
    forward: forward,
    inverse: inverse,
    names: names,
    ssfn_: ssfn_
};

});
parcelRegister("4MKOs", function(module, exports) {

$parcel$export(module.exports, "default", () => $37bff52fdf35284f$export$2e2bcd8739ae039);
function $37bff52fdf35284f$export$2e2bcd8739ae039(eccent, sinphi, cosphi) {
    var con = eccent * sinphi;
    return cosphi / Math.sqrt(1 - con * con);
}

});

parcelRegister("biomK", function(module, exports) {

$parcel$export(module.exports, "default", () => $839446b123659551$export$2e2bcd8739ae039);

var $7B7Eg = parcelRequire("7B7Eg");
function $839446b123659551$export$2e2bcd8739ae039(eccent, phi, sinphi) {
    var con = eccent * sinphi;
    var com = 0.5 * eccent;
    con = Math.pow((1 - con) / (1 + con), com);
    return Math.tan(0.5 * ((0, $7B7Eg.HALF_PI) - phi)) / con;
}

});

parcelRegister("i2VbV", function(module, exports) {

$parcel$export(module.exports, "default", () => $d234c6e4c40200dc$export$2e2bcd8739ae039);

var $7B7Eg = parcelRequire("7B7Eg");
function $d234c6e4c40200dc$export$2e2bcd8739ae039(eccent, ts) {
    var eccnth = 0.5 * eccent;
    var con, dphi;
    var phi = (0, $7B7Eg.HALF_PI) - 2 * Math.atan(ts);
    for(var i = 0; i <= 15; i++){
        con = eccent * Math.sin(phi);
        dphi = (0, $7B7Eg.HALF_PI) - 2 * Math.atan(ts * Math.pow((1 - con) / (1 + con), eccnth)) - phi;
        phi += dphi;
        if (Math.abs(dphi) <= 0.0000000001) return phi;
    }
    //console.log("phi2z has NoConvergence");
    return -9999;
}

});


parcelRegister("1UqH0", function(module, exports) {

$parcel$export(module.exports, "S_POLE", () => S_POLE);
$parcel$export(module.exports, "N_POLE", () => N_POLE);
$parcel$export(module.exports, "EQUIT", () => EQUIT);
$parcel$export(module.exports, "OBLIQ", () => OBLIQ);
$parcel$export(module.exports, "init", () => init);
$parcel$export(module.exports, "forward", () => forward);
$parcel$export(module.exports, "inverse", () => inverse);
$parcel$export(module.exports, "names", () => names);
$parcel$export(module.exports, "default", () => $163fb9ff403f01cd$export$2e2bcd8739ae039);

var $7B7Eg = parcelRequire("7B7Eg");

var $ef5fU = parcelRequire("ef5fU");

var $dbd4D = parcelRequire("dbd4D");
var S_POLE = 1;
var N_POLE = 2;
var EQUIT = 3;
var OBLIQ = 4;
function init() {
    var t = Math.abs(this.lat0);
    if (Math.abs(t - (0, $7B7Eg.HALF_PI)) < (0, $7B7Eg.EPSLN)) this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;
    else if (Math.abs(t) < (0, $7B7Eg.EPSLN)) this.mode = this.EQUIT;
    else this.mode = this.OBLIQ;
    if (this.es > 0) {
        var sinphi;
        this.qp = (0, $ef5fU.default)(this.e, 1);
        this.mmf = 0.5 / (1 - this.es);
        this.apa = authset(this.es);
        switch(this.mode){
            case this.N_POLE:
                this.dd = 1;
                break;
            case this.S_POLE:
                this.dd = 1;
                break;
            case this.EQUIT:
                this.rq = Math.sqrt(0.5 * this.qp);
                this.dd = 1 / this.rq;
                this.xmf = 1;
                this.ymf = 0.5 * this.qp;
                break;
            case this.OBLIQ:
                this.rq = Math.sqrt(0.5 * this.qp);
                sinphi = Math.sin(this.lat0);
                this.sinb1 = (0, $ef5fU.default)(this.e, sinphi) / this.qp;
                this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
                this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
                this.ymf = (this.xmf = this.rq) / this.dd;
                this.xmf *= this.dd;
                break;
        }
    } else if (this.mode === this.OBLIQ) {
        this.sinph0 = Math.sin(this.lat0);
        this.cosph0 = Math.cos(this.lat0);
    }
}
function forward(p) {
    /* Forward equations
      -----------------*/ var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
    var lam = p.x;
    var phi = p.y;
    lam = (0, $dbd4D.default)(lam - this.long0);
    if (this.sphere) {
        sinphi = Math.sin(phi);
        cosphi = Math.cos(phi);
        coslam = Math.cos(lam);
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            y = this.mode === this.EQUIT ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
            if (y <= (0, $7B7Eg.EPSLN)) return null;
            y = Math.sqrt(2 / y);
            x = y * cosphi * Math.sin(lam);
            y *= this.mode === this.EQUIT ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
        } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
            if (this.mode === this.N_POLE) coslam = -coslam;
            if (Math.abs(phi + this.lat0) < (0, $7B7Eg.EPSLN)) return null;
            y = (0, $7B7Eg.FORTPI) - phi * 0.5;
            y = 2 * (this.mode === this.S_POLE ? Math.cos(y) : Math.sin(y));
            x = y * Math.sin(lam);
            y *= coslam;
        }
    } else {
        sinb = 0;
        cosb = 0;
        b = 0;
        coslam = Math.cos(lam);
        sinlam = Math.sin(lam);
        sinphi = Math.sin(phi);
        q = (0, $ef5fU.default)(this.e, sinphi);
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            sinb = q / this.qp;
            cosb = Math.sqrt(1 - sinb * sinb);
        }
        switch(this.mode){
            case this.OBLIQ:
                b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
                break;
            case this.EQUIT:
                b = 1 + cosb * coslam;
                break;
            case this.N_POLE:
                b = (0, $7B7Eg.HALF_PI) + phi;
                q = this.qp - q;
                break;
            case this.S_POLE:
                b = phi - (0, $7B7Eg.HALF_PI);
                q = this.qp + q;
                break;
        }
        if (Math.abs(b) < (0, $7B7Eg.EPSLN)) return null;
        switch(this.mode){
            case this.OBLIQ:
            case this.EQUIT:
                b = Math.sqrt(2 / b);
                if (this.mode === this.OBLIQ) y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
                else y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
                x = this.xmf * b * cosb * sinlam;
                break;
            case this.N_POLE:
            case this.S_POLE:
                if (q >= 0) {
                    x = (b = Math.sqrt(q)) * sinlam;
                    y = coslam * (this.mode === this.S_POLE ? b : -b);
                } else x = y = 0;
                break;
        }
    }
    p.x = this.a * x + this.x0;
    p.y = this.a * y + this.y0;
    return p;
}
function inverse(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var x = p.x / this.a;
    var y = p.y / this.a;
    var lam, phi, cCe, sCe, q, rho, ab;
    if (this.sphere) {
        var cosz = 0, rh, sinz = 0;
        rh = Math.sqrt(x * x + y * y);
        phi = rh * 0.5;
        if (phi > 1) return null;
        phi = 2 * Math.asin(phi);
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            sinz = Math.sin(phi);
            cosz = Math.cos(phi);
        }
        switch(this.mode){
            case this.EQUIT:
                phi = Math.abs(rh) <= (0, $7B7Eg.EPSLN) ? 0 : Math.asin(y * sinz / rh);
                x *= sinz;
                y = cosz * rh;
                break;
            case this.OBLIQ:
                phi = Math.abs(rh) <= (0, $7B7Eg.EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
                x *= sinz * this.cosph0;
                y = (cosz - Math.sin(phi) * this.sinph0) * rh;
                break;
            case this.N_POLE:
                y = -y;
                phi = (0, $7B7Eg.HALF_PI) - phi;
                break;
            case this.S_POLE:
                phi -= (0, $7B7Eg.HALF_PI);
                break;
        }
        lam = y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ) ? 0 : Math.atan2(x, y);
    } else {
        ab = 0;
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
            x /= this.dd;
            y *= this.dd;
            rho = Math.sqrt(x * x + y * y);
            if (rho < (0, $7B7Eg.EPSLN)) {
                p.x = this.long0;
                p.y = this.lat0;
                return p;
            }
            sCe = 2 * Math.asin(0.5 * rho / this.rq);
            cCe = Math.cos(sCe);
            x *= sCe = Math.sin(sCe);
            if (this.mode === this.OBLIQ) {
                ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
                q = this.qp * ab;
                y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
            } else {
                ab = y * sCe / rho;
                q = this.qp * ab;
                y = rho * cCe;
            }
        } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
            if (this.mode === this.N_POLE) y = -y;
            q = x * x + y * y;
            if (!q) {
                p.x = this.long0;
                p.y = this.lat0;
                return p;
            }
            ab = 1 - q / this.qp;
            if (this.mode === this.S_POLE) ab = -ab;
        }
        lam = Math.atan2(x, y);
        phi = authlat(Math.asin(ab), this.apa);
    }
    p.x = (0, $dbd4D.default)(this.long0 + lam);
    p.y = phi;
    return p;
}
/* determine latitude from authalic latitude */ var P00 = 0.33333333333333333333;
var P01 = 0.17222222222222222222;
var P02 = 0.10257936507936507936;
var P10 = 0.06388888888888888888;
var P11 = 0.06640211640211640211;
var P20 = 0.01641501294219154443;
function authset(es) {
    var t;
    var APA = [];
    APA[0] = es * P00;
    t = es * es;
    APA[0] += t * P01;
    APA[1] = t * P10;
    t *= es;
    APA[0] += t * P02;
    APA[1] += t * P11;
    APA[2] = t * P20;
    return APA;
}
function authlat(beta, APA) {
    var t = beta + beta;
    return beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t);
}
var names = [
    "Lambert Azimuthal Equal Area",
    "Lambert_Azimuthal_Equal_Area",
    "laea"
];
var $163fb9ff403f01cd$export$2e2bcd8739ae039 = {
    init: init,
    forward: forward,
    inverse: inverse,
    names: names,
    S_POLE: S_POLE,
    N_POLE: N_POLE,
    EQUIT: EQUIT,
    OBLIQ: OBLIQ
};

});
parcelRegister("ef5fU", function(module, exports) {

$parcel$export(module.exports, "default", () => $a5e68b111343e178$export$2e2bcd8739ae039);
function $a5e68b111343e178$export$2e2bcd8739ae039(eccent, sinphi) {
    var con;
    if (eccent > 1.0e-7) {
        con = eccent * sinphi;
        return (1 - eccent * eccent) * (sinphi / (1 - con * con) - 0.5 / eccent * Math.log((1 - con) / (1 + con)));
    } else return 2 * sinphi;
}

});


parcelRegister("efQ5V", function(module, exports) {

$parcel$export(module.exports, "init", () => init);
$parcel$export(module.exports, "forward", () => forward);
$parcel$export(module.exports, "inverse", () => inverse);
$parcel$export(module.exports, "phi1z", () => phi1z);
$parcel$export(module.exports, "names", () => names);
$parcel$export(module.exports, "default", () => $a60ae048a89c9697$export$2e2bcd8739ae039);

var $4MKOs = parcelRequire("4MKOs");

var $ef5fU = parcelRequire("ef5fU");

var $dbd4D = parcelRequire("dbd4D");

var $7sb7x = parcelRequire("7sb7x");

var $7B7Eg = parcelRequire("7B7Eg");
function init() {
    if (Math.abs(this.lat1 + this.lat2) < (0, $7B7Eg.EPSLN)) return;
    this.temp = this.b / this.a;
    this.es = 1 - Math.pow(this.temp, 2);
    this.e3 = Math.sqrt(this.es);
    this.sin_po = Math.sin(this.lat1);
    this.cos_po = Math.cos(this.lat1);
    this.t1 = this.sin_po;
    this.con = this.sin_po;
    this.ms1 = (0, $4MKOs.default)(this.e3, this.sin_po, this.cos_po);
    this.qs1 = (0, $ef5fU.default)(this.e3, this.sin_po);
    this.sin_po = Math.sin(this.lat2);
    this.cos_po = Math.cos(this.lat2);
    this.t2 = this.sin_po;
    this.ms2 = (0, $4MKOs.default)(this.e3, this.sin_po, this.cos_po);
    this.qs2 = (0, $ef5fU.default)(this.e3, this.sin_po);
    this.sin_po = Math.sin(this.lat0);
    this.cos_po = Math.cos(this.lat0);
    this.t3 = this.sin_po;
    this.qs0 = (0, $ef5fU.default)(this.e3, this.sin_po);
    if (Math.abs(this.lat1 - this.lat2) > (0, $7B7Eg.EPSLN)) this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
    else this.ns0 = this.con;
    this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
    this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
}
function forward(p) {
    var lon = p.x;
    var lat = p.y;
    this.sin_phi = Math.sin(lat);
    this.cos_phi = Math.cos(lat);
    var qs = (0, $ef5fU.default)(this.e3, this.sin_phi);
    var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
    var theta = this.ns0 * (0, $dbd4D.default)(lon - this.long0);
    var x = rh1 * Math.sin(theta) + this.x0;
    var y = this.rh - rh1 * Math.cos(theta) + this.y0;
    p.x = x;
    p.y = y;
    return p;
}
function inverse(p) {
    var rh1, qs, con, theta, lon, lat;
    p.x -= this.x0;
    p.y = this.rh - p.y + this.y0;
    if (this.ns0 >= 0) {
        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
        con = 1;
    } else {
        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
        con = -1;
    }
    theta = 0;
    if (rh1 !== 0) theta = Math.atan2(con * p.x, con * p.y);
    con = rh1 * this.ns0 / this.a;
    if (this.sphere) lat = Math.asin((this.c - con * con) / (2 * this.ns0));
    else {
        qs = (this.c - con * con) / this.ns0;
        lat = this.phi1z(this.e3, qs);
    }
    lon = (0, $dbd4D.default)(theta / this.ns0 + this.long0);
    p.x = lon;
    p.y = lat;
    return p;
}
function phi1z(eccent, qs) {
    var sinphi, cosphi, con, com, dphi;
    var phi = (0, $7sb7x.default)(0.5 * qs);
    if (eccent < (0, $7B7Eg.EPSLN)) return phi;
    var eccnts = eccent * eccent;
    for(var i = 1; i <= 25; i++){
        sinphi = Math.sin(phi);
        cosphi = Math.cos(phi);
        con = eccent * sinphi;
        com = 1 - con * con;
        dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
        phi = phi + dphi;
        if (Math.abs(dphi) <= 1e-7) return phi;
    }
    return null;
}
var names = [
    "Albers_Conic_Equal_Area",
    "Albers",
    "aea"
];
var $a60ae048a89c9697$export$2e2bcd8739ae039 = {
    init: init,
    forward: forward,
    inverse: inverse,
    names: names,
    phi1z: phi1z
};

});
parcelRegister("7sb7x", function(module, exports) {

$parcel$export(module.exports, "default", () => $56d3c6389945d09c$export$2e2bcd8739ae039);
function $56d3c6389945d09c$export$2e2bcd8739ae039(x) {
    if (Math.abs(x) > 1) x = x > 1 ? 1 : -1;
    return Math.asin(x);
}

});


parcelRegister("9FhcM", function(module, exports) {

$parcel$export(module.exports, "iterations", () => iterations);
$parcel$export(module.exports, "init", () => init);
$parcel$export(module.exports, "forward", () => forward);
$parcel$export(module.exports, "inverse", () => inverse);
$parcel$export(module.exports, "names", () => names);
$parcel$export(module.exports, "default", () => $709549f51d50dd41$export$2e2bcd8739ae039);

var $7B7Eg = parcelRequire("7B7Eg");
var iterations = 1;
function init() {
    this.A = [];
    this.A[1] = 0.6399175073;
    this.A[2] = -0.1358797613;
    this.A[3] = 0.063294409;
    this.A[4] = -0.02526853;
    this.A[5] = 0.0117879;
    this.A[6] = -0.0055161;
    this.A[7] = 0.0026906;
    this.A[8] = -0.001333;
    this.A[9] = 0.00067;
    this.A[10] = -0.00034;
    this.B_re = [];
    this.B_im = [];
    this.B_re[1] = 0.7557853228;
    this.B_im[1] = 0;
    this.B_re[2] = 0.249204646;
    this.B_im[2] = 0.003371507;
    this.B_re[3] = -0.001541739;
    this.B_im[3] = 0.041058560;
    this.B_re[4] = -0.10162907;
    this.B_im[4] = 0.01727609;
    this.B_re[5] = -0.26623489;
    this.B_im[5] = -0.36249218;
    this.B_re[6] = -0.6870983;
    this.B_im[6] = -1.1651967;
    this.C_re = [];
    this.C_im = [];
    this.C_re[1] = 1.3231270439;
    this.C_im[1] = 0;
    this.C_re[2] = -0.577245789;
    this.C_im[2] = -0.007809598;
    this.C_re[3] = 0.508307513;
    this.C_im[3] = -0.112208952;
    this.C_re[4] = -0.15094762;
    this.C_im[4] = 0.18200602;
    this.C_re[5] = 1.01418179;
    this.C_im[5] = 1.64497696;
    this.C_re[6] = 1.9660549;
    this.C_im[6] = 2.5127645;
    this.D = [];
    this.D[1] = 1.5627014243;
    this.D[2] = 0.5185406398;
    this.D[3] = -0.03333098;
    this.D[4] = -0.1052906;
    this.D[5] = -0.0368594;
    this.D[6] = 0.007317;
    this.D[7] = 0.01220;
    this.D[8] = 0.00394;
    this.D[9] = -0.0013;
}
function forward(p) {
    var n;
    var lon = p.x;
    var lat = p.y;
    var delta_lat = lat - this.lat0;
    var delta_lon = lon - this.long0;
    // 1. Calculate d_phi and d_psi    ...                          // and d_lambda
    // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.
    var d_phi = delta_lat / (0, $7B7Eg.SEC_TO_RAD) * 1E-5;
    var d_lambda = delta_lon;
    var d_phi_n = 1; // d_phi^0
    var d_psi = 0;
    for(n = 1; n <= 10; n++){
        d_phi_n = d_phi_n * d_phi;
        d_psi = d_psi + this.A[n] * d_phi_n;
    }
    // 2. Calculate theta
    var th_re = d_psi;
    var th_im = d_lambda;
    // 3. Calculate z
    var th_n_re = 1;
    var th_n_im = 0; // theta^0
    var th_n_re1;
    var th_n_im1;
    var z_re = 0;
    var z_im = 0;
    for(n = 1; n <= 6; n++){
        th_n_re1 = th_n_re * th_re - th_n_im * th_im;
        th_n_im1 = th_n_im * th_re + th_n_re * th_im;
        th_n_re = th_n_re1;
        th_n_im = th_n_im1;
        z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
        z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
    }
    // 4. Calculate easting and northing
    p.x = z_im * this.a + this.x0;
    p.y = z_re * this.a + this.y0;
    return p;
}
function inverse(p) {
    var n;
    var x = p.x;
    var y = p.y;
    var delta_x = x - this.x0;
    var delta_y = y - this.y0;
    // 1. Calculate z
    var z_re = delta_y / this.a;
    var z_im = delta_x / this.a;
    // 2a. Calculate theta - first approximation gives km accuracy
    var z_n_re = 1;
    var z_n_im = 0; // z^0
    var z_n_re1;
    var z_n_im1;
    var th_re = 0;
    var th_im = 0;
    for(n = 1; n <= 6; n++){
        z_n_re1 = z_n_re * z_re - z_n_im * z_im;
        z_n_im1 = z_n_im * z_re + z_n_re * z_im;
        z_n_re = z_n_re1;
        z_n_im = z_n_im1;
        th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
        th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
    }
    // 2b. Iterate to refine the accuracy of the calculation
    //        0 iterations gives km accuracy
    //        1 iteration gives m accuracy -- good enough for most mapping applications
    //        2 iterations bives mm accuracy
    for(var i = 0; i < this.iterations; i++){
        var th_n_re = th_re;
        var th_n_im = th_im;
        var th_n_re1;
        var th_n_im1;
        var num_re = z_re;
        var num_im = z_im;
        for(n = 2; n <= 6; n++){
            th_n_re1 = th_n_re * th_re - th_n_im * th_im;
            th_n_im1 = th_n_im * th_re + th_n_re * th_im;
            th_n_re = th_n_re1;
            th_n_im = th_n_im1;
            num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
            num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
        }
        th_n_re = 1;
        th_n_im = 0;
        var den_re = this.B_re[1];
        var den_im = this.B_im[1];
        for(n = 2; n <= 6; n++){
            th_n_re1 = th_n_re * th_re - th_n_im * th_im;
            th_n_im1 = th_n_im * th_re + th_n_re * th_im;
            th_n_re = th_n_re1;
            th_n_im = th_n_im1;
            den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
            den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
        }
        // Complex division
        var den2 = den_re * den_re + den_im * den_im;
        th_re = (num_re * den_re + num_im * den_im) / den2;
        th_im = (num_im * den_re - num_re * den_im) / den2;
    }
    // 3. Calculate d_phi              ...                                    // and d_lambda
    var d_psi = th_re;
    var d_lambda = th_im;
    var d_psi_n = 1; // d_psi^0
    var d_phi = 0;
    for(n = 1; n <= 9; n++){
        d_psi_n = d_psi_n * d_psi;
        d_phi = d_phi + this.D[n] * d_psi_n;
    }
    // 4. Calculate latitude and longitude
    // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.
    var lat = this.lat0 + d_phi * (0, $7B7Eg.SEC_TO_RAD) * 1E5;
    var lon = this.long0 + d_lambda;
    p.x = lon;
    p.y = lat;
    return p;
}
var names = [
    "New_Zealand_Map_Grid",
    "nzmg"
];
var $709549f51d50dd41$export$2e2bcd8739ae039 = {
    init: init,
    forward: forward,
    inverse: inverse,
    names: names
};

});

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var $24c52f343453d62d$var$extendStatics = function(d, b) {
    $24c52f343453d62d$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $24c52f343453d62d$var$extendStatics(d, b);
};
function $24c52f343453d62d$export$a8ba968b8961cb8a(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $24c52f343453d62d$var$extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $24c52f343453d62d$export$18ce0697a983be9b = function() {
    $24c52f343453d62d$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $24c52f343453d62d$export$18ce0697a983be9b.apply(this, arguments);
};
function $24c52f343453d62d$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $24c52f343453d62d$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $24c52f343453d62d$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $24c52f343453d62d$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function $24c52f343453d62d$export$d831c04e792af3d(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function $24c52f343453d62d$export$6a2a36740a146cb8(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function $24c52f343453d62d$export$d1a06452d3489bc7(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function $24c52f343453d62d$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $24c52f343453d62d$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $24c52f343453d62d$export$67ebef60e6f28a6(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var $24c52f343453d62d$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $24c52f343453d62d$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $24c52f343453d62d$export$45d3717a4c69092e(o, m, p);
}
function $24c52f343453d62d$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $24c52f343453d62d$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $24c52f343453d62d$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($24c52f343453d62d$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $24c52f343453d62d$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $24c52f343453d62d$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function $24c52f343453d62d$export$10c90e4f7922046c(v) {
    return this instanceof $24c52f343453d62d$export$10c90e4f7922046c ? (this.v = v, this) : new $24c52f343453d62d$export$10c90e4f7922046c(v);
}
function $24c52f343453d62d$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function awaitReturn(f) {
        return function(v) {
            return Promise.resolve(v).then(f, reject);
        };
    }
    function verb(n, f) {
        if (g[n]) {
            i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
            if (f) i[n] = f(i[n]);
        }
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof $24c52f343453d62d$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function $24c52f343453d62d$export$bbd80228419bb833(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $24c52f343453d62d$export$10c90e4f7922046c(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function $24c52f343453d62d$export$e3b29a3d6162315f(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $24c52f343453d62d$export$19a8beecd37a4c45 === "function" ? $24c52f343453d62d$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function $24c52f343453d62d$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $24c52f343453d62d$var$__setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function $24c52f343453d62d$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $24c52f343453d62d$export$45d3717a4c69092e(result, mod, k);
    }
    $24c52f343453d62d$var$__setModuleDefault(result, mod);
    return result;
}
function $24c52f343453d62d$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function $24c52f343453d62d$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $24c52f343453d62d$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function $24c52f343453d62d$export$81fdc39f203e4e04(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function $24c52f343453d62d$export$88ac25d8e944e405(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var $24c52f343453d62d$var$_SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function $24c52f343453d62d$export$8f076105dc360e92(env) {
    function fail(e) {
        env.error = env.hasError ? new $24c52f343453d62d$var$_SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    var r, s = 0;
    function next() {
        while(r = env.stack.pop())try {
            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
                var result = r.dispose.call(r.value);
                if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } else s |= 1;
        } catch (e) {
            fail(e);
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
    }
    return next();
}
var $24c52f343453d62d$export$2e2bcd8739ae039 = {
    __extends: $24c52f343453d62d$export$a8ba968b8961cb8a,
    __assign: $24c52f343453d62d$export$18ce0697a983be9b,
    __rest: $24c52f343453d62d$export$3c9a16f847548506,
    __decorate: $24c52f343453d62d$export$29e00dfd3077644b,
    __param: $24c52f343453d62d$export$d5ad3fd78186038f,
    __metadata: $24c52f343453d62d$export$f1db080c865becb9,
    __awaiter: $24c52f343453d62d$export$1050f835b63b671e,
    __generator: $24c52f343453d62d$export$67ebef60e6f28a6,
    __createBinding: $24c52f343453d62d$export$45d3717a4c69092e,
    __exportStar: $24c52f343453d62d$export$f33643c0debef087,
    __values: $24c52f343453d62d$export$19a8beecd37a4c45,
    __read: $24c52f343453d62d$export$8d051b38c9118094,
    __spread: $24c52f343453d62d$export$afc72e2116322959,
    __spreadArrays: $24c52f343453d62d$export$6388937ca91ccae8,
    __spreadArray: $24c52f343453d62d$export$1216008129fb82ed,
    __await: $24c52f343453d62d$export$10c90e4f7922046c,
    __asyncGenerator: $24c52f343453d62d$export$e427f37a30a4de9b,
    __asyncDelegator: $24c52f343453d62d$export$bbd80228419bb833,
    __asyncValues: $24c52f343453d62d$export$e3b29a3d6162315f,
    __makeTemplateObject: $24c52f343453d62d$export$4fb47efe1390b86f,
    __importStar: $24c52f343453d62d$export$c21735bcef00d192,
    __importDefault: $24c52f343453d62d$export$da59b14a69baef04,
    __classPrivateFieldGet: $24c52f343453d62d$export$d5dcaf168c640c35,
    __classPrivateFieldSet: $24c52f343453d62d$export$d40a35129aaff81f,
    __classPrivateFieldIn: $24c52f343453d62d$export$81fdc39f203e4e04,
    __addDisposableResource: $24c52f343453d62d$export$88ac25d8e944e405,
    __disposeResources: $24c52f343453d62d$export$8f076105dc360e92
};


/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $def2de46b9306e8a$var$t = window, $def2de46b9306e8a$export$b4d10f6001c083c2 = $def2de46b9306e8a$var$t.ShadowRoot && (void 0 === $def2de46b9306e8a$var$t.ShadyCSS || $def2de46b9306e8a$var$t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, $def2de46b9306e8a$var$s = Symbol(), $def2de46b9306e8a$var$n = new WeakMap;
class $def2de46b9306e8a$export$505d1e8739bad805 {
    constructor(t, e, n){
        if (this._$cssResult$ = !0, n !== $def2de46b9306e8a$var$s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        this.cssText = t, this.t = e;
    }
    get styleSheet() {
        let t = this.o;
        const s = this.t;
        if ($def2de46b9306e8a$export$b4d10f6001c083c2 && void 0 === t) {
            const e = void 0 !== s && 1 === s.length;
            e && (t = $def2de46b9306e8a$var$n.get(s)), void 0 === t && ((this.o = t = new CSSStyleSheet).replaceSync(this.cssText), e && $def2de46b9306e8a$var$n.set(s, t));
        }
        return t;
    }
    toString() {
        return this.cssText;
    }
}
const $def2de46b9306e8a$export$8d80f9cac07cdb3 = (t)=>new $def2de46b9306e8a$export$505d1e8739bad805("string" == typeof t ? t : t + "", void 0, $def2de46b9306e8a$var$s), $def2de46b9306e8a$export$dbf350e5966cf602 = (t, ...e)=>{
    const n = 1 === t.length ? t[0] : e.reduce((e, s, n)=>e + ((t)=>{
            if (!0 === t._$cssResult$) return t.cssText;
            if ("number" == typeof t) return t;
            throw Error("Value passed to 'css' function must be a 'css' function result: " + t + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
        })(s) + t[n + 1], t[0]);
    return new $def2de46b9306e8a$export$505d1e8739bad805(n, t, $def2de46b9306e8a$var$s);
}, $def2de46b9306e8a$export$2ca4a66ec4cecb90 = (s, n)=>{
    $def2de46b9306e8a$export$b4d10f6001c083c2 ? s.adoptedStyleSheets = n.map((t)=>t instanceof CSSStyleSheet ? t : t.styleSheet) : n.forEach((e)=>{
        const n = document.createElement("style"), o = $def2de46b9306e8a$var$t.litNonce;
        void 0 !== o && n.setAttribute("nonce", o), n.textContent = e.cssText, s.appendChild(n);
    });
}, $def2de46b9306e8a$export$ee69dfd951e24778 = $def2de46b9306e8a$export$b4d10f6001c083c2 ? (t)=>t : (t)=>t instanceof CSSStyleSheet ? ((t)=>{
        let e = "";
        for (const s of t.cssRules)e += s.cssText;
        return $def2de46b9306e8a$export$8d80f9cac07cdb3(e);
    })(t) : t;


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ var $19fe8e3abedf4df0$var$s;
const $19fe8e3abedf4df0$var$e = window, $19fe8e3abedf4df0$var$r = $19fe8e3abedf4df0$var$e.trustedTypes, $19fe8e3abedf4df0$var$h = $19fe8e3abedf4df0$var$r ? $19fe8e3abedf4df0$var$r.emptyScript : "", $19fe8e3abedf4df0$var$o = $19fe8e3abedf4df0$var$e.reactiveElementPolyfillSupport, $19fe8e3abedf4df0$export$7312b35fbf521afb = {
    toAttribute (t, i) {
        switch(i){
            case Boolean:
                t = t ? $19fe8e3abedf4df0$var$h : null;
                break;
            case Object:
            case Array:
                t = null == t ? t : JSON.stringify(t);
        }
        return t;
    },
    fromAttribute (t, i) {
        let s = t;
        switch(i){
            case Boolean:
                s = null !== t;
                break;
            case Number:
                s = null === t ? null : Number(t);
                break;
            case Object:
            case Array:
                try {
                    s = JSON.parse(t);
                } catch (t) {
                    s = null;
                }
        }
        return s;
    }
}, $19fe8e3abedf4df0$export$53a6892c50694894 = (t, i)=>i !== t && (i == i || t == t), $19fe8e3abedf4df0$var$l = {
    attribute: !0,
    type: String,
    converter: $19fe8e3abedf4df0$export$7312b35fbf521afb,
    reflect: !1,
    hasChanged: $19fe8e3abedf4df0$export$53a6892c50694894
}, $19fe8e3abedf4df0$var$d = "finalized";
class $19fe8e3abedf4df0$export$c7c07a37856565d extends HTMLElement {
    constructor(){
        super(), this._$Ei = new Map, this.isUpdatePending = !1, this.hasUpdated = !1, this._$El = null, this._$Eu();
    }
    static addInitializer(t) {
        var i;
        this.finalize(), (null !== (i = this.h) && void 0 !== i ? i : this.h = []).push(t);
    }
    static get observedAttributes() {
        this.finalize();
        const t = [];
        return this.elementProperties.forEach((i, s)=>{
            const e = this._$Ep(s, i);
            void 0 !== e && (this._$Ev.set(e, s), t.push(e));
        }), t;
    }
    static createProperty(t, i = $19fe8e3abedf4df0$var$l) {
        if (i.state && (i.attribute = !1), this.finalize(), this.elementProperties.set(t, i), !i.noAccessor && !this.prototype.hasOwnProperty(t)) {
            const s = "symbol" == typeof t ? Symbol() : "__" + t, e = this.getPropertyDescriptor(t, s, i);
            void 0 !== e && Object.defineProperty(this.prototype, t, e);
        }
    }
    static getPropertyDescriptor(t, i, s) {
        return {
            get () {
                return this[i];
            },
            set (e) {
                const r = this[t];
                this[i] = e, this.requestUpdate(t, r, s);
            },
            configurable: !0,
            enumerable: !0
        };
    }
    static getPropertyOptions(t) {
        return this.elementProperties.get(t) || $19fe8e3abedf4df0$var$l;
    }
    static finalize() {
        if (this.hasOwnProperty($19fe8e3abedf4df0$var$d)) return !1;
        this[$19fe8e3abedf4df0$var$d] = !0;
        const t = Object.getPrototypeOf(this);
        if (t.finalize(), void 0 !== t.h && (this.h = [
            ...t.h
        ]), this.elementProperties = new Map(t.elementProperties), this._$Ev = new Map, this.hasOwnProperty("properties")) {
            const t = this.properties, i = [
                ...Object.getOwnPropertyNames(t),
                ...Object.getOwnPropertySymbols(t)
            ];
            for (const s of i)this.createProperty(s, t[s]);
        }
        return this.elementStyles = this.finalizeStyles(this.styles), !0;
    }
    static finalizeStyles(i) {
        const s = [];
        if (Array.isArray(i)) {
            const e = new Set(i.flat(1 / 0).reverse());
            for (const i of e)s.unshift((0, $def2de46b9306e8a$export$ee69dfd951e24778)(i));
        } else void 0 !== i && s.push((0, $def2de46b9306e8a$export$ee69dfd951e24778)(i));
        return s;
    }
    static _$Ep(t, i) {
        const s = i.attribute;
        return !1 === s ? void 0 : "string" == typeof s ? s : "string" == typeof t ? t.toLowerCase() : void 0;
    }
    _$Eu() {
        var t;
        this._$E_ = new Promise((t)=>this.enableUpdating = t), this._$AL = new Map, this._$Eg(), this.requestUpdate(), null === (t = this.constructor.h) || void 0 === t || t.forEach((t)=>t(this));
    }
    addController(t) {
        var i, s;
        (null !== (i = this._$ES) && void 0 !== i ? i : this._$ES = []).push(t), void 0 !== this.renderRoot && this.isConnected && (null === (s = t.hostConnected) || void 0 === s || s.call(t));
    }
    removeController(t) {
        var i;
        null === (i = this._$ES) || void 0 === i || i.splice(this._$ES.indexOf(t) >>> 0, 1);
    }
    _$Eg() {
        this.constructor.elementProperties.forEach((t, i)=>{
            this.hasOwnProperty(i) && (this._$Ei.set(i, this[i]), delete this[i]);
        });
    }
    createRenderRoot() {
        var t;
        const s = null !== (t = this.shadowRoot) && void 0 !== t ? t : this.attachShadow(this.constructor.shadowRootOptions);
        return (0, $def2de46b9306e8a$export$2ca4a66ec4cecb90)(s, this.constructor.elementStyles), s;
    }
    connectedCallback() {
        var t;
        void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), null === (t = this._$ES) || void 0 === t || t.forEach((t)=>{
            var i;
            return null === (i = t.hostConnected) || void 0 === i ? void 0 : i.call(t);
        });
    }
    enableUpdating(t) {}
    disconnectedCallback() {
        var t;
        null === (t = this._$ES) || void 0 === t || t.forEach((t)=>{
            var i;
            return null === (i = t.hostDisconnected) || void 0 === i ? void 0 : i.call(t);
        });
    }
    attributeChangedCallback(t, i, s) {
        this._$AK(t, s);
    }
    _$EO(t, i, s = $19fe8e3abedf4df0$var$l) {
        var e;
        const r = this.constructor._$Ep(t, s);
        if (void 0 !== r && !0 === s.reflect) {
            const h = (void 0 !== (null === (e = s.converter) || void 0 === e ? void 0 : e.toAttribute) ? s.converter : $19fe8e3abedf4df0$export$7312b35fbf521afb).toAttribute(i, s.type);
            this._$El = t, null == h ? this.removeAttribute(r) : this.setAttribute(r, h), this._$El = null;
        }
    }
    _$AK(t, i) {
        var s;
        const e = this.constructor, r = e._$Ev.get(t);
        if (void 0 !== r && this._$El !== r) {
            const t = e.getPropertyOptions(r), h = "function" == typeof t.converter ? {
                fromAttribute: t.converter
            } : void 0 !== (null === (s = t.converter) || void 0 === s ? void 0 : s.fromAttribute) ? t.converter : $19fe8e3abedf4df0$export$7312b35fbf521afb;
            this._$El = r, this[r] = h.fromAttribute(i, t.type), this._$El = null;
        }
    }
    requestUpdate(t, i, s) {
        let e = !0;
        void 0 !== t && (((s = s || this.constructor.getPropertyOptions(t)).hasChanged || $19fe8e3abedf4df0$export$53a6892c50694894)(this[t], i) ? (this._$AL.has(t) || this._$AL.set(t, i), !0 === s.reflect && this._$El !== t && (void 0 === this._$EC && (this._$EC = new Map), this._$EC.set(t, s))) : e = !1), !this.isUpdatePending && e && (this._$E_ = this._$Ej());
    }
    async _$Ej() {
        this.isUpdatePending = !0;
        try {
            await this._$E_;
        } catch (t) {
            Promise.reject(t);
        }
        const t = this.scheduleUpdate();
        return null != t && await t, !this.isUpdatePending;
    }
    scheduleUpdate() {
        return this.performUpdate();
    }
    performUpdate() {
        var t;
        if (!this.isUpdatePending) return;
        this.hasUpdated, this._$Ei && (this._$Ei.forEach((t, i)=>this[i] = t), this._$Ei = void 0);
        let i = !1;
        const s = this._$AL;
        try {
            i = this.shouldUpdate(s), i ? (this.willUpdate(s), null === (t = this._$ES) || void 0 === t || t.forEach((t)=>{
                var i;
                return null === (i = t.hostUpdate) || void 0 === i ? void 0 : i.call(t);
            }), this.update(s)) : this._$Ek();
        } catch (t) {
            throw i = !1, this._$Ek(), t;
        }
        i && this._$AE(s);
    }
    willUpdate(t) {}
    _$AE(t) {
        var i;
        null === (i = this._$ES) || void 0 === i || i.forEach((t)=>{
            var i;
            return null === (i = t.hostUpdated) || void 0 === i ? void 0 : i.call(t);
        }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);
    }
    _$Ek() {
        this._$AL = new Map, this.isUpdatePending = !1;
    }
    get updateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._$E_;
    }
    shouldUpdate(t) {
        return !0;
    }
    update(t) {
        void 0 !== this._$EC && (this._$EC.forEach((t, i)=>this._$EO(i, this[i], t)), this._$EC = void 0), this._$Ek();
    }
    updated(t) {}
    firstUpdated(t) {}
}
$19fe8e3abedf4df0$export$c7c07a37856565d[$19fe8e3abedf4df0$var$d] = !0, $19fe8e3abedf4df0$export$c7c07a37856565d.elementProperties = new Map, $19fe8e3abedf4df0$export$c7c07a37856565d.elementStyles = [], $19fe8e3abedf4df0$export$c7c07a37856565d.shadowRootOptions = {
    mode: "open"
}, null == $19fe8e3abedf4df0$var$o || $19fe8e3abedf4df0$var$o({
    ReactiveElement: $19fe8e3abedf4df0$export$c7c07a37856565d
}), (null !== ($19fe8e3abedf4df0$var$s = $19fe8e3abedf4df0$var$e.reactiveElementVersions) && void 0 !== $19fe8e3abedf4df0$var$s ? $19fe8e3abedf4df0$var$s : $19fe8e3abedf4df0$var$e.reactiveElementVersions = []).push("1.6.3");


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ var $f58f44579a4747ac$var$t;
const $f58f44579a4747ac$var$i = window, $f58f44579a4747ac$var$s = $f58f44579a4747ac$var$i.trustedTypes, $f58f44579a4747ac$var$e = $f58f44579a4747ac$var$s ? $f58f44579a4747ac$var$s.createPolicy("lit-html", {
    createHTML: (t)=>t
}) : void 0, $f58f44579a4747ac$var$o = "$lit$", $f58f44579a4747ac$var$n = `lit$${(Math.random() + "").slice(9)}$`, $f58f44579a4747ac$var$l = "?" + $f58f44579a4747ac$var$n, $f58f44579a4747ac$var$h = `<${$f58f44579a4747ac$var$l}>`, $f58f44579a4747ac$var$r = document, $f58f44579a4747ac$var$u = ()=>$f58f44579a4747ac$var$r.createComment(""), $f58f44579a4747ac$var$d = (t)=>null === t || "object" != typeof t && "function" != typeof t, $f58f44579a4747ac$var$c = Array.isArray, $f58f44579a4747ac$var$v = (t)=>$f58f44579a4747ac$var$c(t) || "function" == typeof (null == t ? void 0 : t[Symbol.iterator]), $f58f44579a4747ac$var$a = "[ 	\n\f\r]", $f58f44579a4747ac$var$f = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, $f58f44579a4747ac$var$_ = /-->/g, $f58f44579a4747ac$var$m = />/g, $f58f44579a4747ac$var$p = RegExp(`>|${$f58f44579a4747ac$var$a}(?:([^\\s"'>=/]+)(${$f58f44579a4747ac$var$a}*=${$f58f44579a4747ac$var$a}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`, "g"), $f58f44579a4747ac$var$g = /'/g, $f58f44579a4747ac$var$$ = /"/g, $f58f44579a4747ac$var$y = /^(?:script|style|textarea|title)$/i, $f58f44579a4747ac$var$w = (t)=>(i, ...s)=>({
            _$litType$: t,
            strings: i,
            values: s
        }), $f58f44579a4747ac$export$c0bb0b647f701bb5 = $f58f44579a4747ac$var$w(1), $f58f44579a4747ac$export$7ed1367e7fa1ad68 = $f58f44579a4747ac$var$w(2), $f58f44579a4747ac$export$9c068ae9cc5db4e8 = Symbol.for("lit-noChange"), $f58f44579a4747ac$export$45b790e32b2810ee = Symbol.for("lit-nothing"), $f58f44579a4747ac$var$E = new WeakMap, $f58f44579a4747ac$var$C = $f58f44579a4747ac$var$r.createTreeWalker($f58f44579a4747ac$var$r, 129, null, !1);
function $f58f44579a4747ac$var$P(t, i) {
    if (!Array.isArray(t) || !t.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return void 0 !== $f58f44579a4747ac$var$e ? $f58f44579a4747ac$var$e.createHTML(i) : i;
}
const $f58f44579a4747ac$var$V = (t, i)=>{
    const s = t.length - 1, e = [];
    let l, r = 2 === i ? "<svg>" : "", u = $f58f44579a4747ac$var$f;
    for(let i = 0; i < s; i++){
        const s = t[i];
        let d, c, v = -1, a = 0;
        for(; a < s.length && (u.lastIndex = a, c = u.exec(s), null !== c);)a = u.lastIndex, u === $f58f44579a4747ac$var$f ? "!--" === c[1] ? u = $f58f44579a4747ac$var$_ : void 0 !== c[1] ? u = $f58f44579a4747ac$var$m : void 0 !== c[2] ? ($f58f44579a4747ac$var$y.test(c[2]) && (l = RegExp("</" + c[2], "g")), u = $f58f44579a4747ac$var$p) : void 0 !== c[3] && (u = $f58f44579a4747ac$var$p) : u === $f58f44579a4747ac$var$p ? ">" === c[0] ? (u = null != l ? l : $f58f44579a4747ac$var$f, v = -1) : void 0 === c[1] ? v = -2 : (v = u.lastIndex - c[2].length, d = c[1], u = void 0 === c[3] ? $f58f44579a4747ac$var$p : '"' === c[3] ? $f58f44579a4747ac$var$$ : $f58f44579a4747ac$var$g) : u === $f58f44579a4747ac$var$$ || u === $f58f44579a4747ac$var$g ? u = $f58f44579a4747ac$var$p : u === $f58f44579a4747ac$var$_ || u === $f58f44579a4747ac$var$m ? u = $f58f44579a4747ac$var$f : (u = $f58f44579a4747ac$var$p, l = void 0);
        const w = u === $f58f44579a4747ac$var$p && t[i + 1].startsWith("/>") ? " " : "";
        r += u === $f58f44579a4747ac$var$f ? s + $f58f44579a4747ac$var$h : v >= 0 ? (e.push(d), s.slice(0, v) + $f58f44579a4747ac$var$o + s.slice(v) + $f58f44579a4747ac$var$n + w) : s + $f58f44579a4747ac$var$n + (-2 === v ? (e.push(void 0), i) : w);
    }
    return [
        $f58f44579a4747ac$var$P(t, r + (t[s] || "<?>") + (2 === i ? "</svg>" : "")),
        e
    ];
};
class $f58f44579a4747ac$var$N {
    constructor({ strings: t, _$litType$: i }, e){
        let h;
        this.parts = [];
        let r = 0, d = 0;
        const c = t.length - 1, v = this.parts, [a, f] = $f58f44579a4747ac$var$V(t, i);
        if (this.el = $f58f44579a4747ac$var$N.createElement(a, e), $f58f44579a4747ac$var$C.currentNode = this.el.content, 2 === i) {
            const t = this.el.content, i = t.firstChild;
            i.remove(), t.append(...i.childNodes);
        }
        for(; null !== (h = $f58f44579a4747ac$var$C.nextNode()) && v.length < c;){
            if (1 === h.nodeType) {
                if (h.hasAttributes()) {
                    const t = [];
                    for (const i of h.getAttributeNames())if (i.endsWith($f58f44579a4747ac$var$o) || i.startsWith($f58f44579a4747ac$var$n)) {
                        const s = f[d++];
                        if (t.push(i), void 0 !== s) {
                            const t = h.getAttribute(s.toLowerCase() + $f58f44579a4747ac$var$o).split($f58f44579a4747ac$var$n), i = /([.?@])?(.*)/.exec(s);
                            v.push({
                                type: 1,
                                index: r,
                                name: i[2],
                                strings: t,
                                ctor: "." === i[1] ? $f58f44579a4747ac$var$H : "?" === i[1] ? $f58f44579a4747ac$var$L : "@" === i[1] ? $f58f44579a4747ac$var$z : $f58f44579a4747ac$var$k
                            });
                        } else v.push({
                            type: 6,
                            index: r
                        });
                    }
                    for (const i of t)h.removeAttribute(i);
                }
                if ($f58f44579a4747ac$var$y.test(h.tagName)) {
                    const t = h.textContent.split($f58f44579a4747ac$var$n), i = t.length - 1;
                    if (i > 0) {
                        h.textContent = $f58f44579a4747ac$var$s ? $f58f44579a4747ac$var$s.emptyScript : "";
                        for(let s = 0; s < i; s++)h.append(t[s], $f58f44579a4747ac$var$u()), $f58f44579a4747ac$var$C.nextNode(), v.push({
                            type: 2,
                            index: ++r
                        });
                        h.append(t[i], $f58f44579a4747ac$var$u());
                    }
                }
            } else if (8 === h.nodeType) {
                if (h.data === $f58f44579a4747ac$var$l) v.push({
                    type: 2,
                    index: r
                });
                else {
                    let t = -1;
                    for(; -1 !== (t = h.data.indexOf($f58f44579a4747ac$var$n, t + 1));)v.push({
                        type: 7,
                        index: r
                    }), t += $f58f44579a4747ac$var$n.length - 1;
                }
            }
            r++;
        }
    }
    static createElement(t, i) {
        const s = $f58f44579a4747ac$var$r.createElement("template");
        return s.innerHTML = t, s;
    }
}
function $f58f44579a4747ac$var$S(t, i, s = t, e) {
    var o, n, l, h;
    if (i === $f58f44579a4747ac$export$9c068ae9cc5db4e8) return i;
    let r = void 0 !== e ? null === (o = s._$Co) || void 0 === o ? void 0 : o[e] : s._$Cl;
    const u = $f58f44579a4747ac$var$d(i) ? void 0 : i._$litDirective$;
    return (null == r ? void 0 : r.constructor) !== u && (null === (n = null == r ? void 0 : r._$AO) || void 0 === n || n.call(r, !1), void 0 === u ? r = void 0 : (r = new u(t), r._$AT(t, s, e)), void 0 !== e ? (null !== (l = (h = s)._$Co) && void 0 !== l ? l : h._$Co = [])[e] = r : s._$Cl = r), void 0 !== r && (i = $f58f44579a4747ac$var$S(t, r._$AS(t, i.values), r, e)), i;
}
class $f58f44579a4747ac$var$M {
    constructor(t, i){
        this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = i;
    }
    get parentNode() {
        return this._$AM.parentNode;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    u(t) {
        var i;
        const { el: { content: s }, parts: e } = this._$AD, o = (null !== (i = null == t ? void 0 : t.creationScope) && void 0 !== i ? i : $f58f44579a4747ac$var$r).importNode(s, !0);
        $f58f44579a4747ac$var$C.currentNode = o;
        let n = $f58f44579a4747ac$var$C.nextNode(), l = 0, h = 0, u = e[0];
        for(; void 0 !== u;){
            if (l === u.index) {
                let i;
                2 === u.type ? i = new $f58f44579a4747ac$var$R(n, n.nextSibling, this, t) : 1 === u.type ? i = new u.ctor(n, u.name, u.strings, this, t) : 6 === u.type && (i = new $f58f44579a4747ac$var$Z(n, this, t)), this._$AV.push(i), u = e[++h];
            }
            l !== (null == u ? void 0 : u.index) && (n = $f58f44579a4747ac$var$C.nextNode(), l++);
        }
        return $f58f44579a4747ac$var$C.currentNode = $f58f44579a4747ac$var$r, o;
    }
    v(t) {
        let i = 0;
        for (const s of this._$AV)void 0 !== s && (void 0 !== s.strings ? (s._$AI(t, s, i), i += s.strings.length - 2) : s._$AI(t[i])), i++;
    }
}
class $f58f44579a4747ac$var$R {
    constructor(t, i, s, e){
        var o;
        this.type = 2, this._$AH = $f58f44579a4747ac$export$45b790e32b2810ee, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this._$Cp = null === (o = null == e ? void 0 : e.isConnected) || void 0 === o || o;
    }
    get _$AU() {
        var t, i;
        return null !== (i = null === (t = this._$AM) || void 0 === t ? void 0 : t._$AU) && void 0 !== i ? i : this._$Cp;
    }
    get parentNode() {
        let t = this._$AA.parentNode;
        const i = this._$AM;
        return void 0 !== i && 11 === (null == t ? void 0 : t.nodeType) && (t = i.parentNode), t;
    }
    get startNode() {
        return this._$AA;
    }
    get endNode() {
        return this._$AB;
    }
    _$AI(t, i = this) {
        t = $f58f44579a4747ac$var$S(this, t, i), $f58f44579a4747ac$var$d(t) ? t === $f58f44579a4747ac$export$45b790e32b2810ee || null == t || "" === t ? (this._$AH !== $f58f44579a4747ac$export$45b790e32b2810ee && this._$AR(), this._$AH = $f58f44579a4747ac$export$45b790e32b2810ee) : t !== this._$AH && t !== $f58f44579a4747ac$export$9c068ae9cc5db4e8 && this._(t) : void 0 !== t._$litType$ ? this.g(t) : void 0 !== t.nodeType ? this.$(t) : $f58f44579a4747ac$var$v(t) ? this.T(t) : this._(t);
    }
    k(t) {
        return this._$AA.parentNode.insertBefore(t, this._$AB);
    }
    $(t) {
        this._$AH !== t && (this._$AR(), this._$AH = this.k(t));
    }
    _(t) {
        this._$AH !== $f58f44579a4747ac$export$45b790e32b2810ee && $f58f44579a4747ac$var$d(this._$AH) ? this._$AA.nextSibling.data = t : this.$($f58f44579a4747ac$var$r.createTextNode(t)), this._$AH = t;
    }
    g(t) {
        var i;
        const { values: s, _$litType$: e } = t, o = "number" == typeof e ? this._$AC(t) : (void 0 === e.el && (e.el = $f58f44579a4747ac$var$N.createElement($f58f44579a4747ac$var$P(e.h, e.h[0]), this.options)), e);
        if ((null === (i = this._$AH) || void 0 === i ? void 0 : i._$AD) === o) this._$AH.v(s);
        else {
            const t = new $f58f44579a4747ac$var$M(o, this), i = t.u(this.options);
            t.v(s), this.$(i), this._$AH = t;
        }
    }
    _$AC(t) {
        let i = $f58f44579a4747ac$var$E.get(t.strings);
        return void 0 === i && $f58f44579a4747ac$var$E.set(t.strings, i = new $f58f44579a4747ac$var$N(t)), i;
    }
    T(t) {
        $f58f44579a4747ac$var$c(this._$AH) || (this._$AH = [], this._$AR());
        const i = this._$AH;
        let s, e = 0;
        for (const o of t)e === i.length ? i.push(s = new $f58f44579a4747ac$var$R(this.k($f58f44579a4747ac$var$u()), this.k($f58f44579a4747ac$var$u()), this, this.options)) : s = i[e], s._$AI(o), e++;
        e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);
    }
    _$AR(t = this._$AA.nextSibling, i) {
        var s;
        for(null === (s = this._$AP) || void 0 === s || s.call(this, !1, !0, i); t && t !== this._$AB;){
            const i = t.nextSibling;
            t.remove(), t = i;
        }
    }
    setConnected(t) {
        var i;
        void 0 === this._$AM && (this._$Cp = t, null === (i = this._$AP) || void 0 === i || i.call(this, t));
    }
}
class $f58f44579a4747ac$var$k {
    constructor(t, i, s, e, o){
        this.type = 1, this._$AH = $f58f44579a4747ac$export$45b790e32b2810ee, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = o, s.length > 2 || "" !== s[0] || "" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String), this.strings = s) : this._$AH = $f58f44579a4747ac$export$45b790e32b2810ee;
    }
    get tagName() {
        return this.element.tagName;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t, i = this, s, e) {
        const o = this.strings;
        let n = !1;
        if (void 0 === o) t = $f58f44579a4747ac$var$S(this, t, i, 0), n = !$f58f44579a4747ac$var$d(t) || t !== this._$AH && t !== $f58f44579a4747ac$export$9c068ae9cc5db4e8, n && (this._$AH = t);
        else {
            const e = t;
            let l, h;
            for(t = o[0], l = 0; l < o.length - 1; l++)h = $f58f44579a4747ac$var$S(this, e[s + l], i, l), h === $f58f44579a4747ac$export$9c068ae9cc5db4e8 && (h = this._$AH[l]), n || (n = !$f58f44579a4747ac$var$d(h) || h !== this._$AH[l]), h === $f58f44579a4747ac$export$45b790e32b2810ee ? t = $f58f44579a4747ac$export$45b790e32b2810ee : t !== $f58f44579a4747ac$export$45b790e32b2810ee && (t += (null != h ? h : "") + o[l + 1]), this._$AH[l] = h;
        }
        n && !e && this.j(t);
    }
    j(t) {
        t === $f58f44579a4747ac$export$45b790e32b2810ee ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t ? t : "");
    }
}
class $f58f44579a4747ac$var$H extends $f58f44579a4747ac$var$k {
    constructor(){
        super(...arguments), this.type = 3;
    }
    j(t) {
        this.element[this.name] = t === $f58f44579a4747ac$export$45b790e32b2810ee ? void 0 : t;
    }
}
const $f58f44579a4747ac$var$I = $f58f44579a4747ac$var$s ? $f58f44579a4747ac$var$s.emptyScript : "";
class $f58f44579a4747ac$var$L extends $f58f44579a4747ac$var$k {
    constructor(){
        super(...arguments), this.type = 4;
    }
    j(t) {
        t && t !== $f58f44579a4747ac$export$45b790e32b2810ee ? this.element.setAttribute(this.name, $f58f44579a4747ac$var$I) : this.element.removeAttribute(this.name);
    }
}
class $f58f44579a4747ac$var$z extends $f58f44579a4747ac$var$k {
    constructor(t, i, s, e, o){
        super(t, i, s, e, o), this.type = 5;
    }
    _$AI(t, i = this) {
        var s;
        if ((t = null !== (s = $f58f44579a4747ac$var$S(this, t, i, 0)) && void 0 !== s ? s : $f58f44579a4747ac$export$45b790e32b2810ee) === $f58f44579a4747ac$export$9c068ae9cc5db4e8) return;
        const e = this._$AH, o = t === $f58f44579a4747ac$export$45b790e32b2810ee && e !== $f58f44579a4747ac$export$45b790e32b2810ee || t.capture !== e.capture || t.once !== e.once || t.passive !== e.passive, n = t !== $f58f44579a4747ac$export$45b790e32b2810ee && (e === $f58f44579a4747ac$export$45b790e32b2810ee || o);
        o && this.element.removeEventListener(this.name, this, e), n && this.element.addEventListener(this.name, this, t), this._$AH = t;
    }
    handleEvent(t) {
        var i, s;
        "function" == typeof this._$AH ? this._$AH.call(null !== (s = null === (i = this.options) || void 0 === i ? void 0 : i.host) && void 0 !== s ? s : this.element, t) : this._$AH.handleEvent(t);
    }
}
class $f58f44579a4747ac$var$Z {
    constructor(t, i, s){
        this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t) {
        $f58f44579a4747ac$var$S(this, t);
    }
}
const $f58f44579a4747ac$export$8613d1ca9052b22e = {
    O: $f58f44579a4747ac$var$o,
    P: $f58f44579a4747ac$var$n,
    A: $f58f44579a4747ac$var$l,
    C: 1,
    M: $f58f44579a4747ac$var$V,
    L: $f58f44579a4747ac$var$M,
    R: $f58f44579a4747ac$var$v,
    D: $f58f44579a4747ac$var$S,
    I: $f58f44579a4747ac$var$R,
    V: $f58f44579a4747ac$var$k,
    H: $f58f44579a4747ac$var$L,
    N: $f58f44579a4747ac$var$z,
    U: $f58f44579a4747ac$var$H,
    F: $f58f44579a4747ac$var$Z
}, $f58f44579a4747ac$var$B = $f58f44579a4747ac$var$i.litHtmlPolyfillSupport;
null == $f58f44579a4747ac$var$B || $f58f44579a4747ac$var$B($f58f44579a4747ac$var$N, $f58f44579a4747ac$var$R), (null !== ($f58f44579a4747ac$var$t = $f58f44579a4747ac$var$i.litHtmlVersions) && void 0 !== $f58f44579a4747ac$var$t ? $f58f44579a4747ac$var$t : $f58f44579a4747ac$var$i.litHtmlVersions = []).push("2.8.0");
const $f58f44579a4747ac$export$b3890eb0ae9dca99 = (t, i, s)=>{
    var e, o;
    const n = null !== (e = null == s ? void 0 : s.renderBefore) && void 0 !== e ? e : i;
    let l = n._$litPart$;
    if (void 0 === l) {
        const t = null !== (o = null == s ? void 0 : s.renderBefore) && void 0 !== o ? o : null;
        n._$litPart$ = l = new $f58f44579a4747ac$var$R(i.insertBefore($f58f44579a4747ac$var$u(), t), t, void 0, null != s ? s : {});
    }
    return l._$AI(t), l;
};




/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ var $ab210b2da7b39b9d$var$l, $ab210b2da7b39b9d$var$o;
const $ab210b2da7b39b9d$export$8bf27daf9e8907c9 = (0, $19fe8e3abedf4df0$export$c7c07a37856565d);
class $ab210b2da7b39b9d$export$3f2f9f5909897157 extends (0, $19fe8e3abedf4df0$export$c7c07a37856565d) {
    constructor(){
        super(...arguments), this.renderOptions = {
            host: this
        }, this._$Do = void 0;
    }
    createRenderRoot() {
        var t, e;
        const i = super.createRenderRoot();
        return null !== (t = (e = this.renderOptions).renderBefore) && void 0 !== t || (e.renderBefore = i.firstChild), i;
    }
    update(t) {
        const i = this.render();
        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = (0, $f58f44579a4747ac$export$b3890eb0ae9dca99)(i, this.renderRoot, this.renderOptions);
    }
    connectedCallback() {
        var t;
        super.connectedCallback(), null === (t = this._$Do) || void 0 === t || t.setConnected(!0);
    }
    disconnectedCallback() {
        var t;
        super.disconnectedCallback(), null === (t = this._$Do) || void 0 === t || t.setConnected(!1);
    }
    render() {
        return 0, $f58f44579a4747ac$export$9c068ae9cc5db4e8;
    }
}
$ab210b2da7b39b9d$export$3f2f9f5909897157.finalized = !0, $ab210b2da7b39b9d$export$3f2f9f5909897157._$litElement$ = !0, null === ($ab210b2da7b39b9d$var$l = globalThis.litElementHydrateSupport) || void 0 === $ab210b2da7b39b9d$var$l || $ab210b2da7b39b9d$var$l.call(globalThis, {
    LitElement: $ab210b2da7b39b9d$export$3f2f9f5909897157
});
const $ab210b2da7b39b9d$var$n = globalThis.litElementPolyfillSupport;
null == $ab210b2da7b39b9d$var$n || $ab210b2da7b39b9d$var$n({
    LitElement: $ab210b2da7b39b9d$export$3f2f9f5909897157
});
const $ab210b2da7b39b9d$export$f5c524615a7708d6 = {
    _$AK: (t, e, i)=>{
        t._$AK(e, i);
    },
    _$AL: (t)=>t._$AL
};
(null !== ($ab210b2da7b39b9d$var$o = globalThis.litElementVersions) && void 0 !== $ab210b2da7b39b9d$var$o ? $ab210b2da7b39b9d$var$o : globalThis.litElementVersions = []).push("3.3.3");


/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $a00bca1a101a9088$export$6acf61af03e62db = !1;





const $120c5a859c012378$export$9dd6ff9ea0189349 = (0, $def2de46b9306e8a$export$dbf350e5966cf602)`
    #map {
        height: 100vh;
    }

    
`;


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $9cd908ed2625c047$var$i = (i, e)=>"method" === e.kind && e.descriptor && !("value" in e.descriptor) ? {
        ...e,
        finisher (n) {
            n.createProperty(e.key, i);
        }
    } : {
        kind: "field",
        key: Symbol(),
        placement: "own",
        descriptor: {},
        originalKey: e.key,
        initializer () {
            "function" == typeof e.initializer && (this[e.key] = e.initializer.call(this));
        },
        finisher (n) {
            n.createProperty(e.key, i);
        }
    }, $9cd908ed2625c047$var$e = (i, e, n)=>{
    e.constructor.createProperty(n, i);
};
function $9cd908ed2625c047$export$d541bacb2bda4494(n) {
    return (t, o)=>void 0 !== o ? $9cd908ed2625c047$var$e(n, t, o) : $9cd908ed2625c047$var$i(n, t);
}


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function $04c21ea1ce1f6057$export$ca000e230c0caa3e(t) {
    return (0, $9cd908ed2625c047$export$d541bacb2bda4494)({
        ...t,
        state: !0
    });
}






/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $14742f68afc766d6$export$da64fc29f17f9d0e = (e)=>(n)=>"function" == typeof n ? ((e, n)=>(customElements.define(e, n), n))(e, n) : ((e, n)=>{
            const { kind: t, elements: s } = n;
            return {
                kind: t,
                elements: s,
                finisher (n) {
                    customElements.define(e, n);
                }
            };
        })(e, n);




/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $25e9c5a8f7ecfc69$export$29fd0ed4087278b5 = (e, t, o)=>{
    Object.defineProperty(t, o, e);
}, $25e9c5a8f7ecfc69$export$18eb0154d0069a01 = (e, t)=>({
        kind: "method",
        placement: "prototype",
        key: t.key,
        descriptor: e
    }), $25e9c5a8f7ecfc69$export$757d561a932dc1cb = ({ finisher: e, descriptor: t })=>(o, n)=>{
        var r;
        if (void 0 === n) {
            const n = null !== (r = o.originalKey) && void 0 !== r ? r : o.key, i = null != t ? {
                kind: "method",
                placement: "prototype",
                key: n,
                descriptor: t(o.key)
            } : {
                ...o,
                key: n
            };
            return null != e && (i.finisher = function(t) {
                e(t, n);
            }), i;
        }
        {
            const r = o.constructor;
            void 0 !== t && Object.defineProperty(o, n, t(n)), null == e || e(r, n);
        }
    };


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function $b4269277b3c48b0c$export$b2b799818fbabcf3(e) {
    return (0, $25e9c5a8f7ecfc69$export$757d561a932dc1cb)({
        finisher: (r, t)=>{
            Object.assign(r.prototype[t], e);
        }
    });
}



/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function $02a1f3a787c54a30$export$2fa187e846a241c4(i, n) {
    return (0, $25e9c5a8f7ecfc69$export$757d561a932dc1cb)({
        descriptor: (o)=>{
            const t = {
                get () {
                    var o, n;
                    return null !== (n = null === (o = this.renderRoot) || void 0 === o ? void 0 : o.querySelector(i)) && void 0 !== n ? n : null;
                },
                enumerable: !0,
                configurable: !0
            };
            if (n) {
                const n = "symbol" == typeof o ? Symbol() : "__" + o;
                t.get = function() {
                    var o, t;
                    return void 0 === this[n] && (this[n] = null !== (t = null === (o = this.renderRoot) || void 0 === o ? void 0 : o.querySelector(i)) && void 0 !== t ? t : null), this[n];
                };
            }
            return t;
        }
    });
}



/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function $ed34c589b230c255$export$dcd0d083aa86c355(e) {
    return (0, $25e9c5a8f7ecfc69$export$757d561a932dc1cb)({
        descriptor: (r)=>({
                get () {
                    var r, o;
                    return null !== (o = null === (r = this.renderRoot) || void 0 === r ? void 0 : r.querySelectorAll(e)) && void 0 !== o ? o : [];
                },
                enumerable: !0,
                configurable: !0
            })
    });
}



/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function $ea50f1870b80cbec$export$163dfc35cc43f240(e) {
    return (0, $25e9c5a8f7ecfc69$export$757d561a932dc1cb)({
        descriptor: (r)=>({
                async get () {
                    var r;
                    return await this.updateComplete, null === (r = this.renderRoot) || void 0 === r ? void 0 : r.querySelector(e);
                },
                enumerable: !0,
                configurable: !0
            })
    });
}



/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ var $563fcf7ce7e6c5aa$var$n;
const $563fcf7ce7e6c5aa$var$e = null != (null === ($563fcf7ce7e6c5aa$var$n = window.HTMLSlotElement) || void 0 === $563fcf7ce7e6c5aa$var$n ? void 0 : $563fcf7ce7e6c5aa$var$n.prototype.assignedElements) ? (o, n)=>o.assignedElements(n) : (o, n)=>o.assignedNodes(n).filter((o)=>o.nodeType === Node.ELEMENT_NODE);
function $563fcf7ce7e6c5aa$export$4682af2d9ee91415(n) {
    const { slot: l, selector: t } = null != n ? n : {};
    return (0, $25e9c5a8f7ecfc69$export$757d561a932dc1cb)({
        descriptor: (o)=>({
                get () {
                    var o;
                    const r = "slot" + (l ? `[name=${l}]` : ":not([name])"), i = null === (o = this.renderRoot) || void 0 === o ? void 0 : o.querySelector(r), s = null != i ? $563fcf7ce7e6c5aa$var$e(i, n) : [];
                    return t ? s.filter((o)=>o.matches(t)) : s;
                },
                enumerable: !0,
                configurable: !0
            })
    });
}




/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function $728f1385dd7bf557$export$1bdbe53f9df1b8(o, n, r) {
    let l, s = o;
    return "object" == typeof o ? (s = o.slot, l = o) : l = {
        flatten: n
    }, r ? (0, $563fcf7ce7e6c5aa$export$4682af2d9ee91415)({
        slot: s,
        flatten: n,
        selector: r
    }) : (0, $25e9c5a8f7ecfc69$export$757d561a932dc1cb)({
        descriptor: (e)=>({
                get () {
                    var e, t;
                    const o = "slot" + (s ? `[name=${s}]` : ":not([name])"), n = null === (e = this.renderRoot) || void 0 === e ? void 0 : e.querySelector(o);
                    return null !== (t = null == n ? void 0 : n.assignedNodes(l)) && void 0 !== t ? t : [];
                },
                enumerable: !0,
                configurable: !0
            })
    });
}




/**
 * @module ol/Feature
 */ /**
 * @module ol/Object
 */ /**
 * @module ol/events/Event
 */ /**
 * @classdesc
 * Stripped down implementation of the W3C DOM Level 2 Event interface.
 * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
 *
 * This implementation only provides `type` and `target` properties, and
 * `stopPropagation` and `preventDefault` methods. It is meant as base class
 * for higher level events defined in the library, and works with
 * {@link module:ol/events/Target~Target}.
 */ class $f22c10e3757627da$var$BaseEvent {
    /**
   * @param {string} type Type.
   */ constructor(type){
        /**
     * @type {boolean}
     */ this.propagationStopped;
        /**
     * @type {boolean}
     */ this.defaultPrevented;
        /**
     * The event type.
     * @type {string}
     * @api
     */ this.type = type;
        /**
     * The event target.
     * @type {Object}
     * @api
     */ this.target = null;
    }
    /**
   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events
   * will be fired.
   * @api
   */ preventDefault() {
        this.defaultPrevented = true;
    }
    /**
   * Stop event propagation.
   * @api
   */ stopPropagation() {
        this.propagationStopped = true;
    }
}
function $f22c10e3757627da$export$51134cce184326b9(evt) {
    evt.stopPropagation();
}
function $f22c10e3757627da$export$fa3b29edae795ef4(evt) {
    evt.preventDefault();
}
var $f22c10e3757627da$export$2e2bcd8739ae039 = $f22c10e3757627da$var$BaseEvent;


/**
 * @module ol/ObjectEventType
 */ /**
 * @enum {string}
 */ var $a6660a6615220f8c$export$2e2bcd8739ae039 /**
 * @typedef {'propertychange'} Types
 */  = {
    /**
   * Triggered when a property is changed.
   * @event module:ol/Object.ObjectEvent#propertychange
   * @api
   */ PROPERTYCHANGE: "propertychange"
};


/**
 * @module ol/Observable
 */ /**
 * @module ol/events/Target
 */ /**
 * @module ol/Disposable
 */ /**
 * @classdesc
 * Objects that need to clean up after themselves.
 */ class $2323388472940bb7$var$Disposable {
    constructor(){
        /**
     * The object has already been disposed.
     * @type {boolean}
     * @protected
     */ this.disposed = false;
    }
    /**
   * Clean up.
   */ dispose() {
        if (!this.disposed) {
            this.disposed = true;
            this.disposeInternal();
        }
    }
    /**
   * Extension point for disposable objects.
   * @protected
   */ disposeInternal() {}
}
var $2323388472940bb7$export$2e2bcd8739ae039 = $2323388472940bb7$var$Disposable;



/**
 * @module ol/functions
 */ /**
 * @module ol/array
 */ /**
 * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
 * https://github.com/darkskyapp/binary-search
 *
 * @param {Array<*>} haystack Items to search through.
 * @param {*} needle The item to look for.
 * @param {Function} [comparator] Comparator function.
 * @return {number} The index of the item if found, -1 if not.
 */ function $69c1cc8ae30f997f$export$2e0ae67339d5f1ac(haystack, needle, comparator) {
    let mid, cmp;
    comparator = comparator || $69c1cc8ae30f997f$export$fcb633242ef15540;
    let low = 0;
    let high = haystack.length;
    let found = false;
    while(low < high){
        /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
     * to double (which gives the wrong results). */ mid = low + (high - low >> 1);
        cmp = +comparator(haystack[mid], needle);
        if (cmp < 0.0) /* Too low. */ low = mid + 1;
        else {
            /* Key found or too high */ high = mid;
            found = !cmp;
        }
    }
    /* Key not found. */ return found ? low : ~low;
}
function $69c1cc8ae30f997f$export$fcb633242ef15540(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
}
function $69c1cc8ae30f997f$export$4fa3190a997c3d8f(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
}
function $69c1cc8ae30f997f$export$8a3786cc03fdb777(arr, target, direction) {
    if (arr[0] <= target) return 0;
    const n = arr.length;
    if (target <= arr[n - 1]) return n - 1;
    if (typeof direction === "function") {
        for(let i = 1; i < n; ++i){
            const candidate = arr[i];
            if (candidate === target) return i;
            if (candidate < target) {
                if (direction(target, arr[i - 1], candidate) > 0) return i - 1;
                return i;
            }
        }
        return n - 1;
    }
    if (direction > 0) {
        for(let i = 1; i < n; ++i){
            if (arr[i] < target) return i - 1;
        }
        return n - 1;
    }
    if (direction < 0) {
        for(let i = 1; i < n; ++i){
            if (arr[i] <= target) return i;
        }
        return n - 1;
    }
    for(let i = 1; i < n; ++i){
        if (arr[i] == target) return i;
        if (arr[i] < target) {
            if (arr[i - 1] - target < target - arr[i]) return i - 1;
            return i;
        }
    }
    return n - 1;
}
function $69c1cc8ae30f997f$export$292cfa960964f0e0(arr, begin, end) {
    while(begin < end){
        const tmp = arr[begin];
        arr[begin] = arr[end];
        arr[end] = tmp;
        ++begin;
        --end;
    }
}
function $69c1cc8ae30f997f$export$8b58be045bf06082(arr, data) {
    const extension = Array.isArray(data) ? data : [
        data
    ];
    const length = extension.length;
    for(let i = 0; i < length; i++)arr[arr.length] = extension[i];
}
function $69c1cc8ae30f997f$export$cd7f480d6b8286c3(arr, obj) {
    const i = arr.indexOf(obj);
    const found = i > -1;
    if (found) arr.splice(i, 1);
    return found;
}
function $69c1cc8ae30f997f$export$e9bab7fafb253603(arr1, arr2) {
    const len1 = arr1.length;
    if (len1 !== arr2.length) return false;
    for(let i = 0; i < len1; i++){
        if (arr1[i] !== arr2[i]) return false;
    }
    return true;
}
function $69c1cc8ae30f997f$export$c7d3d1f96a700512(arr, compareFnc) {
    const length = arr.length;
    const tmp = Array(arr.length);
    let i;
    for(i = 0; i < length; i++)tmp[i] = {
        index: i,
        value: arr[i]
    };
    tmp.sort(function(a, b) {
        return compareFnc(a.value, b.value) || a.index - b.index;
    });
    for(i = 0; i < arr.length; i++)arr[i] = tmp[i].value;
}
function $69c1cc8ae30f997f$export$efa610630f9e181(arr, func, strict) {
    const compare = func || $69c1cc8ae30f997f$export$fcb633242ef15540;
    return arr.every(function(currentVal, index) {
        if (index === 0) return true;
        const res = compare(arr[index - 1], currentVal);
        return !(res > 0 || strict && res === 0);
    });
}


function $2c3aa3ce33eccc0f$export$22e23a2304399231() {
    return true;
}
function $2c3aa3ce33eccc0f$export$8f11cee4bdc7e668() {
    return false;
}
function $2c3aa3ce33eccc0f$export$1cd1943b3a73bbe8() {}
function $2c3aa3ce33eccc0f$export$ff83df6f9971435f(fn) {
    let called = false;
    /** @type {ReturnType} */ let lastResult;
    /** @type {Array<any>} */ let lastArgs;
    let lastThis;
    return function() {
        const nextArgs = Array.prototype.slice.call(arguments);
        if (!called || this !== lastThis || !(0, $69c1cc8ae30f997f$export$e9bab7fafb253603)(nextArgs, lastArgs)) {
            called = true;
            lastThis = this;
            lastArgs = nextArgs;
            lastResult = fn.apply(this, arguments);
        }
        return lastResult;
    };
}
function $2c3aa3ce33eccc0f$export$4dbaaf6c79705e6c(getter) {
    function promiseGetter() {
        let value;
        try {
            value = getter();
        } catch (err) {
            return Promise.reject(err);
        }
        if (value instanceof Promise) return value;
        return Promise.resolve(value);
    }
    return promiseGetter();
}


/**
 * @module ol/obj
 */ /**
 * Removes all properties from an object.
 * @param {Object} object The object to clear.
 */ function $e2dfef87a88758ed$export$42ffd38884aecdac(object) {
    for(const property in object)delete object[property];
}
function $e2dfef87a88758ed$export$dd1bc94b04021eeb(object) {
    let property;
    for(property in object)return false;
    return !property;
}


/**
 * @typedef {EventTarget|Target} EventTargetLike
 */ /**
 * @classdesc
 * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
 * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
 *
 * There are two important simplifications compared to the specification:
 *
 * 1. The handling of `useCapture` in `addEventListener` and
 *    `removeEventListener`. There is no real capture model.
 * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
 *    There is no event target hierarchy. When a listener calls
 *    `stopPropagation` or `preventDefault` on an event object, it means that no
 *    more listeners after this one will be called. Same as when the listener
 *    returns false.
 */ class $fd4e3201ad7386dc$var$Target extends (0, $2323388472940bb7$export$2e2bcd8739ae039) {
    /**
   * @param {*} [target] Default event target for dispatched events.
   */ constructor(target){
        super();
        /**
     * @private
     * @type {*}
     */ this.eventTarget_ = target;
        /**
     * @private
     * @type {Object<string, number>}
     */ this.pendingRemovals_ = null;
        /**
     * @private
     * @type {Object<string, number>}
     */ this.dispatching_ = null;
        /**
     * @private
     * @type {Object<string, Array<import("../events.js").Listener>>}
     */ this.listeners_ = null;
    }
    /**
   * @param {string} type Type.
   * @param {import("../events.js").Listener} listener Listener.
   */ addEventListener(type, listener) {
        if (!type || !listener) return;
        const listeners = this.listeners_ || (this.listeners_ = {});
        const listenersForType = listeners[type] || (listeners[type] = []);
        if (!listenersForType.includes(listener)) listenersForType.push(listener);
    }
    /**
   * Dispatches an event and calls all listeners listening for events
   * of this type. The event parameter can either be a string or an
   * Object with a `type` property.
   *
   * @param {import("./Event.js").default|string} event Event object.
   * @return {boolean|undefined} `false` if anyone called preventDefault on the
   *     event object or if any of the listeners returned false.
   * @api
   */ dispatchEvent(event) {
        const isString = typeof event === "string";
        const type = isString ? event : event.type;
        const listeners = this.listeners_ && this.listeners_[type];
        if (!listeners) return;
        const evt = isString ? new (0, $f22c10e3757627da$export$2e2bcd8739ae039)(event) : /** @type {Event} */ event;
        if (!evt.target) evt.target = this.eventTarget_ || this;
        const dispatching = this.dispatching_ || (this.dispatching_ = {});
        const pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});
        if (!(type in dispatching)) {
            dispatching[type] = 0;
            pendingRemovals[type] = 0;
        }
        ++dispatching[type];
        let propagate;
        for(let i = 0, ii = listeners.length; i < ii; ++i){
            if ("handleEvent" in listeners[i]) propagate = /** @type {import("../events.js").ListenerObject} */ listeners[i].handleEvent(evt);
            else propagate = /** @type {import("../events.js").ListenerFunction} */ listeners[i].call(this, evt);
            if (propagate === false || evt.propagationStopped) {
                propagate = false;
                break;
            }
        }
        if (--dispatching[type] === 0) {
            let pr = pendingRemovals[type];
            delete pendingRemovals[type];
            while(pr--)this.removeEventListener(type, (0, $2c3aa3ce33eccc0f$export$1cd1943b3a73bbe8));
            delete dispatching[type];
        }
        return propagate;
    }
    /**
   * Clean up.
   */ disposeInternal() {
        this.listeners_ && (0, $e2dfef87a88758ed$export$42ffd38884aecdac)(this.listeners_);
    }
    /**
   * Get the listeners for a specified event type. Listeners are returned in the
   * order that they will be called in.
   *
   * @param {string} type Type.
   * @return {Array<import("../events.js").Listener>|undefined} Listeners.
   */ getListeners(type) {
        return this.listeners_ && this.listeners_[type] || undefined;
    }
    /**
   * @param {string} [type] Type. If not provided,
   *     `true` will be returned if this event target has any listeners.
   * @return {boolean} Has listeners.
   */ hasListener(type) {
        if (!this.listeners_) return false;
        return type ? type in this.listeners_ : Object.keys(this.listeners_).length > 0;
    }
    /**
   * @param {string} type Type.
   * @param {import("../events.js").Listener} listener Listener.
   */ removeEventListener(type, listener) {
        const listeners = this.listeners_ && this.listeners_[type];
        if (listeners) {
            const index = listeners.indexOf(listener);
            if (index !== -1) {
                if (this.pendingRemovals_ && type in this.pendingRemovals_) {
                    // make listener a no-op, and remove later in #dispatchEvent()
                    listeners[index] = (0, $2c3aa3ce33eccc0f$export$1cd1943b3a73bbe8);
                    ++this.pendingRemovals_[type];
                } else {
                    listeners.splice(index, 1);
                    if (listeners.length === 0) delete this.listeners_[type];
                }
            }
        }
    }
}
var $fd4e3201ad7386dc$export$2e2bcd8739ae039 = $fd4e3201ad7386dc$var$Target;


/**
 * @module ol/events/EventType
 */ /**
 * @enum {string}
 * @const
 */ var $f13d17e3c190470c$export$2e2bcd8739ae039 = {
    /**
   * Generic change event. Triggered when the revision counter is increased.
   * @event module:ol/events/Event~BaseEvent#change
   * @api
   */ CHANGE: "change",
    /**
   * Generic error event. Triggered when an error occurs.
   * @event module:ol/events/Event~BaseEvent#error
   * @api
   */ ERROR: "error",
    BLUR: "blur",
    CLEAR: "clear",
    CONTEXTMENU: "contextmenu",
    CLICK: "click",
    DBLCLICK: "dblclick",
    DRAGENTER: "dragenter",
    DRAGOVER: "dragover",
    DROP: "drop",
    FOCUS: "focus",
    KEYDOWN: "keydown",
    KEYPRESS: "keypress",
    LOAD: "load",
    RESIZE: "resize",
    TOUCHMOVE: "touchmove",
    WHEEL: "wheel"
};


/**
 * @module ol/events
 */ 
function $776f68d2a754760b$export$63174c828edd6ff8(target, type, listener, thisArg, once) {
    if (thisArg && thisArg !== target) listener = listener.bind(thisArg);
    if (once) {
        const originalListener = listener;
        listener = function() {
            target.removeEventListener(type, listener);
            originalListener.apply(this, arguments);
        };
    }
    const eventsKey = {
        target: target,
        type: type,
        listener: listener
    };
    target.addEventListener(type, listener);
    return eventsKey;
}
function $776f68d2a754760b$export$8d2a95bc11b44725(target, type, listener, thisArg) {
    return $776f68d2a754760b$export$63174c828edd6ff8(target, type, listener, thisArg, true);
}
function $776f68d2a754760b$export$b0a21c8b3c1c921(key) {
    if (key && key.target) {
        key.target.removeEventListener(key.type, key.listener);
        (0, $e2dfef87a88758ed$export$42ffd38884aecdac)(key);
    }
}


/***
 * @template {string} Type
 * @template {Event|import("./events/Event.js").default} EventClass
 * @template Return
 * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature
 */ /***
 * @template {string} Type
 * @template Return
 * @typedef {(type: Type[], listener: (event: Event|import("./events/Event").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature
 */ /**
 * @typedef {'change'|'error'} EventTypes
 */ /***
 * @template Return
 * @typedef {OnSignature<EventTypes, import("./events/Event.js").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * An event target providing convenient methods for listener registration
 * and unregistration. A generic `change` event is always available through
 * {@link module:ol/Observable~Observable#changed}.
 *
 * @fires import("./events/Event.js").default
 * @api
 */ class $0a5ecae53e50aa57$var$Observable extends (0, $fd4e3201ad7386dc$export$2e2bcd8739ae039) {
    constructor(){
        super();
        this.on = /** @type {ObservableOnSignature<import("./events").EventsKey>} */ this.onInternal;
        this.once = /** @type {ObservableOnSignature<import("./events").EventsKey>} */ this.onceInternal;
        this.un = /** @type {ObservableOnSignature<void>} */ this.unInternal;
        /**
     * @private
     * @type {number}
     */ this.revision_ = 0;
    }
    /**
   * Increases the revision counter and dispatches a 'change' event.
   * @api
   */ changed() {
        ++this.revision_;
        this.dispatchEvent((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE);
    }
    /**
   * Get the version number for this object.  Each time the object is modified,
   * its version number will be incremented.
   * @return {number} Revision.
   * @api
   */ getRevision() {
        return this.revision_;
    }
    /**
   * @param {string|Array<string>} type Type.
   * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
   * @protected
   */ onInternal(type, listener) {
        if (Array.isArray(type)) {
            const len = type.length;
            const keys = new Array(len);
            for(let i = 0; i < len; ++i)keys[i] = (0, $776f68d2a754760b$export$63174c828edd6ff8)(this, type[i], listener);
            return keys;
        }
        return (0, $776f68d2a754760b$export$63174c828edd6ff8)(this, /** @type {string} */ type, listener);
    }
    /**
   * @param {string|Array<string>} type Type.
   * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
   * @protected
   */ onceInternal(type, listener) {
        let key;
        if (Array.isArray(type)) {
            const len = type.length;
            key = new Array(len);
            for(let i = 0; i < len; ++i)key[i] = (0, $776f68d2a754760b$export$8d2a95bc11b44725)(this, type[i], listener);
        } else key = (0, $776f68d2a754760b$export$8d2a95bc11b44725)(this, /** @type {string} */ type, listener);
        /** @type {Object} */ listener.ol_key = key;
        return key;
    }
    /**
   * Unlisten for a certain type of event.
   * @param {string|Array<string>} type Type.
   * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
   * @protected
   */ unInternal(type, listener) {
        const key = /** @type {Object} */ listener.ol_key;
        if (key) $0a5ecae53e50aa57$export$b7ef3f8527533384(key);
        else if (Array.isArray(type)) for(let i = 0, ii = type.length; i < ii; ++i)this.removeEventListener(type[i], listener);
        else this.removeEventListener(type, listener);
    }
}
/**
 * Listen for a certain type of event.
 * @function
 * @param {string|Array<string>} type The event type or array of event types.
 * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
 * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
 *     called with an array of event types as the first argument, the return
 *     will be an array of keys.
 * @api
 */ $0a5ecae53e50aa57$var$Observable.prototype.on;
/**
 * Listen once for a certain type of event.
 * @function
 * @param {string|Array<string>} type The event type or array of event types.
 * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
 * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
 *     called with an array of event types as the first argument, the return
 *     will be an array of keys.
 * @api
 */ $0a5ecae53e50aa57$var$Observable.prototype.once;
/**
 * Unlisten for a certain type of event.
 * @function
 * @param {string|Array<string>} type The event type or array of event types.
 * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
 * @api
 */ $0a5ecae53e50aa57$var$Observable.prototype.un;
function $0a5ecae53e50aa57$export$b7ef3f8527533384(key) {
    if (Array.isArray(key)) for(let i = 0, ii = key.length; i < ii; ++i)(0, $776f68d2a754760b$export$b0a21c8b3c1c921)(key[i]);
    else (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(/** @type {import("./events.js").EventsKey} */ key);
}
var $0a5ecae53e50aa57$export$2e2bcd8739ae039 = $0a5ecae53e50aa57$var$Observable;


/**
 * @module ol/util
 */ /**
 * @return {never} Any return.
 */ function $ae7eaaa2c9c1e05d$export$817eb92a8194bab0() {
    throw new Error("Unimplemented abstract method.");
}
/**
 * Counter for getUid.
 * @type {number}
 * @private
 */ let $ae7eaaa2c9c1e05d$var$uidCounter_ = 0;
function $ae7eaaa2c9c1e05d$export$5e82334337e0f204(obj) {
    return obj.ol_uid || (obj.ol_uid = String(++$ae7eaaa2c9c1e05d$var$uidCounter_));
}
const $ae7eaaa2c9c1e05d$export$a4ad2735b021c132 = "7.5.2";



class $d6cd7f1b627d5e92$export$cf395d7c4a2d5a17 extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {string} type The event type.
   * @param {string} key The property name.
   * @param {*} oldValue The old value for `key`.
   */ constructor(type, key, oldValue){
        super(type);
        /**
     * The name of the property whose value is changing.
     * @type {string}
     * @api
     */ this.key = key;
        /**
     * The old value. To get the new value use `e.target.get(e.key)` where
     * `e` is the event object.
     * @type {*}
     * @api
     */ this.oldValue = oldValue;
    }
}
/***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *    import("./Observable").OnSignature<import("./ObjectEventType").Types, ObjectEvent, Return> &
 *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types, Return>} ObjectOnSignature
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Most non-trivial classes inherit from this.
 *
 * This extends {@link module:ol/Observable~Observable} with observable
 * properties, where each property is observable as well as the object as a
 * whole.
 *
 * Classes that inherit from this have pre-defined properties, to which you can
 * add your owns. The pre-defined properties are listed in this documentation as
 * 'Observable Properties', and have their own accessors; for example,
 * {@link module:ol/Map~Map} has a `target` property, accessed with
 * `getTarget()` and changed with `setTarget()`. Not all properties are however
 * settable. There are also general-purpose accessors `get()` and `set()`. For
 * example, `get('target')` is equivalent to `getTarget()`.
 *
 * The `set` accessors trigger a change event, and you can monitor this by
 * registering a listener. For example, {@link module:ol/View~View} has a
 * `center` property, so `view.on('change:center', function(evt) {...});` would
 * call the function whenever the value of the center property changes. Within
 * the function, `evt.target` would be the view, so `evt.target.getCenter()`
 * would return the new center.
 *
 * You can add your own observable properties with
 * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
 * You can listen for changes on that property value with
 * `object.on('change:prop', listener)`. You can get a list of all
 * properties with {@link module:ol/Object~BaseObject#getProperties}.
 *
 * Note that the observable properties are separate from standard JS properties.
 * You can, for example, give your map object a title with
 * `map.title='New title'` and with `map.set('title', 'Another title')`. The
 * first will be a `hasOwnProperty`; the second will appear in
 * `getProperties()`. Only the second is observable.
 *
 * Properties can be deleted by using the unset method. E.g.
 * object.unset('foo').
 *
 * @fires ObjectEvent
 * @api
 */ class $d6cd7f1b627d5e92$var$BaseObject extends (0, $0a5ecae53e50aa57$export$2e2bcd8739ae039) {
    /**
   * @param {Object<string, *>} [values] An object with key-value pairs.
   */ constructor(values){
        super();
        /***
     * @type {ObjectOnSignature<import("./events").EventsKey>}
     */ this.on;
        /***
     * @type {ObjectOnSignature<import("./events").EventsKey>}
     */ this.once;
        /***
     * @type {ObjectOnSignature<void>}
     */ this.un;
        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is
        // the same as the order in which they were created.  This also helps to
        // ensure that object properties are always added in the same order, which
        // helps many JavaScript engines generate faster code.
        (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(this);
        /**
     * @private
     * @type {Object<string, *>}
     */ this.values_ = null;
        if (values !== undefined) this.setProperties(values);
    }
    /**
   * Gets a value.
   * @param {string} key Key name.
   * @return {*} Value.
   * @api
   */ get(key) {
        let value;
        if (this.values_ && this.values_.hasOwnProperty(key)) value = this.values_[key];
        return value;
    }
    /**
   * Get a list of object property names.
   * @return {Array<string>} List of property names.
   * @api
   */ getKeys() {
        return this.values_ && Object.keys(this.values_) || [];
    }
    /**
   * Get an object of all property names and values.
   * @return {Object<string, *>} Object.
   * @api
   */ getProperties() {
        return this.values_ && Object.assign({}, this.values_) || {};
    }
    /**
   * @return {boolean} The object has properties.
   */ hasProperties() {
        return !!this.values_;
    }
    /**
   * @param {string} key Key name.
   * @param {*} oldValue Old value.
   */ notify(key, oldValue) {
        let eventType;
        eventType = `change:${key}`;
        if (this.hasListener(eventType)) this.dispatchEvent(new $d6cd7f1b627d5e92$export$cf395d7c4a2d5a17(eventType, key, oldValue));
        eventType = (0, $a6660a6615220f8c$export$2e2bcd8739ae039).PROPERTYCHANGE;
        if (this.hasListener(eventType)) this.dispatchEvent(new $d6cd7f1b627d5e92$export$cf395d7c4a2d5a17(eventType, key, oldValue));
    }
    /**
   * @param {string} key Key name.
   * @param {import("./events.js").Listener} listener Listener.
   */ addChangeListener(key, listener) {
        this.addEventListener(`change:${key}`, listener);
    }
    /**
   * @param {string} key Key name.
   * @param {import("./events.js").Listener} listener Listener.
   */ removeChangeListener(key, listener) {
        this.removeEventListener(`change:${key}`, listener);
    }
    /**
   * Sets a value.
   * @param {string} key Key name.
   * @param {*} value Value.
   * @param {boolean} [silent] Update without triggering an event.
   * @api
   */ set(key, value, silent) {
        const values = this.values_ || (this.values_ = {});
        if (silent) values[key] = value;
        else {
            const oldValue = values[key];
            values[key] = value;
            if (oldValue !== value) this.notify(key, oldValue);
        }
    }
    /**
   * Sets a collection of key-value pairs.  Note that this changes any existing
   * properties and adds new ones (it does not remove any existing properties).
   * @param {Object<string, *>} values Values.
   * @param {boolean} [silent] Update without triggering an event.
   * @api
   */ setProperties(values, silent) {
        for(const key in values)this.set(key, values[key], silent);
    }
    /**
   * Apply any properties from another object without triggering events.
   * @param {BaseObject} source The source object.
   * @protected
   */ applyProperties(source) {
        if (!source.values_) return;
        Object.assign(this.values_ || (this.values_ = {}), source.values_);
    }
    /**
   * Unsets a property.
   * @param {string} key Key name.
   * @param {boolean} [silent] Unset without triggering an event.
   * @api
   */ unset(key, silent) {
        if (this.values_ && key in this.values_) {
            const oldValue = this.values_[key];
            delete this.values_[key];
            if ((0, $e2dfef87a88758ed$export$dd1bc94b04021eeb)(this.values_)) this.values_ = null;
            if (!silent) this.notify(key, oldValue);
        }
    }
}
var $d6cd7f1b627d5e92$export$2e2bcd8739ae039 = $d6cd7f1b627d5e92$var$BaseObject;



/**
 * @module ol/asserts
 */ /**
 * @module ol/AssertionError
 */ /** @type {Object<number, string>} */ const $fc1e13bda45b0626$var$messages = {
    1: "The view center is not defined",
    2: "The view resolution is not defined",
    3: "The view rotation is not defined",
    4: "`image` and `src` cannot be provided at the same time",
    5: "`imgSize` must be set when `image` is provided",
    7: "`format` must be set when `url` is set",
    8: "Unknown `serverType` configured",
    9: "`url` must be configured or set using `#setUrl()`",
    10: "The default `geometryFunction` can only handle `Point` geometries",
    11: "`options.featureTypes` must be an Array",
    12: "`options.geometryName` must also be provided when `options.bbox` is set",
    13: "Invalid corner",
    14: "Invalid color",
    15: "Tried to get a value for a key that does not exist in the cache",
    16: "Tried to set a value for a key that is used already",
    17: "`resolutions` must be sorted in descending order",
    18: "Either `origin` or `origins` must be configured, never both",
    19: "Number of `tileSizes` and `resolutions` must be equal",
    20: "Number of `origins` and `resolutions` must be equal",
    22: "Either `tileSize` or `tileSizes` must be configured, never both",
    24: "Invalid extent or geometry provided as `geometry`",
    25: "Cannot fit empty extent provided as `geometry`",
    26: "Features must have an id set",
    27: "Features must have an id set",
    28: '`renderMode` must be `"hybrid"` or `"vector"`',
    30: "The passed `feature` was already added to the source",
    31: "Tried to enqueue an `element` that was already added to the queue",
    32: "Transformation matrix cannot be inverted",
    33: "Invalid units",
    34: "Invalid geometry layout",
    36: "Unknown SRS type",
    37: "Unknown geometry type found",
    38: "`styleMapValue` has an unknown type",
    39: "Unknown geometry type",
    40: "Expected `feature` to have a geometry",
    41: "Expected an `ol/style/Style` or an array of `ol/style/Style.js`",
    42: "Question unknown, the answer is 42",
    43: "Expected `layers` to be an array or a `Collection`",
    47: "Expected `controls` to be an array or an `ol/Collection`",
    48: "Expected `interactions` to be an array or an `ol/Collection`",
    49: "Expected `overlays` to be an array or an `ol/Collection`",
    50: "`options.featureTypes` should be an Array",
    51: "Either `url` or `tileJSON` options must be provided",
    52: "Unknown `serverType` configured",
    53: "Unknown `tierSizeCalculation` configured",
    55: "The {-y} placeholder requires a tile grid with extent",
    56: "mapBrowserEvent must originate from a pointer event",
    57: "At least 2 conditions are required",
    59: "Invalid command found in the PBF",
    60: "Missing or invalid `size`",
    61: "Cannot determine IIIF Image API version from provided image information JSON",
    62: "A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`",
    64: "Layer opacity must be a number",
    66: "`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`",
    67: "A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both",
    68: "A VectorTile source can only be rendered if it has a projection compatible with the view projection",
    69: "`width` or `height` cannot be provided together with `scale`"
};
/**
 * Error object thrown when an assertion failed. This is an ECMA-262 Error,
 * extended with a `code` property.
 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
 */ class $fc1e13bda45b0626$var$AssertionError extends Error {
    /**
   * @param {number} code Error code.
   */ constructor(code){
        const message = $fc1e13bda45b0626$var$messages[code];
        super(message);
        /**
     * Error code. The meaning of the code can be found on
     * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
     * the version found in the OpenLayers script's header comment if a version
     * other than the latest is used).
     * @type {number}
     * @deprecated ol/AssertionError and error codes will be removed in v8.0
     * @api
     */ this.code = code;
        /**
     * @type {string}
     */ this.name = "AssertionError";
        // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
        this.message = message;
    }
}
var $fc1e13bda45b0626$export$2e2bcd8739ae039 = $fc1e13bda45b0626$var$AssertionError;


function $1e19c69d18d8b77c$export$a7a9523472993e97(assertion, errorCode) {
    if (!assertion) throw new (0, $fc1e13bda45b0626$export$2e2bcd8739ae039)(errorCode);
}



/**
 * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
 */ /**
 * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
 */ /***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:geometry', import("./Object").ObjectEvent, Return> &
 *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types
 *     |'change:geometry', Return>} FeatureOnSignature
 */ /***
 * @template Geometry
 * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry
 */ /**
 * @classdesc
 * A vector object for geographic features with a geometry and other
 * attribute properties, similar to the features in vector file formats like
 * GeoJSON.
 *
 * Features can be styled individually with `setStyle`; otherwise they use the
 * style of their vector layer.
 *
 * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on
 * the feature object, so they are observable, and have get/set accessors.
 *
 * Typically, a feature has a single geometry property. You can set the
 * geometry using the `setGeometry` method and get it with `getGeometry`.
 * It is possible to store more than one geometry on a feature using attribute
 * properties. By default, the geometry used for rendering is identified by
 * the property name `geometry`. If you want to use another geometry property
 * for rendering, use the `setGeometryName` method to change the attribute
 * property associated with the geometry for the feature.  For example:
 *
 * ```js
 *
 * import Feature from 'ol/Feature.js';
 * import Polygon from 'ol/geom/Polygon.js';
 * import Point from 'ol/geom/Point.js';
 *
 * const feature = new Feature({
 *   geometry: new Polygon(polyCoords),
 *   labelPoint: new Point(labelCoords),
 *   name: 'My Polygon',
 * });
 *
 * // get the polygon geometry
 * const poly = feature.getGeometry();
 *
 * // Render the feature as a point using the coordinates from labelPoint
 * feature.setGeometryName('labelPoint');
 *
 * // get the point geometry
 * const point = feature.getGeometry();
 * ```
 *
 * @api
 * @template {import("./geom/Geometry.js").default} [Geometry=import("./geom/Geometry.js").default]
 */ class $488541e07685eb37$var$Feature extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]
   *     You may pass a Geometry object directly, or an object literal containing
   *     properties. If you pass an object literal, you may include a Geometry
   *     associated with a `geometry` key.
   */ constructor(geometryOrProperties){
        super();
        /***
     * @type {FeatureOnSignature<import("./events").EventsKey>}
     */ this.on;
        /***
     * @type {FeatureOnSignature<import("./events").EventsKey>}
     */ this.once;
        /***
     * @type {FeatureOnSignature<void>}
     */ this.un;
        /**
     * @private
     * @type {number|string|undefined}
     */ this.id_ = undefined;
        /**
     * @type {string}
     * @private
     */ this.geometryName_ = "geometry";
        /**
     * User provided style.
     * @private
     * @type {import("./style/Style.js").StyleLike}
     */ this.style_ = null;
        /**
     * @private
     * @type {import("./style/Style.js").StyleFunction|undefined}
     */ this.styleFunction_ = undefined;
        /**
     * @private
     * @type {?import("./events.js").EventsKey}
     */ this.geometryChangeKey_ = null;
        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
        if (geometryOrProperties) {
            if (typeof /** @type {?} */ geometryOrProperties.getSimplifiedGeometry === "function") {
                const geometry = /** @type {Geometry} */ geometryOrProperties;
                this.setGeometry(geometry);
            } else {
                /** @type {Object<string, *>} */ const properties = geometryOrProperties;
                this.setProperties(properties);
            }
        }
    }
    /**
   * Clone this feature. If the original feature has a geometry it
   * is also cloned. The feature id is not set in the clone.
   * @return {Feature<Geometry>} The clone.
   * @api
   */ clone() {
        const clone = /** @type {Feature<Geometry>} */ new $488541e07685eb37$var$Feature(this.hasProperties() ? this.getProperties() : null);
        clone.setGeometryName(this.getGeometryName());
        const geometry = this.getGeometry();
        if (geometry) clone.setGeometry(/** @type {Geometry} */ geometry.clone());
        const style = this.getStyle();
        if (style) clone.setStyle(style);
        return clone;
    }
    /**
   * Get the feature's default geometry.  A feature may have any number of named
   * geometries.  The "default" geometry (the one that is rendered by default) is
   * set when calling {@link module:ol/Feature~Feature#setGeometry}.
   * @return {Geometry|undefined} The default geometry for the feature.
   * @api
   * @observable
   */ getGeometry() {
        return /** @type {Geometry|undefined} */ this.get(this.geometryName_);
    }
    /**
   * Get the feature identifier.  This is a stable identifier for the feature and
   * is either set when reading data from a remote source or set explicitly by
   * calling {@link module:ol/Feature~Feature#setId}.
   * @return {number|string|undefined} Id.
   * @api
   */ getId() {
        return this.id_;
    }
    /**
   * Get the name of the feature's default geometry.  By default, the default
   * geometry is named `geometry`.
   * @return {string} Get the property name associated with the default geometry
   *     for this feature.
   * @api
   */ getGeometryName() {
        return this.geometryName_;
    }
    /**
   * Get the feature's style. Will return what was provided to the
   * {@link module:ol/Feature~Feature#setStyle} method.
   * @return {import("./style/Style.js").StyleLike|undefined} The feature style.
   * @api
   */ getStyle() {
        return this.style_;
    }
    /**
   * Get the feature's style function.
   * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
   * representing the current style of this feature.
   * @api
   */ getStyleFunction() {
        return this.styleFunction_;
    }
    /**
   * @private
   */ handleGeometryChange_() {
        this.changed();
    }
    /**
   * @private
   */ handleGeometryChanged_() {
        if (this.geometryChangeKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.geometryChangeKey_);
            this.geometryChangeKey_ = null;
        }
        const geometry = this.getGeometry();
        if (geometry) this.geometryChangeKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(geometry, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.handleGeometryChange_, this);
        this.changed();
    }
    /**
   * Set the default geometry for the feature.  This will update the property
   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
   * @param {Geometry|undefined} geometry The new geometry.
   * @api
   * @observable
   */ setGeometry(geometry) {
        this.set(this.geometryName_, geometry);
    }
    /**
   * Set the style for the feature to override the layer style.  This can be a
   * single style object, an array of styles, or a function that takes a
   * resolution and returns an array of styles. To unset the feature style, call
   * `setStyle()` without arguments or a falsey value.
   * @param {import("./style/Style.js").StyleLike} [style] Style for this feature.
   * @api
   * @fires module:ol/events/Event~BaseEvent#event:change
   */ setStyle(style) {
        this.style_ = style;
        this.styleFunction_ = !style ? undefined : $488541e07685eb37$export$bb06ddfd5d66e02e(style);
        this.changed();
    }
    /**
   * Set the feature id.  The feature id is considered stable and may be used when
   * requesting features or comparing identifiers returned from a remote source.
   * The feature id can be used with the
   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
   * @param {number|string|undefined} id The feature id.
   * @api
   * @fires module:ol/events/Event~BaseEvent#event:change
   */ setId(id) {
        this.id_ = id;
        this.changed();
    }
    /**
   * Set the property name to be used when getting the feature's default geometry.
   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
   * this name will be returned.
   * @param {string} name The property name of the default geometry.
   * @api
   */ setGeometryName(name) {
        this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);
        this.geometryName_ = name;
        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
        this.handleGeometryChanged_();
    }
}
function $488541e07685eb37$export$bb06ddfd5d66e02e(obj) {
    if (typeof obj === "function") return obj;
    /**
   * @type {Array<import("./style/Style.js").default>}
   */ let styles;
    if (Array.isArray(obj)) styles = obj;
    else {
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof /** @type {?} */ obj.getZIndex === "function", 41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
        const style = /** @type {import("./style/Style.js").default} */ obj;
        styles = [
            style
        ];
    }
    return function() {
        return styles;
    };
}
var $488541e07685eb37$export$2e2bcd8739ae039 = $488541e07685eb37$var$Feature;

/**
 * @module ol/Map
 */ 
/**
 * @module ol/Collection
 */ 

/**
 * @module ol/CollectionEventType
 */ /**
 * @enum {string}
 */ var $df86962829eabf3c$export$2e2bcd8739ae039 = {
    /**
   * Triggered when an item is added to the collection.
   * @event module:ol/Collection.CollectionEvent#add
   * @api
   */ ADD: "add",
    /**
   * Triggered when an item is removed from the collection.
   * @event module:ol/Collection.CollectionEvent#remove
   * @api
   */ REMOVE: "remove"
};



/**
 * @enum {string}
 * @private
 */ const $6ba3969272323605$var$Property = {
    LENGTH: "length"
};
class $6ba3969272323605$export$a87ae6eb2761ec6d extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {import("./CollectionEventType.js").default} type Type.
   * @param {T} element Element.
   * @param {number} index The index of the added or removed element.
   */ constructor(type, element, index){
        super(type);
        /**
     * The element that is added to or removed from the collection.
     * @type {T}
     * @api
     */ this.element = element;
        /**
     * The index of the added or removed element.
     * @type {number}
     * @api
     */ this.index = index;
    }
}
/***
 * @template T
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:length', import("./Object").ObjectEvent, Return> &
 *   import("./Observable").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &
 *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types|
 *     'change:length'|'add'|'remove',Return>} CollectionOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {boolean} [unique=false] Disallow the same item from being added to
 * the collection twice.
 */ /**
 * @classdesc
 * An expanded version of standard JS Array, adding convenience methods for
 * manipulation. Add and remove changes to the Collection trigger a Collection
 * event. Note that this does not cover changes to the objects _within_ the
 * Collection; they trigger events on the appropriate object, not on the
 * Collection as a whole.
 *
 * @fires CollectionEvent
 *
 * @template T
 * @api
 */ class $6ba3969272323605$var$Collection extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {Array<T>} [array] Array.
   * @param {Options} [options] Collection options.
   */ constructor(array, options){
        super();
        /***
     * @type {CollectionOnSignature<T, import("./events").EventsKey>}
     */ this.on;
        /***
     * @type {CollectionOnSignature<T, import("./events").EventsKey>}
     */ this.once;
        /***
     * @type {CollectionOnSignature<T, void>}
     */ this.un;
        options = options || {};
        /**
     * @private
     * @type {boolean}
     */ this.unique_ = !!options.unique;
        /**
     * @private
     * @type {!Array<T>}
     */ this.array_ = array ? array : [];
        if (this.unique_) for(let i = 0, ii = this.array_.length; i < ii; ++i)this.assertUnique_(this.array_[i], i);
        this.updateLength_();
    }
    /**
   * Remove all elements from the collection.
   * @api
   */ clear() {
        while(this.getLength() > 0)this.pop();
    }
    /**
   * Add elements to the collection.  This pushes each item in the provided array
   * to the end of the collection.
   * @param {!Array<T>} arr Array.
   * @return {Collection<T>} This collection.
   * @api
   */ extend(arr) {
        for(let i = 0, ii = arr.length; i < ii; ++i)this.push(arr[i]);
        return this;
    }
    /**
   * Iterate over each element, calling the provided callback.
   * @param {function(T, number, Array<T>): *} f The function to call
   *     for every element. This function takes 3 arguments (the element, the
   *     index and the array). The return value is ignored.
   * @api
   */ forEach(f) {
        const array = this.array_;
        for(let i = 0, ii = array.length; i < ii; ++i)f(array[i], i, array);
    }
    /**
   * Get a reference to the underlying Array object. Warning: if the array
   * is mutated, no events will be dispatched by the collection, and the
   * collection's "length" property won't be in sync with the actual length
   * of the array.
   * @return {!Array<T>} Array.
   * @api
   */ getArray() {
        return this.array_;
    }
    /**
   * Get the element at the provided index.
   * @param {number} index Index.
   * @return {T} Element.
   * @api
   */ item(index) {
        return this.array_[index];
    }
    /**
   * Get the length of this collection.
   * @return {number} The length of the array.
   * @observable
   * @api
   */ getLength() {
        return this.get($6ba3969272323605$var$Property.LENGTH);
    }
    /**
   * Insert an element at the provided index.
   * @param {number} index Index.
   * @param {T} elem Element.
   * @api
   */ insertAt(index, elem) {
        if (index < 0 || index > this.getLength()) throw new Error("Index out of bounds: " + index);
        if (this.unique_) this.assertUnique_(elem);
        this.array_.splice(index, 0, elem);
        this.updateLength_();
        this.dispatchEvent(new $6ba3969272323605$export$a87ae6eb2761ec6d((0, $df86962829eabf3c$export$2e2bcd8739ae039).ADD, elem, index));
    }
    /**
   * Remove the last element of the collection and return it.
   * Return `undefined` if the collection is empty.
   * @return {T|undefined} Element.
   * @api
   */ pop() {
        return this.removeAt(this.getLength() - 1);
    }
    /**
   * Insert the provided element at the end of the collection.
   * @param {T} elem Element.
   * @return {number} New length of the collection.
   * @api
   */ push(elem) {
        if (this.unique_) this.assertUnique_(elem);
        const n = this.getLength();
        this.insertAt(n, elem);
        return this.getLength();
    }
    /**
   * Remove the first occurrence of an element from the collection.
   * @param {T} elem Element.
   * @return {T|undefined} The removed element or undefined if none found.
   * @api
   */ remove(elem) {
        const arr = this.array_;
        for(let i = 0, ii = arr.length; i < ii; ++i){
            if (arr[i] === elem) return this.removeAt(i);
        }
        return undefined;
    }
    /**
   * Remove the element at the provided index and return it.
   * Return `undefined` if the collection does not contain this index.
   * @param {number} index Index.
   * @return {T|undefined} Value.
   * @api
   */ removeAt(index) {
        if (index < 0 || index >= this.getLength()) return undefined;
        const prev = this.array_[index];
        this.array_.splice(index, 1);
        this.updateLength_();
        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $6ba3969272323605$export$a87ae6eb2761ec6d((0, $df86962829eabf3c$export$2e2bcd8739ae039).REMOVE, prev, index));
        return prev;
    }
    /**
   * Set the element at the provided index.
   * @param {number} index Index.
   * @param {T} elem Element.
   * @api
   */ setAt(index, elem) {
        const n = this.getLength();
        if (index >= n) {
            this.insertAt(index, elem);
            return;
        }
        if (index < 0) throw new Error("Index out of bounds: " + index);
        if (this.unique_) this.assertUnique_(elem, index);
        const prev = this.array_[index];
        this.array_[index] = elem;
        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $6ba3969272323605$export$a87ae6eb2761ec6d((0, $df86962829eabf3c$export$2e2bcd8739ae039).REMOVE, prev, index));
        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $6ba3969272323605$export$a87ae6eb2761ec6d((0, $df86962829eabf3c$export$2e2bcd8739ae039).ADD, elem, index));
    }
    /**
   * @private
   */ updateLength_() {
        this.set($6ba3969272323605$var$Property.LENGTH, this.array_.length);
    }
    /**
   * @private
   * @param {T} elem Element.
   * @param {number} [except] Optional index to ignore.
   */ assertUnique_(elem, except) {
        for(let i = 0, ii = this.array_.length; i < ii; ++i){
            if (this.array_[i] === elem && i !== except) throw new (0, $fc1e13bda45b0626$export$2e2bcd8739ae039)(58);
        }
    }
}
var $6ba3969272323605$export$2e2bcd8739ae039 = $6ba3969272323605$var$Collection;



/**
 * @module ol/renderer/Composite
 */ /**
 * @module ol/renderer/Map
 */ 


/**
 * @module ol/transform
 */ /**
 * @module ol/has
 */ const $253e11c6a01eb5bc$var$ua = typeof navigator !== "undefined" && typeof navigator.userAgent !== "undefined" ? navigator.userAgent.toLowerCase() : "";
const $253e11c6a01eb5bc$export$8442bdfd18b7b8a6 = $253e11c6a01eb5bc$var$ua.includes("firefox");
const $253e11c6a01eb5bc$export$3227bfbdaa9275de = $253e11c6a01eb5bc$var$ua.includes("safari") && !$253e11c6a01eb5bc$var$ua.includes("chrom");
const $253e11c6a01eb5bc$export$b23eed0e325a206a = $253e11c6a01eb5bc$export$3227bfbdaa9275de && ($253e11c6a01eb5bc$var$ua.includes("version/15.4") || /cpu (os|iphone os) 15_4 like mac os x/.test($253e11c6a01eb5bc$var$ua));
const $253e11c6a01eb5bc$export$39dfd62a25e0fe93 = $253e11c6a01eb5bc$var$ua.includes("webkit") && !$253e11c6a01eb5bc$var$ua.includes("edge");
const $253e11c6a01eb5bc$export$76c0a3b101d93136 = $253e11c6a01eb5bc$var$ua.includes("macintosh");
const $253e11c6a01eb5bc$export$6b83a0446fc26f94 = typeof devicePixelRatio !== "undefined" ? devicePixelRatio : 1;
const $253e11c6a01eb5bc$export$98fcef3dc9973292 = typeof WorkerGlobalScope !== "undefined" && typeof OffscreenCanvas !== "undefined" && self instanceof WorkerGlobalScope; //eslint-disable-line
const $253e11c6a01eb5bc$export$716f8695eedb9bad = typeof Image !== "undefined" && Image.prototype.decode;
const $253e11c6a01eb5bc$export$f751ce96c6c4e4fc = function() {
    let passive = false;
    try {
        const options = Object.defineProperty({}, "passive", {
            get: function() {
                passive = true;
            }
        });
        window.addEventListener("_", null, options);
        window.removeEventListener("_", null, options);
    } catch (error) {
    // passive not supported
    }
    return passive;
}();



/**
 * An array representing an affine 2d transformation for use with
 * {@link module:ol/transform} functions. The array has 6 elements.
 * @typedef {!Array<number>} Transform
 * @api
 */ /**
 * Collection of affine 2d transformation functions. The functions work on an
 * array of 6 elements. The element order is compatible with the [SVGMatrix
 * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
 * a subset (elements a to f) of a 3×3 matrix:
 * ```
 * [ a c e ]
 * [ b d f ]
 * [ 0 0 1 ]
 * ```
 */ /**
 * @private
 * @type {Transform}
 */ const $d59a735b25ae191a$var$tmp_ = new Array(6);
function $d59a735b25ae191a$export$185802fd694ee1f5() {
    return [
        1,
        0,
        0,
        1,
        0,
        0
    ];
}
function $d59a735b25ae191a$export$aad8462122ac592b(transform) {
    return $d59a735b25ae191a$export$adaa4cf7ef1b65be(transform, 1, 0, 0, 1, 0, 0);
}
function $d59a735b25ae191a$export$2060d2db72cce88f(transform1, transform2) {
    const a1 = transform1[0];
    const b1 = transform1[1];
    const c1 = transform1[2];
    const d1 = transform1[3];
    const e1 = transform1[4];
    const f1 = transform1[5];
    const a2 = transform2[0];
    const b2 = transform2[1];
    const c2 = transform2[2];
    const d2 = transform2[3];
    const e2 = transform2[4];
    const f2 = transform2[5];
    transform1[0] = a1 * a2 + c1 * b2;
    transform1[1] = b1 * a2 + d1 * b2;
    transform1[2] = a1 * c2 + c1 * d2;
    transform1[3] = b1 * c2 + d1 * d2;
    transform1[4] = a1 * e2 + c1 * f2 + e1;
    transform1[5] = b1 * e2 + d1 * f2 + f1;
    return transform1;
}
function $d59a735b25ae191a$export$adaa4cf7ef1b65be(transform, a, b, c, d, e, f) {
    transform[0] = a;
    transform[1] = b;
    transform[2] = c;
    transform[3] = d;
    transform[4] = e;
    transform[5] = f;
    return transform;
}
function $d59a735b25ae191a$export$42b4187a82d80ed0(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
}
function $d59a735b25ae191a$export$5635d7ef4b8fee1c(transform, coordinate) {
    const x = coordinate[0];
    const y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
}
function $d59a735b25ae191a$export$bb628a54ab399bc9(transform, angle) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    return $d59a735b25ae191a$export$2060d2db72cce88f(transform, $d59a735b25ae191a$export$adaa4cf7ef1b65be($d59a735b25ae191a$var$tmp_, cos, sin, -sin, cos, 0, 0));
}
function $d59a735b25ae191a$export$dcdf75081b88279d(transform, x, y) {
    return $d59a735b25ae191a$export$2060d2db72cce88f(transform, $d59a735b25ae191a$export$adaa4cf7ef1b65be($d59a735b25ae191a$var$tmp_, x, 0, 0, y, 0, 0));
}
function $d59a735b25ae191a$export$3e4e33ea14aeb531(target, x, y) {
    return $d59a735b25ae191a$export$adaa4cf7ef1b65be(target, x, 0, 0, y, 0, 0);
}
function $d59a735b25ae191a$export$d73ee8ef04f5226a(transform, dx, dy) {
    return $d59a735b25ae191a$export$2060d2db72cce88f(transform, $d59a735b25ae191a$export$adaa4cf7ef1b65be($d59a735b25ae191a$var$tmp_, 1, 0, 0, 1, dx, dy));
}
function $d59a735b25ae191a$export$f672e0b6f7222cd7(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    const sin = Math.sin(angle);
    const cos = Math.cos(angle);
    transform[0] = sx * cos;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * cos;
    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
    return transform;
}
function $d59a735b25ae191a$export$12a96a1aaf5558e3(dx1, dy1, sx, sy, angle, dx2, dy2) {
    return $d59a735b25ae191a$export$f84e8e69fd4488a5($d59a735b25ae191a$export$f672e0b6f7222cd7($d59a735b25ae191a$export$185802fd694ee1f5(), dx1, dy1, sx, sy, angle, dx2, dy2));
}
function $d59a735b25ae191a$export$6897c284b6f9f4dc(source) {
    return $d59a735b25ae191a$export$bd70ea2a93c0fa4(source, source);
}
function $d59a735b25ae191a$export$bd70ea2a93c0fa4(target, source) {
    const det = $d59a735b25ae191a$export$a04698f914c55ed9(source);
    (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(det !== 0, 32); // Transformation matrix cannot be inverted
    const a = source[0];
    const b = source[1];
    const c = source[2];
    const d = source[3];
    const e = source[4];
    const f = source[5];
    target[0] = d / det;
    target[1] = -b / det;
    target[2] = -c / det;
    target[3] = a / det;
    target[4] = (c * f - d * e) / det;
    target[5] = -(a * f - b * e) / det;
    return target;
}
function $d59a735b25ae191a$export$a04698f914c55ed9(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
}
/**
 * @type {HTMLElement}
 * @private
 */ let $d59a735b25ae191a$var$transformStringDiv;
function $d59a735b25ae191a$export$f84e8e69fd4488a5(mat) {
    const transformString = "matrix(" + mat.join(", ") + ")";
    if (0, $253e11c6a01eb5bc$export$98fcef3dc9973292) return transformString;
    const node = $d59a735b25ae191a$var$transformStringDiv || ($d59a735b25ae191a$var$transformStringDiv = document.createElement("div"));
    node.style.transform = transformString;
    return node.style.transform;
}


/**
 * @module ol/extent
 */ /**
 * @module ol/extent/Relationship
 */ /**
 * Relationship to an extent.
 * @enum {number}
 */ var $3b21d84e5edf3751$export$2e2bcd8739ae039 = {
    UNKNOWN: 0,
    INTERSECTING: 1,
    ABOVE: 2,
    RIGHT: 4,
    BELOW: 8,
    LEFT: 16
};



function $84be800ca44e672c$export$8aceca7c77505534(coordinates) {
    const extent = $84be800ca44e672c$export$fe201bb3bbe031e9();
    for(let i = 0, ii = coordinates.length; i < ii; ++i)$84be800ca44e672c$export$1f820e3920fa5715(extent, coordinates[i]);
    return extent;
}
/**
 * @param {Array<number>} xs Xs.
 * @param {Array<number>} ys Ys.
 * @param {Extent} [dest] Destination extent.
 * @private
 * @return {Extent} Extent.
 */ function $84be800ca44e672c$var$_boundingExtentXYs(xs, ys, dest) {
    const minX = Math.min.apply(null, xs);
    const minY = Math.min.apply(null, ys);
    const maxX = Math.max.apply(null, xs);
    const maxY = Math.max.apply(null, ys);
    return $84be800ca44e672c$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest);
}
function $84be800ca44e672c$export$ab1029bcae9ddb4a(extent, value, dest) {
    if (dest) {
        dest[0] = extent[0] - value;
        dest[1] = extent[1] - value;
        dest[2] = extent[2] + value;
        dest[3] = extent[3] + value;
        return dest;
    }
    return [
        extent[0] - value,
        extent[1] - value,
        extent[2] + value,
        extent[3] + value
    ];
}
function $84be800ca44e672c$export$9cd59f9826255e47(extent, dest) {
    if (dest) {
        dest[0] = extent[0];
        dest[1] = extent[1];
        dest[2] = extent[2];
        dest[3] = extent[3];
        return dest;
    }
    return extent.slice();
}
function $84be800ca44e672c$export$cbe64c389534206f(extent, x, y) {
    let dx, dy;
    if (x < extent[0]) dx = extent[0] - x;
    else if (extent[2] < x) dx = x - extent[2];
    else dx = 0;
    if (y < extent[1]) dy = extent[1] - y;
    else if (extent[3] < y) dy = y - extent[3];
    else dy = 0;
    return dx * dx + dy * dy;
}
function $84be800ca44e672c$export$ac68c24d37ca240f(extent, coordinate) {
    return $84be800ca44e672c$export$805bdfd6d6690e97(extent, coordinate[0], coordinate[1]);
}
function $84be800ca44e672c$export$be866b1e0809b17e(extent1, extent2) {
    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
}
function $84be800ca44e672c$export$805bdfd6d6690e97(extent, x, y) {
    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
}
function $84be800ca44e672c$export$f97905ead28c61a8(extent, coordinate) {
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const x = coordinate[0];
    const y = coordinate[1];
    let relationship = (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).UNKNOWN;
    if (x < minX) relationship = relationship | (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).LEFT;
    else if (x > maxX) relationship = relationship | (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).RIGHT;
    if (y < minY) relationship = relationship | (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).BELOW;
    else if (y > maxY) relationship = relationship | (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).ABOVE;
    if (relationship === (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).UNKNOWN) relationship = (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).INTERSECTING;
    return relationship;
}
function $84be800ca44e672c$export$fe201bb3bbe031e9() {
    return [
        Infinity,
        Infinity,
        -Infinity,
        -Infinity
    ];
}
function $84be800ca44e672c$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest) {
    if (dest) {
        dest[0] = minX;
        dest[1] = minY;
        dest[2] = maxX;
        dest[3] = maxY;
        return dest;
    }
    return [
        minX,
        minY,
        maxX,
        maxY
    ];
}
function $84be800ca44e672c$export$3e2152b047719fa1(dest) {
    return $84be800ca44e672c$export$958e3e1a02eac4b6(Infinity, Infinity, -Infinity, -Infinity, dest);
}
function $84be800ca44e672c$export$4838bf78d04a9440(coordinate, dest) {
    const x = coordinate[0];
    const y = coordinate[1];
    return $84be800ca44e672c$export$958e3e1a02eac4b6(x, y, x, y, dest);
}
function $84be800ca44e672c$export$29e3ad4dbd0cb863(coordinates, dest) {
    const extent = $84be800ca44e672c$export$3e2152b047719fa1(dest);
    return $84be800ca44e672c$export$795cd48be4d5f252(extent, coordinates);
}
function $84be800ca44e672c$export$be0ab0bf96ca59ca(flatCoordinates, offset, end, stride, dest) {
    const extent = $84be800ca44e672c$export$3e2152b047719fa1(dest);
    return $84be800ca44e672c$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride);
}
function $84be800ca44e672c$export$73b4897e93bc5c83(rings, dest) {
    const extent = $84be800ca44e672c$export$3e2152b047719fa1(dest);
    return $84be800ca44e672c$export$9b319549574402d7(extent, rings);
}
function $84be800ca44e672c$export$e9bab7fafb253603(extent1, extent2) {
    return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];
}
function $84be800ca44e672c$export$998afeab28643bd6(extent1, extent2, tolerance) {
    return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;
}
function $84be800ca44e672c$export$8b58be045bf06082(extent1, extent2) {
    if (extent2[0] < extent1[0]) extent1[0] = extent2[0];
    if (extent2[2] > extent1[2]) extent1[2] = extent2[2];
    if (extent2[1] < extent1[1]) extent1[1] = extent2[1];
    if (extent2[3] > extent1[3]) extent1[3] = extent2[3];
    return extent1;
}
function $84be800ca44e672c$export$1f820e3920fa5715(extent, coordinate) {
    if (coordinate[0] < extent[0]) extent[0] = coordinate[0];
    if (coordinate[0] > extent[2]) extent[2] = coordinate[0];
    if (coordinate[1] < extent[1]) extent[1] = coordinate[1];
    if (coordinate[1] > extent[3]) extent[3] = coordinate[1];
}
function $84be800ca44e672c$export$795cd48be4d5f252(extent, coordinates) {
    for(let i = 0, ii = coordinates.length; i < ii; ++i)$84be800ca44e672c$export$1f820e3920fa5715(extent, coordinates[i]);
    return extent;
}
function $84be800ca44e672c$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride) {
    for(; offset < end; offset += stride)$84be800ca44e672c$export$f1dab130b92b85a9(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
    return extent;
}
function $84be800ca44e672c$export$9b319549574402d7(extent, rings) {
    for(let i = 0, ii = rings.length; i < ii; ++i)$84be800ca44e672c$export$795cd48be4d5f252(extent, rings[i]);
    return extent;
}
function $84be800ca44e672c$export$f1dab130b92b85a9(extent, x, y) {
    extent[0] = Math.min(extent[0], x);
    extent[1] = Math.min(extent[1], y);
    extent[2] = Math.max(extent[2], x);
    extent[3] = Math.max(extent[3], y);
}
function $84be800ca44e672c$export$f9ed8a3d123a08e2(extent, callback) {
    let val;
    val = callback($84be800ca44e672c$export$8d09f5e2e1bf560d(extent));
    if (val) return val;
    val = callback($84be800ca44e672c$export$e77c1cf70445e168(extent));
    if (val) return val;
    val = callback($84be800ca44e672c$export$b84fa077c8b05295(extent));
    if (val) return val;
    val = callback($84be800ca44e672c$export$cb1538b07e6964ff(extent));
    if (val) return val;
    return false;
}
function $84be800ca44e672c$export$520c40045967cb15(extent) {
    let area = 0;
    if (!$84be800ca44e672c$export$dd1bc94b04021eeb(extent)) area = $84be800ca44e672c$export$3c49c185de0c2bfc(extent) * $84be800ca44e672c$export$c08559766941f856(extent);
    return area;
}
function $84be800ca44e672c$export$8d09f5e2e1bf560d(extent) {
    return [
        extent[0],
        extent[1]
    ];
}
function $84be800ca44e672c$export$e77c1cf70445e168(extent) {
    return [
        extent[2],
        extent[1]
    ];
}
function $84be800ca44e672c$export$c91255cadecfe081(extent) {
    return [
        (extent[0] + extent[2]) / 2,
        (extent[1] + extent[3]) / 2
    ];
}
function $84be800ca44e672c$export$a1cfd206661d0801(extent, corner) {
    let coordinate;
    if (corner === "bottom-left") coordinate = $84be800ca44e672c$export$8d09f5e2e1bf560d(extent);
    else if (corner === "bottom-right") coordinate = $84be800ca44e672c$export$e77c1cf70445e168(extent);
    else if (corner === "top-left") coordinate = $84be800ca44e672c$export$cb1538b07e6964ff(extent);
    else if (corner === "top-right") coordinate = $84be800ca44e672c$export$b84fa077c8b05295(extent);
    else (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(false, 13); // Invalid corner
    return coordinate;
}
function $84be800ca44e672c$export$7d6fa884b32a3751(extent1, extent2) {
    const minX = Math.min(extent1[0], extent2[0]);
    const minY = Math.min(extent1[1], extent2[1]);
    const maxX = Math.max(extent1[2], extent2[2]);
    const maxY = Math.max(extent1[3], extent2[3]);
    return (maxX - minX) * (maxY - minY);
}
function $84be800ca44e672c$export$13ba650faf8308(center, resolution, rotation, size, dest) {
    const [x0, y0, x1, y1, x2, y2, x3, y3] = $84be800ca44e672c$export$4b7a6fb4002cd6ac(center, resolution, rotation, size);
    return $84be800ca44e672c$export$958e3e1a02eac4b6(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), dest);
}
function $84be800ca44e672c$export$4b7a6fb4002cd6ac(center, resolution, rotation, size) {
    const dx = resolution * size[0] / 2;
    const dy = resolution * size[1] / 2;
    const cosRotation = Math.cos(rotation);
    const sinRotation = Math.sin(rotation);
    const xCos = dx * cosRotation;
    const xSin = dx * sinRotation;
    const yCos = dy * cosRotation;
    const ySin = dy * sinRotation;
    const x = center[0];
    const y = center[1];
    return [
        x - xCos + ySin,
        y - xSin - yCos,
        x - xCos - ySin,
        y - xSin + yCos,
        x + xCos - ySin,
        y + xSin + yCos,
        x + xCos + ySin,
        y + xSin - yCos,
        x - xCos + ySin,
        y - xSin - yCos
    ];
}
function $84be800ca44e672c$export$c08559766941f856(extent) {
    return extent[3] - extent[1];
}
function $84be800ca44e672c$export$f3fe0e9a60cde324(extent1, extent2) {
    const intersection = $84be800ca44e672c$export$72209efa88586d42(extent1, extent2);
    return $84be800ca44e672c$export$520c40045967cb15(intersection);
}
function $84be800ca44e672c$export$72209efa88586d42(extent1, extent2, dest) {
    const intersection = dest ? dest : $84be800ca44e672c$export$fe201bb3bbe031e9();
    if ($84be800ca44e672c$export$7b0a31e10bbff018(extent1, extent2)) {
        if (extent1[0] > extent2[0]) intersection[0] = extent1[0];
        else intersection[0] = extent2[0];
        if (extent1[1] > extent2[1]) intersection[1] = extent1[1];
        else intersection[1] = extent2[1];
        if (extent1[2] < extent2[2]) intersection[2] = extent1[2];
        else intersection[2] = extent2[2];
        if (extent1[3] < extent2[3]) intersection[3] = extent1[3];
        else intersection[3] = extent2[3];
    } else $84be800ca44e672c$export$3e2152b047719fa1(intersection);
    return intersection;
}
function $84be800ca44e672c$export$1bc603050bd777b1(extent) {
    return $84be800ca44e672c$export$3c49c185de0c2bfc(extent) + $84be800ca44e672c$export$c08559766941f856(extent);
}
function $84be800ca44e672c$export$31b21d0167753bb4(extent) {
    return [
        extent[2] - extent[0],
        extent[3] - extent[1]
    ];
}
function $84be800ca44e672c$export$cb1538b07e6964ff(extent) {
    return [
        extent[0],
        extent[3]
    ];
}
function $84be800ca44e672c$export$b84fa077c8b05295(extent) {
    return [
        extent[2],
        extent[3]
    ];
}
function $84be800ca44e672c$export$3c49c185de0c2bfc(extent) {
    return extent[2] - extent[0];
}
function $84be800ca44e672c$export$7b0a31e10bbff018(extent1, extent2) {
    return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];
}
function $84be800ca44e672c$export$dd1bc94b04021eeb(extent) {
    return extent[2] < extent[0] || extent[3] < extent[1];
}
function $84be800ca44e672c$export$6a4fe494c558c238(extent, dest) {
    if (dest) {
        dest[0] = extent[0];
        dest[1] = extent[1];
        dest[2] = extent[2];
        dest[3] = extent[3];
        return dest;
    }
    return extent;
}
function $84be800ca44e672c$export$80cbab86674143b6(extent, value) {
    const deltaX = (extent[2] - extent[0]) / 2 * (value - 1);
    const deltaY = (extent[3] - extent[1]) / 2 * (value - 1);
    extent[0] -= deltaX;
    extent[2] += deltaX;
    extent[1] -= deltaY;
    extent[3] += deltaY;
}
function $84be800ca44e672c$export$a6a5a7a461419425(extent, start, end) {
    let intersects = false;
    const startRel = $84be800ca44e672c$export$f97905ead28c61a8(extent, start);
    const endRel = $84be800ca44e672c$export$f97905ead28c61a8(extent, end);
    if (startRel === (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).INTERSECTING || endRel === (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).INTERSECTING) intersects = true;
    else {
        const minX = extent[0];
        const minY = extent[1];
        const maxX = extent[2];
        const maxY = extent[3];
        const startX = start[0];
        const startY = start[1];
        const endX = end[0];
        const endY = end[1];
        const slope = (endY - startY) / (endX - startX);
        let x, y;
        if (!!(endRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).ABOVE) && !(startRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).ABOVE)) {
            // potentially intersects top
            x = endX - (endY - maxY) / slope;
            intersects = x >= minX && x <= maxX;
        }
        if (!intersects && !!(endRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).RIGHT) && !(startRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).RIGHT)) {
            // potentially intersects right
            y = endY - (endX - maxX) * slope;
            intersects = y >= minY && y <= maxY;
        }
        if (!intersects && !!(endRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).BELOW) && !(startRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).BELOW)) {
            // potentially intersects bottom
            x = endX - (endY - minY) / slope;
            intersects = x >= minX && x <= maxX;
        }
        if (!intersects && !!(endRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).LEFT) && !(startRel & (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).LEFT)) {
            // potentially intersects left
            y = endY - (endX - minX) * slope;
            intersects = y >= minY && y <= maxY;
        }
    }
    return intersects;
}
function $84be800ca44e672c$export$9f9dcb98c894b623(extent, transformFn, dest, stops) {
    if ($84be800ca44e672c$export$dd1bc94b04021eeb(extent)) return $84be800ca44e672c$export$3e2152b047719fa1(dest);
    let coordinates = [];
    if (stops > 1) {
        const width = extent[2] - extent[0];
        const height = extent[3] - extent[1];
        for(let i = 0; i < stops; ++i)coordinates.push(extent[0] + width * i / stops, extent[1], extent[2], extent[1] + height * i / stops, extent[2] - width * i / stops, extent[3], extent[0], extent[3] - height * i / stops);
    } else coordinates = [
        extent[0],
        extent[1],
        extent[2],
        extent[1],
        extent[2],
        extent[3],
        extent[0],
        extent[3]
    ];
    transformFn(coordinates, coordinates, 2);
    const xs = [];
    const ys = [];
    for(let i = 0, l = coordinates.length; i < l; i += 2){
        xs.push(coordinates[i]);
        ys.push(coordinates[i + 1]);
    }
    return $84be800ca44e672c$var$_boundingExtentXYs(xs, ys, dest);
}
function $84be800ca44e672c$export$39a9ce3624977b84(extent, projection) {
    const projectionExtent = projection.getExtent();
    const center = $84be800ca44e672c$export$c91255cadecfe081(extent);
    if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {
        const worldWidth = $84be800ca44e672c$export$3c49c185de0c2bfc(projectionExtent);
        const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);
        const offset = worldsAway * worldWidth;
        extent[0] -= offset;
        extent[2] -= offset;
    }
    return extent;
}
function $84be800ca44e672c$export$9031237f01de0947(extent, projection) {
    if (projection.canWrapX()) {
        const projectionExtent = projection.getExtent();
        if (!isFinite(extent[0]) || !isFinite(extent[2])) return [
            [
                projectionExtent[0],
                extent[1],
                projectionExtent[2],
                extent[3]
            ]
        ];
        $84be800ca44e672c$export$39a9ce3624977b84(extent, projection);
        const worldWidth = $84be800ca44e672c$export$3c49c185de0c2bfc(projectionExtent);
        if ($84be800ca44e672c$export$3c49c185de0c2bfc(extent) > worldWidth) // the extent wraps around on itself
        return [
            [
                projectionExtent[0],
                extent[1],
                projectionExtent[2],
                extent[3]
            ]
        ];
        if (extent[0] < projectionExtent[0]) // the extent crosses the anti meridian, so it needs to be sliced
        return [
            [
                extent[0] + worldWidth,
                extent[1],
                projectionExtent[2],
                extent[3]
            ],
            [
                projectionExtent[0],
                extent[1],
                extent[2],
                extent[3]
            ]
        ];
        if (extent[2] > projectionExtent[2]) // the extent crosses the anti meridian, so it needs to be sliced
        return [
            [
                extent[0],
                extent[1],
                projectionExtent[2],
                extent[3]
            ],
            [
                projectionExtent[0],
                extent[1],
                extent[2] - worldWidth,
                extent[3]
            ]
        ];
    }
    return [
        extent
    ];
}


/**
 * @module ol/style/IconImageCache
 */ /**
 * @module ol/color
 */ 
/**
 * @module ol/math
 */ /**
 * Takes a number and clamps it to within the provided bounds.
 * @param {number} value The input number.
 * @param {number} min The minimum value to return.
 * @param {number} max The maximum value to return.
 * @return {number} The input number if it is within bounds, or the nearest
 *     number within the bounds.
 */ function $57ec69d152197e1d$export$7d15b64cf5a3a4c4(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
function $57ec69d152197e1d$export$251bb0a9cef172e6(x, y, x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    if (dx !== 0 || dy !== 0) {
        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
        if (t > 1) {
            x1 = x2;
            y1 = y2;
        } else if (t > 0) {
            x1 += dx * t;
            y1 += dy * t;
        }
    }
    return $57ec69d152197e1d$export$88e6ebb4fe54f538(x, y, x1, y1);
}
function $57ec69d152197e1d$export$88e6ebb4fe54f538(x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    return dx * dx + dy * dy;
}
function $57ec69d152197e1d$export$8240f01c446270e6(mat) {
    const n = mat.length;
    for(let i = 0; i < n; i++){
        // Find max in the i-th column (ignoring i - 1 first rows)
        let maxRow = i;
        let maxEl = Math.abs(mat[i][i]);
        for(let r = i + 1; r < n; r++){
            const absValue = Math.abs(mat[r][i]);
            if (absValue > maxEl) {
                maxEl = absValue;
                maxRow = r;
            }
        }
        if (maxEl === 0) return null; // matrix is singular
        // Swap max row with i-th (current) row
        const tmp = mat[maxRow];
        mat[maxRow] = mat[i];
        mat[i] = tmp;
        // Subtract the i-th row to make all the remaining rows 0 in the i-th column
        for(let j = i + 1; j < n; j++){
            const coef = -mat[j][i] / mat[i][i];
            for(let k = i; k < n + 1; k++)if (i == k) mat[j][k] = 0;
            else mat[j][k] += coef * mat[i][k];
        }
    }
    // Solve Ax=b for upper triangular matrix A (mat)
    const x = new Array(n);
    for(let l = n - 1; l >= 0; l--){
        x[l] = mat[l][n] / mat[l][l];
        for(let m = l - 1; m >= 0; m--)mat[m][n] -= mat[m][l] * x[l];
    }
    return x;
}
function $57ec69d152197e1d$export$56cb859c01fa134d(angleInRadians) {
    return angleInRadians * 180 / Math.PI;
}
function $57ec69d152197e1d$export$cba01ba138429a1d(angleInDegrees) {
    return angleInDegrees * Math.PI / 180;
}
function $57ec69d152197e1d$export$ba467bec01d66def(a, b) {
    const r = a % b;
    return r * b < 0 ? r + b : r;
}
function $57ec69d152197e1d$export$3a89f8d6f6bf6c9f(a, b, x) {
    return a + x * (b - a);
}
function $57ec69d152197e1d$export$a81f732198733497(n, decimals) {
    const factor = Math.pow(10, decimals);
    return Math.round(n * factor) / factor;
}
function $57ec69d152197e1d$export$2077e0241d6afd3c(n, decimals) {
    return Math.round($57ec69d152197e1d$export$a81f732198733497(n, decimals));
}
function $57ec69d152197e1d$export$a3fe094919f356fd(n, decimals) {
    return Math.floor($57ec69d152197e1d$export$a81f732198733497(n, decimals));
}
function $57ec69d152197e1d$export$803ce6b71a0a94b2(n, decimals) {
    return Math.ceil($57ec69d152197e1d$export$a81f732198733497(n, decimals));
}


/**
 * A color represented as a short array [red, green, blue, alpha].
 * red, green, and blue should be integers in the range 0..255 inclusive.
 * alpha should be a float in the range 0..1 inclusive. If no alpha value is
 * given then `1` will be used.
 * @typedef {Array<number>} Color
 * @api
 */ /**
 * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
 * @const
 * @type {RegExp}
 * @private
 */ const $d32b89243a698e8b$var$HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;
/**
 * Regular expression for matching potential named color style strings.
 * @const
 * @type {RegExp}
 * @private
 */ const $d32b89243a698e8b$var$NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\(.*\)$/i;
function $d32b89243a698e8b$export$590567be997858b6(color) {
    if (typeof color === "string") return color;
    return $d32b89243a698e8b$export$f84e8e69fd4488a5(color);
}
/**
 * Return named color as an rgba string.
 * @param {string} color Named color.
 * @return {string} Rgb string.
 */ function $d32b89243a698e8b$var$fromNamed(color) {
    const el = document.createElement("div");
    el.style.color = color;
    if (el.style.color !== "") {
        document.body.appendChild(el);
        const rgb = getComputedStyle(el).color;
        document.body.removeChild(el);
        return rgb;
    }
    return "";
}
const $d32b89243a698e8b$export$3004f64547af360e = function() {
    // We maintain a small cache of parsed strings.  To provide cheap LRU-like
    // semantics, whenever the cache grows too large we simply delete an
    // arbitrary 25% of the entries.
    /**
   * @const
   * @type {number}
   */ const MAX_CACHE_SIZE = 1024;
    /**
   * @type {Object<string, Color>}
   */ const cache = {};
    /**
   * @type {number}
   */ let cacheSize = 0;
    return(/**
     * @param {string} s String.
     * @return {Color} Color.
     */ function(s) {
        let color;
        if (cache.hasOwnProperty(s)) color = cache[s];
        else {
            if (cacheSize >= MAX_CACHE_SIZE) {
                let i = 0;
                for(const key in cache)if ((i++ & 3) === 0) {
                    delete cache[key];
                    --cacheSize;
                }
            }
            color = $d32b89243a698e8b$var$fromStringInternal_(s);
            cache[s] = color;
            ++cacheSize;
        }
        return color;
    });
}();
function $d32b89243a698e8b$export$75093a47a9fa838d(color) {
    if (Array.isArray(color)) return color;
    return $d32b89243a698e8b$export$3004f64547af360e(color);
}
/**
 * @param {string} s String.
 * @private
 * @return {Color} Color.
 */ function $d32b89243a698e8b$var$fromStringInternal_(s) {
    let r, g, b, a, color;
    if ($d32b89243a698e8b$var$NAMED_COLOR_RE_.exec(s)) s = $d32b89243a698e8b$var$fromNamed(s);
    if ($d32b89243a698e8b$var$HEX_COLOR_RE_.exec(s)) {
        // hex
        const n = s.length - 1; // number of hex digits
        let d; // number of digits per channel
        if (n <= 4) d = 1;
        else d = 2;
        const hasAlpha = n === 4 || n === 8;
        r = parseInt(s.substr(1 + 0 * d, d), 16);
        g = parseInt(s.substr(1 + 1 * d, d), 16);
        b = parseInt(s.substr(1 + 2 * d, d), 16);
        if (hasAlpha) a = parseInt(s.substr(1 + 3 * d, d), 16);
        else a = 255;
        if (d == 1) {
            r = (r << 4) + r;
            g = (g << 4) + g;
            b = (b << 4) + b;
            if (hasAlpha) a = (a << 4) + a;
        }
        color = [
            r,
            g,
            b,
            a / 255
        ];
    } else if (s.startsWith("rgba(")) {
        // rgba()
        color = s.slice(5, -1).split(",").map(Number);
        $d32b89243a698e8b$export$a3295358bff77e(color);
    } else if (s.startsWith("rgb(")) {
        // rgb()
        color = s.slice(4, -1).split(",").map(Number);
        color.push(1);
        $d32b89243a698e8b$export$a3295358bff77e(color);
    } else (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(false, 14); // Invalid color
    return color;
}
function $d32b89243a698e8b$export$a3295358bff77e(color) {
    color[0] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(color[0] + 0.5 | 0, 0, 255);
    color[1] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(color[1] + 0.5 | 0, 0, 255);
    color[2] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(color[2] + 0.5 | 0, 0, 255);
    color[3] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(color[3], 0, 1);
    return color;
}
function $d32b89243a698e8b$export$f84e8e69fd4488a5(color) {
    let r = color[0];
    if (r != (r | 0)) r = r + 0.5 | 0;
    let g = color[1];
    if (g != (g | 0)) g = g + 0.5 | 0;
    let b = color[2];
    if (b != (b | 0)) b = b + 0.5 | 0;
    const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
}
function $d32b89243a698e8b$export$40dd713d7775a0b1(s) {
    if ($d32b89243a698e8b$var$NAMED_COLOR_RE_.test(s)) s = $d32b89243a698e8b$var$fromNamed(s);
    return $d32b89243a698e8b$var$HEX_COLOR_RE_.test(s) || s.startsWith("rgba(") || s.startsWith("rgb(");
}


/**
 * @classdesc
 * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.
 */ class $82136d2ec01af9ba$var$IconImageCache {
    constructor(){
        /**
     * @type {!Object<string, import("./IconImage.js").default>}
     * @private
     */ this.cache_ = {};
        /**
     * @type {number}
     * @private
     */ this.cacheSize_ = 0;
        /**
     * @type {number}
     * @private
     */ this.maxCacheSize_ = 32;
    }
    /**
   * FIXME empty description for jsdoc
   */ clear() {
        this.cache_ = {};
        this.cacheSize_ = 0;
    }
    /**
   * @return {boolean} Can expire cache.
   */ canExpireCache() {
        return this.cacheSize_ > this.maxCacheSize_;
    }
    /**
   * FIXME empty description for jsdoc
   */ expire() {
        if (this.canExpireCache()) {
            let i = 0;
            for(const key in this.cache_){
                const iconImage = this.cache_[key];
                if ((i++ & 3) === 0 && !iconImage.hasListener()) {
                    delete this.cache_[key];
                    --this.cacheSize_;
                }
            }
        }
    }
    /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color} color Color.
   * @return {import("./IconImage.js").default} Icon image.
   */ get(src, crossOrigin, color) {
        const key = $82136d2ec01af9ba$var$getKey(src, crossOrigin, color);
        return key in this.cache_ ? this.cache_[key] : null;
    }
    /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color} color Color.
   * @param {import("./IconImage.js").default} iconImage Icon image.
   */ set(src, crossOrigin, color, iconImage) {
        const key = $82136d2ec01af9ba$var$getKey(src, crossOrigin, color);
        this.cache_[key] = iconImage;
        ++this.cacheSize_;
    }
    /**
   * Set the cache size of the icon cache. Default is `32`. Change this value when
   * your map uses more than 32 different icon images and you are not caching icon
   * styles on the application level.
   * @param {number} maxCacheSize Cache max size.
   * @api
   */ setSize(maxCacheSize) {
        this.maxCacheSize_ = maxCacheSize;
        this.expire();
    }
}
/**
 * @param {string} src Src.
 * @param {?string} crossOrigin Cross origin.
 * @param {import("../color.js").Color} color Color.
 * @return {string} Cache key.
 */ function $82136d2ec01af9ba$var$getKey(src, crossOrigin, color) {
    const colorString = color ? (0, $d32b89243a698e8b$export$590567be997858b6)(color) : "null";
    return crossOrigin + ":" + src + ":" + colorString;
}
var $82136d2ec01af9ba$export$2e2bcd8739ae039 = $82136d2ec01af9ba$var$IconImageCache;
const $82136d2ec01af9ba$export$747ccdf771a87ab8 = new $82136d2ec01af9ba$var$IconImageCache();


/**
 * @module ol/layer/Layer
 */ /**
 * @module ol/layer/Base
 */ 
/**
 * @module ol/layer/Property
 */ /**
 * @enum {string}
 */ var $e777f004feefd0c5$export$2e2bcd8739ae039 = {
    OPACITY: "opacity",
    VISIBLE: "visible",
    EXTENT: "extent",
    Z_INDEX: "zIndex",
    MAX_RESOLUTION: "maxResolution",
    MIN_RESOLUTION: "minResolution",
    MAX_ZOOM: "maxZoom",
    MIN_ZOOM: "minZoom",
    SOURCE: "source",
    MAP: "map"
};





/**
 * A css color, or a function called with a view resolution returning a css color.
 *
 * @typedef {string|function(number):string} BackgroundColor
 * @api
 */ /**
 * @typedef {import("../ObjectEventType").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|
 *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes
 */ /***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<BaseLayerObjectEventTypes, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background
 * will be rendered.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in
 * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so
 * is observable, and has get/set accessors.
 *
 * @api
 */ class $caae539137eb9fda$var$BaseLayer extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options Layer options.
   */ constructor(options){
        super();
        /***
     * @type {BaseLayerOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {BaseLayerOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {BaseLayerOnSignature<void>}
     */ this.un;
        /**
     * @type {BackgroundColor|false}
     * @private
     */ this.background_ = options.background;
        /**
     * @type {Object<string, *>}
     */ const properties = Object.assign({}, options);
        if (typeof options.properties === "object") {
            delete properties.properties;
            Object.assign(properties, options.properties);
        }
        properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).OPACITY] = options.opacity !== undefined ? options.opacity : 1;
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).OPACITY] === "number", 64); // Layer opacity must be a number
        properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).VISIBLE] = options.visible !== undefined ? options.visible : true;
        properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).Z_INDEX] = options.zIndex;
        properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;
        properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;
        properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;
        properties[(0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;
        /**
     * @type {string}
     * @private
     */ this.className_ = properties.className !== undefined ? properties.className : "ol-layer";
        delete properties.className;
        this.setProperties(properties);
        /**
     * @type {import("./Layer.js").State}
     * @private
     */ this.state_ = null;
    }
    /**
   * Get the background for this layer.
   * @return {BackgroundColor|false} Layer background.
   */ getBackground() {
        return this.background_;
    }
    /**
   * @return {string} CSS class name.
   */ getClassName() {
        return this.className_;
    }
    /**
   * This method is not meant to be called by layers or layer renderers because the state
   * is incorrect if the layer is included in a layer group.
   *
   * @param {boolean} [managed] Layer is managed.
   * @return {import("./Layer.js").State} Layer state.
   */ getLayerState(managed) {
        /** @type {import("./Layer.js").State} */ const state = this.state_ || /** @type {?} */ {
            layer: this,
            managed: managed === undefined ? true : managed
        };
        const zIndex = this.getZIndex();
        state.opacity = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(Math.round(this.getOpacity() * 100) / 100, 0, 1);
        state.visible = this.getVisible();
        state.extent = this.getExtent();
        state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;
        state.maxResolution = this.getMaxResolution();
        state.minResolution = Math.max(this.getMinResolution(), 0);
        state.minZoom = this.getMinZoom();
        state.maxZoom = this.getMaxZoom();
        this.state_ = state;
        return state;
    }
    /**
   * @abstract
   * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be
   *     modified in place).
   * @return {Array<import("./Layer.js").default>} Array of layers.
   */ getLayersArray(array) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @abstract
   * @param {Array<import("./Layer.js").State>} [states] Optional list of layer
   *     states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */ getLayerStatesArray(states) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
   * will be visible regardless of extent.
   * @return {import("../extent.js").Extent|undefined} The layer extent.
   * @observable
   * @api
   */ getExtent() {
        return /** @type {import("../extent.js").Extent|undefined} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).EXTENT);
    }
    /**
   * Return the maximum resolution of the layer.
   * @return {number} The maximum resolution of the layer.
   * @observable
   * @api
   */ getMaxResolution() {
        return /** @type {number} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAX_RESOLUTION);
    }
    /**
   * Return the minimum resolution of the layer.
   * @return {number} The minimum resolution of the layer.
   * @observable
   * @api
   */ getMinResolution() {
        return /** @type {number} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MIN_RESOLUTION);
    }
    /**
   * Return the minimum zoom level of the layer.
   * @return {number} The minimum zoom level of the layer.
   * @observable
   * @api
   */ getMinZoom() {
        return /** @type {number} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MIN_ZOOM);
    }
    /**
   * Return the maximum zoom level of the layer.
   * @return {number} The maximum zoom level of the layer.
   * @observable
   * @api
   */ getMaxZoom() {
        return /** @type {number} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAX_ZOOM);
    }
    /**
   * Return the opacity of the layer (between 0 and 1).
   * @return {number} The opacity of the layer.
   * @observable
   * @api
   */ getOpacity() {
        return /** @type {number} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).OPACITY);
    }
    /**
   * @abstract
   * @return {import("../source/Source.js").State} Source state.
   */ getSourceState() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Return the value of this layer's `visible` property. To find out whether the layer
   * is visible on a map, use `isVisible()` instead.
   * @return {boolean} The value of the `visible` property of the layer.
   * @observable
   * @api
   */ getVisible() {
        return /** @type {boolean} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).VISIBLE);
    }
    /**
   * Return the Z-index of the layer, which is used to order layers before
   * rendering. The default Z-index is 0.
   * @return {number} The Z-index of the layer.
   * @observable
   * @api
   */ getZIndex() {
        return /** @type {number} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).Z_INDEX);
    }
    /**
   * Sets the background color.
   * @param {BackgroundColor} [background] Background color.
   */ setBackground(background) {
        this.background_ = background;
        this.changed();
    }
    /**
   * Set the extent at which the layer is visible.  If `undefined`, the layer
   * will be visible at all extents.
   * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
   * @observable
   * @api
   */ setExtent(extent) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).EXTENT, extent);
    }
    /**
   * Set the maximum resolution at which the layer is visible.
   * @param {number} maxResolution The maximum resolution of the layer.
   * @observable
   * @api
   */ setMaxResolution(maxResolution) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAX_RESOLUTION, maxResolution);
    }
    /**
   * Set the minimum resolution at which the layer is visible.
   * @param {number} minResolution The minimum resolution of the layer.
   * @observable
   * @api
   */ setMinResolution(minResolution) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MIN_RESOLUTION, minResolution);
    }
    /**
   * Set the maximum zoom (exclusive) at which the layer is visible.
   * Note that the zoom levels for layer visibility are based on the
   * view zoom level, which may be different from a tile source zoom level.
   * @param {number} maxZoom The maximum zoom of the layer.
   * @observable
   * @api
   */ setMaxZoom(maxZoom) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAX_ZOOM, maxZoom);
    }
    /**
   * Set the minimum zoom (inclusive) at which the layer is visible.
   * Note that the zoom levels for layer visibility are based on the
   * view zoom level, which may be different from a tile source zoom level.
   * @param {number} minZoom The minimum zoom of the layer.
   * @observable
   * @api
   */ setMinZoom(minZoom) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MIN_ZOOM, minZoom);
    }
    /**
   * Set the opacity of the layer, allowed values range from 0 to 1.
   * @param {number} opacity The opacity of the layer.
   * @observable
   * @api
   */ setOpacity(opacity) {
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof opacity === "number", 64); // Layer opacity must be a number
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).OPACITY, opacity);
    }
    /**
   * Set the visibility of the layer (`true` or `false`).
   * @param {boolean} visible The visibility of the layer.
   * @observable
   * @api
   */ setVisible(visible) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).VISIBLE, visible);
    }
    /**
   * Set Z-index of the layer, which is used to order layers before rendering.
   * The default Z-index is 0.
   * @param {number} zindex The z-index of the layer.
   * @observable
   * @api
   */ setZIndex(zindex) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).Z_INDEX, zindex);
    }
    /**
   * Clean up.
   */ disposeInternal() {
        if (this.state_) {
            this.state_.layer = null;
            this.state_ = null;
        }
        super.disposeInternal();
    }
}
var $caae539137eb9fda$export$2e2bcd8739ae039 = $caae539137eb9fda$var$BaseLayer;




/**
 * @module ol/render/EventType
 */ /**
 * @enum {string}
 */ var $4585eb82aab12670$export$2e2bcd8739ae039 /**
 * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes
 */  /**
 * @typedef {'postrender'|'prerender'} LayerRenderEventTypes
 */  = {
    /**
   * Triggered before a layer is rendered.
   * @event module:ol/render/Event~RenderEvent#prerender
   * @api
   */ PRERENDER: "prerender",
    /**
   * Triggered after a layer is rendered.
   * @event module:ol/render/Event~RenderEvent#postrender
   * @api
   */ POSTRENDER: "postrender",
    /**
   * Triggered before layers are composed.  When dispatched by the map, the event object will not have
   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
   * WebGL layers currently dispatch this event.
   * @event module:ol/render/Event~RenderEvent#precompose
   * @api
   */ PRECOMPOSE: "precompose",
    /**
   * Triggered after layers are composed.  When dispatched by the map, the event object will not have
   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
   * WebGL layers currently dispatch this event.
   * @event module:ol/render/Event~RenderEvent#postcompose
   * @api
   */ POSTCOMPOSE: "postcompose",
    /**
   * Triggered when rendering is complete, i.e. all sources and tiles have
   * finished loading for the current viewport, and all tiles are faded in.
   * The event object will not have a `context` set.
   * @event module:ol/render/Event~RenderEvent#rendercomplete
   * @api
   */ RENDERCOMPLETE: "rendercomplete"
};


/**
 * @module ol/View
 */ 
/**
 * @module ol/ViewHint
 */ /**
 * @enum {number}
 */ var $da1f857e3747bc07$export$2e2bcd8739ae039 = {
    ANIMATING: 0,
    INTERACTING: 1
};


/**
 * @module ol/ViewProperty
 */ /**
 * @enum {string}
 */ var $6221a0fc70b5fd5c$export$2e2bcd8739ae039 = {
    CENTER: "center",
    RESOLUTION: "resolution",
    ROTATION: "rotation"
};


/**
 * @module ol/tilegrid/common
 */ /**
 * Default maximum zoom for default tile grids.
 * @type {number}
 */ const $a96901ad7de10b0c$export$e98a216cdcc847dc = 42;
const $a96901ad7de10b0c$export$6b8cb5cd370bd90c = 256;


/**
 * @module ol/proj
 */ /**
 * The ol/proj module stores:
 * * a list of {@link module:ol/proj/Projection~Projection}
 * objects, one for each projection supported by the application
 * * a list of transform functions needed to convert coordinates in one projection
 * into another.
 *
 * The static functions are the methods used to maintain these.
 * Each transform function can handle not only simple coordinate pairs, but also
 * large arrays of coordinates such as vector geometries.
 *
 * When loaded, the library adds projection objects for EPSG:4326 (WGS84
 * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used
 * for example by Bing Maps or OpenStreetMap), together with the relevant
 * transform functions.
 *
 * Additional transforms may be added by using the http://proj4js.org/
 * library (version 2.2 or later). You can use the full build supplied by
 * Proj4js, or create a custom build to support those projections you need; see
 * the Proj4js website for how to do this. You also need the Proj4js definitions
 * for the required projections. These definitions can be obtained from
 * https://epsg.io/, and are a JS function, so can be loaded in a script
 * tag (as in the examples) or pasted into your application.
 *
 * After all required projection definitions are added to proj4's registry (by
 * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`
 * package. Existing transforms are not changed by this function. See
 * examples/wms-image-custom-proj for an example of this.
 *
 * Additional projection definitions can be registered with `proj4.defs()` any
 * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't
 * know in advance what projections are needed, you can initially load minimal
 * support and then load whichever are requested.
 *
 * Note that Proj4js does not support projection extents. If you want to add
 * one for creating default tile grids, you can add it after the Projection
 * object has been created with `setExtent`, for example,
 * `get('EPSG:1234').setExtent(extent)`.
 *
 * In addition to Proj4js support, any transform functions can be added with
 * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create
 * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with
 * {@link module:ol/proj.addProjection}. You can then add the forward and inverse
 * functions with {@link module:ol/proj.addCoordinateTransforms}. See
 * examples/wms-custom-proj for an example of this.
 *
 * Note that if no transforms are needed and you only need to define the
 * projection, just add a {@link module:ol/proj/Projection~Projection} with
 * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of
 * this.
 */ 
/**
 * @module ol/proj/epsg3857
 */ /**
 * @module ol/proj/Projection
 */ /**
 * @module ol/proj/Units
 */ /**
 * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units
 * Projection units.
 */ /**
 * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt
 * @type {Object<number, Units>}
 */ const $6a4fde186e5464e9$var$unitByCode = {
    "9001": "m",
    "9002": "ft",
    "9003": "us-ft",
    "9101": "radians",
    "9102": "degrees"
};
function $6a4fde186e5464e9$export$7f58726df3255edc(code) {
    return $6a4fde186e5464e9$var$unitByCode[code];
}
const $6a4fde186e5464e9$export$1482081eec883108 = {
    // use the radius of the Normal sphere
    "radians": 6370997 / (2 * Math.PI),
    "degrees": 2 * Math.PI * 6370997 / 360,
    "ft": 0.3048,
    "m": 1,
    "us-ft": 1200 / 3937
};


/**
 * @typedef {Object} Options
 * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
 * @property {import("./Units.js").Units} [units] Units. Required unless a
 * proj4 projection is defined for `code`.
 * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
 * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
 * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
 * @property {number} [metersPerUnit] The meters per unit for the SRS.
 * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}
 * lookup table.
 * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
 * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
 * Function to determine resolution at a point. The function is called with a
 * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns
 * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,
 * the default {@link module:ol/proj.getPointResolution} function will be used.
 */ /**
 * @classdesc
 * Projection definition class. One of these is created for each projection
 * supported in the application and stored in the {@link module:ol/proj} namespace.
 * You can use these in applications, but this is not required, as API params
 * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
 * code will suffice.
 *
 * You can use {@link module:ol/proj.get} to retrieve the object for a particular
 * projection.
 *
 * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
 * with the following aliases:
 * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
 *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
 *     http://www.opengis.net/gml/srs/epsg.xml#4326,
 *     urn:x-ogc:def:crs:EPSG:4326
 * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
 *     urn:ogc:def:crs:EPSG:6.18:3:3857,
 *     http://www.opengis.net/gml/srs/epsg.xml#3857
 *
 * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
 * be added using `proj4.defs()`. After all required projection definitions are
 * added, call the {@link module:ol/proj/proj4.register} function.
 *
 * @api
 */ class $dedce5f77fa1cc84$var$Projection {
    /**
   * @param {Options} options Projection options.
   */ constructor(options){
        /**
     * @private
     * @type {string}
     */ this.code_ = options.code;
        /**
     * Units of projected coordinates. When set to `TILE_PIXELS`, a
     * `this.extent_` and `this.worldExtent_` must be configured properly for each
     * tile.
     * @private
     * @type {import("./Units.js").Units}
     */ this.units_ = /** @type {import("./Units.js").Units} */ options.units;
        /**
     * Validity extent of the projection in projected coordinates. For projections
     * with `TILE_PIXELS` units, this is the extent of the tile in
     * tile pixel space.
     * @private
     * @type {import("../extent.js").Extent}
     */ this.extent_ = options.extent !== undefined ? options.extent : null;
        /**
     * Extent of the world in EPSG:4326. For projections with
     * `TILE_PIXELS` units, this is the extent of the tile in
     * projected coordinate space.
     * @private
     * @type {import("../extent.js").Extent}
     */ this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;
        /**
     * @private
     * @type {string}
     */ this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : "enu";
        /**
     * @private
     * @type {boolean}
     */ this.global_ = options.global !== undefined ? options.global : false;
        /**
     * @private
     * @type {boolean}
     */ this.canWrapX_ = !!(this.global_ && this.extent_);
        /**
     * @private
     * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
     */ this.getPointResolutionFunc_ = options.getPointResolution;
        /**
     * @private
     * @type {import("../tilegrid/TileGrid.js").default}
     */ this.defaultTileGrid_ = null;
        /**
     * @private
     * @type {number|undefined}
     */ this.metersPerUnit_ = options.metersPerUnit;
    }
    /**
   * @return {boolean} The projection is suitable for wrapping the x-axis
   */ canWrapX() {
        return this.canWrapX_;
    }
    /**
   * Get the code for this projection, e.g. 'EPSG:4326'.
   * @return {string} Code.
   * @api
   */ getCode() {
        return this.code_;
    }
    /**
   * Get the validity extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */ getExtent() {
        return this.extent_;
    }
    /**
   * Get the units of this projection.
   * @return {import("./Units.js").Units} Units.
   * @api
   */ getUnits() {
        return this.units_;
    }
    /**
   * Get the amount of meters per unit of this projection.  If the projection is
   * not configured with `metersPerUnit` or a units identifier, the return is
   * `undefined`.
   * @return {number|undefined} Meters.
   * @api
   */ getMetersPerUnit() {
        return this.metersPerUnit_ || (0, $6a4fde186e5464e9$export$1482081eec883108)[this.units_];
    }
    /**
   * Get the world extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */ getWorldExtent() {
        return this.worldExtent_;
    }
    /**
   * Get the axis orientation of this projection.
   * Example values are:
   * enu - the default easting, northing, elevation.
   * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
   *     or south orientated transverse mercator.
   * wnu - westing, northing, up - some planetary coordinate systems have
   *     "west positive" coordinate systems
   * @return {string} Axis orientation.
   * @api
   */ getAxisOrientation() {
        return this.axisOrientation_;
    }
    /**
   * Is this projection a global projection which spans the whole world?
   * @return {boolean} Whether the projection is global.
   * @api
   */ isGlobal() {
        return this.global_;
    }
    /**
   * Set if the projection is a global projection which spans the whole world
   * @param {boolean} global Whether the projection is global.
   * @api
   */ setGlobal(global) {
        this.global_ = global;
        this.canWrapX_ = !!(global && this.extent_);
    }
    /**
   * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
   */ getDefaultTileGrid() {
        return this.defaultTileGrid_;
    }
    /**
   * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
   */ setDefaultTileGrid(tileGrid) {
        this.defaultTileGrid_ = tileGrid;
    }
    /**
   * Set the validity extent for this projection.
   * @param {import("../extent.js").Extent} extent Extent.
   * @api
   */ setExtent(extent) {
        this.extent_ = extent;
        this.canWrapX_ = !!(this.global_ && extent);
    }
    /**
   * Set the world extent for this projection.
   * @param {import("../extent.js").Extent} worldExtent World extent
   *     [minlon, minlat, maxlon, maxlat].
   * @api
   */ setWorldExtent(worldExtent) {
        this.worldExtent_ = worldExtent;
    }
    /**
   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}
   * for this projection.
   * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
   * @api
   */ setGetPointResolution(func) {
        this.getPointResolutionFunc_ = func;
    }
    /**
   * Get the custom point resolution function for this projection (if set).
   * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
   * resolution function (if set).
   */ getPointResolutionFunc() {
        return this.getPointResolutionFunc_;
    }
}
var $dedce5f77fa1cc84$export$2e2bcd8739ae039 = $dedce5f77fa1cc84$var$Projection;


const $e6bed287da12a40a$export$2d2c9be8b5b863f = 6378137;
const $e6bed287da12a40a$export$f3928063e5e96d35 = Math.PI * $e6bed287da12a40a$export$2d2c9be8b5b863f;
const $e6bed287da12a40a$export$21e6da8a7375dfe8 = [
    -$e6bed287da12a40a$export$f3928063e5e96d35,
    -$e6bed287da12a40a$export$f3928063e5e96d35,
    $e6bed287da12a40a$export$f3928063e5e96d35,
    $e6bed287da12a40a$export$f3928063e5e96d35
];
const $e6bed287da12a40a$export$ae9d6ed80df710e5 = [
    -180,
    -85,
    180,
    85
];
const $e6bed287da12a40a$export$d26945d1ad52feeb = $e6bed287da12a40a$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI / 2));
/**
 * @classdesc
 * Projection object for web/spherical Mercator (EPSG:3857).
 */ class $e6bed287da12a40a$var$EPSG3857Projection extends (0, $dedce5f77fa1cc84$export$2e2bcd8739ae039) {
    /**
   * @param {string} code Code.
   */ constructor(code){
        super({
            code: code,
            units: "m",
            extent: $e6bed287da12a40a$export$21e6da8a7375dfe8,
            global: true,
            worldExtent: $e6bed287da12a40a$export$ae9d6ed80df710e5,
            getPointResolution: function(resolution, point) {
                return resolution / Math.cosh(point[1] / $e6bed287da12a40a$export$2d2c9be8b5b863f);
            }
        });
    }
}
const $e6bed287da12a40a$export$b508d7ad9a891c1b = [
    new $e6bed287da12a40a$var$EPSG3857Projection("EPSG:3857"),
    new $e6bed287da12a40a$var$EPSG3857Projection("EPSG:102100"),
    new $e6bed287da12a40a$var$EPSG3857Projection("EPSG:102113"),
    new $e6bed287da12a40a$var$EPSG3857Projection("EPSG:900913"),
    new $e6bed287da12a40a$var$EPSG3857Projection("http://www.opengis.net/def/crs/EPSG/0/3857"),
    new $e6bed287da12a40a$var$EPSG3857Projection("http://www.opengis.net/gml/srs/epsg.xml#3857")
];
function $e6bed287da12a40a$export$1ff8bb36c0983070(input, output, dimension) {
    const length = input.length;
    dimension = dimension > 1 ? dimension : 2;
    if (output === undefined) {
        if (dimension > 2) // preserve values beyond second dimension
        output = input.slice();
        else output = new Array(length);
    }
    for(let i = 0; i < length; i += dimension){
        output[i] = $e6bed287da12a40a$export$f3928063e5e96d35 * input[i] / 180;
        let y = $e6bed287da12a40a$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));
        if (y > $e6bed287da12a40a$export$d26945d1ad52feeb) y = $e6bed287da12a40a$export$d26945d1ad52feeb;
        else if (y < -$e6bed287da12a40a$export$d26945d1ad52feeb) y = -$e6bed287da12a40a$export$d26945d1ad52feeb;
        output[i + 1] = y;
    }
    return output;
}
function $e6bed287da12a40a$export$8c71322ec28ed6b4(input, output, dimension) {
    const length = input.length;
    dimension = dimension > 1 ? dimension : 2;
    if (output === undefined) {
        if (dimension > 2) // preserve values beyond second dimension
        output = input.slice();
        else output = new Array(length);
    }
    for(let i = 0; i < length; i += dimension){
        output[i] = 180 * input[i] / $e6bed287da12a40a$export$f3928063e5e96d35;
        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / $e6bed287da12a40a$export$2d2c9be8b5b863f)) / Math.PI - 90;
    }
    return output;
}


/**
 * @module ol/proj/epsg4326
 */ 
const $366cef9ace33c799$export$2d2c9be8b5b863f = 6378137;
const $366cef9ace33c799$export$21e6da8a7375dfe8 = [
    -180,
    -90,
    180,
    90
];
const $366cef9ace33c799$export$1482081eec883108 = Math.PI * $366cef9ace33c799$export$2d2c9be8b5b863f / 180;
/**
 * @classdesc
 * Projection object for WGS84 geographic coordinates (EPSG:4326).
 *
 * Note that OpenLayers does not strictly comply with the EPSG definition.
 * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
 * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
 */ class $366cef9ace33c799$var$EPSG4326Projection extends (0, $dedce5f77fa1cc84$export$2e2bcd8739ae039) {
    /**
   * @param {string} code Code.
   * @param {string} [axisOrientation] Axis orientation.
   */ constructor(code, axisOrientation){
        super({
            code: code,
            units: "degrees",
            extent: $366cef9ace33c799$export$21e6da8a7375dfe8,
            axisOrientation: axisOrientation,
            global: true,
            metersPerUnit: $366cef9ace33c799$export$1482081eec883108,
            worldExtent: $366cef9ace33c799$export$21e6da8a7375dfe8
        });
    }
}
const $366cef9ace33c799$export$b508d7ad9a891c1b = [
    new $366cef9ace33c799$var$EPSG4326Projection("CRS:84"),
    new $366cef9ace33c799$var$EPSG4326Projection("EPSG:4326", "neu"),
    new $366cef9ace33c799$var$EPSG4326Projection("urn:ogc:def:crs:OGC:1.3:CRS84"),
    new $366cef9ace33c799$var$EPSG4326Projection("urn:ogc:def:crs:OGC:2:84"),
    new $366cef9ace33c799$var$EPSG4326Projection("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),
    new $366cef9ace33c799$var$EPSG4326Projection("http://www.opengis.net/gml/srs/epsg.xml#4326", "neu"),
    new $366cef9ace33c799$var$EPSG4326Projection("http://www.opengis.net/def/crs/EPSG/0/4326", "neu")
];



/**
 * @module ol/proj/projections
 */ /**
 * @type {Object<string, import("./Projection.js").default>}
 */ let $685869700e166c3a$var$cache = {};
function $685869700e166c3a$export$42ffd38884aecdac() {
    $685869700e166c3a$var$cache = {};
}
function $685869700e166c3a$export$3988ae62b71be9a3(code) {
    return $685869700e166c3a$var$cache[code] || $685869700e166c3a$var$cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/, "EPSG:$3")] || null;
}
function $685869700e166c3a$export$e16d8520af44a096(code, projection) {
    $685869700e166c3a$var$cache[code] = projection;
}


/**
 * @module ol/proj/transforms
 */ 
/**
 * @private
 * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
 */ let $00727a2fe5eeabf8$var$transforms = {};
function $00727a2fe5eeabf8$export$42ffd38884aecdac() {
    $00727a2fe5eeabf8$var$transforms = {};
}
function $00727a2fe5eeabf8$export$e16d8520af44a096(source, destination, transformFn) {
    const sourceCode = source.getCode();
    const destinationCode = destination.getCode();
    if (!(sourceCode in $00727a2fe5eeabf8$var$transforms)) $00727a2fe5eeabf8$var$transforms[sourceCode] = {};
    $00727a2fe5eeabf8$var$transforms[sourceCode][destinationCode] = transformFn;
}
function $00727a2fe5eeabf8$export$cd7f480d6b8286c3(source, destination) {
    const sourceCode = source.getCode();
    const destinationCode = destination.getCode();
    const transform = $00727a2fe5eeabf8$var$transforms[sourceCode][destinationCode];
    delete $00727a2fe5eeabf8$var$transforms[sourceCode][destinationCode];
    if ((0, $e2dfef87a88758ed$export$dd1bc94b04021eeb)($00727a2fe5eeabf8$var$transforms[sourceCode])) delete $00727a2fe5eeabf8$var$transforms[sourceCode];
    return transform;
}
function $00727a2fe5eeabf8$export$3988ae62b71be9a3(sourceCode, destinationCode) {
    let transform;
    if (sourceCode in $00727a2fe5eeabf8$var$transforms && destinationCode in $00727a2fe5eeabf8$var$transforms[sourceCode]) transform = $00727a2fe5eeabf8$var$transforms[sourceCode][destinationCode];
    return transform;
}




/**
 * @module ol/coordinate
 */ 

/**
 * @module ol/string
 */ /**
 * @param {number} number Number to be formatted
 * @param {number} width The desired width
 * @param {number} [precision] Precision of the output string (i.e. number of decimal places)
 * @return {string} Formatted string
 */ function $104d4d01eb549908$export$24be126cb0a7bbeb(number, width, precision) {
    const numberString = precision !== undefined ? number.toFixed(precision) : "" + number;
    let decimal = numberString.indexOf(".");
    decimal = decimal === -1 ? numberString.length : decimal;
    return decimal > width ? numberString : new Array(1 + width - decimal).join("0") + numberString;
}
function $104d4d01eb549908$export$66e1c0999abad646(v1, v2) {
    const s1 = ("" + v1).split(".");
    const s2 = ("" + v2).split(".");
    for(let i = 0; i < Math.max(s1.length, s2.length); i++){
        const n1 = parseInt(s1[i] || "0", 10);
        const n2 = parseInt(s2[i] || "0", 10);
        if (n1 > n2) return 1;
        if (n2 > n1) return -1;
    }
    return 0;
}


function $c65bc16e55ef0e33$export$e16d8520af44a096(coordinate, delta) {
    coordinate[0] += +delta[0];
    coordinate[1] += +delta[1];
    return coordinate;
}
function $c65bc16e55ef0e33$export$cbe80a3fcd2b99b7(coordinate, circle) {
    const r = circle.getRadius();
    const center = circle.getCenter();
    const x0 = center[0];
    const y0 = center[1];
    const x1 = coordinate[0];
    const y1 = coordinate[1];
    let dx = x1 - x0;
    const dy = y1 - y0;
    if (dx === 0 && dy === 0) dx = 1;
    const d = Math.sqrt(dx * dx + dy * dy);
    const x = x0 + r * dx / d;
    const y = y0 + r * dy / d;
    return [
        x,
        y
    ];
}
function $c65bc16e55ef0e33$export$18cdd31d17f97131(coordinate, segment) {
    const x0 = coordinate[0];
    const y0 = coordinate[1];
    const start = segment[0];
    const end = segment[1];
    const x1 = start[0];
    const y1 = start[1];
    const x2 = end[0];
    const y2 = end[1];
    const dx = x2 - x1;
    const dy = y2 - y1;
    const along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);
    let x, y;
    if (along <= 0) {
        x = x1;
        y = y1;
    } else if (along >= 1) {
        x = x2;
        y = y2;
    } else {
        x = x1 + along * dx;
        y = y1 + along * dy;
    }
    return [
        x,
        y
    ];
}
function $c65bc16e55ef0e33$export$35ad6765fe262b6(fractionDigits) {
    return(/**
     * @param {Coordinate} coordinate Coordinate.
     * @return {string} String XY.
     */ function(coordinate) {
        return $c65bc16e55ef0e33$export$9ff8f16060979e0a(coordinate, fractionDigits);
    });
}
function $c65bc16e55ef0e33$export$6eb0ac5f024d8590(hemispheres, degrees, fractionDigits) {
    const normalizedDegrees = (0, $57ec69d152197e1d$export$ba467bec01d66def)(degrees + 180, 360) - 180;
    const x = Math.abs(3600 * normalizedDegrees);
    const decimals = fractionDigits || 0;
    let deg = Math.floor(x / 3600);
    let min = Math.floor((x - deg * 3600) / 60);
    let sec = (0, $57ec69d152197e1d$export$a81f732198733497)(x - deg * 3600 - min * 60, decimals);
    if (sec >= 60) {
        sec = 0;
        min += 1;
    }
    if (min >= 60) {
        min = 0;
        deg += 1;
    }
    let hdms = deg + "\xb0";
    if (min !== 0 || sec !== 0) hdms += " " + (0, $104d4d01eb549908$export$24be126cb0a7bbeb)(min, 2) + "\u2032";
    if (sec !== 0) hdms += " " + (0, $104d4d01eb549908$export$24be126cb0a7bbeb)(sec, 2, decimals) + "\u2033";
    if (normalizedDegrees !== 0) hdms += " " + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);
    return hdms;
}
function $c65bc16e55ef0e33$export$d9468344d3651243(coordinate, template, fractionDigits) {
    if (coordinate) return template.replace("{x}", coordinate[0].toFixed(fractionDigits)).replace("{y}", coordinate[1].toFixed(fractionDigits));
    return "";
}
function $c65bc16e55ef0e33$export$e9bab7fafb253603(coordinate1, coordinate2) {
    let equals = true;
    for(let i = coordinate1.length - 1; i >= 0; --i)if (coordinate1[i] != coordinate2[i]) {
        equals = false;
        break;
    }
    return equals;
}
function $c65bc16e55ef0e33$export$bb628a54ab399bc9(coordinate, angle) {
    const cosAngle = Math.cos(angle);
    const sinAngle = Math.sin(angle);
    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    coordinate[0] = x;
    coordinate[1] = y;
    return coordinate;
}
function $c65bc16e55ef0e33$export$dcdf75081b88279d(coordinate, scale) {
    coordinate[0] *= scale;
    coordinate[1] *= scale;
    return coordinate;
}
function $c65bc16e55ef0e33$export$88e6ebb4fe54f538(coord1, coord2) {
    const dx = coord1[0] - coord2[0];
    const dy = coord1[1] - coord2[1];
    return dx * dx + dy * dy;
}
function $c65bc16e55ef0e33$export$9f17032d917177de(coord1, coord2) {
    return Math.sqrt($c65bc16e55ef0e33$export$88e6ebb4fe54f538(coord1, coord2));
}
function $c65bc16e55ef0e33$export$6985570514055196(coordinate, segment) {
    return $c65bc16e55ef0e33$export$88e6ebb4fe54f538(coordinate, $c65bc16e55ef0e33$export$18cdd31d17f97131(coordinate, segment));
}
function $c65bc16e55ef0e33$export$c883fd238161f841(coordinate, fractionDigits) {
    if (coordinate) return $c65bc16e55ef0e33$export$6eb0ac5f024d8590("NS", coordinate[1], fractionDigits) + " " + $c65bc16e55ef0e33$export$6eb0ac5f024d8590("EW", coordinate[0], fractionDigits);
    return "";
}
function $c65bc16e55ef0e33$export$9ff8f16060979e0a(coordinate, fractionDigits) {
    return $c65bc16e55ef0e33$export$d9468344d3651243(coordinate, "{x}, {y}", fractionDigits);
}
function $c65bc16e55ef0e33$export$39a9ce3624977b84(coordinate, projection) {
    if (projection.canWrapX()) {
        const worldWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projection.getExtent());
        const worldsAway = $c65bc16e55ef0e33$export$24e2b27d1ff0c1d5(coordinate, projection, worldWidth);
        if (worldsAway) coordinate[0] -= worldsAway * worldWidth;
    }
    return coordinate;
}
function $c65bc16e55ef0e33$export$24e2b27d1ff0c1d5(coordinate, projection, sourceExtentWidth) {
    const projectionExtent = projection.getExtent();
    let worldsAway = 0;
    if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {
        sourceExtentWidth = sourceExtentWidth || (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projectionExtent);
        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);
    }
    return worldsAway;
}


/**
 * @module ol/sphere
 */ 
const $d164a570a58ed2be$export$63f2df7bd7371262 = 6371008.8;
function $d164a570a58ed2be$export$79376507b09a66f(c1, c2, radius) {
    radius = radius || $d164a570a58ed2be$export$63f2df7bd7371262;
    const lat1 = (0, $57ec69d152197e1d$export$cba01ba138429a1d)(c1[1]);
    const lat2 = (0, $57ec69d152197e1d$export$cba01ba138429a1d)(c2[1]);
    const deltaLatBy2 = (lat2 - lat1) / 2;
    const deltaLonBy2 = (0, $57ec69d152197e1d$export$cba01ba138429a1d)(c2[0] - c1[0]) / 2;
    const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);
    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}
/**
 * Get the cumulative great circle length of linestring coordinates (geographic).
 * @param {Array} coordinates Linestring coordinates.
 * @param {number} radius The sphere radius to use.
 * @return {number} The length (in meters).
 */ function $d164a570a58ed2be$var$getLengthInternal(coordinates, radius) {
    let length = 0;
    for(let i = 0, ii = coordinates.length; i < ii - 1; ++i)length += $d164a570a58ed2be$export$79376507b09a66f(coordinates[i], coordinates[i + 1], radius);
    return length;
}
function $d164a570a58ed2be$export$f0d11c074a923179(geometry, options) {
    options = options || {};
    const radius = options.radius || $d164a570a58ed2be$export$63f2df7bd7371262;
    const projection = options.projection || "EPSG:3857";
    const type = geometry.getType();
    if (type !== "GeometryCollection") geometry = geometry.clone().transform(projection, "EPSG:4326");
    let length = 0;
    let coordinates, coords, i, ii, j, jj;
    switch(type){
        case "Point":
        case "MultiPoint":
            break;
        case "LineString":
        case "LinearRing":
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            length = $d164a570a58ed2be$var$getLengthInternal(coordinates, radius);
            break;
        case "MultiLineString":
        case "Polygon":
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            for(i = 0, ii = coordinates.length; i < ii; ++i)length += $d164a570a58ed2be$var$getLengthInternal(coordinates[i], radius);
            break;
        case "MultiPolygon":
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            for(i = 0, ii = coordinates.length; i < ii; ++i){
                coords = coordinates[i];
                for(j = 0, jj = coords.length; j < jj; ++j)length += $d164a570a58ed2be$var$getLengthInternal(coords[j], radius);
            }
            break;
        case "GeometryCollection":
            {
                const geometries = /** @type {import("./geom/GeometryCollection.js").default} */ geometry.getGeometries();
                for(i = 0, ii = geometries.length; i < ii; ++i)length += $d164a570a58ed2be$export$f0d11c074a923179(geometries[i], options);
                break;
            }
        default:
            throw new Error("Unsupported geometry type: " + type);
    }
    return length;
}
/**
 * Returns the spherical area for a list of coordinates.
 *
 * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)
 * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
 * Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
 * Laboratory, Pasadena, CA, June 2007
 *
 * @param {Array<import("./coordinate.js").Coordinate>} coordinates List of coordinates of a linear
 * ring. If the ring is oriented clockwise, the area will be positive,
 * otherwise it will be negative.
 * @param {number} radius The sphere radius.
 * @return {number} Area (in square meters).
 */ function $d164a570a58ed2be$var$getAreaInternal(coordinates, radius) {
    let area = 0;
    const len = coordinates.length;
    let x1 = coordinates[len - 1][0];
    let y1 = coordinates[len - 1][1];
    for(let i = 0; i < len; i++){
        const x2 = coordinates[i][0];
        const y2 = coordinates[i][1];
        area += (0, $57ec69d152197e1d$export$cba01ba138429a1d)(x2 - x1) * (2 + Math.sin((0, $57ec69d152197e1d$export$cba01ba138429a1d)(y1)) + Math.sin((0, $57ec69d152197e1d$export$cba01ba138429a1d)(y2)));
        x1 = x2;
        y1 = y2;
    }
    return area * radius * radius / 2.0;
}
function $d164a570a58ed2be$export$520c40045967cb15(geometry, options) {
    options = options || {};
    const radius = options.radius || $d164a570a58ed2be$export$63f2df7bd7371262;
    const projection = options.projection || "EPSG:3857";
    const type = geometry.getType();
    if (type !== "GeometryCollection") geometry = geometry.clone().transform(projection, "EPSG:4326");
    let area = 0;
    let coordinates, coords, i, ii, j, jj;
    switch(type){
        case "Point":
        case "MultiPoint":
        case "LineString":
        case "MultiLineString":
        case "LinearRing":
            break;
        case "Polygon":
            coordinates = /** @type {import("./geom/Polygon.js").default} */ geometry.getCoordinates();
            area = Math.abs($d164a570a58ed2be$var$getAreaInternal(coordinates[0], radius));
            for(i = 1, ii = coordinates.length; i < ii; ++i)area -= Math.abs($d164a570a58ed2be$var$getAreaInternal(coordinates[i], radius));
            break;
        case "MultiPolygon":
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            for(i = 0, ii = coordinates.length; i < ii; ++i){
                coords = coordinates[i];
                area += Math.abs($d164a570a58ed2be$var$getAreaInternal(coords[0], radius));
                for(j = 1, jj = coords.length; j < jj; ++j)area -= Math.abs($d164a570a58ed2be$var$getAreaInternal(coords[j], radius));
            }
            break;
        case "GeometryCollection":
            {
                const geometries = /** @type {import("./geom/GeometryCollection.js").default} */ geometry.getGeometries();
                for(i = 0, ii = geometries.length; i < ii; ++i)area += $d164a570a58ed2be$export$520c40045967cb15(geometries[i], options);
                break;
            }
        default:
            throw new Error("Unsupported geometry type: " + type);
    }
    return area;
}
function $d164a570a58ed2be$export$cc800923e997bb8(c1, distance, bearing, radius) {
    radius = radius || $d164a570a58ed2be$export$63f2df7bd7371262;
    const lat1 = (0, $57ec69d152197e1d$export$cba01ba138429a1d)(c1[1]);
    const lon1 = (0, $57ec69d152197e1d$export$cba01ba138429a1d)(c1[0]);
    const dByR = distance / radius;
    const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
    const lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
    return [
        (0, $57ec69d152197e1d$export$56cb859c01fa134d)(lon),
        (0, $57ec69d152197e1d$export$56cb859c01fa134d)(lat)
    ];
}


/**
 * @module ol/console
 */ /**
 * @typedef {'info'|'warn'|'error'|'none'} Level
 */ /**
 * @type {Object<Level, number>}
 */ const $46b514704f775400$var$levels = {
    info: 1,
    warn: 2,
    error: 3,
    none: 4
};
/**
 * @type {number}
 */ let $46b514704f775400$var$level = $46b514704f775400$var$levels.info;
function $46b514704f775400$export$2c97a59140dbf245(l) {
    $46b514704f775400$var$level = $46b514704f775400$var$levels[l];
}
function $46b514704f775400$export$bef1f36f5486a6a3(...args) {
    if ($46b514704f775400$var$level > $46b514704f775400$var$levels.info) return;
    console.log(...args); // eslint-disable-line no-console
}
function $46b514704f775400$export$c106dd0671a0fc2d(...args) {
    if ($46b514704f775400$var$level > $46b514704f775400$var$levels.warn) return;
    console.warn(...args); // eslint-disable-line no-console
}
function $46b514704f775400$export$a3bc9b8ed74fc(...args) {
    if ($46b514704f775400$var$level > $46b514704f775400$var$levels.error) return;
    console.error(...args); // eslint-disable-line no-console
}


let $983289ae1d13cd2a$var$showCoordinateWarning = true;
function $983289ae1d13cd2a$export$ed949affbc7c4223(disable) {
    const hide = disable === undefined ? true : disable;
    $983289ae1d13cd2a$var$showCoordinateWarning = !hide;
}
function $983289ae1d13cd2a$export$dd516654c5f598fb(input, output) {
    if (output !== undefined) {
        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];
        output;
    } else output = input.slice();
    return output;
}
function $983289ae1d13cd2a$export$83e8ab53904f8022(input, output) {
    if (output !== undefined && input !== output) {
        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];
        input = output;
    }
    return input;
}
function $983289ae1d13cd2a$export$59ae956cd3e343f7(projection) {
    (0, $685869700e166c3a$export$e16d8520af44a096)(projection.getCode(), projection);
    (0, $00727a2fe5eeabf8$export$e16d8520af44a096)(projection, projection, $983289ae1d13cd2a$export$dd516654c5f598fb);
}
function $983289ae1d13cd2a$export$638ad73f7aafb913(projections) {
    projections.forEach($983289ae1d13cd2a$export$59ae956cd3e343f7);
}
function $983289ae1d13cd2a$export$3988ae62b71be9a3(projectionLike) {
    return typeof projectionLike === "string" ? (0, $685869700e166c3a$export$3988ae62b71be9a3)(/** @type {string} */ projectionLike) : /** @type {Projection} */ projectionLike || null;
}
function $983289ae1d13cd2a$export$2d8f7b4eec383d44(projection, resolution, point, units) {
    projection = $983289ae1d13cd2a$export$3988ae62b71be9a3(projection);
    let pointResolution;
    const getter = projection.getPointResolutionFunc();
    if (getter) {
        pointResolution = getter(resolution, point);
        if (units && units !== projection.getUnits()) {
            const metersPerUnit = projection.getMetersPerUnit();
            if (metersPerUnit) pointResolution = pointResolution * metersPerUnit / (0, $6a4fde186e5464e9$export$1482081eec883108)[units];
        }
    } else {
        const projUnits = projection.getUnits();
        if (projUnits == "degrees" && !units || units == "degrees") pointResolution = resolution;
        else {
            // Estimate point resolution by transforming the center pixel to EPSG:4326,
            // measuring its width and height on the normal sphere, and taking the
            // average of the width and height.
            const toEPSG4326 = $983289ae1d13cd2a$export$e3c4995a701c26a3(projection, $983289ae1d13cd2a$export$3988ae62b71be9a3("EPSG:4326"));
            if (toEPSG4326 === $983289ae1d13cd2a$export$83e8ab53904f8022 && projUnits !== "degrees") // no transform is available
            pointResolution = resolution * projection.getMetersPerUnit();
            else {
                let vertices = [
                    point[0] - resolution / 2,
                    point[1],
                    point[0] + resolution / 2,
                    point[1],
                    point[0],
                    point[1] - resolution / 2,
                    point[0],
                    point[1] + resolution / 2
                ];
                vertices = toEPSG4326(vertices, vertices, 2);
                const width = (0, $d164a570a58ed2be$export$79376507b09a66f)(vertices.slice(0, 2), vertices.slice(2, 4));
                const height = (0, $d164a570a58ed2be$export$79376507b09a66f)(vertices.slice(4, 6), vertices.slice(6, 8));
                pointResolution = (width + height) / 2;
            }
            const metersPerUnit = units ? (0, $6a4fde186e5464e9$export$1482081eec883108)[units] : projection.getMetersPerUnit();
            if (metersPerUnit !== undefined) pointResolution /= metersPerUnit;
        }
    }
    return pointResolution;
}
function $983289ae1d13cd2a$export$eeb8392580a05a37(projections) {
    $983289ae1d13cd2a$export$638ad73f7aafb913(projections);
    projections.forEach(function(source) {
        projections.forEach(function(destination) {
            if (source !== destination) (0, $00727a2fe5eeabf8$export$e16d8520af44a096)(source, destination, $983289ae1d13cd2a$export$dd516654c5f598fb);
        });
    });
}
function $983289ae1d13cd2a$export$4856f21c2f184f24(projections1, projections2, forwardTransform, inverseTransform) {
    projections1.forEach(function(projection1) {
        projections2.forEach(function(projection2) {
            (0, $00727a2fe5eeabf8$export$e16d8520af44a096)(projection1, projection2, forwardTransform);
            (0, $00727a2fe5eeabf8$export$e16d8520af44a096)(projection2, projection1, inverseTransform);
        });
    });
}
function $983289ae1d13cd2a$export$4860237d10380594() {
    (0, $685869700e166c3a$export$42ffd38884aecdac)();
    (0, $00727a2fe5eeabf8$export$42ffd38884aecdac)();
}
function $983289ae1d13cd2a$export$549167224996a0fb(projection, defaultCode) {
    if (!projection) return $983289ae1d13cd2a$export$3988ae62b71be9a3(defaultCode);
    if (typeof projection === "string") return $983289ae1d13cd2a$export$3988ae62b71be9a3(projection);
    return /** @type {Projection} */ projection;
}
function $983289ae1d13cd2a$export$6b4aafd331159e0d(coordTransform) {
    return(/**
     * @param {Array<number>} input Input.
     * @param {Array<number>} [output] Output.
     * @param {number} [dimension] Dimension.
     * @return {Array<number>} Output.
     */ function(input, output, dimension) {
        const length = input.length;
        dimension = dimension !== undefined ? dimension : 2;
        output = output !== undefined ? output : new Array(length);
        for(let i = 0; i < length; i += dimension){
            const point = coordTransform(input.slice(i, i + dimension));
            const pointLength = point.length;
            for(let j = 0, jj = dimension; j < jj; ++j)output[i + j] = j >= pointLength ? input[i + j] : point[j];
        }
        return output;
    });
}
function $983289ae1d13cd2a$export$6b1c2e6623f4f49d(source, destination, forward, inverse) {
    const sourceProj = $983289ae1d13cd2a$export$3988ae62b71be9a3(source);
    const destProj = $983289ae1d13cd2a$export$3988ae62b71be9a3(destination);
    (0, $00727a2fe5eeabf8$export$e16d8520af44a096)(sourceProj, destProj, $983289ae1d13cd2a$export$6b4aafd331159e0d(forward));
    (0, $00727a2fe5eeabf8$export$e16d8520af44a096)(destProj, sourceProj, $983289ae1d13cd2a$export$6b4aafd331159e0d(inverse));
}
function $983289ae1d13cd2a$export$b15d9668511529b9(coordinate, projection) {
    $983289ae1d13cd2a$export$ed949affbc7c4223();
    return $983289ae1d13cd2a$export$51186ad6e864892a(coordinate, "EPSG:4326", projection !== undefined ? projection : "EPSG:3857");
}
function $983289ae1d13cd2a$export$3fb495868742d370(coordinate, projection) {
    const lonLat = $983289ae1d13cd2a$export$51186ad6e864892a(coordinate, projection !== undefined ? projection : "EPSG:3857", "EPSG:4326");
    const lon = lonLat[0];
    if (lon < -180 || lon > 180) lonLat[0] = (0, $57ec69d152197e1d$export$ba467bec01d66def)(lon + 180, 360) - 180;
    return lonLat;
}
function $983289ae1d13cd2a$export$fe091d73a555748b(projection1, projection2) {
    if (projection1 === projection2) return true;
    const equalUnits = projection1.getUnits() === projection2.getUnits();
    if (projection1.getCode() === projection2.getCode()) return equalUnits;
    const transformFunc = $983289ae1d13cd2a$export$e3c4995a701c26a3(projection1, projection2);
    return transformFunc === $983289ae1d13cd2a$export$dd516654c5f598fb && equalUnits;
}
function $983289ae1d13cd2a$export$e3c4995a701c26a3(sourceProjection, destinationProjection) {
    const sourceCode = sourceProjection.getCode();
    const destinationCode = destinationProjection.getCode();
    let transformFunc = (0, $00727a2fe5eeabf8$export$3988ae62b71be9a3)(sourceCode, destinationCode);
    if (!transformFunc) transformFunc = $983289ae1d13cd2a$export$83e8ab53904f8022;
    return transformFunc;
}
function $983289ae1d13cd2a$export$fce0c6cfca85ed96(source, destination) {
    const sourceProjection = $983289ae1d13cd2a$export$3988ae62b71be9a3(source);
    const destinationProjection = $983289ae1d13cd2a$export$3988ae62b71be9a3(destination);
    return $983289ae1d13cd2a$export$e3c4995a701c26a3(sourceProjection, destinationProjection);
}
function $983289ae1d13cd2a$export$51186ad6e864892a(coordinate, source, destination) {
    const transformFunc = $983289ae1d13cd2a$export$fce0c6cfca85ed96(source, destination);
    return transformFunc(coordinate, undefined, coordinate.length);
}
function $983289ae1d13cd2a$export$751c68e0e0efff79(extent, source, destination, stops) {
    const transformFunc = $983289ae1d13cd2a$export$fce0c6cfca85ed96(source, destination);
    return (0, $84be800ca44e672c$export$9f9dcb98c894b623)(extent, transformFunc, undefined, stops);
}
function $983289ae1d13cd2a$export$affbde93b1db73f8(point, sourceProjection, destinationProjection) {
    const transformFunc = $983289ae1d13cd2a$export$e3c4995a701c26a3(sourceProjection, destinationProjection);
    return transformFunc(point);
}
/**
 * @type {Projection|null}
 */ let $983289ae1d13cd2a$var$userProjection = null;
function $983289ae1d13cd2a$export$d0aeadbeac54116e(projection) {
    $983289ae1d13cd2a$var$userProjection = $983289ae1d13cd2a$export$3988ae62b71be9a3(projection);
}
function $983289ae1d13cd2a$export$1ae11279759d4e8f() {
    $983289ae1d13cd2a$var$userProjection = null;
}
function $983289ae1d13cd2a$export$3973b77d5f6f2790() {
    return $983289ae1d13cd2a$var$userProjection;
}
function $983289ae1d13cd2a$export$aa7494edfbe36197() {
    $983289ae1d13cd2a$export$d0aeadbeac54116e("EPSG:4326");
}
function $983289ae1d13cd2a$export$698f563af1ba02a5(coordinate, sourceProjection) {
    if (!$983289ae1d13cd2a$var$userProjection) return coordinate;
    return $983289ae1d13cd2a$export$51186ad6e864892a(coordinate, sourceProjection, $983289ae1d13cd2a$var$userProjection);
}
function $983289ae1d13cd2a$export$d4b8ec0b96db1ee2(coordinate, destProjection) {
    if (!$983289ae1d13cd2a$var$userProjection) {
        if ($983289ae1d13cd2a$var$showCoordinateWarning && !(0, $c65bc16e55ef0e33$export$e9bab7fafb253603)(coordinate, [
            0,
            0
        ]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {
            $983289ae1d13cd2a$var$showCoordinateWarning = false;
            (0, $46b514704f775400$export$c106dd0671a0fc2d)("Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.");
        }
        return coordinate;
    }
    return $983289ae1d13cd2a$export$51186ad6e864892a(coordinate, $983289ae1d13cd2a$var$userProjection, destProjection);
}
function $983289ae1d13cd2a$export$96bfd09e2cffb006(extent, sourceProjection) {
    if (!$983289ae1d13cd2a$var$userProjection) return extent;
    return $983289ae1d13cd2a$export$751c68e0e0efff79(extent, sourceProjection, $983289ae1d13cd2a$var$userProjection);
}
function $983289ae1d13cd2a$export$494be3a3a25689ca(extent, destProjection) {
    if (!$983289ae1d13cd2a$var$userProjection) return extent;
    return $983289ae1d13cd2a$export$751c68e0e0efff79(extent, $983289ae1d13cd2a$var$userProjection, destProjection);
}
function $983289ae1d13cd2a$export$b56bb8ad8b3a00e9(resolution, sourceProjection) {
    if (!$983289ae1d13cd2a$var$userProjection) return resolution;
    const sourceUnits = $983289ae1d13cd2a$export$3988ae62b71be9a3(sourceProjection).getUnits();
    const userUnits = $983289ae1d13cd2a$var$userProjection.getUnits();
    return sourceUnits && userUnits ? resolution * (0, $6a4fde186e5464e9$export$1482081eec883108)[sourceUnits] / (0, $6a4fde186e5464e9$export$1482081eec883108)[userUnits] : resolution;
}
function $983289ae1d13cd2a$export$bd1cd3b88140b906(resolution, destProjection) {
    if (!$983289ae1d13cd2a$var$userProjection) return resolution;
    const sourceUnits = $983289ae1d13cd2a$export$3988ae62b71be9a3(destProjection).getUnits();
    const userUnits = $983289ae1d13cd2a$var$userProjection.getUnits();
    return sourceUnits && userUnits ? resolution * (0, $6a4fde186e5464e9$export$1482081eec883108)[userUnits] / (0, $6a4fde186e5464e9$export$1482081eec883108)[sourceUnits] : resolution;
}
function $983289ae1d13cd2a$export$1873f9cfeb8bd1d6(sourceProj, destProj, transform) {
    return function(coord) {
        let transformed, worldsAway;
        if (sourceProj.canWrapX()) {
            const sourceExtent = sourceProj.getExtent();
            const sourceExtentWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(sourceExtent);
            coord = coord.slice(0);
            worldsAway = (0, $c65bc16e55ef0e33$export$24e2b27d1ff0c1d5)(coord, sourceProj, sourceExtentWidth);
            if (worldsAway) // Move x to the real world
            coord[0] = coord[0] - worldsAway * sourceExtentWidth;
            coord[0] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(coord[0], sourceExtent[0], sourceExtent[2]);
            coord[1] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(coord[1], sourceExtent[1], sourceExtent[3]);
            transformed = transform(coord);
        } else transformed = transform(coord);
        if (worldsAway && destProj.canWrapX()) // Move transformed coordinate back to the offset world
        transformed[0] += worldsAway * (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(destProj.getExtent());
        return transformed;
    };
}
function $983289ae1d13cd2a$export$86eed449eb2dcac4() {
    // Add transformations that don't alter coordinates to convert within set of
    // projections with equal meaning.
    $983289ae1d13cd2a$export$eeb8392580a05a37((0, $e6bed287da12a40a$export$b508d7ad9a891c1b));
    $983289ae1d13cd2a$export$eeb8392580a05a37((0, $366cef9ace33c799$export$b508d7ad9a891c1b));
    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
    // coordinates and back.
    $983289ae1d13cd2a$export$4856f21c2f184f24((0, $366cef9ace33c799$export$b508d7ad9a891c1b), (0, $e6bed287da12a40a$export$b508d7ad9a891c1b), (0, $e6bed287da12a40a$export$1ff8bb36c0983070), (0, $e6bed287da12a40a$export$8c71322ec28ed6b4));
}
$983289ae1d13cd2a$export$86eed449eb2dcac4();





/**
 * @module ol/centerconstraint
 */ 
function $266312e45c8c12e4$export$c2f0af2c946f6897(extent, onlyCenter, smooth) {
    return(/**
     * @param {import("./coordinate.js").Coordinate|undefined} center Center.
     * @param {number|undefined} resolution Resolution.
     * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @param {Array<number>} [centerShift] Shift between map center and viewport center.
     * @return {import("./coordinate.js").Coordinate|undefined} Center.
     */ function(center, resolution, size, isMoving, centerShift) {
        if (!center) return undefined;
        if (!resolution && !onlyCenter) return center;
        const viewWidth = onlyCenter ? 0 : size[0] * resolution;
        const viewHeight = onlyCenter ? 0 : size[1] * resolution;
        const shiftX = centerShift ? centerShift[0] : 0;
        const shiftY = centerShift ? centerShift[1] : 0;
        let minX = extent[0] + viewWidth / 2 + shiftX;
        let maxX = extent[2] - viewWidth / 2 + shiftX;
        let minY = extent[1] + viewHeight / 2 + shiftY;
        let maxY = extent[3] - viewHeight / 2 + shiftY;
        // note: when zooming out of bounds, min and max values for x and y may
        // end up inverted (min > max); this has to be accounted for
        if (minX > maxX) {
            minX = (maxX + minX) / 2;
            maxX = minX;
        }
        if (minY > maxY) {
            minY = (maxY + minY) / 2;
            maxY = minY;
        }
        let x = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(center[0], minX, maxX);
        let y = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(center[1], minY, maxY);
        // during an interaction, allow some overscroll
        if (isMoving && smooth && resolution) {
            const ratio = 30 * resolution;
            x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
            y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
        }
        return [
            x,
            y
        ];
    });
}
function $266312e45c8c12e4$export$f883a24d5edde77c(center) {
    return center;
}



/**
 * @module ol/resolutionconstraint
 */ 


/**
 * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
 */ /**
 * Returns a modified resolution taking into account the viewport size and maximum
 * allowed extent.
 * @param {number} resolution Resolution
 * @param {import("./extent.js").Extent} maxExtent Maximum allowed extent.
 * @param {import("./size.js").Size} viewportSize Viewport size.
 * @param {boolean} showFullExtent Whether to show the full extent.
 * @return {number} Capped resolution.
 */ function $ba6928caf79ac783$var$getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {
    const xResolution = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(maxExtent) / viewportSize[0];
    const yResolution = (0, $84be800ca44e672c$export$c08559766941f856)(maxExtent) / viewportSize[1];
    if (showFullExtent) return Math.min(resolution, Math.max(xResolution, yResolution));
    return Math.min(resolution, Math.min(xResolution, yResolution));
}
/**
 * Returns a modified resolution to be between maxResolution and minResolution while
 * still allowing the value to be slightly out of bounds.
 * Note: the computation is based on the logarithm function (ln):
 *  - at 1, ln(x) is 0
 *  - above 1, ln(x) keeps increasing but at a much slower pace than x
 * The final result is clamped to prevent getting too far away from bounds.
 * @param {number} resolution Resolution.
 * @param {number} maxResolution Max resolution.
 * @param {number} minResolution Min resolution.
 * @return {number} Smoothed resolution.
 */ function $ba6928caf79ac783$var$getSmoothClampedResolution(resolution, maxResolution, minResolution) {
    let result = Math.min(resolution, maxResolution);
    const ratio = 50;
    result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;
    if (minResolution) {
        result = Math.max(result, minResolution);
        result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;
    }
    return (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(result, minResolution / 2, maxResolution * 2);
}
function $ba6928caf79ac783$export$d65a517690fc4385(resolutions, smooth, maxExtent, showFullExtent) {
    smooth = smooth !== undefined ? smooth : true;
    return(/**
     * @param {number|undefined} resolution Resolution.
     * @param {number} direction Direction.
     * @param {import("./size.js").Size} size Viewport size.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Resolution.
     */ function(resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
            const maxResolution = resolutions[0];
            const minResolution = resolutions[resolutions.length - 1];
            const cappedMaxRes = maxExtent ? $ba6928caf79ac783$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;
            // during interacting or animating, allow intermediary values
            if (isMoving) {
                if (!smooth) return (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);
                return $ba6928caf79ac783$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
            }
            const capped = Math.min(cappedMaxRes, resolution);
            const z = Math.floor((0, $69c1cc8ae30f997f$export$8a3786cc03fdb777)(resolutions, capped, direction));
            if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) return resolutions[z + 1];
            return resolutions[z];
        }
        return undefined;
    });
}
function $ba6928caf79ac783$export$22ac0f6b219de91a(power, maxResolution, minResolution, smooth, maxExtent, showFullExtent) {
    smooth = smooth !== undefined ? smooth : true;
    minResolution = minResolution !== undefined ? minResolution : 0;
    return(/**
     * @param {number|undefined} resolution Resolution.
     * @param {number} direction Direction.
     * @param {import("./size.js").Size} size Viewport size.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Resolution.
     */ function(resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
            const cappedMaxRes = maxExtent ? $ba6928caf79ac783$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;
            // during interacting or animating, allow intermediary values
            if (isMoving) {
                if (!smooth) return (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);
                return $ba6928caf79ac783$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
            }
            const tolerance = 1e-9;
            const minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);
            const offset = -direction * (0.5 - tolerance) + 0.5;
            const capped = Math.min(cappedMaxRes, resolution);
            const cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);
            const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
            const newResolution = maxResolution / Math.pow(power, zoomLevel);
            return (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(newResolution, minResolution, cappedMaxRes);
        }
        return undefined;
    });
}
function $ba6928caf79ac783$export$1c4e6da9b4b066fe(maxResolution, minResolution, smooth, maxExtent, showFullExtent) {
    smooth = smooth !== undefined ? smooth : true;
    return(/**
     * @param {number|undefined} resolution Resolution.
     * @param {number} direction Direction.
     * @param {import("./size.js").Size} size Viewport size.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Resolution.
     */ function(resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
            const cappedMaxRes = maxExtent ? $ba6928caf79ac783$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;
            if (!smooth || !isMoving) return (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);
            return $ba6928caf79ac783$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
        }
        return undefined;
    });
}


/**
 * @module ol/rotationconstraint
 */ 
function $4412a0460d6cbb1d$export$e20fbacbb41798b(rotation) {
    if (rotation !== undefined) return 0;
    return undefined;
}
function $4412a0460d6cbb1d$export$f883a24d5edde77c(rotation) {
    if (rotation !== undefined) return rotation;
    return undefined;
}
function $4412a0460d6cbb1d$export$9ba78806de831083(n) {
    const theta = 2 * Math.PI / n;
    return(/**
     * @param {number|undefined} rotation Rotation.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Rotation.
     */ function(rotation, isMoving) {
        if (isMoving) return rotation;
        if (rotation !== undefined) {
            rotation = Math.floor(rotation / theta + 0.5) * theta;
            return rotation;
        }
        return undefined;
    });
}
function $4412a0460d6cbb1d$export$17a6e6f3448b17e8(tolerance) {
    tolerance = tolerance || (0, $57ec69d152197e1d$export$cba01ba138429a1d)(5);
    return(/**
     * @param {number|undefined} rotation Rotation.
     * @param {boolean} [isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Rotation.
     */ function(rotation, isMoving) {
        if (isMoving) return rotation;
        if (rotation !== undefined) {
            if (Math.abs(rotation) <= tolerance) return 0;
            return rotation;
        }
        return undefined;
    });
}


/**
 * @module ol/easing
 */ /**
 * Start slow and speed up.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */ function $b6cb732edc5512cf$export$929e5a82286172a6(t) {
    return Math.pow(t, 3);
}
function $b6cb732edc5512cf$export$57636bb43b1ccbb0(t) {
    return 1 - $b6cb732edc5512cf$export$929e5a82286172a6(1 - t);
}
function $b6cb732edc5512cf$export$9b47139b511b56e4(t) {
    return 3 * t * t - 2 * t * t * t;
}
function $b6cb732edc5512cf$export$45db2fc2f15997e7(t) {
    return t;
}
function $b6cb732edc5512cf$export$7f4472f6708afaf3(t) {
    if (t < 0.5) return $b6cb732edc5512cf$export$9b47139b511b56e4(2 * t);
    return 1 - $b6cb732edc5512cf$export$9b47139b511b56e4(2 * (t - 0.5));
}




/**
 * @module ol/geom/Polygon
 */ /**
 * @module ol/geom/LinearRing
 */ /**
 * @module ol/geom/SimpleGeometry
 */ /**
 * @module ol/geom/Geometry
 */ 





/**
 * @module ol/geom/flat/transform
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {import("../../transform.js").Transform} transform Transform.
 * @param {Array<number>} [dest] Destination.
 * @return {Array<number>} Transformed coordinates.
 */ function $9a4105a6a338adf4$export$b92b2dedcfff79de(flatCoordinates, offset, end, stride, transform, dest) {
    dest = dest ? dest : [];
    let i = 0;
    for(let j = offset; j < end; j += stride){
        const x = flatCoordinates[j];
        const y = flatCoordinates[j + 1];
        dest[i++] = transform[0] * x + transform[2] * y + transform[4];
        dest[i++] = transform[1] * x + transform[3] * y + transform[5];
    }
    if (dest && dest.length != i) dest.length = i;
    return dest;
}
function $9a4105a6a338adf4$export$bb628a54ab399bc9(flatCoordinates, offset, end, stride, angle, anchor, dest) {
    dest = dest ? dest : [];
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for(let j = offset; j < end; j += stride){
        const deltaX = flatCoordinates[j] - anchorX;
        const deltaY = flatCoordinates[j + 1] - anchorY;
        dest[i++] = anchorX + deltaX * cos - deltaY * sin;
        dest[i++] = anchorY + deltaX * sin + deltaY * cos;
        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];
    }
    if (dest && dest.length != i) dest.length = i;
    return dest;
}
function $9a4105a6a338adf4$export$dcdf75081b88279d(flatCoordinates, offset, end, stride, sx, sy, anchor, dest) {
    dest = dest ? dest : [];
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for(let j = offset; j < end; j += stride){
        const deltaX = flatCoordinates[j] - anchorX;
        const deltaY = flatCoordinates[j + 1] - anchorY;
        dest[i++] = anchorX + sx * deltaX;
        dest[i++] = anchorY + sy * deltaY;
        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];
    }
    if (dest && dest.length != i) dest.length = i;
    return dest;
}
function $9a4105a6a338adf4$export$d73ee8ef04f5226a(flatCoordinates, offset, end, stride, deltaX, deltaY, dest) {
    dest = dest ? dest : [];
    let i = 0;
    for(let j = offset; j < end; j += stride){
        dest[i++] = flatCoordinates[j] + deltaX;
        dest[i++] = flatCoordinates[j + 1] + deltaY;
        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];
    }
    if (dest && dest.length != i) dest.length = i;
    return dest;
}


/**
 * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout
 * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
 * or measure ('M') coordinate is available.
 */ /**
 * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type
 * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,
 * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
 * `'GeometryCollection'`, or `'Circle'`.
 */ /**
 * @type {import("../transform.js").Transform}
 */ const $05f95d883ca13ae5$var$tmpTransform = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for vector geometries.
 *
 * To get notified of changes to the geometry, register a listener for the
 * generic `change` event on your geometry instance.
 *
 * @abstract
 * @api
 */ class $05f95d883ca13ae5$var$Geometry extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    constructor(){
        super();
        /**
     * @private
     * @type {import("../extent.js").Extent}
     */ this.extent_ = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
        /**
     * @private
     * @type {number}
     */ this.extentRevision_ = -1;
        /**
     * @protected
     * @type {number}
     */ this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        /**
     * @protected
     * @type {number}
     */ this.simplifiedGeometryRevision = 0;
        /**
     * Get a transformed and simplified version of the geometry.
     * @abstract
     * @param {number} revision The geometry revision.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
     * @return {Geometry} Simplified geometry.
     */ this.simplifyTransformedInternal = (0, $2c3aa3ce33eccc0f$export$ff83df6f9971435f)(function(revision, squaredTolerance, transform) {
            if (!transform) return this.getSimplifiedGeometry(squaredTolerance);
            const clone = this.clone();
            clone.applyTransform(transform);
            return clone.getSimplifiedGeometry(squaredTolerance);
        });
    }
    /**
   * Get a transformed and simplified version of the geometry.
   * @abstract
   * @param {number} squaredTolerance Squared tolerance.
   * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
   * @return {Geometry} Simplified geometry.
   */ simplifyTransformed(squaredTolerance, transform) {
        return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, transform);
    }
    /**
   * Make a complete copy of the geometry.
   * @abstract
   * @return {!Geometry} Clone.
   */ clone() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @abstract
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */ containsXY(x, y) {
        const coord = this.getClosestPoint([
            x,
            y
        ]);
        return coord[0] === x && coord[1] === y;
    }
    /**
   * Return the closest point of the geometry to the passed point as
   * {@link module:ol/coordinate~Coordinate coordinate}.
   * @param {import("../coordinate.js").Coordinate} point Point.
   * @param {import("../coordinate.js").Coordinate} [closestPoint] Closest point.
   * @return {import("../coordinate.js").Coordinate} Closest point.
   * @api
   */ getClosestPoint(point, closestPoint) {
        closestPoint = closestPoint ? closestPoint : [
            NaN,
            NaN
        ];
        this.closestPointXY(point[0], point[1], closestPoint, Infinity);
        return closestPoint;
    }
    /**
   * Returns true if this geometry includes the specified coordinate. If the
   * coordinate is on the boundary of the geometry, returns false.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} Contains coordinate.
   * @api
   */ intersectsCoordinate(coordinate) {
        return this.containsXY(coordinate[0], coordinate[1]);
    }
    /**
   * @abstract
   * @param {import("../extent.js").Extent} extent Extent.
   * @protected
   * @return {import("../extent.js").Extent} extent Extent.
   */ computeExtent(extent) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Get the extent of the geometry.
   * @param {import("../extent.js").Extent} [extent] Extent.
   * @return {import("../extent.js").Extent} extent Extent.
   * @api
   */ getExtent(extent) {
        if (this.extentRevision_ != this.getRevision()) {
            const extent = this.computeExtent(this.extent_);
            if (isNaN(extent[0]) || isNaN(extent[1])) (0, $84be800ca44e672c$export$3e2152b047719fa1)(extent);
            this.extentRevision_ = this.getRevision();
        }
        return (0, $84be800ca44e672c$export$6a4fe494c558c238)(this.extent_, extent);
    }
    /**
   * Rotate the geometry around a given coordinate. This modifies the geometry
   * coordinates in place.
   * @abstract
   * @param {number} angle Rotation angle in radians.
   * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
   * @api
   */ rotate(angle, anchor) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Scale the geometry (with an optional origin).  This modifies the geometry
   * coordinates in place.
   * @abstract
   * @param {number} sx The scaling factor in the x-direction.
   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
   * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
   *     of the geometry extent).
   * @api
   */ scale(sx, sy, anchor) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Create a simplified version of this geometry.  For linestrings, this uses
   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
   * algorithm.  For polygons, a quantization-based
   * simplification is used to preserve topology.
   * @param {number} tolerance The tolerance distance for simplification.
   * @return {Geometry} A new, simplified version of the original geometry.
   * @api
   */ simplify(tolerance) {
        return this.getSimplifiedGeometry(tolerance * tolerance);
    }
    /**
   * Create a simplified version of this geometry using the Douglas Peucker
   * algorithm.
   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
   * @abstract
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Geometry} Simplified geometry.
   */ getSimplifiedGeometry(squaredTolerance) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Get the type of this geometry.
   * @abstract
   * @return {Type} Geometry type.
   */ getType() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Apply a transform function to the coordinates of the geometry.
   * The geometry is modified in place.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   * @abstract
   * @param {import("../proj.js").TransformFunction} transformFn Transform function.
   * Called with a flat array of geometry coordinates.
   */ applyTransform(transformFn) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Test if the geometry and the passed extent intersect.
   * @abstract
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   */ intersectsExtent(extent) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Translate the geometry.  This modifies the geometry coordinates in place.  If
   * instead you want a new geometry, first `clone()` this geometry.
   * @abstract
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @api
   */ translate(deltaX, deltaY) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Transform each coordinate of the geometry from one coordinate reference
   * system to another. The geometry is modified in place.
   * For example, a line will be transformed to a line and a circle to a circle.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   *
   * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @return {Geometry} This geometry.  Note that original geometry is
   *     modified in place.
   * @api
   */ transform(source, destination) {
        /** @type {import("../proj/Projection.js").default} */ const sourceProj = (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(source);
        const transformFn = sourceProj.getUnits() == "tile-pixels" ? function(inCoordinates, outCoordinates, stride) {
            const pixelExtent = sourceProj.getExtent();
            const projectedExtent = sourceProj.getWorldExtent();
            const scale = (0, $84be800ca44e672c$export$c08559766941f856)(projectedExtent) / (0, $84be800ca44e672c$export$c08559766941f856)(pixelExtent);
            (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)($05f95d883ca13ae5$var$tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
            (0, $9a4105a6a338adf4$export$b92b2dedcfff79de)(inCoordinates, 0, inCoordinates.length, stride, $05f95d883ca13ae5$var$tmpTransform, outCoordinates);
            return (0, $983289ae1d13cd2a$export$fce0c6cfca85ed96)(sourceProj, destination)(inCoordinates, outCoordinates, stride);
        } : (0, $983289ae1d13cd2a$export$fce0c6cfca85ed96)(sourceProj, destination);
        this.applyTransform(transformFn);
        return this;
    }
}
var $05f95d883ca13ae5$export$2e2bcd8739ae039 = $05f95d883ca13ae5$var$Geometry;





/**
 * @classdesc
 * Abstract base class; only used for creating subclasses; do not instantiate
 * in apps, as cannot be rendered.
 *
 * @abstract
 * @api
 */ class $ecdcc798f2987118$var$SimpleGeometry extends (0, $05f95d883ca13ae5$export$2e2bcd8739ae039) {
    constructor(){
        super();
        /**
     * @protected
     * @type {import("./Geometry.js").GeometryLayout}
     */ this.layout = "XY";
        /**
     * @protected
     * @type {number}
     */ this.stride = 2;
        /**
     * @protected
     * @type {Array<number>}
     */ this.flatCoordinates = null;
    }
    /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @protected
   * @return {import("../extent.js").Extent} extent Extent.
   */ computeExtent(extent) {
        return (0, $84be800ca44e672c$export$be0ab0bf96ca59ca)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
    }
    /**
   * @abstract
   * @return {Array<*> | null} Coordinates.
   */ getCoordinates() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Return the first coordinate of the geometry.
   * @return {import("../coordinate.js").Coordinate} First coordinate.
   * @api
   */ getFirstCoordinate() {
        return this.flatCoordinates.slice(0, this.stride);
    }
    /**
   * @return {Array<number>} Flat coordinates.
   */ getFlatCoordinates() {
        return this.flatCoordinates;
    }
    /**
   * Return the last coordinate of the geometry.
   * @return {import("../coordinate.js").Coordinate} Last point.
   * @api
   */ getLastCoordinate() {
        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
    }
    /**
   * Return the {@link import("./Geometry.js").GeometryLayout layout} of the geometry.
   * @return {import("./Geometry.js").GeometryLayout} Layout.
   * @api
   */ getLayout() {
        return this.layout;
    }
    /**
   * Create a simplified version of this geometry using the Douglas Peucker algorithm.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {SimpleGeometry} Simplified geometry.
   */ getSimplifiedGeometry(squaredTolerance) {
        if (this.simplifiedGeometryRevision !== this.getRevision()) {
            this.simplifiedGeometryMaxMinSquaredTolerance = 0;
            this.simplifiedGeometryRevision = this.getRevision();
        }
        // If squaredTolerance is negative or if we know that simplification will not
        // have any effect then just return this.
        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) return this;
        const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
        const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) return simplifiedGeometry;
        // Simplification did not actually remove any coordinates.  We now know
        // that any calls to getSimplifiedGeometry with a squaredTolerance less
        // than or equal to the current squaredTolerance will also not have any
        // effect.  This allows us to short circuit simplification (saving CPU
        // cycles) and prevents the cache of simplified geometries from filling
        // up with useless identical copies of this geometry (saving memory).
        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
        return this;
    }
    /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {SimpleGeometry} Simplified geometry.
   * @protected
   */ getSimplifiedGeometryInternal(squaredTolerance) {
        return this;
    }
    /**
   * @return {number} Stride.
   */ getStride() {
        return this.stride;
    }
    /**
   * @param {import("./Geometry.js").GeometryLayout} layout Layout.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   */ setFlatCoordinates(layout, flatCoordinates) {
        this.stride = $ecdcc798f2987118$export$6af0c1b4a8549a43(layout);
        this.layout = layout;
        this.flatCoordinates = flatCoordinates;
    }
    /**
   * @abstract
   * @param {!Array<*>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   */ setCoordinates(coordinates, layout) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @param {import("./Geometry.js").GeometryLayout|undefined} layout Layout.
   * @param {Array<*>} coordinates Coordinates.
   * @param {number} nesting Nesting.
   * @protected
   */ setLayout(layout, coordinates, nesting) {
        /** @type {number} */ let stride;
        if (layout) stride = $ecdcc798f2987118$export$6af0c1b4a8549a43(layout);
        else {
            for(let i = 0; i < nesting; ++i){
                if (coordinates.length === 0) {
                    this.layout = "XY";
                    this.stride = 2;
                    return;
                }
                coordinates = /** @type {Array} */ coordinates[0];
            }
            stride = coordinates.length;
            layout = $ecdcc798f2987118$var$getLayoutForStride(stride);
        }
        this.layout = layout;
        this.stride = stride;
    }
    /**
   * Apply a transform function to the coordinates of the geometry.
   * The geometry is modified in place.
   * If you do not want the geometry modified in place, first `clone()` it and
   * then use this function on the clone.
   * @param {import("../proj.js").TransformFunction} transformFn Transform function.
   * Called with a flat array of geometry coordinates.
   * @api
   */ applyTransform(transformFn) {
        if (this.flatCoordinates) {
            transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
            this.changed();
        }
    }
    /**
   * Rotate the geometry around a given coordinate. This modifies the geometry
   * coordinates in place.
   * @param {number} angle Rotation angle in counter-clockwise radians.
   * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
   * @api
   */ rotate(angle, anchor) {
        const flatCoordinates = this.getFlatCoordinates();
        if (flatCoordinates) {
            const stride = this.getStride();
            (0, $9a4105a6a338adf4$export$bb628a54ab399bc9)(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
            this.changed();
        }
    }
    /**
   * Scale the geometry (with an optional origin).  This modifies the geometry
   * coordinates in place.
   * @param {number} sx The scaling factor in the x-direction.
   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
   * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
   *     of the geometry extent).
   * @api
   */ scale(sx, sy, anchor) {
        if (sy === undefined) sy = sx;
        if (!anchor) anchor = (0, $84be800ca44e672c$export$c91255cadecfe081)(this.getExtent());
        const flatCoordinates = this.getFlatCoordinates();
        if (flatCoordinates) {
            const stride = this.getStride();
            (0, $9a4105a6a338adf4$export$dcdf75081b88279d)(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
            this.changed();
        }
    }
    /**
   * Translate the geometry.  This modifies the geometry coordinates in place.  If
   * instead you want a new geometry, first `clone()` this geometry.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @api
   */ translate(deltaX, deltaY) {
        const flatCoordinates = this.getFlatCoordinates();
        if (flatCoordinates) {
            const stride = this.getStride();
            (0, $9a4105a6a338adf4$export$d73ee8ef04f5226a)(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
            this.changed();
        }
    }
}
/**
 * @param {number} stride Stride.
 * @return {import("./Geometry.js").GeometryLayout} layout Layout.
 */ function $ecdcc798f2987118$var$getLayoutForStride(stride) {
    let layout;
    if (stride == 2) layout = "XY";
    else if (stride == 3) layout = "XYZ";
    else if (stride == 4) layout = "XYZM";
    return /** @type {import("./Geometry.js").GeometryLayout} */ layout;
}
function $ecdcc798f2987118$export$6af0c1b4a8549a43(layout) {
    let stride;
    if (layout == "XY") stride = 2;
    else if (layout == "XYZ" || layout == "XYM") stride = 3;
    else if (layout == "XYZM") stride = 4;
    return /** @type {number} */ stride;
}
function $ecdcc798f2987118$export$a3767472617c7861(simpleGeometry, transform, dest) {
    const flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) return null;
    const stride = simpleGeometry.getStride();
    return (0, $9a4105a6a338adf4$export$b92b2dedcfff79de)(flatCoordinates, 0, flatCoordinates.length, stride, transform, dest);
}
var $ecdcc798f2987118$export$2e2bcd8739ae039 = $ecdcc798f2987118$var$SimpleGeometry;


/**
 * @module ol/geom/flat/closest
 */ 
/**
 * Returns the point on the 2D line segment flatCoordinates[offset1] to
 * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
 * dimensions are linearly interpolated.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset1 Offset 1.
 * @param {number} offset2 Offset 2.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array<number>} closestPoint Closest point.
 */ function $cb3f29ffe7102d22$var$assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
    const x1 = flatCoordinates[offset1];
    const y1 = flatCoordinates[offset1 + 1];
    const dx = flatCoordinates[offset2] - x1;
    const dy = flatCoordinates[offset2 + 1] - y1;
    let offset;
    if (dx === 0 && dy === 0) offset = offset1;
    else {
        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
        if (t > 1) offset = offset2;
        else if (t > 0) {
            for(let i = 0; i < stride; ++i)closestPoint[i] = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);
            closestPoint.length = stride;
            return;
        } else offset = offset1;
    }
    for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];
    closestPoint.length = stride;
}
function $cb3f29ffe7102d22$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    for(offset += stride; offset < end; offset += stride){
        const x2 = flatCoordinates[offset];
        const y2 = flatCoordinates[offset + 1];
        const squaredDelta = (0, $57ec69d152197e1d$export$88e6ebb4fe54f538)(x1, y1, x2, y2);
        if (squaredDelta > max) max = squaredDelta;
        x1 = x2;
        y1 = y2;
    }
    return max;
}
function $cb3f29ffe7102d22$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max) {
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        max = $cb3f29ffe7102d22$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max);
        offset = end;
    }
    return max;
}
function $cb3f29ffe7102d22$export$37c18e6e7d50501a(flatCoordinates, offset, endss, stride, max) {
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        max = $cb3f29ffe7102d22$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max);
        offset = ends[ends.length - 1];
    }
    return max;
}
function $cb3f29ffe7102d22$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {
    if (offset == end) return minSquaredDistance;
    let i, squaredDistance;
    if (maxDelta === 0) {
        // All points are identical, so just test the first point.
        squaredDistance = (0, $57ec69d152197e1d$export$88e6ebb4fe54f538)(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
        if (squaredDistance < minSquaredDistance) {
            for(i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];
            closestPoint.length = stride;
            return squaredDistance;
        }
        return minSquaredDistance;
    }
    tmpPoint = tmpPoint ? tmpPoint : [
        NaN,
        NaN
    ];
    let index = offset + stride;
    while(index < end){
        $cb3f29ffe7102d22$var$assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
        squaredDistance = (0, $57ec69d152197e1d$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);
        if (squaredDistance < minSquaredDistance) {
            minSquaredDistance = squaredDistance;
            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];
            closestPoint.length = stride;
            index += stride;
        } else // Skip ahead multiple points, because we know that all the skipped
        // points cannot be any closer than the closest point we have found so
        // far.  We know this because we know how close the current point is, how
        // close the closest point we have found so far is, and the maximum
        // distance between consecutive points.  For example, if we're currently
        // at distance 10, the best we've found so far is 3, and that the maximum
        // distance between consecutive points is 2, then we'll need to skip at
        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
        // finding a closer point.  We use Math.max(..., 1) to ensure that we
        // always advance at least one point, to avoid an infinite loop.
        index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);
    }
    if (isRing) {
        // Check the closing segment.
        $cb3f29ffe7102d22$var$assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
        squaredDistance = (0, $57ec69d152197e1d$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);
        if (squaredDistance < minSquaredDistance) {
            minSquaredDistance = squaredDistance;
            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];
            closestPoint.length = stride;
        }
    }
    return minSquaredDistance;
}
function $cb3f29ffe7102d22$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {
    tmpPoint = tmpPoint ? tmpPoint : [
        NaN,
        NaN
    ];
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        minSquaredDistance = $cb3f29ffe7102d22$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
        offset = end;
    }
    return minSquaredDistance;
}
function $cb3f29ffe7102d22$export$60e067685eb8f9c4(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {
    tmpPoint = tmpPoint ? tmpPoint : [
        NaN,
        NaN
    ];
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        minSquaredDistance = $cb3f29ffe7102d22$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
        offset = ends[ends.length - 1];
    }
    return minSquaredDistance;
}



/**
 * @module ol/geom/flat/deflate
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
 * @param {number} stride Stride.
 * @return {number} offset Offset.
 */ function $e6d128aec3d5ac99$export$60815ead40ec79ab(flatCoordinates, offset, coordinate, stride) {
    for(let i = 0, ii = coordinate.length; i < ii; ++i)flatCoordinates[offset++] = coordinate[i];
    return offset;
}
function $e6d128aec3d5ac99$export$5c4daf67e03c190f(flatCoordinates, offset, coordinates, stride) {
    for(let i = 0, ii = coordinates.length; i < ii; ++i){
        const coordinate = coordinates[i];
        for(let j = 0; j < stride; ++j)flatCoordinates[offset++] = coordinate[j];
    }
    return offset;
}
function $e6d128aec3d5ac99$export$47c3746a74384d45(flatCoordinates, offset, coordinatess, stride, ends) {
    ends = ends ? ends : [];
    let i = 0;
    for(let j = 0, jj = coordinatess.length; j < jj; ++j){
        const end = $e6d128aec3d5ac99$export$5c4daf67e03c190f(flatCoordinates, offset, coordinatess[j], stride);
        ends[i++] = end;
        offset = end;
    }
    ends.length = i;
    return ends;
}
function $e6d128aec3d5ac99$export$f9f2bb59da4accd3(flatCoordinates, offset, coordinatesss, stride, endss) {
    endss = endss ? endss : [];
    let i = 0;
    for(let j = 0, jj = coordinatesss.length; j < jj; ++j){
        const ends = $e6d128aec3d5ac99$export$47c3746a74384d45(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
        if (ends.length === 0) ends[0] = offset;
        endss[i++] = ends;
        offset = ends[ends.length - 1];
    }
    endss.length = i;
    return endss;
}


/**
 * @module ol/geom/flat/simplify
 */ // Based on simplify-js https://github.com/mourner/simplify-js
// Copyright (c) 2012, Vladimir Agafonkin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    1. Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

function $116cc918e3d500bf$export$2cbbcce9030b8734(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, simplifiedFlatCoordinates) {
    simplifiedFlatCoordinates = simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];
    if (!highQuality) {
        end = $116cc918e3d500bf$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);
        flatCoordinates = simplifiedFlatCoordinates;
        offset = 0;
        stride = 2;
    }
    simplifiedFlatCoordinates.length = $116cc918e3d500bf$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);
    return simplifiedFlatCoordinates;
}
function $116cc918e3d500bf$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    const n = (end - offset) / stride;
    if (n < 3) {
        for(; offset < end; offset += stride){
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];
        }
        return simplifiedOffset;
    }
    /** @type {Array<number>} */ const markers = new Array(n);
    markers[0] = 1;
    markers[n - 1] = 1;
    /** @type {Array<number>} */ const stack = [
        offset,
        end - stride
    ];
    let index = 0;
    while(stack.length > 0){
        const last = stack.pop();
        const first = stack.pop();
        let maxSquaredDistance = 0;
        const x1 = flatCoordinates[first];
        const y1 = flatCoordinates[first + 1];
        const x2 = flatCoordinates[last];
        const y2 = flatCoordinates[last + 1];
        for(let i = first + stride; i < last; i += stride){
            const x = flatCoordinates[i];
            const y = flatCoordinates[i + 1];
            const squaredDistance = (0, $57ec69d152197e1d$export$251bb0a9cef172e6)(x, y, x1, y1, x2, y2);
            if (squaredDistance > maxSquaredDistance) {
                index = i;
                maxSquaredDistance = squaredDistance;
            }
        }
        if (maxSquaredDistance > squaredTolerance) {
            markers[(index - offset) / stride] = 1;
            if (first + stride < index) stack.push(first, index);
            if (index + stride < last) stack.push(index, last);
        }
    }
    for(let i = 0; i < n; ++i)if (markers[i]) {
        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];
        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];
    }
    return simplifiedOffset;
}
function $116cc918e3d500bf$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        simplifiedOffset = $116cc918e3d500bf$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);
        simplifiedEnds.push(simplifiedOffset);
        offset = end;
    }
    return simplifiedOffset;
}
function $116cc918e3d500bf$export$5d74fb54bb752ea0(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        const simplifiedEnds = [];
        simplifiedOffset = $116cc918e3d500bf$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
        simplifiedEndss.push(simplifiedEnds);
        offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
}
function $116cc918e3d500bf$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    if (end <= offset + stride) {
        // zero or one point, no simplification possible, so copy and return
        for(; offset < end; offset += stride){
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];
        }
        return simplifiedOffset;
    }
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    // copy first point
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    let x2 = x1;
    let y2 = y1;
    for(offset += stride; offset < end; offset += stride){
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        if ((0, $57ec69d152197e1d$export$88e6ebb4fe54f538)(x1, y1, x2, y2) > squaredTolerance) {
            // copy point at offset
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
            x1 = x2;
            y1 = y2;
        }
    }
    if (x2 != x1 || y2 != y1) {
        // copy last point
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    }
    return simplifiedOffset;
}
function $116cc918e3d500bf$export$51a0620f7a28532b(value, tolerance) {
    return tolerance * Math.round(value / tolerance);
}
function $116cc918e3d500bf$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    // do nothing if the line is empty
    if (offset == end) return simplifiedOffset;
    // snap the first coordinate (P1)
    let x1 = $116cc918e3d500bf$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);
    let y1 = $116cc918e3d500bf$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // add the first coordinate to the output
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    // find the next coordinate that does not snap to the same value as the first
    // coordinate (P2)
    let x2, y2;
    do {
        x2 = $116cc918e3d500bf$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);
        y2 = $116cc918e3d500bf$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);
        offset += stride;
        if (offset == end) {
            // all coordinates snap to the same value, the line collapses to a point
            // push the last snapped value anyway to ensure that the output contains
            // at least two points
            // FIXME should we really return at least two points anyway?
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
            return simplifiedOffset;
        }
    }while (x2 == x1 && y2 == y1);
    while(offset < end){
        // snap the next coordinate (P3)
        const x3 = $116cc918e3d500bf$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);
        const y3 = $116cc918e3d500bf$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);
        offset += stride;
        // skip P3 if it is equal to P2
        if (x3 == x2 && y3 == y2) continue;
        // calculate the delta between P1 and P2
        const dx1 = x2 - x1;
        const dy1 = y2 - y1;
        // calculate the delta between P3 and P1
        const dx2 = x3 - x1;
        const dy2 = y3 - y1;
        // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
        // P1 in the same direction then P2 is on the straight line between P1 and
        // P3
        if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {
            // discard P2 and set P2 = P3
            x2 = x3;
            y2 = y3;
            continue;
        }
        // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
        // between P3 and P1 or on the opposite half of the line to P2.  add P2,
        // and continue with P1 = P2 and P2 = P3
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        x1 = x2;
        y1 = y2;
        x2 = x3;
        y2 = y3;
    }
    // add the last point (P2)
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    return simplifiedOffset;
}
function $116cc918e3d500bf$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        simplifiedOffset = $116cc918e3d500bf$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);
        simplifiedEnds.push(simplifiedOffset);
        offset = end;
    }
    return simplifiedOffset;
}
function $116cc918e3d500bf$export$b9acf67ef05cd17c(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        const simplifiedEnds = [];
        simplifiedOffset = $116cc918e3d500bf$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
        simplifiedEndss.push(simplifiedEnds);
        offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
}


/**
 * @module ol/geom/flat/inflate
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {Array<import("../../coordinate.js").Coordinate>} [coordinates] Coordinates.
 * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
 */ function $26e6af5078c94bc3$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinates) {
    coordinates = coordinates !== undefined ? coordinates : [];
    let i = 0;
    for(let j = offset; j < end; j += stride)coordinates[i++] = flatCoordinates.slice(j, j + stride);
    coordinates.length = i;
    return coordinates;
}
function $26e6af5078c94bc3$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatess) {
    coordinatess = coordinatess !== undefined ? coordinatess : [];
    let i = 0;
    for(let j = 0, jj = ends.length; j < jj; ++j){
        const end = ends[j];
        coordinatess[i++] = $26e6af5078c94bc3$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinatess[i]);
        offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
}
function $26e6af5078c94bc3$export$915c7058aeb4dfeb(flatCoordinates, offset, endss, stride, coordinatesss) {
    coordinatesss = coordinatesss !== undefined ? coordinatesss : [];
    let i = 0;
    for(let j = 0, jj = endss.length; j < jj; ++j){
        const ends = endss[j];
        coordinatesss[i++] = ends.length === 1 && ends[0] === offset ? [] : $26e6af5078c94bc3$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatesss[i]);
        offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
}


/**
 * @module ol/geom/flat/area
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Area.
 */ function $808945bcd5aac66c$export$3c5e1905f889266e(flatCoordinates, offset, end, stride) {
    let twiceArea = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for(; offset < end; offset += stride){
        const x2 = flatCoordinates[offset];
        const y2 = flatCoordinates[offset + 1];
        twiceArea += y1 * x2 - x1 * y2;
        x1 = x2;
        y1 = y2;
    }
    return twiceArea / 2;
}
function $808945bcd5aac66c$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride) {
    let area = 0;
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        area += $808945bcd5aac66c$export$3c5e1905f889266e(flatCoordinates, offset, end, stride);
        offset = end;
    }
    return area;
}
function $808945bcd5aac66c$export$78e139679ca7205(flatCoordinates, offset, endss, stride) {
    let area = 0;
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        area += $808945bcd5aac66c$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride);
        offset = ends[ends.length - 1];
    }
    return area;
}


/**
 * @classdesc
 * Linear ring geometry. Only used as part of polygon; cannot be rendered
 * on its own.
 *
 * @api
 */ class $10811f4228331a2d$var$LinearRing extends (0, $ecdcc798f2987118$export$2e2bcd8739ae039) {
    /**
   * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
   *     For internal use, flat coordinates in combination with `layout` are also accepted.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   */ constructor(coordinates, layout){
        super();
        /**
     * @private
     * @type {number}
     */ this.maxDelta_ = -1;
        /**
     * @private
     * @type {number}
     */ this.maxDeltaRevision_ = -1;
        if (layout !== undefined && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);
        else this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ coordinates, layout);
    }
    /**
   * Make a complete copy of the geometry.
   * @return {!LinearRing} Clone.
   * @api
   */ clone() {
        return new $10811f4228331a2d$var$LinearRing(this.flatCoordinates.slice(), this.layout);
    }
    /**
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, $84be800ca44e672c$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;
        if (this.maxDeltaRevision_ != this.getRevision()) {
            this.maxDelta_ = Math.sqrt((0, $cb3f29ffe7102d22$export$bc2eb611ddf80103)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
            this.maxDeltaRevision_ = this.getRevision();
        }
        return (0, $cb3f29ffe7102d22$export$4adc8e5135fb44c)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    }
    /**
   * Return the area of the linear ring on projected plane.
   * @return {number} Area (on projected plane).
   * @api
   */ getArea() {
        return (0, $808945bcd5aac66c$export$3c5e1905f889266e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }
    /**
   * Return the coordinates of the linear ring.
   * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
   * @api
   */ getCoordinates() {
        return (0, $26e6af5078c94bc3$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }
    /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {LinearRing} Simplified LinearRing.
   * @protected
   */ getSimplifiedGeometryInternal(squaredTolerance) {
        const simplifiedFlatCoordinates = [];
        simplifiedFlatCoordinates.length = (0, $116cc918e3d500bf$export$ef693d1572e64fb8)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
        return new $10811f4228331a2d$var$LinearRing(simplifiedFlatCoordinates, "XY");
    }
    /**
   * Get the type of this geometry.
   * @return {import("./Geometry.js").Type} Geometry type.
   * @api
   */ getType() {
        return "LinearRing";
    }
    /**
   * Test if the geometry and the passed extent intersect.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   * @api
   */ intersectsExtent(extent) {
        return false;
    }
    /**
   * Set the coordinates of the linear ring.
   * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @api
   */ setCoordinates(coordinates, layout) {
        this.setLayout(layout, coordinates, 1);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        this.flatCoordinates.length = (0, $e6d128aec3d5ac99$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);
        this.changed();
    }
}
var $10811f4228331a2d$export$2e2bcd8739ae039 = $10811f4228331a2d$var$LinearRing;


/**
 * @module ol/geom/Point
 */ 



/**
 * @classdesc
 * Point geometry.
 *
 * @api
 */ class $de620c8161ba008b$var$Point extends (0, $ecdcc798f2987118$export$2e2bcd8739ae039) {
    /**
   * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   */ constructor(coordinates, layout){
        super();
        this.setCoordinates(coordinates, layout);
    }
    /**
   * Make a complete copy of the geometry.
   * @return {!Point} Clone.
   * @api
   */ clone() {
        const point = new $de620c8161ba008b$var$Point(this.flatCoordinates.slice(), this.layout);
        point.applyProperties(this);
        return point;
    }
    /**
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {
        const flatCoordinates = this.flatCoordinates;
        const squaredDistance = (0, $57ec69d152197e1d$export$88e6ebb4fe54f538)(x, y, flatCoordinates[0], flatCoordinates[1]);
        if (squaredDistance < minSquaredDistance) {
            const stride = this.stride;
            for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[i];
            closestPoint.length = stride;
            return squaredDistance;
        }
        return minSquaredDistance;
    }
    /**
   * Return the coordinate of the point.
   * @return {import("../coordinate.js").Coordinate} Coordinates.
   * @api
   */ getCoordinates() {
        return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
    }
    /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @protected
   * @return {import("../extent.js").Extent} extent Extent.
   */ computeExtent(extent) {
        return (0, $84be800ca44e672c$export$4838bf78d04a9440)(this.flatCoordinates, extent);
    }
    /**
   * Get the type of this geometry.
   * @return {import("./Geometry.js").Type} Geometry type.
   * @api
   */ getType() {
        return "Point";
    }
    /**
   * Test if the geometry and the passed extent intersect.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   * @api
   */ intersectsExtent(extent) {
        return (0, $84be800ca44e672c$export$805bdfd6d6690e97)(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
    }
    /**
   * @param {!Array<*>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @api
   */ setCoordinates(coordinates, layout) {
        this.setLayout(layout, coordinates, 0);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        this.flatCoordinates.length = (0, $e6d128aec3d5ac99$export$60815ead40ec79ab)(this.flatCoordinates, 0, coordinates, this.stride);
        this.changed();
    }
}
var $de620c8161ba008b$export$2e2bcd8739ae039 = $de620c8161ba008b$var$Point;







/**
 * @module ol/geom/flat/interiorpoint
 */ 
/**
 * @module ol/geom/flat/contains
 */ 
function $58f0282580b80064$export$cedabedc7ac0e138(flatCoordinates, offset, end, stride, extent) {
    const outside = (0, $84be800ca44e672c$export$f9ed8a3d123a08e2)(extent, /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains (x, y).
     */ function(coordinate) {
        return !$58f0282580b80064$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
    });
    return !outside;
}
function $58f0282580b80064$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, x, y) {
    // https://geomalgorithms.com/a03-_inclusion.html
    // Copyright 2000 softSurfer, 2012 Dan Sunday
    // This code may be freely used and modified for any purpose
    // providing that this copyright notice is included with it.
    // SoftSurfer makes no warranty for this code, and cannot be held
    // liable for any real or imagined damage resulting from its use.
    // Users of this code must verify correctness for their application.
    let wn = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for(; offset < end; offset += stride){
        const x2 = flatCoordinates[offset];
        const y2 = flatCoordinates[offset + 1];
        if (y1 <= y) {
            if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) wn++;
        } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) wn--;
        x1 = x2;
        y1 = y2;
    }
    return wn !== 0;
}
function $58f0282580b80064$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y) {
    if (ends.length === 0) return false;
    if (!$58f0282580b80064$export$949a7a3a4b6f34fa(flatCoordinates, offset, ends[0], stride, x, y)) return false;
    for(let i = 1, ii = ends.length; i < ii; ++i){
        if ($58f0282580b80064$export$949a7a3a4b6f34fa(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) return false;
    }
    return true;
}
function $58f0282580b80064$export$c760d9d16cf92043(flatCoordinates, offset, endss, stride, x, y) {
    if (endss.length === 0) return false;
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        if ($58f0282580b80064$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y)) return true;
        offset = ends[ends.length - 1];
    }
    return false;
}


function $0fb8cd85c41caa22$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, dest) {
    let i, ii, x, x1, x2, y1, y2;
    const y = flatCenters[flatCentersOffset + 1];
    /** @type {Array<number>} */ const intersections = [];
    // Calculate intersections with the horizontal line
    for(let r = 0, rr = ends.length; r < rr; ++r){
        const end = ends[r];
        x1 = flatCoordinates[end - stride];
        y1 = flatCoordinates[end - stride + 1];
        for(i = offset; i < end; i += stride){
            x2 = flatCoordinates[i];
            y2 = flatCoordinates[i + 1];
            if (y <= y1 && y2 <= y || y1 <= y && y <= y2) {
                x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
                intersections.push(x);
            }
            x1 = x2;
            y1 = y2;
        }
    }
    // Find the longest segment of the horizontal line that has its center point
    // inside the linear ring.
    let pointX = NaN;
    let maxSegmentLength = -Infinity;
    intersections.sort((0, $69c1cc8ae30f997f$export$fcb633242ef15540));
    x1 = intersections[0];
    for(i = 1, ii = intersections.length; i < ii; ++i){
        x2 = intersections[i];
        const segmentLength = Math.abs(x2 - x1);
        if (segmentLength > maxSegmentLength) {
            x = (x1 + x2) / 2;
            if ((0, $58f0282580b80064$export$ae868c0f6acc3355)(flatCoordinates, offset, ends, stride, x, y)) {
                pointX = x;
                maxSegmentLength = segmentLength;
            }
        }
        x1 = x2;
    }
    if (isNaN(pointX)) // There is no horizontal line that has its center point inside the linear
    // ring.  Use the center of the the linear ring's extent.
    pointX = flatCenters[flatCentersOffset];
    if (dest) {
        dest.push(pointX, y, maxSegmentLength);
        return dest;
    }
    return [
        pointX,
        y,
        maxSegmentLength
    ];
}
function $0fb8cd85c41caa22$export$11463803eda8a372(flatCoordinates, offset, endss, stride, flatCenters) {
    let interiorPoints = [];
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        interiorPoints = $0fb8cd85c41caa22$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);
        offset = ends[ends.length - 1];
    }
    return interiorPoints;
}



/**
 * @module ol/geom/flat/intersectsextent
 */ 
/**
 * @module ol/geom/flat/segments
 */ /**
 * This function calls `callback` for each segment of the flat coordinates
 * array. If the callback returns a truthy value the function returns that
 * value immediately. Otherwise the function returns `false`.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
 *     called for each segment.
 * @return {T|boolean} Value.
 * @template T
 */ function $8d8f5846de6dbcc5$export$4b80e395e36b5a56(flatCoordinates, offset, end, stride, callback) {
    let ret;
    offset += stride;
    for(; offset < end; offset += stride){
        ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));
        if (ret) return ret;
    }
    return false;
}



function $474e660540ba37db$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent) {
    const coordinatesExtent = (0, $84be800ca44e672c$export$30570204156ffd18)((0, $84be800ca44e672c$export$fe201bb3bbe031e9)(), flatCoordinates, offset, end, stride);
    if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(extent, coordinatesExtent)) return false;
    if ((0, $84be800ca44e672c$export$be866b1e0809b17e)(extent, coordinatesExtent)) return true;
    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) return true;
    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) return true;
    return (0, $8d8f5846de6dbcc5$export$4b80e395e36b5a56)(flatCoordinates, offset, end, stride, /**
     * @param {import("../../coordinate.js").Coordinate} point1 Start point.
     * @param {import("../../coordinate.js").Coordinate} point2 End point.
     * @return {boolean} `true` if the segment and the extent intersect,
     *     `false` otherwise.
     */ function(point1, point2) {
        return (0, $84be800ca44e672c$export$a6a5a7a461419425)(extent, point1, point2);
    });
}
function $474e660540ba37db$export$fdb1d8e850bf7937(flatCoordinates, offset, ends, stride, extent) {
    for(let i = 0, ii = ends.length; i < ii; ++i){
        if ($474e660540ba37db$export$40d8d71841a3d779(flatCoordinates, offset, ends[i], stride, extent)) return true;
        offset = ends[i];
    }
    return false;
}
function $474e660540ba37db$export$830a0dafbb2ef1c5(flatCoordinates, offset, end, stride, extent) {
    if ($474e660540ba37db$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent)) return true;
    if ((0, $58f0282580b80064$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[1])) return true;
    if ((0, $58f0282580b80064$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[3])) return true;
    if ((0, $58f0282580b80064$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[1])) return true;
    if ((0, $58f0282580b80064$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[3])) return true;
    return false;
}
function $474e660540ba37db$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent) {
    if (!$474e660540ba37db$export$830a0dafbb2ef1c5(flatCoordinates, offset, ends[0], stride, extent)) return false;
    if (ends.length === 1) return true;
    for(let i = 1, ii = ends.length; i < ii; ++i)if ((0, $58f0282580b80064$export$cedabedc7ac0e138)(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
        if (!$474e660540ba37db$export$40d8d71841a3d779(flatCoordinates, ends[i - 1], ends[i], stride, extent)) return false;
    }
    return true;
}
function $474e660540ba37db$export$77b72fa3792f5bf0(flatCoordinates, offset, endss, stride, extent) {
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        if ($474e660540ba37db$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent)) return true;
        offset = ends[ends.length - 1];
    }
    return false;
}


/**
 * @module ol/geom/flat/orient
 */ /**
 * @module ol/geom/flat/reverse
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 */ function $23c47dde077ea5d7$export$741858880c96b18c(flatCoordinates, offset, end, stride) {
    while(offset < end - stride){
        for(let i = 0; i < stride; ++i){
            const tmp = flatCoordinates[offset + i];
            flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
            flatCoordinates[end - stride + i] = tmp;
        }
        offset += stride;
        end -= stride;
    }
}


function $3ab399f8a01aefd6$export$318f2842ed17e094(flatCoordinates, offset, end, stride) {
    // https://stackoverflow.com/q/1165647/clockwise-method#1165943
    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp
    let edge = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for(; offset < end; offset += stride){
        const x2 = flatCoordinates[offset];
        const y2 = flatCoordinates[offset + 1];
        edge += (x2 - x1) * (y2 + y1);
        x1 = x2;
        y1 = y2;
    }
    return edge === 0 ? undefined : edge > 0;
}
function $3ab399f8a01aefd6$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right) {
    right = right !== undefined ? right : false;
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        const isClockwise = $3ab399f8a01aefd6$export$318f2842ed17e094(flatCoordinates, offset, end, stride);
        if (i === 0) {
            if (right && isClockwise || !right && !isClockwise) return false;
        } else {
            if (right && !isClockwise || !right && isClockwise) return false;
        }
        offset = end;
    }
    return true;
}
function $3ab399f8a01aefd6$export$a1d138f4bd85f4b4(flatCoordinates, offset, endss, stride, right) {
    for(let i = 0, ii = endss.length; i < ii; ++i){
        const ends = endss[i];
        if (!$3ab399f8a01aefd6$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right)) return false;
        if (ends.length) offset = ends[ends.length - 1];
    }
    return true;
}
function $3ab399f8a01aefd6$export$b71b604ddfc778c7(flatCoordinates, offset, ends, stride, right) {
    right = right !== undefined ? right : false;
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        const isClockwise = $3ab399f8a01aefd6$export$318f2842ed17e094(flatCoordinates, offset, end, stride);
        const reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;
        if (reverse) (0, $23c47dde077ea5d7$export$741858880c96b18c)(flatCoordinates, offset, end, stride);
        offset = end;
    }
    return offset;
}
function $3ab399f8a01aefd6$export$ea9ed55fc2a85010(flatCoordinates, offset, endss, stride, right) {
    for(let i = 0, ii = endss.length; i < ii; ++i)offset = $3ab399f8a01aefd6$export$b71b604ddfc778c7(flatCoordinates, offset, endss[i], stride, right);
    return offset;
}
function $3ab399f8a01aefd6$export$cb72ae403d6e78e6(flatCoordinates, ends) {
    const endss = [];
    let offset = 0;
    let prevEndIndex = 0;
    for(let i = 0, ii = ends.length; i < ii; ++i){
        const end = ends[i];
        // classifies an array of rings into polygons with outer rings and holes
        if (!$3ab399f8a01aefd6$export$318f2842ed17e094(flatCoordinates, offset, end, 2)) endss.push(ends.slice(prevEndIndex, i + 1));
        else {
            if (endss.length === 0) continue;
            endss[endss.length - 1].push(ends[prevEndIndex]);
        }
        prevEndIndex = i + 1;
        offset = end;
    }
    return endss;
}







/**
 * @classdesc
 * Polygon geometry.
 *
 * @api
 */ class $8fedf7da5a76e7a9$var$Polygon extends (0, $ecdcc798f2987118$export$2e2bcd8739ae039) {
    /**
   * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
   *     Array of linear rings that define the polygon. The first linear ring of the
   *     array defines the outer-boundary or surface of the polygon. Each subsequent
   *     linear ring defines a hole in the surface of the polygon. A linear ring is
   *     an array of vertices' coordinates where the first coordinate and the last are
   *     equivalent. (For internal use, flat coordinates in combination with
   *     `layout` and `ends` are also accepted.)
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).
   */ constructor(coordinates, layout, ends){
        super();
        /**
     * @type {Array<number>}
     * @private
     */ this.ends_ = [];
        /**
     * @private
     * @type {number}
     */ this.flatInteriorPointRevision_ = -1;
        /**
     * @private
     * @type {import("../coordinate.js").Coordinate}
     */ this.flatInteriorPoint_ = null;
        /**
     * @private
     * @type {number}
     */ this.maxDelta_ = -1;
        /**
     * @private
     * @type {number}
     */ this.maxDeltaRevision_ = -1;
        /**
     * @private
     * @type {number}
     */ this.orientedRevision_ = -1;
        /**
     * @private
     * @type {Array<number>}
     */ this.orientedFlatCoordinates_ = null;
        if (layout !== undefined && ends) {
            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);
            this.ends_ = ends;
        } else this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ coordinates, layout);
    }
    /**
   * Append the passed linear ring to this polygon.
   * @param {LinearRing} linearRing Linear ring.
   * @api
   */ appendLinearRing(linearRing) {
        if (!this.flatCoordinates) this.flatCoordinates = linearRing.getFlatCoordinates().slice();
        else (0, $69c1cc8ae30f997f$export$8b58be045bf06082)(this.flatCoordinates, linearRing.getFlatCoordinates());
        this.ends_.push(this.flatCoordinates.length);
        this.changed();
    }
    /**
   * Make a complete copy of the geometry.
   * @return {!Polygon} Clone.
   * @api
   */ clone() {
        const polygon = new $8fedf7da5a76e7a9$var$Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
        polygon.applyProperties(this);
        return polygon;
    }
    /**
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @return {number} Minimum squared distance.
   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, $84be800ca44e672c$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;
        if (this.maxDeltaRevision_ != this.getRevision()) {
            this.maxDelta_ = Math.sqrt((0, $cb3f29ffe7102d22$export$fbf31c8f2668ed5a)(this.flatCoordinates, 0, this.ends_, this.stride, 0));
            this.maxDeltaRevision_ = this.getRevision();
        }
        return (0, $cb3f29ffe7102d22$export$5a48a0eefcf14992)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    }
    /**
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */ containsXY(x, y) {
        return (0, $58f0282580b80064$export$ae868c0f6acc3355)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
    }
    /**
   * Return the area of the polygon on projected plane.
   * @return {number} Area (on projected plane).
   * @api
   */ getArea() {
        return (0, $808945bcd5aac66c$export$7a8ee541dfdf2ed5)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
    }
    /**
   * Get the coordinate array for this geometry.  This array has the structure
   * of a GeoJSON coordinate array for polygons.
   *
   * @param {boolean} [right] Orient coordinates according to the right-hand
   *     rule (counter-clockwise for exterior and clockwise for interior rings).
   *     If `false`, coordinates will be oriented according to the left-hand rule
   *     (clockwise for exterior and counter-clockwise for interior rings).
   *     By default, coordinate orientation will depend on how the geometry was
   *     constructed.
   * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
   * @api
   */ getCoordinates(right) {
        let flatCoordinates;
        if (right !== undefined) {
            flatCoordinates = this.getOrientedFlatCoordinates().slice();
            (0, $3ab399f8a01aefd6$export$b71b604ddfc778c7)(flatCoordinates, 0, this.ends_, this.stride, right);
        } else flatCoordinates = this.flatCoordinates;
        return (0, $26e6af5078c94bc3$export$cbb9596fc0f40db2)(flatCoordinates, 0, this.ends_, this.stride);
    }
    /**
   * @return {Array<number>} Ends.
   */ getEnds() {
        return this.ends_;
    }
    /**
   * @return {Array<number>} Interior point.
   */ getFlatInteriorPoint() {
        if (this.flatInteriorPointRevision_ != this.getRevision()) {
            const flatCenter = (0, $84be800ca44e672c$export$c91255cadecfe081)(this.getExtent());
            this.flatInteriorPoint_ = (0, $0fb8cd85c41caa22$export$50e3b25928a5e892)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
            this.flatInteriorPointRevision_ = this.getRevision();
        }
        return this.flatInteriorPoint_;
    }
    /**
   * Return an interior point of the polygon.
   * @return {Point} Interior point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   * @api
   */ getInteriorPoint() {
        return new (0, $de620c8161ba008b$export$2e2bcd8739ae039)(this.getFlatInteriorPoint(), "XYM");
    }
    /**
   * Return the number of rings of the polygon,  this includes the exterior
   * ring and any interior rings.
   *
   * @return {number} Number of rings.
   * @api
   */ getLinearRingCount() {
        return this.ends_.length;
    }
    /**
   * Return the Nth linear ring of the polygon geometry. Return `null` if the
   * given index is out of range.
   * The exterior linear ring is available at index `0` and the interior rings
   * at index `1` and beyond.
   *
   * @param {number} index Index.
   * @return {LinearRing|null} Linear ring.
   * @api
   */ getLinearRing(index) {
        if (index < 0 || this.ends_.length <= index) return null;
        return new (0, $10811f4228331a2d$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    }
    /**
   * Return the linear rings of the polygon.
   * @return {Array<LinearRing>} Linear rings.
   * @api
   */ getLinearRings() {
        const layout = this.layout;
        const flatCoordinates = this.flatCoordinates;
        const ends = this.ends_;
        const linearRings = [];
        let offset = 0;
        for(let i = 0, ii = ends.length; i < ii; ++i){
            const end = ends[i];
            const linearRing = new (0, $10811f4228331a2d$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout);
            linearRings.push(linearRing);
            offset = end;
        }
        return linearRings;
    }
    /**
   * @return {Array<number>} Oriented flat coordinates.
   */ getOrientedFlatCoordinates() {
        if (this.orientedRevision_ != this.getRevision()) {
            const flatCoordinates = this.flatCoordinates;
            if ((0, $3ab399f8a01aefd6$export$f27cd06e85f4ba28)(flatCoordinates, 0, this.ends_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;
            else {
                this.orientedFlatCoordinates_ = flatCoordinates.slice();
                this.orientedFlatCoordinates_.length = (0, $3ab399f8a01aefd6$export$b71b604ddfc778c7)(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
            }
            this.orientedRevision_ = this.getRevision();
        }
        return this.orientedFlatCoordinates_;
    }
    /**
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Polygon} Simplified Polygon.
   * @protected
   */ getSimplifiedGeometryInternal(squaredTolerance) {
        const simplifiedFlatCoordinates = [];
        const simplifiedEnds = [];
        simplifiedFlatCoordinates.length = (0, $116cc918e3d500bf$export$60a9904b67f8d51b)(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
        return new $8fedf7da5a76e7a9$var$Polygon(simplifiedFlatCoordinates, "XY", simplifiedEnds);
    }
    /**
   * Get the type of this geometry.
   * @return {import("./Geometry.js").Type} Geometry type.
   * @api
   */ getType() {
        return "Polygon";
    }
    /**
   * Test if the geometry and the passed extent intersect.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {boolean} `true` if the geometry and the extent intersect.
   * @api
   */ intersectsExtent(extent) {
        return (0, $474e660540ba37db$export$76dcd8f8f83b6ddb)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
    }
    /**
   * Set the coordinates of the polygon.
   * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
   * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
   * @api
   */ setCoordinates(coordinates, layout) {
        this.setLayout(layout, coordinates, 2);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        const ends = (0, $e6d128aec3d5ac99$export$47c3746a74384d45)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
        this.changed();
    }
}
var $8fedf7da5a76e7a9$export$2e2bcd8739ae039 = $8fedf7da5a76e7a9$var$Polygon;
function $8fedf7da5a76e7a9$export$f99d756c6d81ae3f(center, radius, n, sphereRadius) {
    n = n ? n : 32;
    /** @type {Array<number>} */ const flatCoordinates = [];
    for(let i = 0; i < n; ++i)(0, $69c1cc8ae30f997f$export$8b58be045bf06082)(flatCoordinates, (0, $d164a570a58ed2be$export$cc800923e997bb8)(center, radius, 2 * Math.PI * i / n, sphereRadius));
    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
    return new $8fedf7da5a76e7a9$var$Polygon(flatCoordinates, "XY", [
        flatCoordinates.length
    ]);
}
function $8fedf7da5a76e7a9$export$c16b671815801c75(extent) {
    if ((0, $84be800ca44e672c$export$dd1bc94b04021eeb)(extent)) throw new Error("Cannot create polygon from empty extent");
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const flatCoordinates = [
        minX,
        minY,
        minX,
        maxY,
        maxX,
        maxY,
        maxX,
        minY,
        minX,
        minY
    ];
    return new $8fedf7da5a76e7a9$var$Polygon(flatCoordinates, "XY", [
        flatCoordinates.length
    ]);
}
function $8fedf7da5a76e7a9$export$2451009d645fb8c2(circle, sides, angle) {
    sides = sides ? sides : 32;
    const stride = circle.getStride();
    const layout = circle.getLayout();
    const center = circle.getCenter();
    const arrayLength = stride * (sides + 1);
    const flatCoordinates = new Array(arrayLength);
    for(let i = 0; i < arrayLength; i += stride){
        flatCoordinates[i] = 0;
        flatCoordinates[i + 1] = 0;
        for(let j = 2; j < stride; j++)flatCoordinates[i + j] = center[j];
    }
    const ends = [
        flatCoordinates.length
    ];
    const polygon = new $8fedf7da5a76e7a9$var$Polygon(flatCoordinates, layout, ends);
    $8fedf7da5a76e7a9$export$87d6a1539a56e47f(polygon, center, circle.getRadius(), angle);
    return polygon;
}
function $8fedf7da5a76e7a9$export$87d6a1539a56e47f(polygon, center, radius, angle) {
    const flatCoordinates = polygon.getFlatCoordinates();
    const stride = polygon.getStride();
    const sides = flatCoordinates.length / stride - 1;
    const startAngle = angle ? angle : 0;
    for(let i = 0; i <= sides; ++i){
        const offset = i * stride;
        const angle = startAngle + (0, $57ec69d152197e1d$export$ba467bec01d66def)(i, sides) * 2 * Math.PI / sides;
        flatCoordinates[offset] = center[0] + radius * Math.cos(angle);
        flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);
    }
    polygon.changed();
}


/**
 * An animation configuration
 *
 * @typedef {Object} Animation
 * @property {import("./coordinate.js").Coordinate} [sourceCenter] Source center.
 * @property {import("./coordinate.js").Coordinate} [targetCenter] Target center.
 * @property {number} [sourceResolution] Source resolution.
 * @property {number} [targetResolution] Target resolution.
 * @property {number} [sourceRotation] Source rotation.
 * @property {number} [targetRotation] Target rotation.
 * @property {import("./coordinate.js").Coordinate} [anchor] Anchor.
 * @property {number} start Start.
 * @property {number} duration Duration.
 * @property {boolean} complete Complete.
 * @property {function(number):number} easing Easing.
 * @property {function(boolean):void} callback Callback.
 */ /**
 * @typedef {Object} Constraints
 * @property {import("./centerconstraint.js").Type} center Center.
 * @property {import("./resolutionconstraint.js").Type} resolution Resolution.
 * @property {import("./rotationconstraint.js").Type} rotation Rotation.
 */ /**
 * @typedef {Object} FitOptions
 * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
 * the extent into. Default is the current size of the first map in the DOM that
 * uses this view, or `[100, 100]` if no such map is found.
 * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
 * cleared inside the view. Values in the array are top, right, bottom and left
 * padding.
 * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
 * get the nearest extent instead of the closest that actually fits the view.
 * @property {number} [minResolution=0] Minimum resolution that we zoom to.
 * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
 * `minResolution` is given, this property is ignored.
 * @property {number} [duration] The duration of the animation in milliseconds.
 * By default, there is no animation to the target extent.
 * @property {function(number):number} [easing] The easing function used during
 * the animation (defaults to {@link module:ol/easing.inAndOut}).
 * The function will be called for each frame with a number representing a
 * fraction of the animation's duration.  The function should return a number
 * between 0 and 1 representing the progress toward the destination state.
 * @property {function(boolean):void} [callback] Function called when the view is in
 * its final position. The callback will be called with `true` if the animation
 * series completed on its own or `false` if it was cancelled.
 */ /**
 * @typedef {Object} ViewOptions
 * @property {import("./coordinate.js").Coordinate} [center] The initial center for
 * the view. If a user projection is not set, the coordinate system for the center is
 * specified with the `projection` option. Layer sources will not be fetched if this
 * is not set, but the center can be set later with {@link #setCenter}.
 * @property {boolean|number} [constrainRotation=true] Rotation constraint.
 * `false` means no constraint. `true` means no constraint, but snap to zero
 * near zero. A number constrains the rotation to that number of values. For
 * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
 * @property {boolean} [enableRotation=true] Enable rotation.
 * If `false`, a rotation constraint that always sets the rotation to zero is
 * used. The `constrainRotation` option has no effect if `enableRotation` is
 * `false`.
 * @property {import("./extent.js").Extent} [extent] The extent that constrains the
 * view, in other words, nothing outside of this extent can be visible on the map.
 * @property {boolean} [constrainOnlyCenter=false] If true, the extent
 * constraint will only apply to the view center and not the whole extent.
 * @property {boolean} [smoothExtentConstraint=true] If true, the extent
 * constraint will be applied smoothly, i.e. allow the view to go slightly outside
 * of the given `extent`.
 * @property {number} [maxResolution] The maximum resolution used to determine
 * the resolution constraint. It is used together with `minResolution` (or
 * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
 * that the projection's validity extent fits in a 256x256 px tile. If the
 * projection is Spherical Mercator (the default) then `maxResolution` defaults
 * to `40075016.68557849 / 256 = 156543.03392804097`.
 * @property {number} [minResolution] The minimum resolution used to determine
 * the resolution constraint.  It is used together with `maxResolution` (or
 * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
 * zoom levels (with a factor of 2). If the projection is Spherical Mercator
 * (the default) then `minResolution` defaults to
 * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
 * @property {number} [maxZoom=28] The maximum zoom level used to determine the
 * resolution constraint. It is used together with `minZoom` (or
 * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
 * provided, it is given precedence over `maxZoom`.
 * @property {number} [minZoom=0] The minimum zoom level used to determine the
 * resolution constraint. It is used together with `maxZoom` (or
 * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
 * provided, it is given precedence over `minZoom`.
 * @property {boolean} [multiWorld=false] If `false` the view is constrained so
 * only one world is visible, and you cannot pan off the edge.  If `true` the map
 * may show multiple worlds at low zoom levels.  Only used if the `projection` is
 * global.  Note that if `extent` is also provided it is given precedence.
 * @property {boolean} [constrainResolution=false] If true, the view will always
 * animate to the closest zoom level after an interaction; false means
 * intermediary zoom levels are allowed.
 * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
 * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
 * the given resolution or zoom bounds.
 * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
 * show the full configured extent. By default, when a view is configured with an
 * extent, users will not be able to zoom out so the viewport exceeds the extent in
 * either dimension. This means the full extent may not be visible if the viewport
 * is taller or wider than the aspect ratio of the configured extent. If
 * showFullExtent is true, the user will be able to zoom out so that the viewport
 * exceeds the height or width of the configured extent, but not both, allowing the
 * full extent to be shown.
 * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
 * projection. The default is Spherical Mercator.
 * @property {number} [resolution] The initial resolution for the view. The
 * units are `projection` units per pixel (e.g. meters per pixel). An
 * alternative to setting this is to set `zoom`. Layer sources will not be
 * fetched if neither this nor `zoom` are defined, but they can be set later
 * with {@link #setZoom} or {@link #setResolution}.
 * @property {Array<number>} [resolutions] Resolutions that determine the
 * zoom levels if specified. The index in the array corresponds to the zoom level,
 * therefore the resolution values have to be in descending order. It also constrains
 * the resolution by the minimum and maximum value. If set the `maxResolution`,
 * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
 * @property {number} [rotation=0] The initial rotation for the view in radians
 * (positive rotation clockwise, 0 means North).
 * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
 * level used to calculate the initial resolution for the view.
 * @property {number} [zoomFactor=2] The zoom factor used to compute the
 * corresponding resolution.
 * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).
 * If the map viewport is partially covered with other content (overlays) along
 * its edges, this setting allows to shift the center of the viewport away from
 * that content. The order of the values is top, right, bottom, left.
 */ /**
 * @typedef {Object} AnimationOptions
 * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
 * the animation.
 * @property {number} [zoom] The zoom level of the view at the end of the
 * animation. This takes precedence over `resolution`.
 * @property {number} [resolution] The resolution of the view at the end
 * of the animation.  If `zoom` is also provided, this option will be ignored.
 * @property {number} [rotation] The rotation of the view at the end of
 * the animation.
 * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
 * during a rotation or resolution animation.
 * @property {number} [duration=1000] The duration of the animation in milliseconds.
 * @property {function(number):number} [easing] The easing function used
 * during the animation (defaults to {@link module:ol/easing.inAndOut}).
 * The function will be called for each frame with a number representing a
 * fraction of the animation's duration.  The function should return a number
 * between 0 and 1 representing the progress toward the destination state.
 */ /**
 * @typedef {Object} State
 * @property {import("./coordinate.js").Coordinate} center Center (in view projection coordinates).
 * @property {import("./proj/Projection.js").default} projection Projection.
 * @property {number} resolution Resolution.
 * @property {import("./coordinate.js").Coordinate} [nextCenter] The next center during an animation series.
 * @property {number} [nextResolution] The next resolution during an animation series.
 * @property {number} [nextRotation] The next rotation during an animation series.
 * @property {number} rotation Rotation.
 * @property {number} zoom Zoom.
 */ /**
 * Like {@link import("./Map.js").FrameState}, but just `viewState` and `extent`.
 * @typedef {Object} ViewStateLayerStateExtent
 * @property {State} viewState View state.
 * @property {import("./extent.js").Extent} extent Extent (in user projection coordinates).
 * @property {Array<import("./layer/Layer.js").State>} [layerStatesArray] Layer states.
 */ /**
 * Default min zoom level for the map view.
 * @type {number}
 */ const $5c065e8fdff88e40$var$DEFAULT_MIN_ZOOM = 0;
/**
 * @typedef {import("./ObjectEventType").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes
 */ /***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *   import("./Observable").OnSignature<ViewObjectEventTypes, import("./Object").ObjectEvent, Return> &
 *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature
 */ /**
 * @classdesc
 * A View object represents a simple 2D view of the map.
 *
 * This is the object to act upon to change the center, resolution,
 * and rotation of the map.
 *
 * A View has a `projection`. The projection determines the
 * coordinate system of the center, and its units determine the units of the
 * resolution (projection units per pixel). The default projection is
 * Web Mercator (EPSG:3857).
 *
 * ### The view states
 *
 * A View is determined by three states: `center`, `resolution`,
 * and `rotation`. Each state has a corresponding getter and setter, e.g.
 * `getCenter` and `setCenter` for the `center` state.
 *
 * The `zoom` state is actually not saved on the view: all computations
 * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
 * methods are available, as well as `getResolutionForZoom` and
 * `getZoomForResolution` to switch from one system to the other.
 *
 * ### The constraints
 *
 * `setCenter`, `setResolution` and `setRotation` can be used to change the
 * states of the view, but any constraint defined in the constructor will
 * be applied along the way.
 *
 * A View object can have a *resolution constraint*, a *rotation constraint*
 * and a *center constraint*.
 *
 * The *resolution constraint* typically restricts min/max values and
 * snaps to specific resolutions. It is determined by the following
 * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
 * If `resolutions` is set, the other three options are ignored. See
 * documentation for each option for more information. By default, the view
 * only has a min/max restriction and allow intermediary zoom levels when
 * pinch-zooming for example.
 *
 * The *rotation constraint* snaps to specific angles. It is determined
 * by the following options: `enableRotation` and `constrainRotation`.
 * By default rotation is allowed and its value is snapped to zero when approaching the
 * horizontal.
 *
 * The *center constraint* is determined by the `extent` option. By
 * default the view center is not constrained at all.
 *
 * ### Changing the view state
 *
 * It is important to note that `setZoom`, `setResolution`, `setCenter` and
 * `setRotation` are subject to the above mentioned constraints. As such, it
 * may sometimes not be possible to know in advance the resulting state of the
 * View. For example, calling `setResolution(10)` does not guarantee that
 * `getResolution()` will return `10`.
 *
 * A consequence of this is that, when applying a delta on the view state, one
 * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
 * rather than the corresponding setters. This will let view do its internal
 * computations. Besides, the `adjust*` methods also take an `anchor`
 * argument which allows specifying an origin for the transformation.
 *
 * ### Interacting with the view
 *
 * View constraints are usually only applied when the view is *at rest*, meaning that
 * no interaction or animation is ongoing. As such, if the user puts the view in a
 * state that is not equivalent to a constrained one (e.g. rotating the view when
 * the snap angle is 0), an animation will be triggered at the interaction end to
 * put back the view to a stable state;
 *
 * @api
 */ class $5c065e8fdff88e40$var$View extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {ViewOptions} [options] View options.
   */ constructor(options){
        super();
        /***
     * @type {ViewOnSignature<import("./events").EventsKey>}
     */ this.on;
        /***
     * @type {ViewOnSignature<import("./events").EventsKey>}
     */ this.once;
        /***
     * @type {ViewOnSignature<void>}
     */ this.un;
        options = Object.assign({}, options);
        /**
     * @private
     * @type {Array<number>}
     */ this.hints_ = [
            0,
            0
        ];
        /**
     * @private
     * @type {Array<Array<Animation>>}
     */ this.animations_ = [];
        /**
     * @private
     * @type {number|undefined}
     */ this.updateAnimationKey_;
        /**
     * @private
     * @const
     * @type {import("./proj/Projection.js").default}
     */ this.projection_ = (0, $983289ae1d13cd2a$export$549167224996a0fb)(options.projection, "EPSG:3857");
        /**
     * @private
     * @type {import("./size.js").Size}
     */ this.viewportSize_ = [
            100,
            100
        ];
        /**
     * @private
     * @type {import("./coordinate.js").Coordinate|undefined}
     */ this.targetCenter_ = null;
        /**
     * @private
     * @type {number|undefined}
     */ this.targetResolution_;
        /**
     * @private
     * @type {number|undefined}
     */ this.targetRotation_;
        /**
     * @private
     * @type {import("./coordinate.js").Coordinate}
     */ this.nextCenter_ = null;
        /**
     * @private
     * @type {number}
     */ this.nextResolution_;
        /**
     * @private
     * @type {number}
     */ this.nextRotation_;
        /**
     * @private
     * @type {import("./coordinate.js").Coordinate|undefined}
     */ this.cancelAnchor_ = undefined;
        if (options.projection) (0, $983289ae1d13cd2a$export$ed949affbc7c4223)();
        if (options.center) options.center = (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(options.center, this.projection_);
        if (options.extent) options.extent = (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(options.extent, this.projection_);
        this.applyOptions_(options);
    }
    /**
   * Set up the view with the given options.
   * @param {ViewOptions} options View options.
   */ applyOptions_(options) {
        const properties = Object.assign({}, options);
        for(const key in 0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039)delete properties[key];
        this.setProperties(properties, true);
        const resolutionConstraintInfo = $5c065e8fdff88e40$export$c68d65f9148da196(options);
        /**
     * @private
     * @type {number}
     */ this.maxResolution_ = resolutionConstraintInfo.maxResolution;
        /**
     * @private
     * @type {number}
     */ this.minResolution_ = resolutionConstraintInfo.minResolution;
        /**
     * @private
     * @type {number}
     */ this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;
        /**
     * @private
     * @type {Array<number>|undefined}
     */ this.resolutions_ = options.resolutions;
        /**
     * @type {Array<number>|undefined}
     * @private
     */ this.padding_ = options.padding;
        /**
     * @private
     * @type {number}
     */ this.minZoom_ = resolutionConstraintInfo.minZoom;
        const centerConstraint = $5c065e8fdff88e40$export$964345001ee9ac52(options);
        const resolutionConstraint = resolutionConstraintInfo.constraint;
        const rotationConstraint = $5c065e8fdff88e40$export$4eeaa08dd550e3c0(options);
        /**
     * @private
     * @type {Constraints}
     */ this.constraints_ = {
            center: centerConstraint,
            resolution: resolutionConstraint,
            rotation: rotationConstraint
        };
        this.setRotation(options.rotation !== undefined ? options.rotation : 0);
        this.setCenterInternal(options.center !== undefined ? options.center : null);
        if (options.resolution !== undefined) this.setResolution(options.resolution);
        else if (options.zoom !== undefined) this.setZoom(options.zoom);
    }
    /**
   * Padding (in css pixels).
   * If the map viewport is partially covered with other content (overlays) along
   * its edges, this setting allows to shift the center of the viewport away from that
   * content. The order of the values in the array is top, right, bottom, left.
   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.
   * @type {Array<number>|undefined}
   * @api
   */ get padding() {
        return this.padding_;
    }
    set padding(padding) {
        let oldPadding = this.padding_;
        this.padding_ = padding;
        const center = this.getCenterInternal();
        if (center) {
            const newPadding = padding || [
                0,
                0,
                0,
                0
            ];
            oldPadding = oldPadding || [
                0,
                0,
                0,
                0
            ];
            const resolution = this.getResolution();
            const offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);
            const offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);
            this.setCenterInternal([
                center[0] + offsetX,
                center[1] - offsetY
            ]);
        }
    }
    /**
   * Get an updated version of the view options used to construct the view.  The
   * current resolution (or zoom), center, and rotation are applied to any stored
   * options.  The provided options can be used to apply new min/max zoom or
   * resolution limits.
   * @param {ViewOptions} newOptions New options to be applied.
   * @return {ViewOptions} New options updated with the current view state.
   */ getUpdatedOptions_(newOptions) {
        const options = this.getProperties();
        // preserve resolution (or zoom)
        if (options.resolution !== undefined) options.resolution = this.getResolution();
        else options.zoom = this.getZoom();
        // preserve center
        options.center = this.getCenterInternal();
        // preserve rotation
        options.rotation = this.getRotation();
        return Object.assign({}, options, newOptions);
    }
    /**
   * Animate the view.  The view's center, zoom (or resolution), and rotation
   * can be animated for smooth transitions between view states.  For example,
   * to animate the view to a new zoom level:
   *
   *     view.animate({zoom: view.getZoom() + 1});
   *
   * By default, the animation lasts one second and uses in-and-out easing.  You
   * can customize this behavior by including `duration` (in milliseconds) and
   * `easing` options (see {@link module:ol/easing}).
   *
   * To chain together multiple animations, call the method with multiple
   * animation objects.  For example, to first zoom and then pan:
   *
   *     view.animate({zoom: 10}, {center: [0, 0]});
   *
   * If you provide a function as the last argument to the animate method, it
   * will get called at the end of an animation series.  The callback will be
   * called with `true` if the animation series completed on its own or `false`
   * if it was cancelled.
   *
   * Animations are cancelled by user interactions (e.g. dragging the map) or by
   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
   * (or another method that calls one of these).
   *
   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
   *     options.  Multiple animations can be run in series by passing multiple
   *     options objects.  To run multiple animations in parallel, call the method
   *     multiple times.  An optional callback can be provided as a final
   *     argument.  The callback will be called with a boolean indicating whether
   *     the animation completed without being cancelled.
   * @api
   */ animate(var_args) {
        if (this.isDef() && !this.getAnimating()) this.resolveConstraints(0);
        const args = new Array(arguments.length);
        for(let i = 0; i < args.length; ++i){
            let options = arguments[i];
            if (options.center) {
                options = Object.assign({}, options);
                options.center = (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(options.center, this.getProjection());
            }
            if (options.anchor) {
                options = Object.assign({}, options);
                options.anchor = (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(options.anchor, this.getProjection());
            }
            args[i] = options;
        }
        this.animateInternal.apply(this, args);
    }
    /**
   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
   */ animateInternal(var_args) {
        let animationCount = arguments.length;
        let callback;
        if (animationCount > 1 && typeof arguments[animationCount - 1] === "function") {
            callback = arguments[animationCount - 1];
            --animationCount;
        }
        let i = 0;
        for(; i < animationCount && !this.isDef(); ++i){
            // if view properties are not yet set, shortcut to the final state
            const state = arguments[i];
            if (state.center) this.setCenterInternal(state.center);
            if (state.zoom !== undefined) this.setZoom(state.zoom);
            else if (state.resolution) this.setResolution(state.resolution);
            if (state.rotation !== undefined) this.setRotation(state.rotation);
        }
        if (i === animationCount) {
            if (callback) $5c065e8fdff88e40$var$animationCallback(callback, true);
            return;
        }
        let start = Date.now();
        let center = this.targetCenter_.slice();
        let resolution = this.targetResolution_;
        let rotation = this.targetRotation_;
        const series = [];
        for(; i < animationCount; ++i){
            const options = /** @type {AnimationOptions} */ arguments[i];
            const animation = {
                start: start,
                complete: false,
                anchor: options.anchor,
                duration: options.duration !== undefined ? options.duration : 1000,
                easing: options.easing || (0, $b6cb732edc5512cf$export$9b47139b511b56e4),
                callback: callback
            };
            if (options.center) {
                animation.sourceCenter = center;
                animation.targetCenter = options.center.slice();
                center = animation.targetCenter;
            }
            if (options.zoom !== undefined) {
                animation.sourceResolution = resolution;
                animation.targetResolution = this.getResolutionForZoom(options.zoom);
                resolution = animation.targetResolution;
            } else if (options.resolution) {
                animation.sourceResolution = resolution;
                animation.targetResolution = options.resolution;
                resolution = animation.targetResolution;
            }
            if (options.rotation !== undefined) {
                animation.sourceRotation = rotation;
                const delta = (0, $57ec69d152197e1d$export$ba467bec01d66def)(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
                animation.targetRotation = rotation + delta;
                rotation = animation.targetRotation;
            }
            // check if animation is a no-op
            if ($5c065e8fdff88e40$export$ee75376562060184(animation)) animation.complete = true;
            else start += animation.duration;
            series.push(animation);
        }
        this.animations_.push(series);
        this.setHint((0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING, 1);
        this.updateAnimations_();
    }
    /**
   * Determine if the view is being animated.
   * @return {boolean} The view is being animated.
   * @api
   */ getAnimating() {
        return this.hints_[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING] > 0;
    }
    /**
   * Determine if the user is interacting with the view, such as panning or zooming.
   * @return {boolean} The view is being interacted with.
   * @api
   */ getInteracting() {
        return this.hints_[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING] > 0;
    }
    /**
   * Cancel any ongoing animations.
   * @api
   */ cancelAnimations() {
        this.setHint((0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING, -this.hints_[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING]);
        let anchor;
        for(let i = 0, ii = this.animations_.length; i < ii; ++i){
            const series = this.animations_[i];
            if (series[0].callback) $5c065e8fdff88e40$var$animationCallback(series[0].callback, false);
            if (!anchor) for(let j = 0, jj = series.length; j < jj; ++j){
                const animation = series[j];
                if (!animation.complete) {
                    anchor = animation.anchor;
                    break;
                }
            }
        }
        this.animations_.length = 0;
        this.cancelAnchor_ = anchor;
        this.nextCenter_ = null;
        this.nextResolution_ = NaN;
        this.nextRotation_ = NaN;
    }
    /**
   * Update all animations.
   */ updateAnimations_() {
        if (this.updateAnimationKey_ !== undefined) {
            cancelAnimationFrame(this.updateAnimationKey_);
            this.updateAnimationKey_ = undefined;
        }
        if (!this.getAnimating()) return;
        const now = Date.now();
        let more = false;
        for(let i = this.animations_.length - 1; i >= 0; --i){
            const series = this.animations_[i];
            let seriesComplete = true;
            for(let j = 0, jj = series.length; j < jj; ++j){
                const animation = series[j];
                if (animation.complete) continue;
                const elapsed = now - animation.start;
                let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
                if (fraction >= 1) {
                    animation.complete = true;
                    fraction = 1;
                } else seriesComplete = false;
                const progress = animation.easing(fraction);
                if (animation.sourceCenter) {
                    const x0 = animation.sourceCenter[0];
                    const y0 = animation.sourceCenter[1];
                    const x1 = animation.targetCenter[0];
                    const y1 = animation.targetCenter[1];
                    this.nextCenter_ = animation.targetCenter;
                    const x = x0 + progress * (x1 - x0);
                    const y = y0 + progress * (y1 - y0);
                    this.targetCenter_ = [
                        x,
                        y
                    ];
                }
                if (animation.sourceResolution && animation.targetResolution) {
                    const resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
                    if (animation.anchor) {
                        const size = this.getViewportSize_(this.getRotation());
                        const constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
                    }
                    this.nextResolution_ = animation.targetResolution;
                    this.targetResolution_ = resolution;
                    this.applyTargetState_(true);
                }
                if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
                    const rotation = progress === 1 ? (0, $57ec69d152197e1d$export$ba467bec01d66def)(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
                    if (animation.anchor) {
                        const constrainedRotation = this.constraints_.rotation(rotation, true);
                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
                    }
                    this.nextRotation_ = animation.targetRotation;
                    this.targetRotation_ = rotation;
                }
                this.applyTargetState_(true);
                more = true;
                if (!animation.complete) break;
            }
            if (seriesComplete) {
                this.animations_[i] = null;
                this.setHint((0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING, -1);
                this.nextCenter_ = null;
                this.nextResolution_ = NaN;
                this.nextRotation_ = NaN;
                const callback = series[0].callback;
                if (callback) $5c065e8fdff88e40$var$animationCallback(callback, true);
            }
        }
        // prune completed series
        this.animations_ = this.animations_.filter(Boolean);
        if (more && this.updateAnimationKey_ === undefined) this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
    }
    /**
   * @param {number} rotation Target rotation.
   * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
   * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
   */ calculateCenterRotate(rotation, anchor) {
        let center;
        const currentCenter = this.getCenterInternal();
        if (currentCenter !== undefined) {
            center = [
                currentCenter[0] - anchor[0],
                currentCenter[1] - anchor[1]
            ];
            (0, $c65bc16e55ef0e33$export$bb628a54ab399bc9)(center, rotation - this.getRotation());
            (0, $c65bc16e55ef0e33$export$e16d8520af44a096)(center, anchor);
        }
        return center;
    }
    /**
   * @param {number} resolution Target resolution.
   * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
   * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
   */ calculateCenterZoom(resolution, anchor) {
        let center;
        const currentCenter = this.getCenterInternal();
        const currentResolution = this.getResolution();
        if (currentCenter !== undefined && currentResolution !== undefined) {
            const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
            const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
            center = [
                x,
                y
            ];
        }
        return center;
    }
    /**
   * Returns the current viewport size.
   * @private
   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
   * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
   */ getViewportSize_(rotation) {
        const size = this.viewportSize_;
        if (rotation) {
            const w = size[0];
            const h = size[1];
            return [
                Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),
                Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation))
            ];
        }
        return size;
    }
    /**
   * Stores the viewport size on the view. The viewport size is not read every time from the DOM
   * to avoid performance hit and layout reflow.
   * This should be done on map size change.
   * Note: the constraints are not resolved during an animation to avoid stopping it
   * @param {import("./size.js").Size} [size] Viewport size; if undefined, [100, 100] is assumed
   */ setViewportSize(size) {
        this.viewportSize_ = Array.isArray(size) ? size.slice() : [
            100,
            100
        ];
        if (!this.getAnimating()) this.resolveConstraints(0);
    }
    /**
   * Get the view center.
   * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
   * @observable
   * @api
   */ getCenter() {
        const center = this.getCenterInternal();
        if (!center) return center;
        return (0, $983289ae1d13cd2a$export$698f563af1ba02a5)(center, this.getProjection());
    }
    /**
   * Get the view center without transforming to user projection.
   * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
   */ getCenterInternal() {
        return /** @type {import("./coordinate.js").Coordinate|undefined} */ this.get((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).CENTER);
    }
    /**
   * @return {Constraints} Constraints.
   */ getConstraints() {
        return this.constraints_;
    }
    /**
   * @return {boolean} Resolution constraint is set
   */ getConstrainResolution() {
        return this.get("constrainResolution");
    }
    /**
   * @param {Array<number>} [hints] Destination array.
   * @return {Array<number>} Hint.
   */ getHints(hints) {
        if (hints !== undefined) {
            hints[0] = this.hints_[0];
            hints[1] = this.hints_[1];
            return hints;
        }
        return this.hints_.slice();
    }
    /**
   * Calculate the extent for the current view state and the passed size.
   * The size is the pixel dimensions of the box into which the calculated extent
   * should fit. In most cases you want to get the extent of the entire map,
   * that is `map.getSize()`.
   * @param {import("./size.js").Size} [size] Box pixel size. If not provided, the size
   * of the map that uses this view will be used.
   * @return {import("./extent.js").Extent} Extent.
   * @api
   */ calculateExtent(size) {
        const extent = this.calculateExtentInternal(size);
        return (0, $983289ae1d13cd2a$export$96bfd09e2cffb006)(extent, this.getProjection());
    }
    /**
   * @param {import("./size.js").Size} [size] Box pixel size. If not provided,
   * the map's last known viewport size will be used.
   * @return {import("./extent.js").Extent} Extent.
   */ calculateExtentInternal(size) {
        size = size || this.getViewportSizeMinusPadding_();
        const center = /** @type {!import("./coordinate.js").Coordinate} */ this.getCenterInternal();
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(center, 1); // The view center is not defined
        const resolution = /** @type {!number} */ this.getResolution();
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(resolution !== undefined, 2); // The view resolution is not defined
        const rotation = /** @type {!number} */ this.getRotation();
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(rotation !== undefined, 3); // The view rotation is not defined
        return (0, $84be800ca44e672c$export$13ba650faf8308)(center, resolution, rotation, size);
    }
    /**
   * Get the maximum resolution of the view.
   * @return {number} The maximum resolution of the view.
   * @api
   */ getMaxResolution() {
        return this.maxResolution_;
    }
    /**
   * Get the minimum resolution of the view.
   * @return {number} The minimum resolution of the view.
   * @api
   */ getMinResolution() {
        return this.minResolution_;
    }
    /**
   * Get the maximum zoom level for the view.
   * @return {number} The maximum zoom level.
   * @api
   */ getMaxZoom() {
        return /** @type {number} */ this.getZoomForResolution(this.minResolution_);
    }
    /**
   * Set a new maximum zoom level for the view.
   * @param {number} zoom The maximum zoom level.
   * @api
   */ setMaxZoom(zoom) {
        this.applyOptions_(this.getUpdatedOptions_({
            maxZoom: zoom
        }));
    }
    /**
   * Get the minimum zoom level for the view.
   * @return {number} The minimum zoom level.
   * @api
   */ getMinZoom() {
        return /** @type {number} */ this.getZoomForResolution(this.maxResolution_);
    }
    /**
   * Set a new minimum zoom level for the view.
   * @param {number} zoom The minimum zoom level.
   * @api
   */ setMinZoom(zoom) {
        this.applyOptions_(this.getUpdatedOptions_({
            minZoom: zoom
        }));
    }
    /**
   * Set whether the view should allow intermediary zoom levels.
   * @param {boolean} enabled Whether the resolution is constrained.
   * @api
   */ setConstrainResolution(enabled) {
        this.applyOptions_(this.getUpdatedOptions_({
            constrainResolution: enabled
        }));
    }
    /**
   * Get the view projection.
   * @return {import("./proj/Projection.js").default} The projection of the view.
   * @api
   */ getProjection() {
        return this.projection_;
    }
    /**
   * Get the view resolution.
   * @return {number|undefined} The resolution of the view.
   * @observable
   * @api
   */ getResolution() {
        return /** @type {number|undefined} */ this.get((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).RESOLUTION);
    }
    /**
   * Get the resolutions for the view. This returns the array of resolutions
   * passed to the constructor of the View, or undefined if none were given.
   * @return {Array<number>|undefined} The resolutions of the view.
   * @api
   */ getResolutions() {
        return this.resolutions_;
    }
    /**
   * Get the resolution for a provided extent (in map units) and size (in pixels).
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {import("./size.js").Size} [size] Box pixel size.
   * @return {number} The resolution at which the provided extent will render at
   *     the given size.
   * @api
   */ getResolutionForExtent(extent, size) {
        return this.getResolutionForExtentInternal((0, $983289ae1d13cd2a$export$494be3a3a25689ca)(extent, this.getProjection()), size);
    }
    /**
   * Get the resolution for a provided extent (in map units) and size (in pixels).
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {import("./size.js").Size} [size] Box pixel size.
   * @return {number} The resolution at which the provided extent will render at
   *     the given size.
   */ getResolutionForExtentInternal(extent, size) {
        size = size || this.getViewportSizeMinusPadding_();
        const xResolution = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(extent) / size[0];
        const yResolution = (0, $84be800ca44e672c$export$c08559766941f856)(extent) / size[1];
        return Math.max(xResolution, yResolution);
    }
    /**
   * Return a function that returns a value between 0 and 1 for a
   * resolution. Exponential scaling is assumed.
   * @param {number} [power] Power.
   * @return {function(number): number} Resolution for value function.
   */ getResolutionForValueFunction(power) {
        power = power || 2;
        const maxResolution = this.getConstrainedResolution(this.maxResolution_);
        const minResolution = this.minResolution_;
        const max = Math.log(maxResolution / minResolution) / Math.log(power);
        return(/**
       * @param {number} value Value.
       * @return {number} Resolution.
       */ function(value) {
            const resolution = maxResolution / Math.pow(power, value * max);
            return resolution;
        });
    }
    /**
   * Get the view rotation.
   * @return {number} The rotation of the view in radians.
   * @observable
   * @api
   */ getRotation() {
        return /** @type {number} */ this.get((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).ROTATION);
    }
    /**
   * Return a function that returns a resolution for a value between
   * 0 and 1. Exponential scaling is assumed.
   * @param {number} [power] Power.
   * @return {function(number): number} Value for resolution function.
   */ getValueForResolutionFunction(power) {
        const logPower = Math.log(power || 2);
        const maxResolution = this.getConstrainedResolution(this.maxResolution_);
        const minResolution = this.minResolution_;
        const max = Math.log(maxResolution / minResolution) / logPower;
        return(/**
       * @param {number} resolution Resolution.
       * @return {number} Value.
       */ function(resolution) {
            const value = Math.log(maxResolution / resolution) / logPower / max;
            return value;
        });
    }
    /**
   * Returns the size of the viewport minus padding.
   * @private
   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
   * @return {import("./size.js").Size} Viewport size reduced by the padding.
   */ getViewportSizeMinusPadding_(rotation) {
        let size = this.getViewportSize_(rotation);
        const padding = this.padding_;
        if (padding) size = [
            size[0] - padding[1] - padding[3],
            size[1] - padding[0] - padding[2]
        ];
        return size;
    }
    /**
   * @return {State} View state.
   */ getState() {
        const projection = this.getProjection();
        const resolution = this.getResolution();
        const rotation = this.getRotation();
        let center = /** @type {import("./coordinate.js").Coordinate} */ this.getCenterInternal();
        const padding = this.padding_;
        if (padding) {
            const reducedSize = this.getViewportSizeMinusPadding_();
            center = $5c065e8fdff88e40$var$calculateCenterOn(center, this.getViewportSize_(), [
                reducedSize[0] / 2 + padding[3],
                reducedSize[1] / 2 + padding[0]
            ], resolution, rotation);
        }
        return {
            center: center.slice(0),
            projection: projection !== undefined ? projection : null,
            resolution: resolution,
            nextCenter: this.nextCenter_,
            nextResolution: this.nextResolution_,
            nextRotation: this.nextRotation_,
            rotation: rotation,
            zoom: this.getZoom()
        };
    }
    /**
   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.
   */ getViewStateAndExtent() {
        return {
            viewState: this.getState(),
            extent: this.calculateExtent()
        };
    }
    /**
   * Get the current zoom level. This method may return non-integer zoom levels
   * if the view does not constrain the resolution, or if an interaction or
   * animation is underway.
   * @return {number|undefined} Zoom.
   * @api
   */ getZoom() {
        let zoom;
        const resolution = this.getResolution();
        if (resolution !== undefined) zoom = this.getZoomForResolution(resolution);
        return zoom;
    }
    /**
   * Get the zoom level for a resolution.
   * @param {number} resolution The resolution.
   * @return {number|undefined} The zoom level for the provided resolution.
   * @api
   */ getZoomForResolution(resolution) {
        let offset = this.minZoom_ || 0;
        let max, zoomFactor;
        if (this.resolutions_) {
            const nearest = (0, $69c1cc8ae30f997f$export$8a3786cc03fdb777)(this.resolutions_, resolution, 1);
            offset = nearest;
            max = this.resolutions_[nearest];
            if (nearest == this.resolutions_.length - 1) zoomFactor = 2;
            else zoomFactor = max / this.resolutions_[nearest + 1];
        } else {
            max = this.maxResolution_;
            zoomFactor = this.zoomFactor_;
        }
        return offset + Math.log(max / resolution) / Math.log(zoomFactor);
    }
    /**
   * Get the resolution for a zoom level.
   * @param {number} zoom Zoom level.
   * @return {number} The view resolution for the provided zoom level.
   * @api
   */ getResolutionForZoom(zoom) {
        if (this.resolutions_) {
            if (this.resolutions_.length <= 1) return 0;
            const baseLevel = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(Math.floor(zoom), 0, this.resolutions_.length - 2);
            const zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
            return this.resolutions_[baseLevel] / Math.pow(zoomFactor, (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(zoom - baseLevel, 0, 1));
        }
        return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);
    }
    /**
   * Fit the given geometry or extent based on the given map size and border.
   * The size is pixel dimensions of the box to fit the extent into.
   * In most cases you will want to use the map size, that is `map.getSize()`.
   * Takes care of the map angle.
   * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
   *     extent to fit the view to.
   * @param {FitOptions} [options] Options.
   * @api
   */ fit(geometryOrExtent, options) {
        /** @type {import("./geom/SimpleGeometry.js").default} */ let geometry;
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ geometryOrExtent.getSimplifiedGeometry === "function", 24); // Invalid extent or geometry provided as `geometry`
        if (Array.isArray(geometryOrExtent)) {
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!(0, $84be800ca44e672c$export$dd1bc94b04021eeb)(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
            const extent = (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(geometryOrExtent, this.getProjection());
            geometry = (0, $8fedf7da5a76e7a9$export$c16b671815801c75)(extent);
        } else if (geometryOrExtent.getType() === "Circle") {
            const extent = (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(geometryOrExtent.getExtent(), this.getProjection());
            geometry = (0, $8fedf7da5a76e7a9$export$c16b671815801c75)(extent);
            geometry.rotate(this.getRotation(), (0, $84be800ca44e672c$export$c91255cadecfe081)(extent));
        } else {
            const userProjection = (0, $983289ae1d13cd2a$export$3973b77d5f6f2790)();
            if (userProjection) geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ geometryOrExtent.clone().transform(userProjection, this.getProjection());
            else geometry = geometryOrExtent;
        }
        this.fitInternal(geometry, options);
    }
    /**
   * Calculate rotated extent
   * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
   * @return {import("./extent").Extent} The rotated extent for the geometry.
   */ rotatedExtentForGeometry(geometry) {
        const rotation = this.getRotation();
        const cosAngle = Math.cos(rotation);
        const sinAngle = Math.sin(-rotation);
        const coords = geometry.getFlatCoordinates();
        const stride = geometry.getStride();
        let minRotX = Infinity;
        let minRotY = Infinity;
        let maxRotX = -Infinity;
        let maxRotY = -Infinity;
        for(let i = 0, ii = coords.length; i < ii; i += stride){
            const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
            const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
            minRotX = Math.min(minRotX, rotX);
            minRotY = Math.min(minRotY, rotY);
            maxRotX = Math.max(maxRotX, rotX);
            maxRotY = Math.max(maxRotY, rotY);
        }
        return [
            minRotX,
            minRotY,
            maxRotX,
            maxRotY
        ];
    }
    /**
   * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
   * @param {FitOptions} [options] Options.
   */ fitInternal(geometry, options) {
        options = options || {};
        let size = options.size;
        if (!size) size = this.getViewportSizeMinusPadding_();
        const padding = options.padding !== undefined ? options.padding : [
            0,
            0,
            0,
            0
        ];
        const nearest = options.nearest !== undefined ? options.nearest : false;
        let minResolution;
        if (options.minResolution !== undefined) minResolution = options.minResolution;
        else if (options.maxZoom !== undefined) minResolution = this.getResolutionForZoom(options.maxZoom);
        else minResolution = 0;
        const rotatedExtent = this.rotatedExtentForGeometry(geometry);
        // calculate resolution
        let resolution = this.getResolutionForExtentInternal(rotatedExtent, [
            size[0] - padding[1] - padding[3],
            size[1] - padding[0] - padding[2]
        ]);
        resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);
        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);
        // calculate center
        const rotation = this.getRotation();
        const sinAngle = Math.sin(rotation);
        const cosAngle = Math.cos(rotation);
        const centerRot = (0, $84be800ca44e672c$export$c91255cadecfe081)(rotatedExtent);
        centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;
        centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;
        const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;
        const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;
        const center = this.getConstrainedCenter([
            centerX,
            centerY
        ], resolution);
        const callback = options.callback ? options.callback : (0, $2c3aa3ce33eccc0f$export$1cd1943b3a73bbe8);
        if (options.duration !== undefined) this.animateInternal({
            resolution: resolution,
            center: center,
            duration: options.duration,
            easing: options.easing
        }, callback);
        else {
            this.targetResolution_ = resolution;
            this.targetCenter_ = center;
            this.applyTargetState_(false, true);
            $5c065e8fdff88e40$var$animationCallback(callback, true);
        }
    }
    /**
   * Center on coordinate and view position.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("./size.js").Size} size Box pixel size.
   * @param {import("./pixel.js").Pixel} position Position on the view to center on.
   * @api
   */ centerOn(coordinate, size, position) {
        this.centerOnInternal((0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(coordinate, this.getProjection()), size, position);
    }
    /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("./size.js").Size} size Box pixel size.
   * @param {import("./pixel.js").Pixel} position Position on the view to center on.
   */ centerOnInternal(coordinate, size, position) {
        this.setCenterInternal($5c065e8fdff88e40$var$calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));
    }
    /**
   * Calculates the shift between map and viewport center.
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @return {Array<number>|undefined} Center shift.
   */ calculateCenterShift(center, resolution, rotation, size) {
        let centerShift;
        const padding = this.padding_;
        if (padding && center) {
            const reducedSize = this.getViewportSizeMinusPadding_(-rotation);
            const shiftedCenter = $5c065e8fdff88e40$var$calculateCenterOn(center, size, [
                reducedSize[0] / 2 + padding[3],
                reducedSize[1] / 2 + padding[0]
            ], resolution, rotation);
            centerShift = [
                center[0] - shiftedCenter[0],
                center[1] - shiftedCenter[1]
            ];
        }
        return centerShift;
    }
    /**
   * @return {boolean} Is defined.
   */ isDef() {
        return !!this.getCenterInternal() && this.getResolution() !== undefined;
    }
    /**
   * Adds relative coordinates to the center of the view. Any extent constraint will apply.
   * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
   * @api
   */ adjustCenter(deltaCoordinates) {
        const center = (0, $983289ae1d13cd2a$export$698f563af1ba02a5)(this.targetCenter_, this.getProjection());
        this.setCenter([
            center[0] + deltaCoordinates[0],
            center[1] + deltaCoordinates[1]
        ]);
    }
    /**
   * Adds relative coordinates to the center of the view. Any extent constraint will apply.
   * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
   */ adjustCenterInternal(deltaCoordinates) {
        const center = this.targetCenter_;
        this.setCenterInternal([
            center[0] + deltaCoordinates[0],
            center[1] + deltaCoordinates[1]
        ]);
    }
    /**
   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
   * constraint will apply.
   * @param {number} ratio The ratio to apply on the view resolution.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   * @api
   */ adjustResolution(ratio, anchor) {
        anchor = anchor && (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());
        this.adjustResolutionInternal(ratio, anchor);
    }
    /**
   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
   * constraint will apply.
   * @param {number} ratio The ratio to apply on the view resolution.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   */ adjustResolutionInternal(ratio, anchor) {
        const isMoving = this.getAnimating() || this.getInteracting();
        const size = this.getViewportSize_(this.getRotation());
        const newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);
        if (anchor) this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);
        this.targetResolution_ *= ratio;
        this.applyTargetState_();
    }
    /**
   * Adds a value to the view zoom level, optionally using an anchor. Any resolution
   * constraint will apply.
   * @param {number} delta Relative value to add to the zoom level.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   * @api
   */ adjustZoom(delta, anchor) {
        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);
    }
    /**
   * Adds a value to the view rotation, optionally using an anchor. Any rotation
   * constraint will apply.
   * @param {number} delta Relative value to add to the zoom rotation, in radians.
   * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
   * @api
   */ adjustRotation(delta, anchor) {
        if (anchor) anchor = (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());
        this.adjustRotationInternal(delta, anchor);
    }
    /**
   * @param {number} delta Relative value to add to the zoom rotation, in radians.
   * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
   */ adjustRotationInternal(delta, anchor) {
        const isMoving = this.getAnimating() || this.getInteracting();
        const newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
        if (anchor) this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);
        this.targetRotation_ += delta;
        this.applyTargetState_();
    }
    /**
   * Set the center of the current view. Any extent constraint will apply.
   * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
   * @observable
   * @api
   */ setCenter(center) {
        this.setCenterInternal(center ? (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(center, this.getProjection()) : center);
    }
    /**
   * Set the center using the view projection (not the user projection).
   * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
   */ setCenterInternal(center) {
        this.targetCenter_ = center;
        this.applyTargetState_();
    }
    /**
   * @param {import("./ViewHint.js").default} hint Hint.
   * @param {number} delta Delta.
   * @return {number} New value.
   */ setHint(hint, delta) {
        this.hints_[hint] += delta;
        this.changed();
        return this.hints_[hint];
    }
    /**
   * Set the resolution for this view. Any resolution constraint will apply.
   * @param {number|undefined} resolution The resolution of the view.
   * @observable
   * @api
   */ setResolution(resolution) {
        this.targetResolution_ = resolution;
        this.applyTargetState_();
    }
    /**
   * Set the rotation for this view. Any rotation constraint will apply.
   * @param {number} rotation The rotation of the view in radians.
   * @observable
   * @api
   */ setRotation(rotation) {
        this.targetRotation_ = rotation;
        this.applyTargetState_();
    }
    /**
   * Zoom to a specific zoom level. Any resolution constrain will apply.
   * @param {number} zoom Zoom level.
   * @api
   */ setZoom(zoom) {
        this.setResolution(this.getResolutionForZoom(zoom));
    }
    /**
   * Recompute rotation/resolution/center based on target values.
   * Note: we have to compute rotation first, then resolution and center considering that
   * parameters can influence one another in case a view extent constraint is present.
   * @param {boolean} [doNotCancelAnims] Do not cancel animations.
   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.
   * @private
   */ applyTargetState_(doNotCancelAnims, forceMoving) {
        const isMoving = this.getAnimating() || this.getInteracting() || forceMoving;
        // compute rotation
        const newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
        const size = this.getViewportSize_(newRotation);
        const newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));
        if (this.get((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).ROTATION) !== newRotation) this.set((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).ROTATION, newRotation);
        if (this.get((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).RESOLUTION) !== newResolution) {
            this.set((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).RESOLUTION, newResolution);
            this.set("zoom", this.getZoom(), true);
        }
        if (!newCenter || !this.get((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).CENTER) || !(0, $c65bc16e55ef0e33$export$e9bab7fafb253603)(this.get((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).CENTER), newCenter)) this.set((0, $6221a0fc70b5fd5c$export$2e2bcd8739ae039).CENTER, newCenter);
        if (this.getAnimating() && !doNotCancelAnims) this.cancelAnimations();
        this.cancelAnchor_ = undefined;
    }
    /**
   * If any constraints need to be applied, an animation will be triggered.
   * This is typically done on interaction end.
   * Note: calling this with a duration of 0 will apply the constrained values straight away,
   * without animation.
   * @param {number} [duration] The animation duration in ms.
   * @param {number} [resolutionDirection] Which direction to zoom.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   */ resolveConstraints(duration, resolutionDirection, anchor) {
        duration = duration !== undefined ? duration : 200;
        const direction = resolutionDirection || 0;
        const newRotation = this.constraints_.rotation(this.targetRotation_);
        const size = this.getViewportSize_(newRotation);
        const newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));
        if (duration === 0 && !this.cancelAnchor_) {
            this.targetResolution_ = newResolution;
            this.targetRotation_ = newRotation;
            this.targetCenter_ = newCenter;
            this.applyTargetState_();
            return;
        }
        anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
        this.cancelAnchor_ = undefined;
        if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !(0, $c65bc16e55ef0e33$export$e9bab7fafb253603)(this.getCenterInternal(), newCenter)) {
            if (this.getAnimating()) this.cancelAnimations();
            this.animateInternal({
                rotation: newRotation,
                center: newCenter,
                resolution: newResolution,
                duration: duration,
                easing: (0, $b6cb732edc5512cf$export$57636bb43b1ccbb0),
                anchor: anchor
            });
        }
    }
    /**
   * Notify the View that an interaction has started.
   * The view state will be resolved to a stable one if needed
   * (depending on its constraints).
   * @api
   */ beginInteraction() {
        this.resolveConstraints(0);
        this.setHint((0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING, 1);
    }
    /**
   * Notify the View that an interaction has ended. The view state will be resolved
   * to a stable one if needed (depending on its constraints).
   * @param {number} [duration] Animation duration in ms.
   * @param {number} [resolutionDirection] Which direction to zoom.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   * @api
   */ endInteraction(duration, resolutionDirection, anchor) {
        anchor = anchor && (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());
        this.endInteractionInternal(duration, resolutionDirection, anchor);
    }
    /**
   * Notify the View that an interaction has ended. The view state will be resolved
   * to a stable one if needed (depending on its constraints).
   * @param {number} [duration] Animation duration in ms.
   * @param {number} [resolutionDirection] Which direction to zoom.
   * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
   */ endInteractionInternal(duration, resolutionDirection, anchor) {
        if (!this.getInteracting()) return;
        this.setHint((0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING, -1);
        this.resolveConstraints(duration, resolutionDirection, anchor);
    }
    /**
   * Get a valid position for the view center according to the current constraints.
   * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.
   * This is useful to guess a valid center position at a different zoom level.
   * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
   */ getConstrainedCenter(targetCenter, targetResolution) {
        const size = this.getViewportSize_(this.getRotation());
        return this.constraints_.center(targetCenter, targetResolution || this.getResolution(), size);
    }
    /**
   * Get a valid zoom level according to the current view constraints.
   * @param {number|undefined} targetZoom Target zoom.
   * @param {number} [direction=0] Indicate which resolution should be used
   * by a renderer if the view resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   * @return {number|undefined} Valid zoom level.
   */ getConstrainedZoom(targetZoom, direction) {
        const targetRes = this.getResolutionForZoom(targetZoom);
        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, direction));
    }
    /**
   * Get a valid resolution according to the current view constraints.
   * @param {number|undefined} targetResolution Target resolution.
   * @param {number} [direction=0] Indicate which resolution should be used
   * by a renderer if the view resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   * @return {number|undefined} Valid resolution.
   */ getConstrainedResolution(targetResolution, direction) {
        direction = direction || 0;
        const size = this.getViewportSize_(this.getRotation());
        return this.constraints_.resolution(targetResolution, direction, size);
    }
}
/**
 * @param {Function} callback Callback.
 * @param {*} returnValue Return value.
 */ function $5c065e8fdff88e40$var$animationCallback(callback, returnValue) {
    setTimeout(function() {
        callback(returnValue);
    }, 0);
}
function $5c065e8fdff88e40$export$964345001ee9ac52(options) {
    if (options.extent !== undefined) {
        const smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;
        return (0, $266312e45c8c12e4$export$c2f0af2c946f6897)(options.extent, options.constrainOnlyCenter, smooth);
    }
    const projection = (0, $983289ae1d13cd2a$export$549167224996a0fb)(options.projection, "EPSG:3857");
    if (options.multiWorld !== true && projection.isGlobal()) {
        const extent = projection.getExtent().slice();
        extent[0] = -Infinity;
        extent[2] = Infinity;
        return (0, $266312e45c8c12e4$export$c2f0af2c946f6897)(extent, false, false);
    }
    return 0, $266312e45c8c12e4$export$f883a24d5edde77c;
}
function $5c065e8fdff88e40$export$c68d65f9148da196(options) {
    let resolutionConstraint;
    let maxResolution;
    let minResolution;
    // TODO: move these to be ol constants
    // see https://github.com/openlayers/openlayers/issues/2076
    const defaultMaxZoom = 28;
    const defaultZoomFactor = 2;
    let minZoom = options.minZoom !== undefined ? options.minZoom : $5c065e8fdff88e40$var$DEFAULT_MIN_ZOOM;
    let maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;
    const zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;
    const multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;
    const smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;
    const showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;
    const projection = (0, $983289ae1d13cd2a$export$549167224996a0fb)(options.projection, "EPSG:3857");
    const projExtent = projection.getExtent();
    let constrainOnlyCenter = options.constrainOnlyCenter;
    let extent = options.extent;
    if (!multiWorld && !extent && projection.isGlobal()) {
        constrainOnlyCenter = false;
        extent = projExtent;
    }
    if (options.resolutions !== undefined) {
        const resolutions = options.resolutions;
        maxResolution = resolutions[minZoom];
        minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];
        if (options.constrainResolution) resolutionConstraint = (0, $ba6928caf79ac783$export$d65a517690fc4385)(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);
        else resolutionConstraint = (0, $ba6928caf79ac783$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
    } else {
        // calculate the default min and max resolution
        const size = !projExtent ? 360 * (0, $6a4fde186e5464e9$export$1482081eec883108).degrees / projection.getMetersPerUnit() : Math.max((0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projExtent), (0, $84be800ca44e672c$export$c08559766941f856)(projExtent));
        const defaultMaxResolution = size / (0, $a96901ad7de10b0c$export$6b8cb5cd370bd90c) / Math.pow(defaultZoomFactor, $5c065e8fdff88e40$var$DEFAULT_MIN_ZOOM);
        const defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - $5c065e8fdff88e40$var$DEFAULT_MIN_ZOOM);
        // user provided maxResolution takes precedence
        maxResolution = options.maxResolution;
        if (maxResolution !== undefined) minZoom = 0;
        else maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
        // user provided minResolution takes precedence
        minResolution = options.minResolution;
        if (minResolution === undefined) {
            if (options.maxZoom !== undefined) {
                if (options.maxResolution !== undefined) minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
                else minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
            } else minResolution = defaultMinResolution;
        }
        // given discrete zoom levels, minResolution may be different than provided
        maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);
        if (options.constrainResolution) resolutionConstraint = (0, $ba6928caf79ac783$export$22ac0f6b219de91a)(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
        else resolutionConstraint = (0, $ba6928caf79ac783$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
    }
    return {
        constraint: resolutionConstraint,
        maxResolution: maxResolution,
        minResolution: minResolution,
        minZoom: minZoom,
        zoomFactor: zoomFactor
    };
}
function $5c065e8fdff88e40$export$4eeaa08dd550e3c0(options) {
    const enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;
    if (enableRotation) {
        const constrainRotation = options.constrainRotation;
        if (constrainRotation === undefined || constrainRotation === true) return (0, $4412a0460d6cbb1d$export$17a6e6f3448b17e8)();
        if (constrainRotation === false) return 0, $4412a0460d6cbb1d$export$f883a24d5edde77c;
        if (typeof constrainRotation === "number") return (0, $4412a0460d6cbb1d$export$9ba78806de831083)(constrainRotation);
        return 0, $4412a0460d6cbb1d$export$f883a24d5edde77c;
    }
    return 0, $4412a0460d6cbb1d$export$e20fbacbb41798b;
}
function $5c065e8fdff88e40$export$ee75376562060184(animation) {
    if (animation.sourceCenter && animation.targetCenter) {
        if (!(0, $c65bc16e55ef0e33$export$e9bab7fafb253603)(animation.sourceCenter, animation.targetCenter)) return false;
    }
    if (animation.sourceResolution !== animation.targetResolution) return false;
    if (animation.sourceRotation !== animation.targetRotation) return false;
    return true;
}
/**
 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
 * @param {import("./size.js").Size} size Box pixel size.
 * @param {import("./pixel.js").Pixel} position Position on the view to center on.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @return {import("./coordinate.js").Coordinate} Shifted center.
 */ function $5c065e8fdff88e40$var$calculateCenterOn(coordinate, size, position, resolution, rotation) {
    // calculate rotated position
    const cosAngle = Math.cos(-rotation);
    let sinAngle = Math.sin(-rotation);
    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    rotX += (size[0] / 2 - position[0]) * resolution;
    rotY += (position[1] - size[1] / 2) * resolution;
    // go back to original angle
    sinAngle = -sinAngle; // go back to original rotation
    const centerX = rotX * cosAngle - rotY * sinAngle;
    const centerY = rotY * cosAngle + rotX * sinAngle;
    return [
        centerX,
        centerY
    ];
}
var $5c065e8fdff88e40$export$2e2bcd8739ae039 = $5c065e8fdff88e40$var$View;





/**
 * @typedef {function(import("../Map.js").FrameState):HTMLElement} RenderFunction
 */ /**
 * @typedef {'sourceready'|'change:source'} LayerEventType
 */ /***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
 *     LayerEventType, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|LayerEventType|
 *     import("../render/EventType").LayerRenderEventTypes, Return>} LayerOnSignature
 */ /**
 * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,
 * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after
 * construction.
 * @property {import("../Map.js").default|null} [map] Map.
 * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
 * HTML element. Will overwrite the default rendering for the layer.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @typedef {Object} State
 * @property {import("./Layer.js").default} layer Layer.
 * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
 * @property {boolean} visible Visible.
 * @property {boolean} managed Managed.
 * @property {import("../extent.js").Extent} [extent] Extent.
 * @property {number} zIndex ZIndex.
 * @property {number} maxResolution Maximum resolution.
 * @property {number} minResolution Minimum resolution.
 * @property {number} minZoom Minimum zoom.
 * @property {number} maxZoom Maximum zoom.
 */ /**
 * @classdesc
 * Base class from which all layer types are derived. This should only be instantiated
 * in the case where a custom layer is added to the map with a custom `render` function.
 * Such a function can be specified in the `options` object, and is expected to return an HTML element.
 *
 * A visual representation of raster or vector map data.
 * Layers group together those properties that pertain to how the data is to be
 * displayed, irrespective of the source of that data.
 *
 * Layers are usually added to a map with [map.addLayer()]{@link import("../Map.js").default#addLayer}.
 * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers
 * internally. These unmanaged layers are associated with the map using
 * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.
 *
 * A generic `change` event is fired when the state of the source changes.
 * A `sourceready` event is fired when the layer's source is ready.
 *
 * @fires import("../render/Event.js").RenderEvent#prerender
 * @fires import("../render/Event.js").RenderEvent#postrender
 * @fires import("../events/Event.js").BaseEvent#sourceready
 *
 * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
 * @template {import("../renderer/Layer.js").default} [RendererType=import("../renderer/Layer.js").default]
 * @api
 */ class $14019fcc7ba24fd5$var$Layer extends (0, $caae539137eb9fda$export$2e2bcd8739ae039) {
    /**
   * @param {Options<SourceType>} options Layer options.
   */ constructor(options){
        const baseOptions = Object.assign({}, options);
        delete baseOptions.source;
        super(baseOptions);
        /***
     * @type {LayerOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {LayerOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {LayerOnSignature<void>}
     */ this.un;
        /**
     * @private
     * @type {?import("../events.js").EventsKey}
     */ this.mapPrecomposeKey_ = null;
        /**
     * @private
     * @type {?import("../events.js").EventsKey}
     */ this.mapRenderKey_ = null;
        /**
     * @private
     * @type {?import("../events.js").EventsKey}
     */ this.sourceChangeKey_ = null;
        /**
     * @private
     * @type {RendererType}
     */ this.renderer_ = null;
        /**
     * @private
     * @type {boolean}
     */ this.sourceReady_ = false;
        /**
     * @protected
     * @type {boolean}
     */ this.rendered = false;
        // Overwrite default render method with a custom one
        if (options.render) this.render = options.render;
        if (options.map) this.setMap(options.map);
        this.addChangeListener((0, $e777f004feefd0c5$export$2e2bcd8739ae039).SOURCE, this.handleSourcePropertyChange_);
        const source = options.source ? /** @type {SourceType} */ options.source : null;
        this.setSource(source);
    }
    /**
   * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
   * @return {Array<import("./Layer.js").default>} Array of layers.
   */ getLayersArray(array) {
        array = array ? array : [];
        array.push(this);
        return array;
    }
    /**
   * @param {Array<import("./Layer.js").State>} [states] Optional list of layer states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */ getLayerStatesArray(states) {
        states = states ? states : [];
        states.push(this.getLayerState());
        return states;
    }
    /**
   * Get the layer source.
   * @return {SourceType|null} The layer source (or `null` if not yet set).
   * @observable
   * @api
   */ getSource() {
        return /** @type {SourceType} */ this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).SOURCE) || null;
    }
    /**
   * @return {SourceType|null} The source being rendered.
   */ getRenderSource() {
        return this.getSource();
    }
    /**
   * @return {import("../source/Source.js").State} Source state.
   */ getSourceState() {
        const source = this.getSource();
        return !source ? "undefined" : source.getState();
    }
    /**
   * @private
   */ handleSourceChange_() {
        this.changed();
        if (this.sourceReady_ || this.getSource().getState() !== "ready") return;
        this.sourceReady_ = true;
        this.dispatchEvent("sourceready");
    }
    /**
   * @private
   */ handleSourcePropertyChange_() {
        if (this.sourceChangeKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.sourceChangeKey_);
            this.sourceChangeKey_ = null;
        }
        this.sourceReady_ = false;
        const source = this.getSource();
        if (source) {
            this.sourceChangeKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(source, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.handleSourceChange_, this);
            if (source.getState() === "ready") {
                this.sourceReady_ = true;
                setTimeout(()=>{
                    this.dispatchEvent("sourceready");
                }, 0);
            }
        }
        this.changed();
    }
    /**
   * @param {import("../pixel").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
   * an array of features.
   */ getFeatures(pixel) {
        if (!this.renderer_) return Promise.resolve([]);
        return this.renderer_.getFeatures(pixel);
    }
    /**
   * @param {import("../pixel").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   */ getData(pixel) {
        if (!this.renderer_ || !this.rendered) return null;
        return this.renderer_.getData(pixel);
    }
    /**
   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and
   * extent, not set to `visible: false`, and not inside a layer group that is set
   * to `visible: false`.
   * @param {View|import("../View.js").ViewStateLayerStateExtent} [view] View or {@link import("../Map.js").FrameState}.
   * Only required when the layer is not added to a map.
   * @return {boolean} The layer is visible in the map view.
   * @api
   */ isVisible(view) {
        let frameState;
        const map = this.getMapInternal();
        if (!view && map) view = map.getView();
        if (view instanceof (0, $5c065e8fdff88e40$export$2e2bcd8739ae039)) frameState = {
            viewState: view.getState(),
            extent: view.calculateExtent()
        };
        else frameState = view;
        if (!frameState.layerStatesArray && map) frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();
        let layerState;
        if (frameState.layerStatesArray) layerState = frameState.layerStatesArray.find((layerState)=>layerState.layer === this);
        else layerState = this.getLayerState();
        const layerExtent = this.getExtent();
        return $14019fcc7ba24fd5$export$acb1e9cb9ce4ca56(layerState, frameState.viewState) && (!layerExtent || (0, $84be800ca44e672c$export$7b0a31e10bbff018)(layerExtent, frameState.extent));
    }
    /**
   * Get the attributions of the source of this layer for the given view.
   * @param {View|import("../View.js").ViewStateLayerStateExtent} [view] View or {@link import("../Map.js").FrameState}.
   * Only required when the layer is not added to a map.
   * @return {Array<string>} Attributions for this layer at the given view.
   * @api
   */ getAttributions(view) {
        if (!this.isVisible(view)) return [];
        let getAttributions;
        const source = this.getSource();
        if (source) getAttributions = source.getAttributions();
        if (!getAttributions) return [];
        const frameState = view instanceof (0, $5c065e8fdff88e40$export$2e2bcd8739ae039) ? view.getViewStateAndExtent() : view;
        let attributions = getAttributions(frameState);
        if (!Array.isArray(attributions)) attributions = [
            attributions
        ];
        return attributions;
    }
    /**
   * In charge to manage the rendering of the layer. One layer type is
   * bounded with one layer renderer.
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement} target Target which the renderer may (but need not) use
   * for rendering its content.
   * @return {HTMLElement|null} The rendered element.
   */ render(frameState, target) {
        const layerRenderer = this.getRenderer();
        if (layerRenderer.prepareFrame(frameState)) {
            this.rendered = true;
            return layerRenderer.renderFrame(frameState, target);
        }
        return null;
    }
    /**
   * Called when a layer is not visible during a map render.
   */ unrender() {
        this.rendered = false;
    }
    /**
   * For use inside the library only.
   * @param {import("../Map.js").default|null} map Map.
   */ setMapInternal(map) {
        if (!map) this.unrender();
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAP, map);
    }
    /**
   * For use inside the library only.
   * @return {import("../Map.js").default|null} Map.
   */ getMapInternal() {
        return this.get((0, $e777f004feefd0c5$export$2e2bcd8739ae039).MAP);
    }
    /**
   * Sets the layer to be rendered on top of other layers on a map. The map will
   * not manage this layer in its layers collection. This
   * is useful for temporary layers. To remove an unmanaged layer from the map,
   * use `#setMap(null)`.
   *
   * To add the layer to a map and have it managed by the map, use
   * {@link module:ol/Map~Map#addLayer} instead.
   * @param {import("../Map.js").default|null} map Map.
   * @api
   */ setMap(map) {
        if (this.mapPrecomposeKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.mapPrecomposeKey_);
            this.mapPrecomposeKey_ = null;
        }
        if (!map) this.changed();
        if (this.mapRenderKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.mapRenderKey_);
            this.mapRenderKey_ = null;
        }
        if (map) {
            this.mapPrecomposeKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(map, (0, $4585eb82aab12670$export$2e2bcd8739ae039).PRECOMPOSE, function(evt) {
                const renderEvent = /** @type {import("../render/Event.js").default} */ evt;
                const layerStatesArray = renderEvent.frameState.layerStatesArray;
                const layerState = this.getLayerState(false);
                // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.
                (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!layerStatesArray.some(function(arrayLayerState) {
                    return arrayLayerState.layer === layerState.layer;
                }), 67);
                layerStatesArray.push(layerState);
            }, this);
            this.mapRenderKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(this, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, map.render, map);
            this.changed();
        }
    }
    /**
   * Set the layer source.
   * @param {SourceType|null} source The layer source.
   * @observable
   * @api
   */ setSource(source) {
        this.set((0, $e777f004feefd0c5$export$2e2bcd8739ae039).SOURCE, source);
    }
    /**
   * Get the renderer for this layer.
   * @return {RendererType|null} The layer renderer.
   */ getRenderer() {
        if (!this.renderer_) this.renderer_ = this.createRenderer();
        return this.renderer_;
    }
    /**
   * @return {boolean} The layer has a renderer.
   */ hasRenderer() {
        return !!this.renderer_;
    }
    /**
   * Create a renderer for this layer.
   * @return {RendererType} A layer renderer.
   * @protected
   */ createRenderer() {
        return null;
    }
    /**
   * Clean up.
   */ disposeInternal() {
        if (this.renderer_) {
            this.renderer_.dispose();
            delete this.renderer_;
        }
        this.setSource(null);
        super.disposeInternal();
    }
}
function $14019fcc7ba24fd5$export$acb1e9cb9ce4ca56(layerState, viewState) {
    if (!layerState.visible) return false;
    const resolution = viewState.resolution;
    if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) return false;
    const zoom = viewState.zoom;
    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
}
var $14019fcc7ba24fd5$export$2e2bcd8739ae039 = $14019fcc7ba24fd5$var$Layer;



/**
 * @template T
 * @typedef HitMatch
 * @property {import("../Feature.js").FeatureLike} feature Feature.
 * @property {import("../layer/Layer.js").default} layer Layer.
 * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
 * @property {number} distanceSq Squared distance.
 * @property {import("./vector.js").FeatureCallback<T>} callback Callback.
 */ /**
 * @abstract
 */ class $f61450f8738cb14c$var$MapRenderer extends (0, $2323388472940bb7$export$2e2bcd8739ae039) {
    /**
   * @param {import("../Map.js").default} map Map.
   */ constructor(map){
        super();
        /**
     * @private
     * @type {import("../Map.js").default}
     */ this.map_ = map;
    }
    /**
   * @abstract
   * @param {import("../render/EventType.js").default} type Event type.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */ dispatchRenderEvent(type, frameState) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @protected
   */ calculateMatrices2D(frameState) {
        const viewState = frameState.viewState;
        const coordinateToPixelTransform = frameState.coordinateToPixelTransform;
        const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
        (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
        (0, $d59a735b25ae191a$export$bd70ea2a93c0fa4)(pixelToCoordinateTransform, coordinateToPixelTransform);
    }
    /**
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {boolean} checkWrapped Check for wrapped geometries.
   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {S} thisArg Value to use as `this` when executing `callback`.
   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
   *     function, only layers which are visible and for which this function
   *     returns `true` will be tested for features.  By default, all visible
   *     layers will be tested.
   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
   * @return {T|undefined} Callback result.
   * @template S,T,U
   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
        let result;
        const viewState = frameState.viewState;
        /**
     * @param {boolean} managed Managed layer.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @return {T|undefined} Callback result.
     */ function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {
            return callback.call(thisArg, feature, managed ? layer : null, geometry);
        }
        const projection = viewState.projection;
        const translatedCoordinate = (0, $c65bc16e55ef0e33$export$39a9ce3624977b84)(coordinate.slice(), projection);
        const offsets = [
            [
                0,
                0
            ]
        ];
        if (projection.canWrapX() && checkWrapped) {
            const projectionExtent = projection.getExtent();
            const worldWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projectionExtent);
            offsets.push([
                -worldWidth,
                0
            ], [
                worldWidth,
                0
            ]);
        }
        const layerStates = frameState.layerStatesArray;
        const numLayers = layerStates.length;
        const matches = /** @type {Array<HitMatch<T>>} */ [];
        const tmpCoord = [];
        for(let i = 0; i < offsets.length; i++)for(let j = numLayers - 1; j >= 0; --j){
            const layerState = layerStates[j];
            const layer = layerState.layer;
            if (layer.hasRenderer() && (0, $14019fcc7ba24fd5$export$acb1e9cb9ce4ca56)(layerState, viewState) && layerFilter.call(thisArg2, layer)) {
                const layerRenderer = layer.getRenderer();
                const source = layer.getSource();
                if (layerRenderer && source) {
                    const coordinates = source.getWrapX() ? translatedCoordinate : coordinate;
                    const callback = forEachFeatureAtCoordinate.bind(null, layerState.managed);
                    tmpCoord[0] = coordinates[0] + offsets[i][0];
                    tmpCoord[1] = coordinates[1] + offsets[i][1];
                    result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback, matches);
                }
                if (result) return result;
            }
        }
        if (matches.length === 0) return undefined;
        const order = 1 / matches.length;
        matches.forEach((m, i)=>m.distanceSq += i * order);
        matches.sort((a, b)=>a.distanceSq - b.distanceSq);
        matches.some((m)=>{
            return result = m.callback(m.feature, m.layer, m.geometry);
        });
        return result;
    }
    /**
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState FrameState.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {boolean} checkWrapped Check for wrapped geometries.
   * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
   *     function, only layers which are visible and for which this function
   *     returns `true` will be tested for features.  By default, all visible
   *     layers will be tested.
   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
   * @return {boolean} Is there a feature at the given coordinate?
   * @template U
   */ hasFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
        const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, (0, $2c3aa3ce33eccc0f$export$22e23a2304399231), this, layerFilter, thisArg);
        return hasFeature !== undefined;
    }
    /**
   * @return {import("../Map.js").default} Map.
   */ getMap() {
        return this.map_;
    }
    /**
   * Render.
   * @abstract
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   */ renderFrame(frameState) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */ flushDeclutterItems(frameState) {}
    /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @protected
   */ scheduleExpireIconCache(frameState) {
        if ((0, $82136d2ec01af9ba$export$747ccdf771a87ab8).canExpireCache()) frameState.postRenderFunctions.push($f61450f8738cb14c$var$expireIconCache);
    }
}
/**
 * @param {import("../Map.js").default} map Map.
 * @param {import("../Map.js").FrameState} frameState Frame state.
 */ function $f61450f8738cb14c$var$expireIconCache(map, frameState) {
    (0, $82136d2ec01af9ba$export$747ccdf771a87ab8).expire();
}
var $f61450f8738cb14c$export$2e2bcd8739ae039 = $f61450f8738cb14c$var$MapRenderer;



/**
 * @module ol/render/Event
 */ 
class $b9deb9d8bf8584f6$var$RenderEvent extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {import("./EventType.js").default} type Type.
   * @param {import("../transform.js").Transform} [inversePixelTransform] Transform for
   *     CSS pixels to rendered pixels.
   * @param {import("../Map.js").FrameState} [frameState] Frame state.
   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.
   */ constructor(type, inversePixelTransform, frameState, context){
        super(type);
        /**
     * Transform from CSS pixels (relative to the top-left corner of the map viewport)
     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.
     * @type {import("../transform.js").Transform|undefined}
     * @api
     */ this.inversePixelTransform = inversePixelTransform;
        /**
     * An object representing the current render frame state.
     * @type {import("../Map.js").FrameState|undefined}
     * @api
     */ this.frameState = frameState;
        /**
     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,
     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL
     * context.
     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}
     * @api
     */ this.context = context;
    }
}
var $b9deb9d8bf8584f6$export$2e2bcd8739ae039 = $b9deb9d8bf8584f6$var$RenderEvent;



/**
 * @module ol/css
 */ /**
 * @typedef {Object} FontParameters
 * @property {string} style Style.
 * @property {string} variant Variant.
 * @property {string} weight Weight.
 * @property {string} size Size.
 * @property {string} lineHeight LineHeight.
 * @property {string} family Family.
 * @property {Array<string>} families Families.
 */ /**
 * The CSS class for hidden feature.
 *
 * @const
 * @type {string}
 */ const $7309508e6173a6a6$export$981241db82723ce2 = "ol-hidden";
const $7309508e6173a6a6$export$99b49471b0394319 = "ol-selectable";
const $7309508e6173a6a6$export$1afde3d6e16a7b29 = "ol-unselectable";
const $7309508e6173a6a6$export$68eede0dd8c6c1da = "ol-unsupported";
const $7309508e6173a6a6$export$4d4f8be70b656192 = "ol-control";
const $7309508e6173a6a6$export$e16017ac68d14492 = "ol-collapsed";
/**
 * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font
 * @type {RegExp}
 */ const $7309508e6173a6a6$var$fontRegEx = new RegExp([
    "^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)",
    "(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)",
    "(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)",
    "(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?",
    "(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))",
    "(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))",
    "?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"
].join(""), "i");
const $7309508e6173a6a6$var$fontRegExMatchIndex = [
    "style",
    "variant",
    "weight",
    "size",
    "lineHeight",
    "family"
];
const $7309508e6173a6a6$export$5abde8a6aec4a131 = function(fontSpec) {
    const match = fontSpec.match($7309508e6173a6a6$var$fontRegEx);
    if (!match) return null;
    const style = /** @type {FontParameters} */ {
        lineHeight: "normal",
        size: "1.2em",
        style: "normal",
        weight: "normal",
        variant: "normal"
    };
    for(let i = 0, ii = $7309508e6173a6a6$var$fontRegExMatchIndex.length; i < ii; ++i){
        const value = match[i + 1];
        if (value !== undefined) style[$7309508e6173a6a6$var$fontRegExMatchIndex[i]] = value;
    }
    style.families = style.family.split(/,\s?/);
    return style;
};


/**
 * @module ol/render/canvas
 */ 



function $1d92219e1eaa7bd2$export$9e05d10eae75c464(width, height, canvasPool, settings) {
    /** @type {HTMLCanvasElement|OffscreenCanvas} */ let canvas;
    if (canvasPool && canvasPool.length) canvas = canvasPool.shift();
    else if (0, $253e11c6a01eb5bc$export$98fcef3dc9973292) canvas = new OffscreenCanvas(width || 300, height || 300);
    else canvas = document.createElement("canvas");
    if (width) canvas.width = width;
    if (height) canvas.height = height;
    //FIXME Allow OffscreenCanvasRenderingContext2D as return type
    return /** @type {CanvasRenderingContext2D} */ canvas.getContext("2d", settings);
}
function $1d92219e1eaa7bd2$export$e918ac6a1026a12a(context) {
    const canvas = context.canvas;
    canvas.width = 1;
    canvas.height = 1;
    context.clearRect(0, 0, 1, 1);
}
function $1d92219e1eaa7bd2$export$e823f88e4111159a(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);
    return width;
}
function $1d92219e1eaa7bd2$export$fc5b8aac72846d1e(element) {
    let height = element.offsetHeight;
    const style = getComputedStyle(element);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
    return height;
}
function $1d92219e1eaa7bd2$export$5542201de9311ab2(newNode, oldNode) {
    const parent = oldNode.parentNode;
    if (parent) parent.replaceChild(newNode, oldNode);
}
function $1d92219e1eaa7bd2$export$1d0aa160432dfea5(node) {
    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
}
function $1d92219e1eaa7bd2$export$1e1c9bf5a4ffe0d1(node) {
    while(node.lastChild)node.removeChild(node.lastChild);
}
function $1d92219e1eaa7bd2$export$caeacfe04f52533a(node, children) {
    const oldChildren = node.childNodes;
    for(let i = 0;; ++i){
        const oldChild = oldChildren[i];
        const newChild = children[i];
        // check if our work is done
        if (!oldChild && !newChild) break;
        // check if children match
        if (oldChild === newChild) continue;
        // check if a new child needs to be added
        if (!oldChild) {
            node.appendChild(newChild);
            continue;
        }
        // check if an old child needs to be removed
        if (!newChild) {
            node.removeChild(oldChild);
            --i;
            continue;
        }
        // reorder
        node.insertBefore(newChild, oldChild);
    }
}



const $ba06fcc662408736$export$3847dfea4f8d4dfa = "10px sans-serif";
const $ba06fcc662408736$export$c495d52ee3fd74b2 = "#000";
const $ba06fcc662408736$export$17bd0c38d6ae694e = "round";
const $ba06fcc662408736$export$e21b4112fdc612fc = [];
const $ba06fcc662408736$export$e06efc2409049f76 = 0;
const $ba06fcc662408736$export$365eb9648cf19bd0 = "round";
const $ba06fcc662408736$export$80c1c01844597b7b = 10;
const $ba06fcc662408736$export$1eb2eaecacf2031e = "#000";
const $ba06fcc662408736$export$94d53b95641b5766 = "center";
const $ba06fcc662408736$export$cf2279a1bff62eb = "middle";
const $ba06fcc662408736$export$40a9eeef55665a40 = [
    0,
    0,
    0,
    0
];
const $ba06fcc662408736$export$79661f132c62010e = 1;
const $ba06fcc662408736$export$1d36981fcadac93b = new (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039)();
/**
 * @type {CanvasRenderingContext2D}
 */ let $ba06fcc662408736$var$measureContext = null;
/**
 * @type {string}
 */ let $ba06fcc662408736$var$measureFont;
const $ba06fcc662408736$export$7fdcec604f0b1fa7 = {};
const $ba06fcc662408736$export$a534074a28fa87ff = function() {
    const retries = 100;
    const size = "32px ";
    const referenceFonts = [
        "monospace",
        "serif"
    ];
    const len = referenceFonts.length;
    const text = "wmytzilWMYTZIL@#/&?$%10\uF013";
    let interval, referenceWidth;
    /**
   * @param {string} fontStyle Css font-style
   * @param {string} fontWeight Css font-weight
   * @param {*} fontFamily Css font-family
   * @return {boolean} Font with style and weight is available
   */ function isAvailable(fontStyle, fontWeight, fontFamily) {
        let available = true;
        for(let i = 0; i < len; ++i){
            const referenceFont = referenceFonts[i];
            referenceWidth = $ba06fcc662408736$export$4ea92329b673abd1(fontStyle + " " + fontWeight + " " + size + referenceFont, text);
            if (fontFamily != referenceFont) {
                const width = $ba06fcc662408736$export$4ea92329b673abd1(fontStyle + " " + fontWeight + " " + size + fontFamily + "," + referenceFont, text);
                // If width and referenceWidth are the same, then the fallback was used
                // instead of the font we wanted, so the font is not available.
                available = available && width != referenceWidth;
            }
        }
        if (available) return true;
        return false;
    }
    function check() {
        let done = true;
        const fonts = $ba06fcc662408736$export$1d36981fcadac93b.getKeys();
        for(let i = 0, ii = fonts.length; i < ii; ++i){
            const font = fonts[i];
            if ($ba06fcc662408736$export$1d36981fcadac93b.get(font) < retries) {
                if (isAvailable.apply(this, font.split("\n"))) {
                    (0, $e2dfef87a88758ed$export$42ffd38884aecdac)($ba06fcc662408736$export$7fdcec604f0b1fa7);
                    // Make sure that loaded fonts are picked up by Safari
                    $ba06fcc662408736$var$measureContext = null;
                    $ba06fcc662408736$var$measureFont = undefined;
                    $ba06fcc662408736$export$1d36981fcadac93b.set(font, retries);
                } else {
                    $ba06fcc662408736$export$1d36981fcadac93b.set(font, $ba06fcc662408736$export$1d36981fcadac93b.get(font) + 1, true);
                    done = false;
                }
            }
        }
        if (done) {
            clearInterval(interval);
            interval = undefined;
        }
    }
    return function(fontSpec) {
        const font = (0, $7309508e6173a6a6$export$5abde8a6aec4a131)(fontSpec);
        if (!font) return;
        const families = font.families;
        for(let i = 0, ii = families.length; i < ii; ++i){
            const family = families[i];
            const key = font.style + "\n" + font.weight + "\n" + family;
            if ($ba06fcc662408736$export$1d36981fcadac93b.get(key) === undefined) {
                $ba06fcc662408736$export$1d36981fcadac93b.set(key, retries, true);
                if (!isAvailable(font.style, font.weight, family)) {
                    $ba06fcc662408736$export$1d36981fcadac93b.set(key, 0, true);
                    if (interval === undefined) interval = setInterval(check, 32);
                }
            }
        }
    };
}();
const $ba06fcc662408736$export$4feaf6852ff92513 = function() {
    /**
   * @type {HTMLDivElement}
   */ let measureElement;
    return function(fontSpec) {
        let height = $ba06fcc662408736$export$7fdcec604f0b1fa7[fontSpec];
        if (height == undefined) {
            if (0, $253e11c6a01eb5bc$export$98fcef3dc9973292) {
                const font = (0, $7309508e6173a6a6$export$5abde8a6aec4a131)(fontSpec);
                const metrics = $ba06fcc662408736$var$measureText(fontSpec, "\u017Dg");
                const lineHeight = isNaN(Number(font.lineHeight)) ? 1.2 : Number(font.lineHeight);
                height = lineHeight * (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
            } else {
                if (!measureElement) {
                    measureElement = document.createElement("div");
                    measureElement.innerHTML = "M";
                    measureElement.style.minHeight = "0";
                    measureElement.style.maxHeight = "none";
                    measureElement.style.height = "auto";
                    measureElement.style.padding = "0";
                    measureElement.style.border = "none";
                    measureElement.style.position = "absolute";
                    measureElement.style.display = "block";
                    measureElement.style.left = "-99999px";
                }
                measureElement.style.font = fontSpec;
                document.body.appendChild(measureElement);
                height = measureElement.offsetHeight;
                document.body.removeChild(measureElement);
            }
            $ba06fcc662408736$export$7fdcec604f0b1fa7[fontSpec] = height;
        }
        return height;
    };
}();
/**
 * @param {string} font Font.
 * @param {string} text Text.
 * @return {TextMetrics} Text metrics.
 */ function $ba06fcc662408736$var$measureText(font, text) {
    if (!$ba06fcc662408736$var$measureContext) $ba06fcc662408736$var$measureContext = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(1, 1);
    if (font != $ba06fcc662408736$var$measureFont) {
        $ba06fcc662408736$var$measureContext.font = font;
        $ba06fcc662408736$var$measureFont = $ba06fcc662408736$var$measureContext.font;
    }
    return $ba06fcc662408736$var$measureContext.measureText(text);
}
function $ba06fcc662408736$export$4ea92329b673abd1(font, text) {
    return $ba06fcc662408736$var$measureText(font, text).width;
}
function $ba06fcc662408736$export$915c7ba51467308f(font, text, cache) {
    if (text in cache) return cache[text];
    const width = text.split("\n").reduce((prev, curr)=>Math.max(prev, $ba06fcc662408736$export$4ea92329b673abd1(font, curr)), 0);
    cache[text] = width;
    return width;
}
function $ba06fcc662408736$export$7d7c13020df1e791(baseStyle, chunks) {
    const widths = [];
    const heights = [];
    const lineWidths = [];
    let width = 0;
    let lineWidth = 0;
    let height = 0;
    let lineHeight = 0;
    for(let i = 0, ii = chunks.length; i <= ii; i += 2){
        const text = chunks[i];
        if (text === "\n" || i === ii) {
            width = Math.max(width, lineWidth);
            lineWidths.push(lineWidth);
            lineWidth = 0;
            height += lineHeight;
            continue;
        }
        const font = chunks[i + 1] || baseStyle.font;
        const currentWidth = $ba06fcc662408736$export$4ea92329b673abd1(font, text);
        widths.push(currentWidth);
        lineWidth += currentWidth;
        const currentHeight = $ba06fcc662408736$export$4feaf6852ff92513(font);
        heights.push(currentHeight);
        lineHeight = Math.max(lineHeight, currentHeight);
    }
    return {
        width: width,
        height: height,
        widths: widths,
        heights: heights,
        lineWidths: lineWidths
    };
}
function $ba06fcc662408736$export$8ac4d72be78047e6(context, rotation, offsetX, offsetY) {
    if (rotation !== 0) {
        context.translate(offsetX, offsetY);
        context.rotate(rotation);
        context.translate(-offsetX, -offsetY);
    }
}
function $ba06fcc662408736$export$3cb6f3a6e49cc0ee(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {
    context.save();
    if (opacity !== 1) context.globalAlpha *= opacity;
    if (transform) context.setTransform.apply(context, transform);
    if (/** @type {*} */ labelOrImage.contextInstructions) {
        // label
        context.translate(x, y);
        context.scale(scale[0], scale[1]);
        $ba06fcc662408736$var$executeLabelInstructions(/** @type {Label} */ labelOrImage, context);
    } else if (scale[0] < 0 || scale[1] < 0) {
        // flipped image
        context.translate(x, y);
        context.scale(scale[0], scale[1]);
        context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ labelOrImage, originX, originY, w, h, 0, 0, w, h);
    } else // if image not flipped translate and scale can be avoided
    context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ labelOrImage, originX, originY, w, h, x, y, w * scale[0], h * scale[1]);
    context.restore();
}
/**
 * @param {Label} label Label.
 * @param {CanvasRenderingContext2D} context Context.
 */ function $ba06fcc662408736$var$executeLabelInstructions(label, context) {
    const contextInstructions = label.contextInstructions;
    for(let i = 0, ii = contextInstructions.length; i < ii; i += 2)if (Array.isArray(contextInstructions[i + 1])) context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);
    else context[contextInstructions[i]] = contextInstructions[i + 1];
}





/**
 * @classdesc
 * Canvas map renderer.
 * @api
 */ class $c0a5b9d051148e52$var$CompositeMapRenderer extends (0, $f61450f8738cb14c$export$2e2bcd8739ae039) {
    /**
   * @param {import("../Map.js").default} map Map.
   */ constructor(map){
        super(map);
        /**
     * @type {import("../events.js").EventsKey}
     */ this.fontChangeListenerKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)((0, $ba06fcc662408736$export$1d36981fcadac93b), (0, $a6660a6615220f8c$export$2e2bcd8739ae039).PROPERTYCHANGE, map.redrawText.bind(map));
        /**
     * @private
     * @type {HTMLDivElement}
     */ this.element_ = document.createElement("div");
        const style = this.element_.style;
        style.position = "absolute";
        style.width = "100%";
        style.height = "100%";
        style.zIndex = "0";
        this.element_.className = (0, $7309508e6173a6a6$export$1afde3d6e16a7b29) + " ol-layers";
        const container = map.getViewport();
        container.insertBefore(this.element_, container.firstChild || null);
        /**
     * @private
     * @type {Array<HTMLElement>}
     */ this.children_ = [];
        /**
     * @private
     * @type {boolean}
     */ this.renderedVisible_ = true;
        /**
     * @type {Array<import("../layer/BaseVector.js").default>}
     */ this.declutterLayers_ = [];
    }
    /**
   * @param {import("../render/EventType.js").default} type Event type.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */ dispatchRenderEvent(type, frameState) {
        const map = this.getMap();
        if (map.hasListener(type)) {
            const event = new (0, $b9deb9d8bf8584f6$export$2e2bcd8739ae039)(type, undefined, frameState);
            map.dispatchEvent(event);
        }
    }
    disposeInternal() {
        (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.fontChangeListenerKey_);
        this.element_.parentNode.removeChild(this.element_);
        super.disposeInternal();
    }
    /**
   * Render.
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   */ renderFrame(frameState) {
        if (!frameState) {
            if (this.renderedVisible_) {
                this.element_.style.display = "none";
                this.renderedVisible_ = false;
            }
            return;
        }
        this.calculateMatrices2D(frameState);
        this.dispatchRenderEvent((0, $4585eb82aab12670$export$2e2bcd8739ae039).PRECOMPOSE, frameState);
        const layerStatesArray = frameState.layerStatesArray.sort(function(a, b) {
            return a.zIndex - b.zIndex;
        });
        const viewState = frameState.viewState;
        this.children_.length = 0;
        const declutterLayers = this.declutterLayers_;
        declutterLayers.length = 0;
        let previousElement = null;
        for(let i = 0, ii = layerStatesArray.length; i < ii; ++i){
            const layerState = layerStatesArray[i];
            frameState.layerIndex = i;
            const layer = layerState.layer;
            const sourceState = layer.getSourceState();
            if (!(0, $14019fcc7ba24fd5$export$acb1e9cb9ce4ca56)(layerState, viewState) || sourceState != "ready" && sourceState != "undefined") {
                layer.unrender();
                continue;
            }
            const element = layer.render(frameState, previousElement);
            if (!element) continue;
            if (element !== previousElement) {
                this.children_.push(element);
                previousElement = element;
            }
            if ("getDeclutter" in layer) declutterLayers.push(/** @type {import("../layer/BaseVector.js").default} */ layer);
        }
        this.flushDeclutterItems(frameState);
        (0, $1d92219e1eaa7bd2$export$caeacfe04f52533a)(this.element_, this.children_);
        this.dispatchRenderEvent((0, $4585eb82aab12670$export$2e2bcd8739ae039).POSTCOMPOSE, frameState);
        if (!this.renderedVisible_) {
            this.element_.style.display = "";
            this.renderedVisible_ = true;
        }
        this.scheduleExpireIconCache(frameState);
    }
    /**
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */ flushDeclutterItems(frameState) {
        const layers = this.declutterLayers_;
        for(let i = layers.length - 1; i >= 0; --i)layers[i].renderDeclutter(frameState);
        layers.length = 0;
    }
}
var $c0a5b9d051148e52$export$2e2bcd8739ae039 = $c0a5b9d051148e52$var$CompositeMapRenderer;




/**
 * @module ol/layer/Group
 */ 










class $3c2b2bf26c3e3155$export$2f5ff21d758d25a7 extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {EventType} type The event type.
   * @param {BaseLayer} layer The layer.
   */ constructor(type, layer){
        super(type);
        /**
     * The added or removed layer.
     * @type {BaseLayer}
     * @api
     */ this.layer = layer;
    }
}
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
 *     'change:layers', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {Array<import("./Base.js").default>|Collection<import("./Base.js").default>} [layers] Child layers.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @enum {string}
 * @private
 */ const $3c2b2bf26c3e3155$var$Property = {
    LAYERS: "layers"
};
/**
 * @classdesc
 * A {@link module:ol/Collection~Collection} of layers that are handled together.
 *
 * A generic `change` event is triggered when the group/Collection changes.
 *
 * @api
 */ class $3c2b2bf26c3e3155$var$LayerGroup extends (0, $caae539137eb9fda$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Layer options.
   */ constructor(options){
        options = options || {};
        const baseOptions = /** @type {Options} */ Object.assign({}, options);
        delete baseOptions.layers;
        let layers = options.layers;
        super(baseOptions);
        /***
     * @type {GroupOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {GroupOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {GroupOnSignature<void>}
     */ this.un;
        /**
     * @private
     * @type {Array<import("../events.js").EventsKey>}
     */ this.layersListenerKeys_ = [];
        /**
     * @private
     * @type {Object<string, Array<import("../events.js").EventsKey>>}
     */ this.listenerKeys_ = {};
        this.addChangeListener($3c2b2bf26c3e3155$var$Property.LAYERS, this.handleLayersChanged_);
        if (layers) {
            if (Array.isArray(layers)) layers = new (0, $6ba3969272323605$export$2e2bcd8739ae039)(layers.slice(), {
                unique: true
            });
            else (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof /** @type {?} */ layers.getArray === "function", 43); // Expected `layers` to be an array or a `Collection`
        } else layers = new (0, $6ba3969272323605$export$2e2bcd8739ae039)(undefined, {
            unique: true
        });
        this.setLayers(layers);
    }
    /**
   * @private
   */ handleLayerChange_() {
        this.changed();
    }
    /**
   * @private
   */ handleLayersChanged_() {
        this.layersListenerKeys_.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
        this.layersListenerKeys_.length = 0;
        const layers = this.getLayers();
        this.layersListenerKeys_.push((0, $776f68d2a754760b$export$63174c828edd6ff8)(layers, (0, $df86962829eabf3c$export$2e2bcd8739ae039).ADD, this.handleLayersAdd_, this), (0, $776f68d2a754760b$export$63174c828edd6ff8)(layers, (0, $df86962829eabf3c$export$2e2bcd8739ae039).REMOVE, this.handleLayersRemove_, this));
        for(const id in this.listenerKeys_)this.listenerKeys_[id].forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
        (0, $e2dfef87a88758ed$export$42ffd38884aecdac)(this.listenerKeys_);
        const layersArray = layers.getArray();
        for(let i = 0, ii = layersArray.length; i < ii; i++){
            const layer = layersArray[i];
            this.registerLayerListeners_(layer);
            this.dispatchEvent(new $3c2b2bf26c3e3155$export$2f5ff21d758d25a7("addlayer", layer));
        }
        this.changed();
    }
    /**
   * @param {BaseLayer} layer The layer.
   */ registerLayerListeners_(layer) {
        const listenerKeys = [
            (0, $776f68d2a754760b$export$63174c828edd6ff8)(layer, (0, $a6660a6615220f8c$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleLayerChange_, this),
            (0, $776f68d2a754760b$export$63174c828edd6ff8)(layer, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.handleLayerChange_, this)
        ];
        if (layer instanceof $3c2b2bf26c3e3155$var$LayerGroup) listenerKeys.push((0, $776f68d2a754760b$export$63174c828edd6ff8)(layer, "addlayer", this.handleLayerGroupAdd_, this), (0, $776f68d2a754760b$export$63174c828edd6ff8)(layer, "removelayer", this.handleLayerGroupRemove_, this));
        this.listenerKeys_[(0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(layer)] = listenerKeys;
    }
    /**
   * @param {GroupEvent} event The layer group event.
   */ handleLayerGroupAdd_(event) {
        this.dispatchEvent(new $3c2b2bf26c3e3155$export$2f5ff21d758d25a7("addlayer", event.layer));
    }
    /**
   * @param {GroupEvent} event The layer group event.
   */ handleLayerGroupRemove_(event) {
        this.dispatchEvent(new $3c2b2bf26c3e3155$export$2f5ff21d758d25a7("removelayer", event.layer));
    }
    /**
   * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
   * @private
   */ handleLayersAdd_(collectionEvent) {
        const layer = collectionEvent.element;
        this.registerLayerListeners_(layer);
        this.dispatchEvent(new $3c2b2bf26c3e3155$export$2f5ff21d758d25a7("addlayer", layer));
        this.changed();
    }
    /**
   * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
   * @private
   */ handleLayersRemove_(collectionEvent) {
        const layer = collectionEvent.element;
        const key = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(layer);
        this.listenerKeys_[key].forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
        delete this.listenerKeys_[key];
        this.dispatchEvent(new $3c2b2bf26c3e3155$export$2f5ff21d758d25a7("removelayer", layer));
        this.changed();
    }
    /**
   * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
   * in this group.
   * @return {!Collection<import("./Base.js").default>} Collection of
   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
   * @observable
   * @api
   */ getLayers() {
        return /** @type {!Collection<import("./Base.js").default>} */ this.get($3c2b2bf26c3e3155$var$Property.LAYERS);
    }
    /**
   * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
   * in this group.
   * @param {!Collection<import("./Base.js").default>} layers Collection of
   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
   * @observable
   * @api
   */ setLayers(layers) {
        const collection = this.getLayers();
        if (collection) {
            const currentLayers = collection.getArray();
            for(let i = 0, ii = currentLayers.length; i < ii; ++i)this.dispatchEvent(new $3c2b2bf26c3e3155$export$2f5ff21d758d25a7("removelayer", currentLayers[i]));
        }
        this.set($3c2b2bf26c3e3155$var$Property.LAYERS, layers);
    }
    /**
   * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
   * @return {Array<import("./Layer.js").default>} Array of layers.
   */ getLayersArray(array) {
        array = array !== undefined ? array : [];
        this.getLayers().forEach(function(layer) {
            layer.getLayersArray(array);
        });
        return array;
    }
    /**
   * Get the layer states list and use this groups z-index as the default
   * for all layers in this and nested groups, if it is unset at this point.
   * If dest is not provided and this group's z-index is undefined
   * 0 is used a the default z-index.
   * @param {Array<import("./Layer.js").State>} [dest] Optional list
   * of layer states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */ getLayerStatesArray(dest) {
        const states = dest !== undefined ? dest : [];
        const pos = states.length;
        this.getLayers().forEach(function(layer) {
            layer.getLayerStatesArray(states);
        });
        const ownLayerState = this.getLayerState();
        let defaultZIndex = ownLayerState.zIndex;
        if (!dest && ownLayerState.zIndex === undefined) defaultZIndex = 0;
        for(let i = pos, ii = states.length; i < ii; i++){
            const layerState = states[i];
            layerState.opacity *= ownLayerState.opacity;
            layerState.visible = layerState.visible && ownLayerState.visible;
            layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
            layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
            layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
            layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
            if (ownLayerState.extent !== undefined) {
                if (layerState.extent !== undefined) layerState.extent = (0, $84be800ca44e672c$export$72209efa88586d42)(layerState.extent, ownLayerState.extent);
                else layerState.extent = ownLayerState.extent;
            }
            if (layerState.zIndex === undefined) layerState.zIndex = defaultZIndex;
        }
        return states;
    }
    /**
   * @return {import("../source/Source.js").State} Source state.
   */ getSourceState() {
        return "ready";
    }
}
var $3c2b2bf26c3e3155$export$2e2bcd8739ae039 = $3c2b2bf26c3e3155$var$LayerGroup;


/**
 * @module ol/MapBrowserEvent
 */ /**
 * @module ol/MapEvent
 */ 
/**
 * @classdesc
 * Events emitted as map events are instances of this type.
 * See {@link module:ol/Map~Map} for which events trigger a map event.
 */ class $08f6d6b264ecce61$var$MapEvent extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {string} type Event type.
   * @param {import("./Map.js").default} map Map.
   * @param {?import("./Map.js").FrameState} [frameState] Frame state.
   */ constructor(type, map, frameState){
        super(type);
        /**
     * The map where the event occurred.
     * @type {import("./Map.js").default}
     * @api
     */ this.map = map;
        /**
     * The frame state at the time of the event.
     * @type {?import("./Map.js").FrameState}
     * @api
     */ this.frameState = frameState !== undefined ? frameState : null;
    }
}
var $08f6d6b264ecce61$export$2e2bcd8739ae039 = $08f6d6b264ecce61$var$MapEvent;


/**
 * @classdesc
 * Events emitted as map browser events are instances of this type.
 * See {@link module:ol/Map~Map} for which events trigger a map browser event.
 * @template {UIEvent} EVENT
 */ class $ea6dbcd957730cf1$var$MapBrowserEvent extends (0, $08f6d6b264ecce61$export$2e2bcd8739ae039) {
    /**
   * @param {string} type Event type.
   * @param {import("./Map.js").default} map Map.
   * @param {EVENT} originalEvent Original event.
   * @param {boolean} [dragging] Is the map currently being dragged?
   * @param {import("./Map.js").FrameState} [frameState] Frame state.
   * @param {Array<PointerEvent>} [activePointers] Active pointers.
   */ constructor(type, map, originalEvent, dragging, frameState, activePointers){
        super(type, map, frameState);
        /**
     * The original browser event.
     * @const
     * @type {EVENT}
     * @api
     */ this.originalEvent = originalEvent;
        /**
     * The map pixel relative to the viewport corresponding to the original browser event.
     * @type {?import("./pixel.js").Pixel}
     */ this.pixel_ = null;
        /**
     * The coordinate in the user projection corresponding to the original browser event.
     * @type {?import("./coordinate.js").Coordinate}
     */ this.coordinate_ = null;
        /**
     * Indicates if the map is currently being dragged. Only set for
     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
     *
     * @type {boolean}
     * @api
     */ this.dragging = dragging !== undefined ? dragging : false;
        /**
     * @type {Array<PointerEvent>|undefined}
     */ this.activePointers = activePointers;
    }
    /**
   * The map pixel relative to the viewport corresponding to the original event.
   * @type {import("./pixel.js").Pixel}
   * @api
   */ get pixel() {
        if (!this.pixel_) this.pixel_ = this.map.getEventPixel(this.originalEvent);
        return this.pixel_;
    }
    set pixel(pixel) {
        this.pixel_ = pixel;
    }
    /**
   * The coordinate corresponding to the original browser event.  This will be in the user
   * projection if one is set.  Otherwise it will be in the view projection.
   * @type {import("./coordinate.js").Coordinate}
   * @api
   */ get coordinate() {
        if (!this.coordinate_) this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
        return this.coordinate_;
    }
    set coordinate(coordinate) {
        this.coordinate_ = coordinate;
    }
    /**
   * Prevents the default browser action.
   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
   * @api
   */ preventDefault() {
        super.preventDefault();
        if ("preventDefault" in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.preventDefault();
    }
    /**
   * Prevents further propagation of the current event.
   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
   * @api
   */ stopPropagation() {
        super.stopPropagation();
        if ("stopPropagation" in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.stopPropagation();
    }
}
var $ea6dbcd957730cf1$export$2e2bcd8739ae039 = $ea6dbcd957730cf1$var$MapBrowserEvent;


/**
 * @module ol/MapBrowserEventHandler
 */ 

/**
 * @module ol/MapBrowserEventType
 */ 
var /**
 * Constants for event names.
 * @enum {string}
 */ $ca08bc7d1400c90f$export$2e2bcd8739ae039 /***
 * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types
 */  = {
    /**
   * A true single click with no dragging and no double click. Note that this
   * event is delayed by 250 ms to ensure that it is not a double click.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
   * @api
   */ SINGLECLICK: "singleclick",
    /**
   * A click with no dragging. A double click will fire two of this.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
   * @api
   */ CLICK: (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CLICK,
    /**
   * A true double click, with no dragging.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
   * @api
   */ DBLCLICK: (0, $f13d17e3c190470c$export$2e2bcd8739ae039).DBLCLICK,
    /**
   * Triggered when a pointer is dragged.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
   * @api
   */ POINTERDRAG: "pointerdrag",
    /**
   * Triggered when a pointer is moved. Note that on touch devices this is
   * triggered when the map is panned, so is not the same as mousemove.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
   * @api
   */ POINTERMOVE: "pointermove",
    POINTERDOWN: "pointerdown",
    POINTERUP: "pointerup",
    POINTEROVER: "pointerover",
    POINTEROUT: "pointerout",
    POINTERENTER: "pointerenter",
    POINTERLEAVE: "pointerleave",
    POINTERCANCEL: "pointercancel"
};


/**
 * @module ol/pointer/EventType
 */ /**
 * Constants for event names.
 * @enum {string}
 */ var $34ee59ecd2aa9258$export$2e2bcd8739ae039 = {
    POINTERMOVE: "pointermove",
    POINTERDOWN: "pointerdown",
    POINTERUP: "pointerup",
    POINTEROVER: "pointerover",
    POINTEROUT: "pointerout",
    POINTERENTER: "pointerenter",
    POINTERLEAVE: "pointerleave",
    POINTERCANCEL: "pointercancel"
};





class $d81b48bf28c2aa31$var$MapBrowserEventHandler extends (0, $fd4e3201ad7386dc$export$2e2bcd8739ae039) {
    /**
   * @param {import("./Map.js").default} map The map with the viewport to listen to events on.
   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.
   */ constructor(map, moveTolerance){
        super(map);
        /**
     * This is the element that we will listen to the real events on.
     * @type {import("./Map.js").default}
     * @private
     */ this.map_ = map;
        /**
     * @type {ReturnType<typeof setTimeout>}
     * @private
     */ this.clickTimeoutId_;
        /**
     * Emulate dblclick and singleclick. Will be true when only one pointer is active.
     * @type {boolean}
     */ this.emulateClicks_ = false;
        /**
     * @type {boolean}
     * @private
     */ this.dragging_ = false;
        /**
     * @type {!Array<import("./events.js").EventsKey>}
     * @private
     */ this.dragListenerKeys_ = [];
        /**
     * @type {number}
     * @private
     */ this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;
        /**
     * The most recent "down" type event (or null if none have occurred).
     * Set on pointerdown.
     * @type {PointerEvent|null}
     * @private
     */ this.down_ = null;
        const element = this.map_.getViewport();
        /**
     * @type {Array<PointerEvent>}
     * @private
     */ this.activePointers_ = [];
        /**
     * @type {!Object<number, Event>}
     * @private
     */ this.trackedTouches_ = {};
        this.element_ = element;
        /**
     * @type {?import("./events.js").EventsKey}
     * @private
     */ this.pointerdownListenerKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(element, (0, $34ee59ecd2aa9258$export$2e2bcd8739ae039).POINTERDOWN, this.handlePointerDown_, this);
        /**
     * @type {PointerEvent}
     * @private
     */ this.originalPointerMoveEvent_;
        /**
     * @type {?import("./events.js").EventsKey}
     * @private
     */ this.relayedListenerKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(element, (0, $34ee59ecd2aa9258$export$2e2bcd8739ae039).POINTERMOVE, this.relayMoveEvent_, this);
        /**
     * @private
     */ this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);
        this.element_.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).TOUCHMOVE, this.boundHandleTouchMove_, (0, $253e11c6a01eb5bc$export$f751ce96c6c4e4fc) ? {
            passive: false
        } : false);
    }
    /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */ emulateClick_(pointerEvent) {
        let newEvent = new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).CLICK, this.map_, pointerEvent);
        this.dispatchEvent(newEvent);
        if (this.clickTimeoutId_ !== undefined) {
            // double-click
            clearTimeout(this.clickTimeoutId_);
            this.clickTimeoutId_ = undefined;
            newEvent = new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).DBLCLICK, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
        } else // click
        this.clickTimeoutId_ = setTimeout(()=>{
            this.clickTimeoutId_ = undefined;
            const newEvent = new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).SINGLECLICK, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
        }, 250);
    }
    /**
   * Keeps track on how many pointers are currently active.
   *
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */ updateActivePointers_(pointerEvent) {
        const event = pointerEvent;
        const id = event.pointerId;
        if (event.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERUP || event.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERCANCEL) {
            delete this.trackedTouches_[id];
            for(const pointerId in this.trackedTouches_)if (this.trackedTouches_[pointerId].target !== event.target) {
                // Some platforms assign a new pointerId when the target changes.
                // If this happens, delete one tracked pointer. If there is more
                // than one tracked pointer for the old target, it will be cleared
                // by subsequent POINTERUP events from other pointers.
                delete this.trackedTouches_[pointerId];
                break;
            }
        } else if (event.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERDOWN || event.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERMOVE) this.trackedTouches_[id] = event;
        this.activePointers_ = Object.values(this.trackedTouches_);
    }
    /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */ handlePointerUp_(pointerEvent) {
        this.updateActivePointers_(pointerEvent);
        const newEvent = new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERUP, this.map_, pointerEvent, undefined, undefined, this.activePointers_);
        this.dispatchEvent(newEvent);
        // We emulate click events on left mouse button click, touch contact, and pen
        // contact. isMouseActionButton returns true in these cases (evt.button is set
        // to 0).
        // See http://www.w3.org/TR/pointerevents/#button-states
        // We only fire click, singleclick, and doubleclick if nobody has called
        // event.preventDefault().
        if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) this.emulateClick_(this.down_);
        if (this.activePointers_.length === 0) {
            this.dragListenerKeys_.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
            this.dragListenerKeys_.length = 0;
            this.dragging_ = false;
            this.down_ = null;
        }
    }
    /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @return {boolean} If the left mouse button was pressed.
   * @private
   */ isMouseActionButton_(pointerEvent) {
        return pointerEvent.button === 0;
    }
    /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */ handlePointerDown_(pointerEvent) {
        this.emulateClicks_ = this.activePointers_.length === 0;
        this.updateActivePointers_(pointerEvent);
        const newEvent = new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERDOWN, this.map_, pointerEvent, undefined, undefined, this.activePointers_);
        this.dispatchEvent(newEvent);
        this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);
        Object.defineProperty(this.down_, "target", {
            writable: false,
            value: pointerEvent.target
        });
        if (this.dragListenerKeys_.length === 0) {
            const doc = this.map_.getOwnerDocument();
            this.dragListenerKeys_.push((0, $776f68d2a754760b$export$63174c828edd6ff8)(doc, (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERMOVE, this.handlePointerMove_, this), (0, $776f68d2a754760b$export$63174c828edd6ff8)(doc, (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERUP, this.handlePointerUp_, this), /* Note that the listener for `pointercancel is set up on
         * `pointerEventHandler_` and not `documentPointerEventHandler_` like
         * the `pointerup` and `pointermove` listeners.
         *
         * The reason for this is the following: `TouchSource.vacuumTouches_()`
         * issues `pointercancel` events, when there was no `touchend` for a
         * `touchstart`. Now, let's say a first `touchstart` is registered on
         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
         * But `documentPointerEventHandler_` doesn't know about the first
         * `touchstart`. If there is no `touchend` for the `touchstart`, we can
         * only receive a `touchcancel` from `pointerEventHandler_`, because it is
         * only registered there.
         */ (0, $776f68d2a754760b$export$63174c828edd6ff8)(this.element_, (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERCANCEL, this.handlePointerUp_, this));
            if (this.element_.getRootNode && this.element_.getRootNode() !== doc) this.dragListenerKeys_.push((0, $776f68d2a754760b$export$63174c828edd6ff8)(this.element_.getRootNode(), (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERUP, this.handlePointerUp_, this));
        }
    }
    /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */ handlePointerMove_(pointerEvent) {
        // Between pointerdown and pointerup, pointermove events are triggered.
        // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
        // moved a significant distance.
        if (this.isMoving_(pointerEvent)) {
            this.updateActivePointers_(pointerEvent);
            this.dragging_ = true;
            const newEvent = new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERDRAG, this.map_, pointerEvent, this.dragging_, undefined, this.activePointers_);
            this.dispatchEvent(newEvent);
        }
    }
    /**
   * Wrap and relay a pointermove event.
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @private
   */ relayMoveEvent_(pointerEvent) {
        this.originalPointerMoveEvent_ = pointerEvent;
        const dragging = !!(this.down_ && this.isMoving_(pointerEvent));
        this.dispatchEvent(new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERMOVE, this.map_, pointerEvent, dragging));
    }
    /**
   * Flexible handling of a `touch-action: none` css equivalent: because calling
   * `preventDefault()` on a `pointermove` event does not stop native page scrolling
   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
   * when an interaction (currently `DragPan` handles the event.
   * @param {TouchEvent} event Event.
   * @private
   */ handleTouchMove_(event) {
        // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
        // may not be initialized yet when we get here on a platform without native pointer events,
        // when elm-pep is used as pointer events polyfill.
        const originalEvent = this.originalPointerMoveEvent_;
        if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== "boolean" || event.cancelable === true)) event.preventDefault();
    }
    /**
   * @param {PointerEvent} pointerEvent Pointer
   * event.
   * @return {boolean} Is moving.
   * @private
   */ isMoving_(pointerEvent) {
        return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
    }
    /**
   * Clean up.
   */ disposeInternal() {
        if (this.relayedListenerKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.relayedListenerKey_);
            this.relayedListenerKey_ = null;
        }
        this.element_.removeEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).TOUCHMOVE, this.boundHandleTouchMove_);
        if (this.pointerdownListenerKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.pointerdownListenerKey_);
            this.pointerdownListenerKey_ = null;
        }
        this.dragListenerKeys_.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
        this.dragListenerKeys_.length = 0;
        this.element_ = null;
        super.disposeInternal();
    }
}
var $d81b48bf28c2aa31$export$2e2bcd8739ae039 = $d81b48bf28c2aa31$var$MapBrowserEventHandler;




/**
 * @module ol/MapEventType
 */ /**
 * @enum {string}
 */ var $e12633bf0699f390$export$2e2bcd8739ae039 /***
 * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types
 */  = {
    /**
   * Triggered after a map frame is rendered.
   * @event module:ol/MapEvent~MapEvent#postrender
   * @api
   */ POSTRENDER: "postrender",
    /**
   * Triggered when the map starts moving.
   * @event module:ol/MapEvent~MapEvent#movestart
   * @api
   */ MOVESTART: "movestart",
    /**
   * Triggered after the map is moved.
   * @event module:ol/MapEvent~MapEvent#moveend
   * @api
   */ MOVEEND: "moveend",
    /**
   * Triggered when loading of additional map data (tiles, images, features) starts.
   * @event module:ol/MapEvent~MapEvent#loadstart
   * @api
   */ LOADSTART: "loadstart",
    /**
   * Triggered when loading of additional map data has completed.
   * @event module:ol/MapEvent~MapEvent#loadend
   * @api
   */ LOADEND: "loadend"
};


/**
 * @module ol/MapProperty
 */ /**
 * @enum {string}
 */ var $df2cc47d12323995$export$2e2bcd8739ae039 = {
    LAYERGROUP: "layergroup",
    SIZE: "size",
    TARGET: "target",
    VIEW: "view"
};





/**
 * @module ol/TileQueue
 */ 
/**
 * @module ol/structs/PriorityQueue
 */ 

const $f709f846b2b82bbd$export$b4af72c40fd57063 = Infinity;
/**
 * @classdesc
 * Priority queue.
 *
 * The implementation is inspired from the Closure Library's Heap class and
 * Python's heapq module.
 *
 * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js
 * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.
 *
 * @template T
 */ class $f709f846b2b82bbd$var$PriorityQueue {
    /**
   * @param {function(T): number} priorityFunction Priority function.
   * @param {function(T): string} keyFunction Key function.
   */ constructor(priorityFunction, keyFunction){
        /**
     * @type {function(T): number}
     * @private
     */ this.priorityFunction_ = priorityFunction;
        /**
     * @type {function(T): string}
     * @private
     */ this.keyFunction_ = keyFunction;
        /**
     * @type {Array<T>}
     * @private
     */ this.elements_ = [];
        /**
     * @type {Array<number>}
     * @private
     */ this.priorities_ = [];
        /**
     * @type {!Object<string, boolean>}
     * @private
     */ this.queuedElements_ = {};
    }
    /**
   * FIXME empty description for jsdoc
   */ clear() {
        this.elements_.length = 0;
        this.priorities_.length = 0;
        (0, $e2dfef87a88758ed$export$42ffd38884aecdac)(this.queuedElements_);
    }
    /**
   * Remove and return the highest-priority element. O(log N).
   * @return {T} Element.
   */ dequeue() {
        const elements = this.elements_;
        const priorities = this.priorities_;
        const element = elements[0];
        if (elements.length == 1) {
            elements.length = 0;
            priorities.length = 0;
        } else {
            elements[0] = elements.pop();
            priorities[0] = priorities.pop();
            this.siftUp_(0);
        }
        const elementKey = this.keyFunction_(element);
        delete this.queuedElements_[elementKey];
        return element;
    }
    /**
   * Enqueue an element. O(log N).
   * @param {T} element Element.
   * @return {boolean} The element was added to the queue.
   */ enqueue(element) {
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
        const priority = this.priorityFunction_(element);
        if (priority != $f709f846b2b82bbd$export$b4af72c40fd57063) {
            this.elements_.push(element);
            this.priorities_.push(priority);
            this.queuedElements_[this.keyFunction_(element)] = true;
            this.siftDown_(0, this.elements_.length - 1);
            return true;
        }
        return false;
    }
    /**
   * @return {number} Count.
   */ getCount() {
        return this.elements_.length;
    }
    /**
   * Gets the index of the left child of the node at the given index.
   * @param {number} index The index of the node to get the left child for.
   * @return {number} The index of the left child.
   * @private
   */ getLeftChildIndex_(index) {
        return index * 2 + 1;
    }
    /**
   * Gets the index of the right child of the node at the given index.
   * @param {number} index The index of the node to get the right child for.
   * @return {number} The index of the right child.
   * @private
   */ getRightChildIndex_(index) {
        return index * 2 + 2;
    }
    /**
   * Gets the index of the parent of the node at the given index.
   * @param {number} index The index of the node to get the parent for.
   * @return {number} The index of the parent.
   * @private
   */ getParentIndex_(index) {
        return index - 1 >> 1;
    }
    /**
   * Make this a heap. O(N).
   * @private
   */ heapify_() {
        let i;
        for(i = (this.elements_.length >> 1) - 1; i >= 0; i--)this.siftUp_(i);
    }
    /**
   * @return {boolean} Is empty.
   */ isEmpty() {
        return this.elements_.length === 0;
    }
    /**
   * @param {string} key Key.
   * @return {boolean} Is key queued.
   */ isKeyQueued(key) {
        return key in this.queuedElements_;
    }
    /**
   * @param {T} element Element.
   * @return {boolean} Is queued.
   */ isQueued(element) {
        return this.isKeyQueued(this.keyFunction_(element));
    }
    /**
   * @param {number} index The index of the node to move down.
   * @private
   */ siftUp_(index) {
        const elements = this.elements_;
        const priorities = this.priorities_;
        const count = elements.length;
        const element = elements[index];
        const priority = priorities[index];
        const startIndex = index;
        while(index < count >> 1){
            const lIndex = this.getLeftChildIndex_(index);
            const rIndex = this.getRightChildIndex_(index);
            const smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;
            elements[index] = elements[smallerChildIndex];
            priorities[index] = priorities[smallerChildIndex];
            index = smallerChildIndex;
        }
        elements[index] = element;
        priorities[index] = priority;
        this.siftDown_(startIndex, index);
    }
    /**
   * @param {number} startIndex The index of the root.
   * @param {number} index The index of the node to move up.
   * @private
   */ siftDown_(startIndex, index) {
        const elements = this.elements_;
        const priorities = this.priorities_;
        const element = elements[index];
        const priority = priorities[index];
        while(index > startIndex){
            const parentIndex = this.getParentIndex_(index);
            if (priorities[parentIndex] > priority) {
                elements[index] = elements[parentIndex];
                priorities[index] = priorities[parentIndex];
                index = parentIndex;
            } else break;
        }
        elements[index] = element;
        priorities[index] = priority;
    }
    /**
   * FIXME empty description for jsdoc
   */ reprioritize() {
        const priorityFunction = this.priorityFunction_;
        const elements = this.elements_;
        const priorities = this.priorities_;
        let index = 0;
        const n = elements.length;
        let element, i, priority;
        for(i = 0; i < n; ++i){
            element = elements[i];
            priority = priorityFunction(element);
            if (priority == $f709f846b2b82bbd$export$b4af72c40fd57063) delete this.queuedElements_[this.keyFunction_(element)];
            else {
                priorities[index] = priority;
                elements[index++] = element;
            }
        }
        elements.length = index;
        priorities.length = index;
        this.heapify_();
    }
}
var $f709f846b2b82bbd$export$2e2bcd8739ae039 = $f709f846b2b82bbd$var$PriorityQueue;


/**
 * @module ol/TileState
 */ /**
 * @enum {number}
 */ var $713feb195c3fd859$export$2e2bcd8739ae039 = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    /**
   * Indicates that tile loading failed
   * @type {number}
   */ ERROR: 3,
    EMPTY: 4
};


/**
 * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
 */ class $5b2a708996b8a43e$var$TileQueue extends (0, $f709f846b2b82bbd$export$2e2bcd8739ae039) {
    /**
   * @param {PriorityFunction} tilePriorityFunction Tile priority function.
   * @param {function(): ?} tileChangeCallback Function called on each tile change event.
   */ constructor(tilePriorityFunction, tileChangeCallback){
        super(/**
       * @param {Array} element Element.
       * @return {number} Priority.
       */ function(element) {
            return tilePriorityFunction.apply(null, element);
        }, /**
       * @param {Array} element Element.
       * @return {string} Key.
       */ function(element) {
            return /** @type {import("./Tile.js").default} */ element[0].getKey();
        });
        /** @private */ this.boundHandleTileChange_ = this.handleTileChange.bind(this);
        /**
     * @private
     * @type {function(): ?}
     */ this.tileChangeCallback_ = tileChangeCallback;
        /**
     * @private
     * @type {number}
     */ this.tilesLoading_ = 0;
        /**
     * @private
     * @type {!Object<string,boolean>}
     */ this.tilesLoadingKeys_ = {};
    }
    /**
   * @param {Array} element Element.
   * @return {boolean} The element was added to the queue.
   */ enqueue(element) {
        const added = super.enqueue(element);
        if (added) {
            const tile = element[0];
            tile.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.boundHandleTileChange_);
        }
        return added;
    }
    /**
   * @return {number} Number of tiles loading.
   */ getTilesLoading() {
        return this.tilesLoading_;
    }
    /**
   * @param {import("./events/Event.js").default} event Event.
   * @protected
   */ handleTileChange(event) {
        const tile = /** @type {import("./Tile.js").default} */ event.target;
        const state = tile.getState();
        if (state === (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED || state === (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR || state === (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY) {
            if (state !== (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR) tile.removeEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.boundHandleTileChange_);
            const tileKey = tile.getKey();
            if (tileKey in this.tilesLoadingKeys_) {
                delete this.tilesLoadingKeys_[tileKey];
                --this.tilesLoading_;
            }
            this.tileChangeCallback_();
        }
    }
    /**
   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
   * @param {number} maxNewLoads Maximum number of new tiles to load.
   */ loadMoreTiles(maxTotalLoading, maxNewLoads) {
        let newLoads = 0;
        let state, tile, tileKey;
        while(this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0){
            tile = /** @type {import("./Tile.js").default} */ this.dequeue()[0];
            tileKey = tile.getKey();
            state = tile.getState();
            if (state === (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE && !(tileKey in this.tilesLoadingKeys_)) {
                this.tilesLoadingKeys_[tileKey] = true;
                ++this.tilesLoading_;
                ++newLoads;
                tile.load();
            }
        }
    }
}
var $5b2a708996b8a43e$export$2e2bcd8739ae039 = $5b2a708996b8a43e$var$TileQueue;
function $5b2a708996b8a43e$export$f08ad5eceeff5d45(frameState, tile, tileSourceKey, tileCenter, tileResolution) {
    // Filter out tiles at higher zoom levels than the current zoom level, or that
    // are outside the visible extent.
    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) return 0, $f709f846b2b82bbd$export$b4af72c40fd57063;
    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) return 0, $f709f846b2b82bbd$export$b4af72c40fd57063;
    // Prioritize the highest zoom level tiles closest to the focus.
    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
    // Within a zoom level, tiles are prioritized by the distance in pixels between
    // the center of the tile and the center of the viewport.  The factor of 65536
    // means that the prioritization should behave as desired for tiles up to
    // 65536 * Math.log(2) = 45426 pixels from the focus.
    const center = frameState.viewState.center;
    const deltaX = tileCenter[0] - center[0];
    const deltaY = tileCenter[1] - center[1];
    return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
}









/**
 * @module ol/control/defaults
 */ /**
 * @module ol/control/Attribution
 */ /**
 * @module ol/control/Control
 */ 




/**
 * @typedef {Object} Options
 * @property {HTMLElement} [element] The element is the control's
 * container element. This only needs to be specified if you're developing
 * a custom control.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when
 * the control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 * @property {HTMLElement|string} [target] Specify a target if you want
 * the control to be rendered outside of the map's viewport.
 */ /**
 * @classdesc
 * A control is a visible widget with a DOM element in a fixed position on the
 * screen. They can involve user input (buttons), or be informational only;
 * the position is determined using CSS. By default these are placed in the
 * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
 * any outside DOM element.
 *
 * This is the base class for controls. You can use it for simple custom
 * controls by creating the element with listeners, creating an instance:
 * ```js
 * const myControl = new Control({element: myElement});
 * ```
 * and then adding this to the map.
 *
 * The main advantage of having this as a control rather than a simple separate
 * DOM element is that preventing propagation is handled for you. Controls
 * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
 *
 * You can also extend this base for your own control class. See
 * examples/custom-controls for an example of how to do this.
 *
 * @api
 */ class $073a42a03e127bc6$var$Control extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options Control options.
   */ constructor(options){
        super();
        const element = options.element;
        if (element && !options.target && !element.style.pointerEvents) element.style.pointerEvents = "auto";
        /**
     * @protected
     * @type {HTMLElement}
     */ this.element = element ? element : null;
        /**
     * @private
     * @type {HTMLElement}
     */ this.target_ = null;
        /**
     * @private
     * @type {import("../Map.js").default|null}
     */ this.map_ = null;
        /**
     * @protected
     * @type {!Array<import("../events.js").EventsKey>}
     */ this.listenerKeys = [];
        if (options.render) this.render = options.render;
        if (options.target) this.setTarget(options.target);
    }
    /**
   * Clean up.
   */ disposeInternal() {
        (0, $1d92219e1eaa7bd2$export$1d0aa160432dfea5)(this.element);
        super.disposeInternal();
    }
    /**
   * Get the map associated with this control.
   * @return {import("../Map.js").default|null} Map.
   * @api
   */ getMap() {
        return this.map_;
    }
    /**
   * Remove the control from its current map and attach it to the new map.
   * Pass `null` to just remove the control from the current map.
   * Subclasses may set up event handlers to get notified about changes to
   * the map here.
   * @param {import("../Map.js").default|null} map Map.
   * @api
   */ setMap(map) {
        if (this.map_) (0, $1d92219e1eaa7bd2$export$1d0aa160432dfea5)(this.element);
        for(let i = 0, ii = this.listenerKeys.length; i < ii; ++i)(0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.listenerKeys[i]);
        this.listenerKeys.length = 0;
        this.map_ = map;
        if (map) {
            const target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();
            target.appendChild(this.element);
            if (this.render !== (0, $2c3aa3ce33eccc0f$export$1cd1943b3a73bbe8)) this.listenerKeys.push((0, $776f68d2a754760b$export$63174c828edd6ff8)(map, (0, $e12633bf0699f390$export$2e2bcd8739ae039).POSTRENDER, this.render, this));
            map.render();
        }
    }
    /**
   * Renders the control.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @api
   */ render(mapEvent) {}
    /**
   * This function is used to set a target element for the control. It has no
   * effect if it is called after the control has been added to the map (i.e.
   * after `setMap` is called on the control). If no `target` is set in the
   * options passed to the control constructor and if `setTarget` is not called
   * then the control is added to the map's overlay container.
   * @param {HTMLElement|string} target Target.
   * @api
   */ setTarget(target) {
        this.target_ = typeof target === "string" ? document.getElementById(target) : target;
    }
}
var $073a42a03e127bc6$export$2e2bcd8739ae039 = $073a42a03e127bc6$var$Control;






/**
 * @typedef {Object} Options
 * @property {string} [className='ol-attribution'] CSS class name.
 * @property {HTMLElement|string} [target] Specify a target if you
 * want the control to be rendered outside of the map's
 * viewport.
 * @property {boolean} [collapsible] Specify if attributions can
 * be collapsed. If not specified, sources control this behavior with their
 * `attributionsCollapsible` setting.
 * @property {boolean} [collapsed=true] Specify if attributions should
 * be collapsed at startup.
 * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
 * @property {string|HTMLElement} [label='i'] Text label to use for the
 * collapsed attributions button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [expandClassName=className + '-expand'] CSS class name for the
 * collapsed attributions button.
 * @property {string|HTMLElement} [collapseLabel='›'] Text label to use
 * for the expanded attributions button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the
 * expanded attributions button.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when
 * the control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 */ /**
 * @classdesc
 * Control to show all the attributions associated with the layer sources
 * in the map. This control is one of the default controls included in maps.
 * By default it will show in the bottom right portion of the map, but this can
 * be changed by using a css selector for `.ol-attribution`.
 *
 * @api
 */ class $bef57c1dead28470$var$Attribution extends (0, $073a42a03e127bc6$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Attribution options.
   */ constructor(options){
        options = options ? options : {};
        super({
            element: document.createElement("div"),
            render: options.render,
            target: options.target
        });
        /**
     * @private
     * @type {HTMLElement}
     */ this.ulElement_ = document.createElement("ul");
        /**
     * @private
     * @type {boolean}
     */ this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;
        /**
     * @private
     * @type {boolean}
     */ this.userCollapsed_ = this.collapsed_;
        /**
     * @private
     * @type {boolean}
     */ this.overrideCollapsible_ = options.collapsible !== undefined;
        /**
     * @private
     * @type {boolean}
     */ this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;
        if (!this.collapsible_) this.collapsed_ = false;
        const className = options.className !== undefined ? options.className : "ol-attribution";
        const tipLabel = options.tipLabel !== undefined ? options.tipLabel : "Attributions";
        const expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + "-expand";
        const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : "\u203A";
        const collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + "-collapse";
        if (typeof collapseLabel === "string") {
            /**
       * @private
       * @type {HTMLElement}
       */ this.collapseLabel_ = document.createElement("span");
            this.collapseLabel_.textContent = collapseLabel;
            this.collapseLabel_.className = collapseClassName;
        } else this.collapseLabel_ = collapseLabel;
        const label = options.label !== undefined ? options.label : "i";
        if (typeof label === "string") {
            /**
       * @private
       * @type {HTMLElement}
       */ this.label_ = document.createElement("span");
            this.label_.textContent = label;
            this.label_.className = expandClassName;
        } else this.label_ = label;
        const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
        /**
     * @private
     * @type {HTMLElement}
     */ this.toggleButton_ = document.createElement("button");
        this.toggleButton_.setAttribute("type", "button");
        this.toggleButton_.setAttribute("aria-expanded", String(!this.collapsed_));
        this.toggleButton_.title = tipLabel;
        this.toggleButton_.appendChild(activeLabel);
        this.toggleButton_.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this), false);
        const cssClasses = className + " " + (0, $7309508e6173a6a6$export$1afde3d6e16a7b29) + " " + (0, $7309508e6173a6a6$export$4d4f8be70b656192) + (this.collapsed_ && this.collapsible_ ? " " + (0, $7309508e6173a6a6$export$e16017ac68d14492) : "") + (this.collapsible_ ? "" : " ol-uncollapsible");
        const element = this.element;
        element.className = cssClasses;
        element.appendChild(this.toggleButton_);
        element.appendChild(this.ulElement_);
        /**
     * A list of currently rendered resolutions.
     * @type {Array<string>}
     * @private
     */ this.renderedAttributions_ = [];
        /**
     * @private
     * @type {boolean}
     */ this.renderedVisible_ = true;
    }
    /**
   * Collect a list of visible attributions and set the collapsible state.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @return {Array<string>} Attributions.
   * @private
   */ collectSourceAttributions_(frameState) {
        const visibleAttributions = Array.from(new Set(this.getMap().getAllLayers().flatMap((layer)=>layer.getAttributions(frameState))));
        const collapsible = !this.getMap().getAllLayers().some((layer)=>layer.getSource() && layer.getSource().getAttributionsCollapsible() === false);
        if (!this.overrideCollapsible_) this.setCollapsible(collapsible);
        return visibleAttributions;
    }
    /**
   * @private
   * @param {?import("../Map.js").FrameState} frameState Frame state.
   */ updateElement_(frameState) {
        if (!frameState) {
            if (this.renderedVisible_) {
                this.element.style.display = "none";
                this.renderedVisible_ = false;
            }
            return;
        }
        const attributions = this.collectSourceAttributions_(frameState);
        const visible = attributions.length > 0;
        if (this.renderedVisible_ != visible) {
            this.element.style.display = visible ? "" : "none";
            this.renderedVisible_ = visible;
        }
        if ((0, $69c1cc8ae30f997f$export$e9bab7fafb253603)(attributions, this.renderedAttributions_)) return;
        (0, $1d92219e1eaa7bd2$export$1e1c9bf5a4ffe0d1)(this.ulElement_);
        // append the attributions
        for(let i = 0, ii = attributions.length; i < ii; ++i){
            const element = document.createElement("li");
            element.innerHTML = attributions[i];
            this.ulElement_.appendChild(element);
        }
        this.renderedAttributions_ = attributions;
    }
    /**
   * @param {MouseEvent} event The event to handle
   * @private
   */ handleClick_(event) {
        event.preventDefault();
        this.handleToggle_();
        this.userCollapsed_ = this.collapsed_;
    }
    /**
   * @private
   */ handleToggle_() {
        this.element.classList.toggle((0, $7309508e6173a6a6$export$e16017ac68d14492));
        if (this.collapsed_) (0, $1d92219e1eaa7bd2$export$5542201de9311ab2)(this.collapseLabel_, this.label_);
        else (0, $1d92219e1eaa7bd2$export$5542201de9311ab2)(this.label_, this.collapseLabel_);
        this.collapsed_ = !this.collapsed_;
        this.toggleButton_.setAttribute("aria-expanded", String(!this.collapsed_));
    }
    /**
   * Return `true` if the attribution is collapsible, `false` otherwise.
   * @return {boolean} True if the widget is collapsible.
   * @api
   */ getCollapsible() {
        return this.collapsible_;
    }
    /**
   * Set whether the attribution should be collapsible.
   * @param {boolean} collapsible True if the widget is collapsible.
   * @api
   */ setCollapsible(collapsible) {
        if (this.collapsible_ === collapsible) return;
        this.collapsible_ = collapsible;
        this.element.classList.toggle("ol-uncollapsible");
        if (this.userCollapsed_) this.handleToggle_();
    }
    /**
   * Collapse or expand the attribution according to the passed parameter. Will
   * not do anything if the attribution isn't collapsible or if the current
   * collapsed state is already the one requested.
   * @param {boolean} collapsed True if the widget is collapsed.
   * @api
   */ setCollapsed(collapsed) {
        this.userCollapsed_ = collapsed;
        if (!this.collapsible_ || this.collapsed_ === collapsed) return;
        this.handleToggle_();
    }
    /**
   * Return `true` when the attribution is currently collapsed or `false`
   * otherwise.
   * @return {boolean} True if the widget is collapsed.
   * @api
   */ getCollapsed() {
        return this.collapsed_;
    }
    /**
   * Update the attribution element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @override
   */ render(mapEvent) {
        this.updateElement_(mapEvent.frameState);
    }
}
var $bef57c1dead28470$export$2e2bcd8739ae039 = $bef57c1dead28470$var$Attribution;



/**
 * @module ol/control/Rotate
 */ 



/**
 * @typedef {Object} Options
 * @property {string} [className='ol-rotate'] CSS class name.
 * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
 * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control should
 * be re-rendered. This is called in a `requestAnimationFrame` callback.
 * @property {function():void} [resetNorth] Function called when the control is clicked.
 * This will override the default `resetNorth`.
 * @property {HTMLElement|string} [target] Specify a target if you want the control to be
 * rendered outside of the map's viewport.
 */ /**
 * @classdesc
 * A button control to reset rotation to 0.
 * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
 * selector is added to the button when the rotation is 0.
 *
 * @api
 */ class $43edba91db0aca14$var$Rotate extends (0, $073a42a03e127bc6$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Rotate options.
   */ constructor(options){
        options = options ? options : {};
        super({
            element: document.createElement("div"),
            render: options.render,
            target: options.target
        });
        const className = options.className !== undefined ? options.className : "ol-rotate";
        const label = options.label !== undefined ? options.label : "\u21E7";
        const compassClassName = options.compassClassName !== undefined ? options.compassClassName : "ol-compass";
        /**
     * @type {HTMLElement}
     * @private
     */ this.label_ = null;
        if (typeof label === "string") {
            this.label_ = document.createElement("span");
            this.label_.className = compassClassName;
            this.label_.textContent = label;
        } else {
            this.label_ = label;
            this.label_.classList.add(compassClassName);
        }
        const tipLabel = options.tipLabel ? options.tipLabel : "Reset rotation";
        const button = document.createElement("button");
        button.className = className + "-reset";
        button.setAttribute("type", "button");
        button.title = tipLabel;
        button.appendChild(this.label_);
        button.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this), false);
        const cssClasses = className + " " + (0, $7309508e6173a6a6$export$1afde3d6e16a7b29) + " " + (0, $7309508e6173a6a6$export$4d4f8be70b656192);
        const element = this.element;
        element.className = cssClasses;
        element.appendChild(button);
        this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;
        /**
     * @type {number}
     * @private
     */ this.duration_ = options.duration !== undefined ? options.duration : 250;
        /**
     * @type {boolean}
     * @private
     */ this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;
        /**
     * @private
     * @type {number|undefined}
     */ this.rotation_ = undefined;
        if (this.autoHide_) this.element.classList.add((0, $7309508e6173a6a6$export$981241db82723ce2));
    }
    /**
   * @param {MouseEvent} event The event to handle
   * @private
   */ handleClick_(event) {
        event.preventDefault();
        if (this.callResetNorth_ !== undefined) this.callResetNorth_();
        else this.resetNorth_();
    }
    /**
   * @private
   */ resetNorth_() {
        const map = this.getMap();
        const view = map.getView();
        if (!view) // the map does not have a view, so we can't act
        // upon it
        return;
        const rotation = view.getRotation();
        if (rotation !== undefined) {
            if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) view.animate({
                rotation: 0,
                duration: this.duration_,
                easing: (0, $b6cb732edc5512cf$export$57636bb43b1ccbb0)
            });
            else view.setRotation(0);
        }
    }
    /**
   * Update the rotate control element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @override
   */ render(mapEvent) {
        const frameState = mapEvent.frameState;
        if (!frameState) return;
        const rotation = frameState.viewState.rotation;
        if (rotation != this.rotation_) {
            const transform = "rotate(" + rotation + "rad)";
            if (this.autoHide_) {
                const contains = this.element.classList.contains((0, $7309508e6173a6a6$export$981241db82723ce2));
                if (!contains && rotation === 0) this.element.classList.add((0, $7309508e6173a6a6$export$981241db82723ce2));
                else if (contains && rotation !== 0) this.element.classList.remove((0, $7309508e6173a6a6$export$981241db82723ce2));
            }
            this.label_.style.transform = transform;
        }
        this.rotation_ = rotation;
    }
}
var $43edba91db0aca14$export$2e2bcd8739ae039 = $43edba91db0aca14$var$Rotate;


/**
 * @module ol/control/Zoom
 */ 



/**
 * @typedef {Object} Options
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {string} [className='ol-zoom'] CSS class name.
 * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.
 * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.
 * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
 * button. Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string|HTMLElement} [zoomOutLabel='–'] Text label to use for the zoom-out button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
 * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
 * @property {number} [delta=1] The zoom delta applied on each click.
 * @property {HTMLElement|string} [target] Specify a target if you want the control to be
 * rendered outside of the map's viewport.
 */ /**
 * @classdesc
 * A control with 2 buttons, one for zoom in and one for zoom out.
 * This control is one of the default controls of a map. To style this control
 * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
 *
 * @api
 */ class $da66a37519d844f9$var$Zoom extends (0, $073a42a03e127bc6$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Zoom options.
   */ constructor(options){
        options = options ? options : {};
        super({
            element: document.createElement("div"),
            target: options.target
        });
        const className = options.className !== undefined ? options.className : "ol-zoom";
        const delta = options.delta !== undefined ? options.delta : 1;
        const zoomInClassName = options.zoomInClassName !== undefined ? options.zoomInClassName : className + "-in";
        const zoomOutClassName = options.zoomOutClassName !== undefined ? options.zoomOutClassName : className + "-out";
        const zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : "+";
        const zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : "\u2013";
        const zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : "Zoom in";
        const zoomOutTipLabel = options.zoomOutTipLabel !== undefined ? options.zoomOutTipLabel : "Zoom out";
        const inElement = document.createElement("button");
        inElement.className = zoomInClassName;
        inElement.setAttribute("type", "button");
        inElement.title = zoomInTipLabel;
        inElement.appendChild(typeof zoomInLabel === "string" ? document.createTextNode(zoomInLabel) : zoomInLabel);
        inElement.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this, delta), false);
        const outElement = document.createElement("button");
        outElement.className = zoomOutClassName;
        outElement.setAttribute("type", "button");
        outElement.title = zoomOutTipLabel;
        outElement.appendChild(typeof zoomOutLabel === "string" ? document.createTextNode(zoomOutLabel) : zoomOutLabel);
        outElement.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this, -delta), false);
        const cssClasses = className + " " + (0, $7309508e6173a6a6$export$1afde3d6e16a7b29) + " " + (0, $7309508e6173a6a6$export$4d4f8be70b656192);
        const element = this.element;
        element.className = cssClasses;
        element.appendChild(inElement);
        element.appendChild(outElement);
        /**
     * @type {number}
     * @private
     */ this.duration_ = options.duration !== undefined ? options.duration : 250;
    }
    /**
   * @param {number} delta Zoom delta.
   * @param {MouseEvent} event The event to handle
   * @private
   */ handleClick_(delta, event) {
        event.preventDefault();
        this.zoomByDelta_(delta);
    }
    /**
   * @param {number} delta Zoom delta.
   * @private
   */ zoomByDelta_(delta) {
        const map = this.getMap();
        const view = map.getView();
        if (!view) // the map does not have a view, so we can't act
        // upon it
        return;
        const currentZoom = view.getZoom();
        if (currentZoom !== undefined) {
            const newZoom = view.getConstrainedZoom(currentZoom + delta);
            if (this.duration_ > 0) {
                if (view.getAnimating()) view.cancelAnimations();
                view.animate({
                    zoom: newZoom,
                    duration: this.duration_,
                    easing: (0, $b6cb732edc5512cf$export$57636bb43b1ccbb0)
                });
            } else view.setZoom(newZoom);
        }
    }
}
var $da66a37519d844f9$export$2e2bcd8739ae039 = $da66a37519d844f9$var$Zoom;


function $ca89b5468da2f709$export$ebe90cb607ad99e(options) {
    options = options ? options : {};
    /** @type {Collection<import("./Control.js").default>} */ const controls = new (0, $6ba3969272323605$export$2e2bcd8739ae039)();
    const zoomControl = options.zoom !== undefined ? options.zoom : true;
    if (zoomControl) controls.push(new (0, $da66a37519d844f9$export$2e2bcd8739ae039)(options.zoomOptions));
    const rotateControl = options.rotate !== undefined ? options.rotate : true;
    if (rotateControl) controls.push(new (0, $43edba91db0aca14$export$2e2bcd8739ae039)(options.rotateOptions));
    const attributionControl = options.attribution !== undefined ? options.attribution : true;
    if (attributionControl) controls.push(new (0, $bef57c1dead28470$export$2e2bcd8739ae039)(options.attributionOptions));
    return controls;
}


/**
 * @module ol/interaction/defaults
 */ 
/**
 * @module ol/interaction/DoubleClickZoom
 */ /**
 * @module ol/interaction/Interaction
 */ 
/**
 * @module ol/interaction/Property
 */ /**
 * @enum {string}
 */ var $a72857960391f690$export$2e2bcd8739ae039 = {
    ACTIVE: "active"
};



/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active', Return>} InteractionOnSignature
 */ /**
 * Object literal with config options for interactions.
 * @typedef {Object} InteractionOptions
 * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
 * Method called by the map to notify the interaction that a browser event was
 * dispatched to the map. If the function returns a falsy value, propagation of
 * the event to other interactions in the map's interactions chain will be
 * prevented (this includes functions with no explicit return). The interactions
 * are traversed in reverse order of the interactions collection of the map.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * User actions that change the state of the map. Some are similar to controls,
 * but are not associated with a DOM element.
 * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
 * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
 * by a keyboard event not a button element event.
 * Although interactions do not have a DOM element, some of them do render
 * vectors and so are visible on the screen.
 * @api
 */ class $c02a1e27548fb802$var$Interaction extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {InteractionOptions} [options] Options.
   */ constructor(options){
        super();
        /***
     * @type {InteractionOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {InteractionOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {InteractionOnSignature<void>}
     */ this.un;
        if (options && options.handleEvent) this.handleEvent = options.handleEvent;
        /**
     * @private
     * @type {import("../Map.js").default|null}
     */ this.map_ = null;
        this.setActive(true);
    }
    /**
   * Return whether the interaction is currently active.
   * @return {boolean} `true` if the interaction is active, `false` otherwise.
   * @observable
   * @api
   */ getActive() {
        return /** @type {boolean} */ this.get((0, $a72857960391f690$export$2e2bcd8739ae039).ACTIVE);
    }
    /**
   * Get the map associated with this interaction.
   * @return {import("../Map.js").default|null} Map.
   * @api
   */ getMap() {
        return this.map_;
    }
    /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @api
   */ handleEvent(mapBrowserEvent) {
        return true;
    }
    /**
   * Activate or deactivate the interaction.
   * @param {boolean} active Active.
   * @observable
   * @api
   */ setActive(active) {
        this.set((0, $a72857960391f690$export$2e2bcd8739ae039).ACTIVE, active);
    }
    /**
   * Remove the interaction from its current map and attach it to the new map.
   * Subclasses may set up event handlers to get notified about changes to
   * the map here.
   * @param {import("../Map.js").default|null} map Map.
   */ setMap(map) {
        this.map_ = map;
    }
}
function $c02a1e27548fb802$export$4c486572e961a974(view, delta, duration) {
    const currentCenter = view.getCenterInternal();
    if (currentCenter) {
        const center = [
            currentCenter[0] + delta[0],
            currentCenter[1] + delta[1]
        ];
        view.animateInternal({
            duration: duration !== undefined ? duration : 250,
            easing: (0, $b6cb732edc5512cf$export$45db2fc2f15997e7),
            center: view.getConstrainedCenter(center)
        });
    }
}
function $c02a1e27548fb802$export$ace321ff2a8016ef(view, delta, anchor, duration) {
    const currentZoom = view.getZoom();
    if (currentZoom === undefined) return;
    const newZoom = view.getConstrainedZoom(currentZoom + delta);
    const newResolution = view.getResolutionForZoom(newZoom);
    if (view.getAnimating()) view.cancelAnimations();
    view.animate({
        resolution: newResolution,
        anchor: anchor,
        duration: duration !== undefined ? duration : 250,
        easing: (0, $b6cb732edc5512cf$export$57636bb43b1ccbb0)
    });
}
var $c02a1e27548fb802$export$2e2bcd8739ae039 = $c02a1e27548fb802$var$Interaction;



/**
 * @typedef {Object} Options
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {number} [delta=1] The zoom delta applied on each double click.
 */ /**
 * @classdesc
 * Allows the user to zoom by double-clicking on the map.
 * @api
 */ class $55bbbcfb81d90823$var$DoubleClickZoom extends (0, $c02a1e27548fb802$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        super();
        options = options ? options : {};
        /**
     * @private
     * @type {number}
     */ this.delta_ = options.delta ? options.delta : 1;
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 250;
    }
    /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a
   * doubleclick) and eventually zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */ handleEvent(mapBrowserEvent) {
        let stopEvent = false;
        if (mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).DBLCLICK) {
            const browserEvent = /** @type {MouseEvent} */ mapBrowserEvent.originalEvent;
            const map = mapBrowserEvent.map;
            const anchor = mapBrowserEvent.coordinate;
            const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
            const view = map.getView();
            (0, $c02a1e27548fb802$export$ace321ff2a8016ef)(view, delta, anchor, this.duration_);
            browserEvent.preventDefault();
            stopEvent = true;
        }
        return !stopEvent;
    }
}
var $55bbbcfb81d90823$export$2e2bcd8739ae039 = $55bbbcfb81d90823$var$DoubleClickZoom;


/**
 * @module ol/interaction/DragPan
 */ /**
 * @module ol/interaction/Pointer
 */ 

/**
 * @typedef {Object} Options
 * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleDownEvent]
 * Function handling "down" events. If the function returns `true` then a drag
 * sequence is started.
 * @property {function(import("../MapBrowserEvent.js").default):void} [handleDragEvent]
 * Function handling "drag" events. This function is called on "move" events
 * during a drag sequence.
 * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
 * Method called by the map to notify the interaction that a browser event was
 * dispatched to the map. The function may return `false` to prevent the
 * propagation of the event to other interactions in the map's interactions
 * chain.
 * @property {function(import("../MapBrowserEvent.js").default):void} [handleMoveEvent]
 * Function handling "move" events. This function is called on "move" events.
 * This functions is also called during a drag sequence, so during a drag
 * sequence both the `handleDragEvent` function and this function are called.
 * If `handleDownEvent` is defined and it returns true this function will not
 * be called during a drag sequence.
 * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleUpEvent]
 *  Function handling "up" events. If the function returns `false` then the
 * current drag sequence is stopped.
 * @property {function(boolean):boolean} [stopDown]
 * Should the down event be propagated to other interactions, or should be
 * stopped?
 */ /**
 * @classdesc
 * Base class that calls user-defined functions on `down`, `move` and `up`
 * events. This class also manages "drag sequences".
 *
 * When the `handleDownEvent` user function returns `true` a drag sequence is
 * started. During a drag sequence the `handleDragEvent` user function is
 * called on `move` events. The drag sequence ends when the `handleUpEvent`
 * user function is called and returns `false`.
 * @api
 */ class $c0c95ade7b9b3f6c$var$PointerInteraction extends (0, $c02a1e27548fb802$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options ? options : {};
        super(/** @type {import("./Interaction.js").InteractionOptions} */ options);
        if (options.handleDownEvent) this.handleDownEvent = options.handleDownEvent;
        if (options.handleDragEvent) this.handleDragEvent = options.handleDragEvent;
        if (options.handleMoveEvent) this.handleMoveEvent = options.handleMoveEvent;
        if (options.handleUpEvent) this.handleUpEvent = options.handleUpEvent;
        if (options.stopDown) this.stopDown = options.stopDown;
        /**
     * @type {boolean}
     * @protected
     */ this.handlingDownUpSequence = false;
        /**
     * @type {Array<PointerEvent>}
     * @protected
     */ this.targetPointers = [];
    }
    /**
   * Returns the current number of pointers involved in the interaction,
   * e.g. `2` when two fingers are used.
   * @return {number} The number of pointers.
   * @api
   */ getPointerCount() {
        return this.targetPointers.length;
    }
    /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   * @protected
   */ handleDownEvent(mapBrowserEvent) {
        return false;
    }
    /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @protected
   */ handleDragEvent(mapBrowserEvent) {}
    /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into
   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
   * detected.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @api
   */ handleEvent(mapBrowserEvent) {
        if (!mapBrowserEvent.originalEvent) return true;
        let stopEvent = false;
        this.updateTrackedPointers_(mapBrowserEvent);
        if (this.handlingDownUpSequence) {
            if (mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERDRAG) {
                this.handleDragEvent(mapBrowserEvent);
                // prevent page scrolling during dragging
                mapBrowserEvent.originalEvent.preventDefault();
            } else if (mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERUP) {
                const handledUp = this.handleUpEvent(mapBrowserEvent);
                this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
            }
        } else {
            if (mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERDOWN) {
                const handled = this.handleDownEvent(mapBrowserEvent);
                this.handlingDownUpSequence = handled;
                stopEvent = this.stopDown(handled);
            } else if (mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).POINTERMOVE) this.handleMoveEvent(mapBrowserEvent);
        }
        return !stopEvent;
    }
    /**
   * Handle pointer move events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @protected
   */ handleMoveEvent(mapBrowserEvent) {}
    /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   * @protected
   */ handleUpEvent(mapBrowserEvent) {
        return false;
    }
    /**
   * This function is used to determine if "down" events should be propagated
   * to other interactions or should be stopped.
   * @param {boolean} handled Was the event handled by the interaction?
   * @return {boolean} Should the `down` event be stopped?
   */ stopDown(handled) {
        return handled;
    }
    /**
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @private
   */ updateTrackedPointers_(mapBrowserEvent) {
        if (mapBrowserEvent.activePointers) this.targetPointers = mapBrowserEvent.activePointers;
    }
}
function $c0c95ade7b9b3f6c$export$e2a20c553f6c85ce(pointerEvents) {
    const length = pointerEvents.length;
    let clientX = 0;
    let clientY = 0;
    for(let i = 0; i < length; i++){
        clientX += pointerEvents[i].clientX;
        clientY += pointerEvents[i].clientY;
    }
    return {
        clientX: clientX / length,
        clientY: clientY / length
    };
}
var $c0c95ade7b9b3f6c$export$2e2bcd8739ae039 = $c0c95ade7b9b3f6c$var$PointerInteraction;



/**
 * @module ol/events/condition
 */ 



function $e01cfcd29f192019$export$84bf76cd7afc7469(var_args) {
    const conditions = arguments;
    /**
   * @param {import("../MapBrowserEvent.js").default} event Event.
   * @return {boolean} All conditions passed.
   */ return function(event) {
        let pass = true;
        for(let i = 0, ii = conditions.length; i < ii; ++i){
            pass = pass && conditions[i](event);
            if (!pass) break;
        }
        return pass;
    };
}
const $e01cfcd29f192019$export$573409992e89967e = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;
    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
const $e01cfcd29f192019$export$4e5f01653f9f1f82 = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;
    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;
};
const $e01cfcd29f192019$export$d7ddd398f22d79ef = function(event) {
    const targetElement = event.map.getTargetElement();
    const activeElement = event.map.getOwnerDocument().activeElement;
    return targetElement.contains(activeElement);
};
const $e01cfcd29f192019$export$ae2cdf064e3b0c55 = function(event) {
    return event.map.getTargetElement().hasAttribute("tabindex") ? $e01cfcd29f192019$export$d7ddd398f22d79ef(event) : true;
};
const $e01cfcd29f192019$export$ba9e5d519bc326ca = (0, $2c3aa3ce33eccc0f$export$22e23a2304399231);
const $e01cfcd29f192019$export$64ef1bee2b9504c1 = function(mapBrowserEvent) {
    return mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).CLICK;
};
const $e01cfcd29f192019$export$1238ad6b5e7fff70 = function(mapBrowserEvent) {
    const originalEvent = /** @type {MouseEvent} */ mapBrowserEvent.originalEvent;
    return originalEvent.button == 0 && !((0, $253e11c6a01eb5bc$export$39dfd62a25e0fe93) && (0, $253e11c6a01eb5bc$export$76c0a3b101d93136) && originalEvent.ctrlKey);
};
const $e01cfcd29f192019$export$b3e22bcfd64c1022 = (0, $2c3aa3ce33eccc0f$export$8f11cee4bdc7e668);
const $e01cfcd29f192019$export$71eac0963f2c2f01 = function(mapBrowserEvent) {
    return mapBrowserEvent.type == "pointermove";
};
const $e01cfcd29f192019$export$194df8bad091b401 = function(mapBrowserEvent) {
    return mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).SINGLECLICK;
};
const $e01cfcd29f192019$export$c59d944dd10b3dc7 = function(mapBrowserEvent) {
    return mapBrowserEvent.type == (0, $ca08bc7d1400c90f$export$2e2bcd8739ae039).DBLCLICK;
};
const $e01cfcd29f192019$export$fdc892d0d8fe3bfb = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;
    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
const $e01cfcd29f192019$export$f3100d8d6292d638 = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;
    return !originalEvent.altKey && ((0, $253e11c6a01eb5bc$export$76c0a3b101d93136) ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
const $e01cfcd29f192019$export$32603ad571dd22b5 = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;
    return (0, $253e11c6a01eb5bc$export$76c0a3b101d93136) ? originalEvent.metaKey : originalEvent.ctrlKey;
};
const $e01cfcd29f192019$export$5d31fe68a477cfbb = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;
    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;
};
const $e01cfcd29f192019$export$e5570ca80cd8fd54 = function(mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;
    const tagName = /** @type {Element} */ originalEvent.target.tagName;
    return tagName !== "INPUT" && tagName !== "SELECT" && tagName !== "TEXTAREA" && // `isContentEditable` is only available on `HTMLElement`, but it may also be a
    // different type like `SVGElement`.
    // @ts-ignore
    !originalEvent.target.isContentEditable;
};
const $e01cfcd29f192019$export$abb7acbfa76bf3c4 = function(mapBrowserEvent) {
    const pointerEvent = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvent.pointerType == "mouse";
};
const $e01cfcd29f192019$export$e74de664a571d084 = function(mapBrowserEvent) {
    const pointerEvt = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvt.pointerType === "touch";
};
const $e01cfcd29f192019$export$cd1707283a23f059 = function(mapBrowserEvent) {
    const pointerEvt = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvt.pointerType === "pen";
};
const $e01cfcd29f192019$export$189f0d593022b199 = function(mapBrowserEvent) {
    const pointerEvent = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    return pointerEvent.isPrimary && pointerEvent.button === 0;
};




/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.
 * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
 * the interaction will only handle events when the map has the focus.
 * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
 */ /**
 * @classdesc
 * Allows the user to pan the map by dragging the map.
 * @api
 */ class $5414c7cf743020a2$var$DragPan extends (0, $c0c95ade7b9b3f6c$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        super({
            stopDown: (0, $2c3aa3ce33eccc0f$export$8f11cee4bdc7e668)
        });
        options = options ? options : {};
        /**
     * @private
     * @type {import("../Kinetic.js").default|undefined}
     */ this.kinetic_ = options.kinetic;
        /**
     * @type {import("../pixel.js").Pixel}
     */ this.lastCentroid = null;
        /**
     * @type {number}
     */ this.lastPointersCount_;
        /**
     * @type {boolean}
     */ this.panning_ = false;
        const condition = options.condition ? options.condition : (0, $e01cfcd29f192019$export$84bf76cd7afc7469)((0, $e01cfcd29f192019$export$fdc892d0d8fe3bfb), (0, $e01cfcd29f192019$export$189f0d593022b199));
        /**
     * @private
     * @type {import("../events/condition.js").Condition}
     */ this.condition_ = options.onFocusOnly ? (0, $e01cfcd29f192019$export$84bf76cd7afc7469)((0, $e01cfcd29f192019$export$ae2cdf064e3b0c55), condition) : condition;
        /**
     * @private
     * @type {boolean}
     */ this.noKinetic_ = false;
    }
    /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */ handleDragEvent(mapBrowserEvent) {
        const map = mapBrowserEvent.map;
        if (!this.panning_) {
            this.panning_ = true;
            map.getView().beginInteraction();
        }
        const targetPointers = this.targetPointers;
        const centroid = map.getEventPixel((0, $c0c95ade7b9b3f6c$export$e2a20c553f6c85ce)(targetPointers));
        if (targetPointers.length == this.lastPointersCount_) {
            if (this.kinetic_) this.kinetic_.update(centroid[0], centroid[1]);
            if (this.lastCentroid) {
                const delta = [
                    this.lastCentroid[0] - centroid[0],
                    centroid[1] - this.lastCentroid[1]
                ];
                const map = mapBrowserEvent.map;
                const view = map.getView();
                (0, $c65bc16e55ef0e33$export$dcdf75081b88279d)(delta, view.getResolution());
                (0, $c65bc16e55ef0e33$export$bb628a54ab399bc9)(delta, view.getRotation());
                view.adjustCenterInternal(delta);
            }
        } else if (this.kinetic_) // reset so we don't overestimate the kinetic energy after
        // after one finger down, tiny drag, second finger down
        this.kinetic_.begin();
        this.lastCentroid = centroid;
        this.lastPointersCount_ = targetPointers.length;
        mapBrowserEvent.originalEvent.preventDefault();
    }
    /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleUpEvent(mapBrowserEvent) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        if (this.targetPointers.length === 0) {
            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
                const distance = this.kinetic_.getDistance();
                const angle = this.kinetic_.getAngle();
                const center = view.getCenterInternal();
                const centerpx = map.getPixelFromCoordinateInternal(center);
                const dest = map.getCoordinateFromPixelInternal([
                    centerpx[0] - distance * Math.cos(angle),
                    centerpx[1] - distance * Math.sin(angle)
                ]);
                view.animateInternal({
                    center: view.getConstrainedCenter(dest),
                    duration: 500,
                    easing: (0, $b6cb732edc5512cf$export$57636bb43b1ccbb0)
                });
            }
            if (this.panning_) {
                this.panning_ = false;
                view.endInteraction();
            }
            return false;
        }
        if (this.kinetic_) // reset so we don't overestimate the kinetic energy after
        // after one finger up, tiny drag, second finger up
        this.kinetic_.begin();
        this.lastCentroid = null;
        return true;
    }
    /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleDownEvent(mapBrowserEvent) {
        if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
            const map = mapBrowserEvent.map;
            const view = map.getView();
            this.lastCentroid = null;
            // stop any current animation
            if (view.getAnimating()) view.cancelAnimations();
            if (this.kinetic_) this.kinetic_.begin();
            // No kinetic as soon as more than one pointer on the screen is
            // detected. This is to prevent nasty pans after pinch.
            this.noKinetic_ = this.targetPointers.length > 1;
            return true;
        }
        return false;
    }
}
var $5414c7cf743020a2$export$2e2bcd8739ae039 = $5414c7cf743020a2$var$DragPan;


/**
 * @module ol/interaction/DragRotate
 */ 



/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that takes an
 * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.altShiftKeysOnly}.
 * @property {number} [duration=250] Animation duration in milliseconds.
 */ /**
 * @classdesc
 * Allows the user to rotate the map by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when the alt and shift keys are held down.
 *
 * This interaction is only supported for mouse devices.
 * @api
 */ class $36172f8455494ad2$var$DragRotate extends (0, $c0c95ade7b9b3f6c$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options ? options : {};
        super({
            stopDown: (0, $2c3aa3ce33eccc0f$export$8f11cee4bdc7e668)
        });
        /**
     * @private
     * @type {import("../events/condition.js").Condition}
     */ this.condition_ = options.condition ? options.condition : (0, $e01cfcd29f192019$export$4e5f01653f9f1f82);
        /**
     * @private
     * @type {number|undefined}
     */ this.lastAngle_ = undefined;
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 250;
    }
    /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */ handleDragEvent(mapBrowserEvent) {
        if (!(0, $e01cfcd29f192019$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return;
        const map = mapBrowserEvent.map;
        const view = map.getView();
        if (view.getConstraints().rotation === (0, $4412a0460d6cbb1d$export$e20fbacbb41798b)) return;
        const size = map.getSize();
        const offset = mapBrowserEvent.pixel;
        const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
        if (this.lastAngle_ !== undefined) {
            const delta = theta - this.lastAngle_;
            view.adjustRotationInternal(-delta);
        }
        this.lastAngle_ = theta;
    }
    /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleUpEvent(mapBrowserEvent) {
        if (!(0, $e01cfcd29f192019$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return true;
        const map = mapBrowserEvent.map;
        const view = map.getView();
        view.endInteraction(this.duration_);
        return false;
    }
    /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleDownEvent(mapBrowserEvent) {
        if (!(0, $e01cfcd29f192019$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return false;
        if ((0, $e01cfcd29f192019$export$1238ad6b5e7fff70)(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
            const map = mapBrowserEvent.map;
            map.getView().beginInteraction();
            this.lastAngle_ = undefined;
            return true;
        }
        return false;
    }
}
var $36172f8455494ad2$export$2e2bcd8739ae039 = $36172f8455494ad2$var$DragRotate;


/**
 * @module ol/interaction/DragZoom
 */ /**
 * @module ol/interaction/DragBox
 */ // FIXME draw drag box


/**
 * @module ol/render/Box
 */ 

class $daf908317c35d64c$var$RenderBox extends (0, $2323388472940bb7$export$2e2bcd8739ae039) {
    /**
   * @param {string} className CSS class name.
   */ constructor(className){
        super();
        /**
     * @type {import("../geom/Polygon.js").default}
     * @private
     */ this.geometry_ = null;
        /**
     * @type {HTMLDivElement}
     * @private
     */ this.element_ = document.createElement("div");
        this.element_.style.position = "absolute";
        this.element_.style.pointerEvents = "auto";
        this.element_.className = "ol-box " + className;
        /**
     * @private
     * @type {import("../Map.js").default|null}
     */ this.map_ = null;
        /**
     * @private
     * @type {import("../pixel.js").Pixel}
     */ this.startPixel_ = null;
        /**
     * @private
     * @type {import("../pixel.js").Pixel}
     */ this.endPixel_ = null;
    }
    /**
   * Clean up.
   */ disposeInternal() {
        this.setMap(null);
    }
    /**
   * @private
   */ render_() {
        const startPixel = this.startPixel_;
        const endPixel = this.endPixel_;
        const px = "px";
        const style = this.element_.style;
        style.left = Math.min(startPixel[0], endPixel[0]) + px;
        style.top = Math.min(startPixel[1], endPixel[1]) + px;
        style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
        style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    }
    /**
   * @param {import("../Map.js").default|null} map Map.
   */ setMap(map) {
        if (this.map_) {
            this.map_.getOverlayContainer().removeChild(this.element_);
            const style = this.element_.style;
            style.left = "inherit";
            style.top = "inherit";
            style.width = "inherit";
            style.height = "inherit";
        }
        this.map_ = map;
        if (this.map_) this.map_.getOverlayContainer().appendChild(this.element_);
    }
    /**
   * @param {import("../pixel.js").Pixel} startPixel Start pixel.
   * @param {import("../pixel.js").Pixel} endPixel End pixel.
   */ setPixels(startPixel, endPixel) {
        this.startPixel_ = startPixel;
        this.endPixel_ = endPixel;
        this.createOrUpdateGeometry();
        this.render_();
    }
    /**
   * Creates or updates the cached geometry.
   */ createOrUpdateGeometry() {
        const startPixel = this.startPixel_;
        const endPixel = this.endPixel_;
        const pixels = [
            startPixel,
            [
                startPixel[0],
                endPixel[1]
            ],
            endPixel,
            [
                endPixel[0],
                startPixel[1]
            ]
        ];
        const coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
        // close the polygon
        coordinates[4] = coordinates[0].slice();
        if (!this.geometry_) this.geometry_ = new (0, $8fedf7da5a76e7a9$export$2e2bcd8739ae039)([
            coordinates
        ]);
        else this.geometry_.setCoordinates([
            coordinates
        ]);
    }
    /**
   * @return {import("../geom/Polygon.js").default} Geometry.
   */ getGeometry() {
        return this.geometry_;
    }
}
var $daf908317c35d64c$export$2e2bcd8739ae039 = $daf908317c35d64c$var$RenderBox;



/**
 * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
 * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
 * true should be returned.
 * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
 * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link ol/events/condition~mouseActionButton}.
 * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
 * `boxEndCondition` function.
 * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
 * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
 * Default is `true` if the area of the box is bigger than the `minArea` option.
 * @property {function(this:DragBox, import("../MapBrowserEvent.js").default):void} [onBoxEnd] Code to execute just
 * before `boxend` is fired.
 */ /**
 * @enum {string}
 */ const $548e1244a8ec2303$var$DragBoxEventType = {
    /**
   * Triggered upon drag box start.
   * @event DragBoxEvent#boxstart
   * @api
   */ BOXSTART: "boxstart",
    /**
   * Triggered on drag when box is active.
   * @event DragBoxEvent#boxdrag
   * @api
   */ BOXDRAG: "boxdrag",
    /**
   * Triggered upon drag box end.
   * @event DragBoxEvent#boxend
   * @api
   */ BOXEND: "boxend",
    /**
   * Triggered upon drag box canceled.
   * @event DragBoxEvent#boxcancel
   * @api
   */ BOXCANCEL: "boxcancel"
};
class $548e1244a8ec2303$export$7053c33c051365ea extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {string} type The event type.
   * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
   */ constructor(type, coordinate, mapBrowserEvent){
        super(type);
        /**
     * The coordinate of the drag event.
     * @const
     * @type {import("../coordinate.js").Coordinate}
     * @api
     */ this.coordinate = coordinate;
        /**
     * @const
     * @type {import("../MapBrowserEvent.js").default}
     * @api
     */ this.mapBrowserEvent = mapBrowserEvent;
    }
}
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature
 */ /**
 * @classdesc
 * Allows the user to draw a vector box by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when the shift or other key is held down. This is used, for example,
 * for zooming to a specific area of the map
 * (see {@link module:ol/interaction/DragZoom~DragZoom} and
 * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).
 *
 * @fires DragBoxEvent
 * @api
 */ class $548e1244a8ec2303$var$DragBox extends (0, $c0c95ade7b9b3f6c$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        super();
        /***
     * @type {DragBoxOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {DragBoxOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {DragBoxOnSignature<void>}
     */ this.un;
        options = options ? options : {};
        /**
     * @type {import("../render/Box.js").default}
     * @private
     */ this.box_ = new (0, $daf908317c35d64c$export$2e2bcd8739ae039)(options.className || "ol-dragbox");
        /**
     * @type {number}
     * @private
     */ this.minArea_ = options.minArea !== undefined ? options.minArea : 64;
        if (options.onBoxEnd) this.onBoxEnd = options.onBoxEnd;
        /**
     * @type {import("../pixel.js").Pixel}
     * @private
     */ this.startPixel_ = null;
        /**
     * @private
     * @type {import("../events/condition.js").Condition}
     */ this.condition_ = options.condition ? options.condition : (0, $e01cfcd29f192019$export$1238ad6b5e7fff70);
        /**
     * @private
     * @type {EndCondition}
     */ this.boxEndCondition_ = options.boxEndCondition ? options.boxEndCondition : this.defaultBoxEndCondition;
    }
    /**
   * The default condition for determining whether the boxend event
   * should fire.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
   *     leading to the box end.
   * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
   * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
   * @return {boolean} Whether or not the boxend condition should be fired.
   */ defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {
        const width = endPixel[0] - startPixel[0];
        const height = endPixel[1] - startPixel[1];
        return width * width + height * height >= this.minArea_;
    }
    /**
   * Returns geometry of last drawn box.
   * @return {import("../geom/Polygon.js").default} Geometry.
   * @api
   */ getGeometry() {
        return this.box_.getGeometry();
    }
    /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */ handleDragEvent(mapBrowserEvent) {
        this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);
        this.dispatchEvent(new $548e1244a8ec2303$export$7053c33c051365ea($548e1244a8ec2303$var$DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));
    }
    /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleUpEvent(mapBrowserEvent) {
        this.box_.setMap(null);
        const completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);
        if (completeBox) this.onBoxEnd(mapBrowserEvent);
        this.dispatchEvent(new $548e1244a8ec2303$export$7053c33c051365ea(completeBox ? $548e1244a8ec2303$var$DragBoxEventType.BOXEND : $548e1244a8ec2303$var$DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));
        return false;
    }
    /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleDownEvent(mapBrowserEvent) {
        if (this.condition_(mapBrowserEvent)) {
            this.startPixel_ = mapBrowserEvent.pixel;
            this.box_.setMap(mapBrowserEvent.map);
            this.box_.setPixels(this.startPixel_, this.startPixel_);
            this.dispatchEvent(new $548e1244a8ec2303$export$7053c33c051365ea($548e1244a8ec2303$var$DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));
            return true;
        }
        return false;
    }
    /**
   * Function to execute just before `onboxend` is fired
   * @param {import("../MapBrowserEvent.js").default} event Event.
   */ onBoxEnd(event) {}
}
var $548e1244a8ec2303$export$2e2bcd8739ae039 = $548e1244a8ec2303$var$DragBox;




/**
 * @typedef {Object} Options
 * @property {string} [className='ol-dragzoom'] CSS class name for styling the
 * box.
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.shiftKeyOnly}.
 * @property {number} [duration=200] Animation duration in milliseconds.
 * @property {boolean} [out=false] Use interaction for zooming out.
 * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
 * `boxEndCondition` function.
 */ /**
 * @classdesc
 * Allows the user to zoom the map by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when a key, shift by default, is held down.
 *
 * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
 * your custom one configured with `className`.
 * @api
 */ class $32526dee12955441$var$DragZoom extends (0, $548e1244a8ec2303$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options ? options : {};
        const condition = options.condition ? options.condition : (0, $e01cfcd29f192019$export$5d31fe68a477cfbb);
        super({
            condition: condition,
            className: options.className || "ol-dragzoom",
            minArea: options.minArea
        });
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 200;
        /**
     * @private
     * @type {boolean}
     */ this.out_ = options.out !== undefined ? options.out : false;
    }
    /**
   * Function to execute just before `onboxend` is fired
   * @param {import("../MapBrowserEvent.js").default} event Event.
   */ onBoxEnd(event) {
        const map = this.getMap();
        const view = /** @type {!import("../View.js").default} */ map.getView();
        let geometry = this.getGeometry();
        if (this.out_) {
            const rotatedExtent = view.rotatedExtentForGeometry(geometry);
            const resolution = view.getResolutionForExtentInternal(rotatedExtent);
            const factor = view.getResolution() / resolution;
            geometry = geometry.clone();
            geometry.scale(factor * factor);
        }
        view.fitInternal(geometry, {
            duration: this.duration_,
            easing: (0, $b6cb732edc5512cf$export$57636bb43b1ccbb0)
        });
    }
}
var $32526dee12955441$export$2e2bcd8739ae039 = $32526dee12955441$var$DragZoom;


/**
 * @module ol/interaction/KeyboardPan
 */ 

/**
 * @module ol/events/Key
 */ /**
 * @enum {string}
 * @const
 */ var $0184dbb1548f43d4$export$2e2bcd8739ae039 = {
    LEFT: "ArrowLeft",
    UP: "ArrowUp",
    RIGHT: "ArrowRight",
    DOWN: "ArrowDown"
};




/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition.noModifierKeys} and
 * {@link module:ol/events/condition.targetNotEditable}.
 * @property {number} [duration=100] Animation duration in milliseconds.
 * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
 * press.
 */ /**
 * @classdesc
 * Allows the user to pan the map using keyboard arrows.
 * Note that, although this interaction is by default included in maps,
 * the keys can only be used when browser focus is on the element to which
 * the keyboard events are attached. By default, this is the map div,
 * though you can change this with the `keyboardEventTarget` in
 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
 * element, focus will have to be on, and returned to, this element if the keys
 * are to function.
 * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
 * @api
 */ class $f630575772c1cb37$var$KeyboardPan extends (0, $c02a1e27548fb802$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        super();
        options = options || {};
        /**
     * @private
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
     * @return {boolean} Combined condition result.
     */ this.defaultCondition_ = function(mapBrowserEvent) {
            return (0, $e01cfcd29f192019$export$fdc892d0d8fe3bfb)(mapBrowserEvent) && (0, $e01cfcd29f192019$export$e5570ca80cd8fd54)(mapBrowserEvent);
        };
        /**
     * @private
     * @type {import("../events/condition.js").Condition}
     */ this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 100;
        /**
     * @private
     * @type {number}
     */ this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;
    }
    /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides the direction to pan to (if an arrow key was
   * pressed).
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */ handleEvent(mapBrowserEvent) {
        let stopEvent = false;
        if (mapBrowserEvent.type == (0, $f13d17e3c190470c$export$2e2bcd8739ae039).KEYDOWN) {
            const keyEvent = /** @type {KeyboardEvent} */ mapBrowserEvent.originalEvent;
            const key = keyEvent.key;
            if (this.condition_(mapBrowserEvent) && (key == (0, $0184dbb1548f43d4$export$2e2bcd8739ae039).DOWN || key == (0, $0184dbb1548f43d4$export$2e2bcd8739ae039).LEFT || key == (0, $0184dbb1548f43d4$export$2e2bcd8739ae039).RIGHT || key == (0, $0184dbb1548f43d4$export$2e2bcd8739ae039).UP)) {
                const map = mapBrowserEvent.map;
                const view = map.getView();
                const mapUnitsDelta = view.getResolution() * this.pixelDelta_;
                let deltaX = 0, deltaY = 0;
                if (key == (0, $0184dbb1548f43d4$export$2e2bcd8739ae039).DOWN) deltaY = -mapUnitsDelta;
                else if (key == (0, $0184dbb1548f43d4$export$2e2bcd8739ae039).LEFT) deltaX = -mapUnitsDelta;
                else if (key == (0, $0184dbb1548f43d4$export$2e2bcd8739ae039).RIGHT) deltaX = mapUnitsDelta;
                else deltaY = mapUnitsDelta;
                const delta = [
                    deltaX,
                    deltaY
                ];
                (0, $c65bc16e55ef0e33$export$bb628a54ab399bc9)(delta, view.getRotation());
                (0, $c02a1e27548fb802$export$4c486572e961a974)(view, delta, this.duration_);
                keyEvent.preventDefault();
                stopEvent = true;
            }
        }
        return !stopEvent;
    }
}
var $f630575772c1cb37$export$2e2bcd8739ae039 = $f630575772c1cb37$var$KeyboardPan;


/**
 * @module ol/interaction/KeyboardZoom
 */ 


/**
 * @typedef {Object} Options
 * @property {number} [duration=100] Animation duration in milliseconds.
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. The default condition is
 * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that
 * the platform modifier key isn't pressed
 * (!{@link module:ol/events/condition.platformModifierKey}).
 * @property {number} [delta=1] The zoom level delta on each key press.
 */ /**
 * @classdesc
 * Allows the user to zoom the map using keyboard + and -.
 * Note that, although this interaction is by default included in maps,
 * the keys can only be used when browser focus is on the element to which
 * the keyboard events are attached. By default, this is the map div,
 * though you can change this with the `keyboardEventTarget` in
 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
 * element, focus will have to be on, and returned to, this element if the keys
 * are to function.
 * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
 * @api
 */ class $bcdf98bca93a76f4$var$KeyboardZoom extends (0, $c02a1e27548fb802$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        super();
        options = options ? options : {};
        /**
     * @private
     * @type {import("../events/condition.js").Condition}
     */ this.condition_ = options.condition ? options.condition : function(mapBrowserEvent) {
            return !(0, $e01cfcd29f192019$export$32603ad571dd22b5)(mapBrowserEvent) && (0, $e01cfcd29f192019$export$e5570ca80cd8fd54)(mapBrowserEvent);
        };
        /**
     * @private
     * @type {number}
     */ this.delta_ = options.delta ? options.delta : 1;
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 100;
    }
    /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
   * key pressed was '+' or '-').
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */ handleEvent(mapBrowserEvent) {
        let stopEvent = false;
        if (mapBrowserEvent.type == (0, $f13d17e3c190470c$export$2e2bcd8739ae039).KEYDOWN || mapBrowserEvent.type == (0, $f13d17e3c190470c$export$2e2bcd8739ae039).KEYPRESS) {
            const keyEvent = /** @type {KeyboardEvent} */ mapBrowserEvent.originalEvent;
            const key = keyEvent.key;
            if (this.condition_(mapBrowserEvent) && (key === "+" || key === "-")) {
                const map = mapBrowserEvent.map;
                const delta = key === "+" ? this.delta_ : -this.delta_;
                const view = map.getView();
                (0, $c02a1e27548fb802$export$ace321ff2a8016ef)(view, delta, undefined, this.duration_);
                keyEvent.preventDefault();
                stopEvent = true;
            }
        }
        return !stopEvent;
    }
}
var $bcdf98bca93a76f4$export$2e2bcd8739ae039 = $bcdf98bca93a76f4$var$KeyboardZoom;


/**
 * @module ol/Kinetic
 */ /**
 * @classdesc
 * Implementation of inertial deceleration for map movement.
 *
 * @api
 */ class $1cf11cfceb5e1609$var$Kinetic {
    /**
   * @param {number} decay Rate of decay (must be negative).
   * @param {number} minVelocity Minimum velocity (pixels/millisecond).
   * @param {number} delay Delay to consider to calculate the kinetic
   *     initial values (milliseconds).
   */ constructor(decay, minVelocity, delay){
        /**
     * @private
     * @type {number}
     */ this.decay_ = decay;
        /**
     * @private
     * @type {number}
     */ this.minVelocity_ = minVelocity;
        /**
     * @private
     * @type {number}
     */ this.delay_ = delay;
        /**
     * @private
     * @type {Array<number>}
     */ this.points_ = [];
        /**
     * @private
     * @type {number}
     */ this.angle_ = 0;
        /**
     * @private
     * @type {number}
     */ this.initialVelocity_ = 0;
    }
    /**
   * FIXME empty description for jsdoc
   */ begin() {
        this.points_.length = 0;
        this.angle_ = 0;
        this.initialVelocity_ = 0;
    }
    /**
   * @param {number} x X.
   * @param {number} y Y.
   */ update(x, y) {
        this.points_.push(x, y, Date.now());
    }
    /**
   * @return {boolean} Whether we should do kinetic animation.
   */ end() {
        if (this.points_.length < 6) // at least 2 points are required (i.e. there must be at least 6 elements
        // in the array)
        return false;
        const delay = Date.now() - this.delay_;
        const lastIndex = this.points_.length - 3;
        if (this.points_[lastIndex + 2] < delay) // the last tracked point is too old, which means that the user stopped
        // panning before releasing the map
        return false;
        // get the first point which still falls into the delay time
        let firstIndex = lastIndex - 3;
        while(firstIndex > 0 && this.points_[firstIndex + 2] > delay)firstIndex -= 3;
        const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
        // we don't want a duration of 0 (divide by zero)
        // we also make sure the user panned for a duration of at least one frame
        // (1/60s) to compute sane displacement values
        if (duration < 1000 / 60) return false;
        const dx = this.points_[lastIndex] - this.points_[firstIndex];
        const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
        this.angle_ = Math.atan2(dy, dx);
        this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
        return this.initialVelocity_ > this.minVelocity_;
    }
    /**
   * @return {number} Total distance travelled (pixels).
   */ getDistance() {
        return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
    }
    /**
   * @return {number} Angle of the kinetic panning animation (radians).
   */ getAngle() {
        return this.angle_;
    }
}
var $1cf11cfceb5e1609$export$2e2bcd8739ae039 = $1cf11cfceb5e1609$var$Kinetic;


/**
 * @module ol/interaction/MouseWheelZoom
 */ 




/**
 * @typedef {'trackpad' | 'wheel'} Mode
 */ /**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition.always}.
 * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
 * the interaction will only handle events when the map has the focus.
 * @property {number} [maxDelta=1] Maximum mouse wheel delta.
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
 * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
 * location as the anchor. When set to `false`, zooming in and out will zoom to
 * the center of the screen instead of zooming on the mouse's location.
 * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom
 * event will always animate to the closest zoom level after an interaction;
 * false means intermediary zoom levels are allowed.
 */ /**
 * @classdesc
 * Allows the user to zoom the map by scrolling the mouse wheel.
 * @api
 */ class $8a9597a35f1475e1$var$MouseWheelZoom extends (0, $c02a1e27548fb802$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options ? options : {};
        super(/** @type {import("./Interaction.js").InteractionOptions} */ options);
        /**
     * @private
     * @type {number}
     */ this.totalDelta_ = 0;
        /**
     * @private
     * @type {number}
     */ this.lastDelta_ = 0;
        /**
     * @private
     * @type {number}
     */ this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 250;
        /**
     * @private
     * @type {number}
     */ this.timeout_ = options.timeout !== undefined ? options.timeout : 80;
        /**
     * @private
     * @type {boolean}
     */ this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;
        /**
     * @private
     * @type {boolean}
     */ this.constrainResolution_ = options.constrainResolution !== undefined ? options.constrainResolution : false;
        const condition = options.condition ? options.condition : (0, $e01cfcd29f192019$export$ba9e5d519bc326ca);
        /**
     * @private
     * @type {import("../events/condition.js").Condition}
     */ this.condition_ = options.onFocusOnly ? (0, $e01cfcd29f192019$export$84bf76cd7afc7469)((0, $e01cfcd29f192019$export$ae2cdf064e3b0c55), condition) : condition;
        /**
     * @private
     * @type {?import("../coordinate.js").Coordinate}
     */ this.lastAnchor_ = null;
        /**
     * @private
     * @type {number|undefined}
     */ this.startTime_ = undefined;
        /**
     * @private
     * @type {ReturnType<typeof setTimeout>}
     */ this.timeoutId_;
        /**
     * @private
     * @type {Mode|undefined}
     */ this.mode_ = undefined;
        /**
     * Trackpad events separated by this delay will be considered separate
     * interactions.
     * @private
     * @type {number}
     */ this.trackpadEventGap_ = 400;
        /**
     * @private
     * @type {ReturnType<typeof setTimeout>}
     */ this.trackpadTimeoutId_;
        /**
     * The number of delta values per zoom level
     * @private
     * @type {number}
     */ this.deltaPerZoom_ = 300;
    }
    /**
   * @private
   */ endInteraction_() {
        this.trackpadTimeoutId_ = undefined;
        const map = this.getMap();
        if (!map) return;
        const view = map.getView();
        view.endInteraction(undefined, this.lastDelta_ ? this.lastDelta_ > 0 ? 1 : -1 : 0, this.lastAnchor_);
    }
    /**
   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
   * zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   */ handleEvent(mapBrowserEvent) {
        if (!this.condition_(mapBrowserEvent)) return true;
        const type = mapBrowserEvent.type;
        if (type !== (0, $f13d17e3c190470c$export$2e2bcd8739ae039).WHEEL) return true;
        const map = mapBrowserEvent.map;
        const wheelEvent = /** @type {WheelEvent} */ mapBrowserEvent.originalEvent;
        wheelEvent.preventDefault();
        if (this.useAnchor_) this.lastAnchor_ = mapBrowserEvent.coordinate;
        // Delta normalisation inspired by
        // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
        let delta;
        if (mapBrowserEvent.type == (0, $f13d17e3c190470c$export$2e2bcd8739ae039).WHEEL) {
            delta = wheelEvent.deltaY;
            if ((0, $253e11c6a01eb5bc$export$8442bdfd18b7b8a6) && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) delta /= (0, $253e11c6a01eb5bc$export$6b83a0446fc26f94);
            if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) delta *= 40;
        }
        if (delta === 0) return false;
        this.lastDelta_ = delta;
        const now = Date.now();
        if (this.startTime_ === undefined) this.startTime_ = now;
        if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) this.mode_ = Math.abs(delta) < 4 ? "trackpad" : "wheel";
        const view = map.getView();
        if (this.mode_ === "trackpad" && !(view.getConstrainResolution() || this.constrainResolution_)) {
            if (this.trackpadTimeoutId_) clearTimeout(this.trackpadTimeoutId_);
            else {
                if (view.getAnimating()) view.cancelAnimations();
                view.beginInteraction();
            }
            this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);
            view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);
            this.startTime_ = now;
            return false;
        }
        this.totalDelta_ += delta;
        const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);
        clearTimeout(this.timeoutId_);
        this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);
        return false;
    }
    /**
   * @private
   * @param {import("../Map.js").default} map Map.
   */ handleWheelZoom_(map) {
        const view = map.getView();
        if (view.getAnimating()) view.cancelAnimations();
        let delta = -(0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;
        if (view.getConstrainResolution() || this.constrainResolution_) // view has a zoom constraint, zoom by 1
        delta = delta ? delta > 0 ? 1 : -1 : 0;
        (0, $c02a1e27548fb802$export$ace321ff2a8016ef)(view, delta, this.lastAnchor_, this.duration_);
        this.mode_ = undefined;
        this.totalDelta_ = 0;
        this.lastAnchor_ = null;
        this.startTime_ = undefined;
        this.timeoutId_ = undefined;
    }
    /**
   * Enable or disable using the mouse's location as an anchor when zooming
   * @param {boolean} useAnchor true to zoom to the mouse's location, false
   * to zoom to the center of the map
   * @api
   */ setMouseAnchor(useAnchor) {
        this.useAnchor_ = useAnchor;
        if (!useAnchor) this.lastAnchor_ = null;
    }
}
var $8a9597a35f1475e1$export$2e2bcd8739ae039 = $8a9597a35f1475e1$var$MouseWheelZoom;


/**
 * @module ol/interaction/PinchRotate
 */ 


/**
 * @typedef {Object} Options
 * @property {number} [duration=250] The duration of the animation in
 * milliseconds.
 * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
 */ /**
 * @classdesc
 * Allows the user to rotate the map by twisting with two fingers
 * on a touch screen.
 * @api
 */ class $0e7da48618192295$var$PinchRotate extends (0, $c0c95ade7b9b3f6c$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options ? options : {};
        const pointerOptions = /** @type {import("./Pointer.js").Options} */ options;
        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, $2c3aa3ce33eccc0f$export$8f11cee4bdc7e668);
        super(pointerOptions);
        /**
     * @private
     * @type {import("../coordinate.js").Coordinate}
     */ this.anchor_ = null;
        /**
     * @private
     * @type {number|undefined}
     */ this.lastAngle_ = undefined;
        /**
     * @private
     * @type {boolean}
     */ this.rotating_ = false;
        /**
     * @private
     * @type {number}
     */ this.rotationDelta_ = 0.0;
        /**
     * @private
     * @type {number}
     */ this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 250;
    }
    /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */ handleDragEvent(mapBrowserEvent) {
        let rotationDelta = 0.0;
        const touch0 = this.targetPointers[0];
        const touch1 = this.targetPointers[1];
        // angle between touches
        const angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
        if (this.lastAngle_ !== undefined) {
            const delta = angle - this.lastAngle_;
            this.rotationDelta_ += delta;
            if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) this.rotating_ = true;
            rotationDelta = delta;
        }
        this.lastAngle_ = angle;
        const map = mapBrowserEvent.map;
        const view = map.getView();
        if (view.getConstraints().rotation === (0, $4412a0460d6cbb1d$export$e20fbacbb41798b)) return;
        // rotate anchor point.
        // FIXME: should be the intersection point between the lines:
        //     touch0,touch1 and previousTouch0,previousTouch1
        this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel((0, $c0c95ade7b9b3f6c$export$e2a20c553f6c85ce)(this.targetPointers)));
        // rotate
        if (this.rotating_) {
            map.render();
            view.adjustRotationInternal(rotationDelta, this.anchor_);
        }
    }
    /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleUpEvent(mapBrowserEvent) {
        if (this.targetPointers.length < 2) {
            const map = mapBrowserEvent.map;
            const view = map.getView();
            view.endInteraction(this.duration_);
            return false;
        }
        return true;
    }
    /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleDownEvent(mapBrowserEvent) {
        if (this.targetPointers.length >= 2) {
            const map = mapBrowserEvent.map;
            this.anchor_ = null;
            this.lastAngle_ = undefined;
            this.rotating_ = false;
            this.rotationDelta_ = 0.0;
            if (!this.handlingDownUpSequence) map.getView().beginInteraction();
            return true;
        }
        return false;
    }
}
var $0e7da48618192295$export$2e2bcd8739ae039 = $0e7da48618192295$var$PinchRotate;


/**
 * @module ol/interaction/PinchZoom
 */ 

/**
 * @typedef {Object} Options
 * @property {number} [duration=400] Animation duration in milliseconds.
 */ /**
 * @classdesc
 * Allows the user to zoom the map by pinching with two fingers
 * on a touch screen.
 * @api
 */ class $a2bc711ca251554f$var$PinchZoom extends (0, $c0c95ade7b9b3f6c$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options ? options : {};
        const pointerOptions = /** @type {import("./Pointer.js").Options} */ options;
        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, $2c3aa3ce33eccc0f$export$8f11cee4bdc7e668);
        super(pointerOptions);
        /**
     * @private
     * @type {import("../coordinate.js").Coordinate}
     */ this.anchor_ = null;
        /**
     * @private
     * @type {number}
     */ this.duration_ = options.duration !== undefined ? options.duration : 400;
        /**
     * @private
     * @type {number|undefined}
     */ this.lastDistance_ = undefined;
        /**
     * @private
     * @type {number}
     */ this.lastScaleDelta_ = 1;
    }
    /**
   * Handle pointer drag events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   */ handleDragEvent(mapBrowserEvent) {
        let scaleDelta = 1.0;
        const touch0 = this.targetPointers[0];
        const touch1 = this.targetPointers[1];
        const dx = touch0.clientX - touch1.clientX;
        const dy = touch0.clientY - touch1.clientY;
        // distance between touches
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (this.lastDistance_ !== undefined) scaleDelta = this.lastDistance_ / distance;
        this.lastDistance_ = distance;
        const map = mapBrowserEvent.map;
        const view = map.getView();
        if (scaleDelta != 1.0) this.lastScaleDelta_ = scaleDelta;
        // scale anchor point.
        this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel((0, $c0c95ade7b9b3f6c$export$e2a20c553f6c85ce)(this.targetPointers)));
        // scale, bypass the resolution constraint
        map.render();
        view.adjustResolutionInternal(scaleDelta, this.anchor_);
    }
    /**
   * Handle pointer up events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleUpEvent(mapBrowserEvent) {
        if (this.targetPointers.length < 2) {
            const map = mapBrowserEvent.map;
            const view = map.getView();
            const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
            view.endInteraction(this.duration_, direction);
            return false;
        }
        return true;
    }
    /**
   * Handle pointer down events.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} If the event was consumed.
   */ handleDownEvent(mapBrowserEvent) {
        if (this.targetPointers.length >= 2) {
            const map = mapBrowserEvent.map;
            this.anchor_ = null;
            this.lastDistance_ = undefined;
            this.lastScaleDelta_ = 1;
            if (!this.handlingDownUpSequence) map.getView().beginInteraction();
            return true;
        }
        return false;
    }
}
var $a2bc711ca251554f$export$2e2bcd8739ae039 = $a2bc711ca251554f$var$PinchZoom;


function $f383e4a6bfaed63f$export$ebe90cb607ad99e(options) {
    options = options ? options : {};
    /** @type {Collection<import("./Interaction.js").default>} */ const interactions = new (0, $6ba3969272323605$export$2e2bcd8739ae039)();
    const kinetic = new (0, $1cf11cfceb5e1609$export$2e2bcd8739ae039)(-0.005, 0.05, 100);
    const altShiftDragRotate = options.altShiftDragRotate !== undefined ? options.altShiftDragRotate : true;
    if (altShiftDragRotate) interactions.push(new (0, $36172f8455494ad2$export$2e2bcd8739ae039)());
    const doubleClickZoom = options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;
    if (doubleClickZoom) interactions.push(new (0, $55bbbcfb81d90823$export$2e2bcd8739ae039)({
        delta: options.zoomDelta,
        duration: options.zoomDuration
    }));
    const dragPan = options.dragPan !== undefined ? options.dragPan : true;
    if (dragPan) interactions.push(new (0, $5414c7cf743020a2$export$2e2bcd8739ae039)({
        onFocusOnly: options.onFocusOnly,
        kinetic: kinetic
    }));
    const pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate : true;
    if (pinchRotate) interactions.push(new (0, $0e7da48618192295$export$2e2bcd8739ae039)());
    const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
    if (pinchZoom) interactions.push(new (0, $a2bc711ca251554f$export$2e2bcd8739ae039)({
        duration: options.zoomDuration
    }));
    const keyboard = options.keyboard !== undefined ? options.keyboard : true;
    if (keyboard) {
        interactions.push(new (0, $f630575772c1cb37$export$2e2bcd8739ae039)());
        interactions.push(new (0, $bcdf98bca93a76f4$export$2e2bcd8739ae039)({
            delta: options.zoomDelta,
            duration: options.zoomDuration
        }));
    }
    const mouseWheelZoom = options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;
    if (mouseWheelZoom) interactions.push(new (0, $8a9597a35f1475e1$export$2e2bcd8739ae039)({
        onFocusOnly: options.onFocusOnly,
        duration: options.zoomDuration
    }));
    const shiftDragZoom = options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;
    if (shiftDragZoom) interactions.push(new (0, $32526dee12955441$export$2e2bcd8739ae039)({
        duration: options.zoomDuration
    }));
    return interactions;
}





/**
 * @module ol/size
 */ /**
 * An array of numbers representing a size: `[width, height]`.
 * @typedef {Array<number>} Size
 * @api
 */ /**
 * Returns a buffered size.
 * @param {Size} size Size.
 * @param {number} num The amount by which to buffer.
 * @param {Size} [dest] Optional reusable size array.
 * @return {Size} The buffered size.
 */ function $3db00eb0a4716cab$export$ab1029bcae9ddb4a(size, num, dest) {
    if (dest === undefined) dest = [
        0,
        0
    ];
    dest[0] = size[0] + 2 * num;
    dest[1] = size[1] + 2 * num;
    return dest;
}
function $3db00eb0a4716cab$export$622c471beb1693c7(size) {
    return size[0] > 0 && size[1] > 0;
}
function $3db00eb0a4716cab$export$dcdf75081b88279d(size, ratio, dest) {
    if (dest === undefined) dest = [
        0,
        0
    ];
    dest[0] = size[0] * ratio + 0.5 | 0;
    dest[1] = size[1] * ratio + 0.5 | 0;
    return dest;
}
function $3db00eb0a4716cab$export$a71a825ff42fb8e1(size, dest) {
    if (Array.isArray(size)) return size;
    if (dest === undefined) dest = [
        size,
        size
    ];
    else {
        dest[0] = size;
        dest[1] = size;
    }
    return dest;
}





/**
 * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
 * be used in applications.
 * @typedef {Object} FrameState
 * @property {number} pixelRatio The pixel ratio of the frame.
 * @property {number} time The time when rendering of the frame was requested.
 * @property {import("./View.js").State} viewState The state of the current view.
 * @property {boolean} animate Animate.
 * @property {import("./transform.js").Transform} coordinateToPixelTransform CoordinateToPixelTransform.
 * @property {import("rbush").default} declutterTree DeclutterTree.
 * @property {null|import("./extent.js").Extent} extent Extent (in view projection coordinates).
 * @property {import("./extent.js").Extent} [nextExtent] Next extent during an animation series.
 * @property {number} index Index.
 * @property {Array<import("./layer/Layer.js").State>} layerStatesArray LayerStatesArray.
 * @property {number} layerIndex LayerIndex.
 * @property {import("./transform.js").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.
 * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.
 * @property {import("./size.js").Size} size Size.
 * @property {TileQueue} tileQueue TileQueue.
 * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.
 * @property {Array<number>} viewHints ViewHints.
 * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.
 * @property {string} mapId The id of the map.
 * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.
 */ /**
 * @typedef {function(Map, ?FrameState): any} PostRenderFunction
 */ /**
 * @typedef {Object} AtPixelOptions
 * @property {undefined|function(import("./layer/Layer.js").default<import("./source/Source").default>): boolean} [layerFilter] Layer filter
 * function. The filter function will receive one argument, the
 * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.
 * Only layers which are visible and for which this function returns `true`
 * will be tested for features. By default, all visible layers will be tested.
 * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels
 * inside the radius around the given position will be checked for features.
 * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of
 *   +/- 1 world width. Works only if a projection is used that can be wrapped.
 */ /**
 * @typedef {Object} MapOptionsInternal
 * @property {Collection<import("./control/Control.js").default>} [controls] Controls.
 * @property {Collection<import("./interaction/Interaction.js").default>} [interactions] Interactions.
 * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.
 * @property {Collection<import("./Overlay.js").default>} overlays Overlays.
 * @property {Object<string, *>} values Values.
 */ /**
 * @typedef {import("./ObjectEventType").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes
 */ /***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *    import("./Observable").OnSignature<MapObjectEventTypes, import("./Object").ObjectEvent, Return> &
 *    import("./Observable").OnSignature<import("./MapBrowserEventType").Types, import("./MapBrowserEvent").default, Return> &
 *    import("./Observable").OnSignature<import("./MapEventType").Types, import("./MapEvent").default, Return> &
 *    import("./Observable").OnSignature<import("./render/EventType").MapRenderEventTypes, import("./render/Event").default, Return> &
 *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|MapObjectEventTypes|
 *      import("./MapBrowserEventType").Types|import("./MapEventType").Types|
 *      import("./render/EventType").MapRenderEventTypes, Return>} MapEventHandler
 */ /**
 * Object literal with config options for the map.
 * @typedef {Object} MapOptions
 * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
 * Controls initially added to the map. If not specified,
 * {@link module:ol/control/defaults.defaults} is used.
 * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
 * physical pixels and device-independent pixels (dips) on the device.
 * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
 * Interactions that are initially added to the map. If not specified,
 * {@link module:ol/interaction/defaults.defaults} is used.
 * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
 * listen to keyboard events on. This determines when the `KeyboardPan` and
 * `KeyboardZoom` interactions trigger. For example, if this option is set to
 * `document` the keyboard interactions will always trigger. If this option is
 * not specified, the element the library listens to keyboard events on is the
 * map target (i.e. the user-provided div for the map). If this is not
 * `document`, the target element needs to be focused for key events to be
 * emitted, requiring that the target element has a `tabindex` attribute.
 * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
 * Layers. If this is not defined, a map with no layers will be rendered. Note
 * that layers are rendered in the order supplied, so if you want, for example,
 * a vector layer to appear on top of a tile layer, it must come after the tile
 * layer.
 * @property {number} [maxTilesLoading=16] Maximum number tiles to load
 * simultaneously.
 * @property {number} [moveTolerance=1] The minimum distance in pixels the
 * cursor must move to be detected as a map move event instead of a click.
 * Increasing this value can make it easier to click on the map.
 * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
 * Overlays initially added to the map. By default, no overlays are added.
 * @property {HTMLElement|string} [target] The container for the map, either the
 * element itself or the `id` of the element. If not specified at construction
 * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
 * rendered. If passed by element, the container can be in a secondary document.
 * **Note:** CSS `transform` support for the target element is limited to `scale`.
 * @property {View|Promise<import("./View.js").ViewOptions>} [view] The map's view.  No layer sources will be
 * fetched unless this is specified at construction time or through
 * {@link module:ol/Map~Map#setView}.
 */ /**
 * @param {import("./layer/Base.js").default} layer Layer.
 */ function $905d64a7b91bb632$var$removeLayerMapProperty(layer) {
    if (layer instanceof (0, $14019fcc7ba24fd5$export$2e2bcd8739ae039)) {
        layer.setMapInternal(null);
        return;
    }
    if (layer instanceof (0, $3c2b2bf26c3e3155$export$2e2bcd8739ae039)) layer.getLayers().forEach($905d64a7b91bb632$var$removeLayerMapProperty);
}
/**
 * @param {import("./layer/Base.js").default} layer Layer.
 * @param {Map} map Map.
 */ function $905d64a7b91bb632$var$setLayerMapProperty(layer, map) {
    if (layer instanceof (0, $14019fcc7ba24fd5$export$2e2bcd8739ae039)) {
        layer.setMapInternal(map);
        return;
    }
    if (layer instanceof (0, $3c2b2bf26c3e3155$export$2e2bcd8739ae039)) {
        const layers = layer.getLayers().getArray();
        for(let i = 0, ii = layers.length; i < ii; ++i)$905d64a7b91bb632$var$setLayerMapProperty(layers[i], map);
    }
}
/**
 * @classdesc
 * The map is the core component of OpenLayers. For a map to render, a view,
 * one or more layers, and a target container are needed:
 *
 *     import Map from 'ol/Map.js';
 *     import View from 'ol/View.js';
 *     import TileLayer from 'ol/layer/Tile.js';
 *     import OSM from 'ol/source/OSM.js';
 *
 *     const map = new Map({
 *       view: new View({
 *         center: [0, 0],
 *         zoom: 1,
 *       }),
 *       layers: [
 *         new TileLayer({
 *           source: new OSM(),
 *         }),
 *       ],
 *       target: 'map',
 *     });
 *
 * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to
 * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
 * element with the id `map`.
 *
 * The constructor places a viewport container (with CSS class name
 * `ol-viewport`) in the target element (see `getViewport()`), and then two
 * further elements within the viewport: one with CSS class name
 * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
 * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
 * option of {@link module:ol/Overlay~Overlay} for the difference). The map
 * itself is placed in a further element within the viewport.
 *
 * Layers are stored as a {@link module:ol/Collection~Collection} in
 * layerGroups. A top-level group is provided by the library. This is what is
 * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
 * options are added to this group, and `addLayer` and `removeLayer` change the
 * layer collection in the group. `getLayers` is a convenience function for
 * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}
 * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the
 * options or added with `addLayer` can be groups, which can contain further
 * groups, and so on.
 *
 * @fires import("./MapBrowserEvent.js").MapBrowserEvent
 * @fires import("./MapEvent.js").MapEvent
 * @fires import("./render/Event.js").default#precompose
 * @fires import("./render/Event.js").default#postcompose
 * @fires import("./render/Event.js").default#rendercomplete
 * @api
 */ class $905d64a7b91bb632$var$Map extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {MapOptions} [options] Map options.
   */ constructor(options){
        super();
        options = options || {};
        /***
     * @type {MapEventHandler<import("./events").EventsKey>}
     */ this.on;
        /***
     * @type {MapEventHandler<import("./events").EventsKey>}
     */ this.once;
        /***
     * @type {MapEventHandler<void>}
     */ this.un;
        const optionsInternal = $905d64a7b91bb632$var$createOptionsInternal(options);
        /**
     * @private
     * @type {boolean|undefined}
     */ this.renderComplete_;
        /**
     * @private
     * @type {boolean}
     */ this.loaded_ = true;
        /** @private */ this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);
        /**
     * @type {number}
     * @private
     */ this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : (0, $253e11c6a01eb5bc$export$6b83a0446fc26f94);
        /**
     * @private
     * @type {ReturnType<typeof setTimeout>}
     */ this.postRenderTimeoutHandle_;
        /**
     * @private
     * @type {number|undefined}
     */ this.animationDelayKey_;
        /**
     * @private
     */ this.animationDelay_ = this.animationDelay_.bind(this);
        /**
     * @private
     * @type {import("./transform.js").Transform}
     */ this.coordinateToPixelTransform_ = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
        /**
     * @private
     * @type {import("./transform.js").Transform}
     */ this.pixelToCoordinateTransform_ = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
        /**
     * @private
     * @type {number}
     */ this.frameIndex_ = 0;
        /**
     * @private
     * @type {?FrameState}
     */ this.frameState_ = null;
        /**
     * The extent at the previous 'moveend' event.
     * @private
     * @type {import("./extent.js").Extent}
     */ this.previousExtent_ = null;
        /**
     * @private
     * @type {?import("./events.js").EventsKey}
     */ this.viewPropertyListenerKey_ = null;
        /**
     * @private
     * @type {?import("./events.js").EventsKey}
     */ this.viewChangeListenerKey_ = null;
        /**
     * @private
     * @type {?Array<import("./events.js").EventsKey>}
     */ this.layerGroupPropertyListenerKeys_ = null;
        /**
     * @private
     * @type {!HTMLElement}
     */ this.viewport_ = document.createElement("div");
        this.viewport_.className = "ol-viewport" + ("ontouchstart" in window ? " ol-touch" : "");
        this.viewport_.style.position = "relative";
        this.viewport_.style.overflow = "hidden";
        this.viewport_.style.width = "100%";
        this.viewport_.style.height = "100%";
        /**
     * @private
     * @type {!HTMLElement}
     */ this.overlayContainer_ = document.createElement("div");
        this.overlayContainer_.style.position = "absolute";
        this.overlayContainer_.style.zIndex = "0";
        this.overlayContainer_.style.width = "100%";
        this.overlayContainer_.style.height = "100%";
        this.overlayContainer_.style.pointerEvents = "none";
        this.overlayContainer_.className = "ol-overlaycontainer";
        this.viewport_.appendChild(this.overlayContainer_);
        /**
     * @private
     * @type {!HTMLElement}
     */ this.overlayContainerStopEvent_ = document.createElement("div");
        this.overlayContainerStopEvent_.style.position = "absolute";
        this.overlayContainerStopEvent_.style.zIndex = "0";
        this.overlayContainerStopEvent_.style.width = "100%";
        this.overlayContainerStopEvent_.style.height = "100%";
        this.overlayContainerStopEvent_.style.pointerEvents = "none";
        this.overlayContainerStopEvent_.className = "ol-overlaycontainer-stopevent";
        this.viewport_.appendChild(this.overlayContainerStopEvent_);
        /**
     * @private
     * @type {MapBrowserEventHandler}
     */ this.mapBrowserEventHandler_ = null;
        /**
     * @private
     * @type {number}
     */ this.moveTolerance_ = options.moveTolerance;
        /**
     * @private
     * @type {HTMLElement|Document}
     */ this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
        /**
     * @private
     * @type {?Array<import("./events.js").EventsKey>}
     */ this.targetChangeHandlerKeys_ = null;
        /**
     * @private
     * @type {HTMLElement|null}
     */ this.targetElement_ = null;
        /**
     * @type {ResizeObserver}
     */ this.resizeObserver_ = new ResizeObserver(()=>this.updateSize());
        /**
     * @type {Collection<import("./control/Control.js").default>}
     * @protected
     */ this.controls = optionsInternal.controls || (0, $ca89b5468da2f709$export$ebe90cb607ad99e)();
        /**
     * @type {Collection<import("./interaction/Interaction.js").default>}
     * @protected
     */ this.interactions = optionsInternal.interactions || (0, $f383e4a6bfaed63f$export$ebe90cb607ad99e)({
            onFocusOnly: true
        });
        /**
     * @type {Collection<import("./Overlay.js").default>}
     * @private
     */ this.overlays_ = optionsInternal.overlays;
        /**
     * A lookup of overlays by id.
     * @private
     * @type {Object<string, import("./Overlay.js").default>}
     */ this.overlayIdIndex_ = {};
        /**
     * @type {import("./renderer/Map.js").default|null}
     * @private
     */ this.renderer_ = null;
        /**
     * @private
     * @type {!Array<PostRenderFunction>}
     */ this.postRenderFunctions_ = [];
        /**
     * @private
     * @type {TileQueue}
     */ this.tileQueue_ = new (0, $5b2a708996b8a43e$export$2e2bcd8739ae039)(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));
        this.addChangeListener((0, $df2cc47d12323995$export$2e2bcd8739ae039).LAYERGROUP, this.handleLayerGroupChanged_);
        this.addChangeListener((0, $df2cc47d12323995$export$2e2bcd8739ae039).VIEW, this.handleViewChanged_);
        this.addChangeListener((0, $df2cc47d12323995$export$2e2bcd8739ae039).SIZE, this.handleSizeChanged_);
        this.addChangeListener((0, $df2cc47d12323995$export$2e2bcd8739ae039).TARGET, this.handleTargetChanged_);
        // setProperties will trigger the rendering of the map if the map
        // is "defined" already.
        this.setProperties(optionsInternal.values);
        const map = this;
        if (options.view && !(options.view instanceof (0, $5c065e8fdff88e40$export$2e2bcd8739ae039))) options.view.then(function(viewOptions) {
            map.setView(new (0, $5c065e8fdff88e40$export$2e2bcd8739ae039)(viewOptions));
        });
        this.controls.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).ADD, /**
       * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent
       */ (event)=>{
            event.element.setMap(this);
        });
        this.controls.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).REMOVE, /**
       * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent.
       */ (event)=>{
            event.element.setMap(null);
        });
        this.interactions.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).ADD, /**
       * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
       */ (event)=>{
            event.element.setMap(this);
        });
        this.interactions.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).REMOVE, /**
       * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
       */ (event)=>{
            event.element.setMap(null);
        });
        this.overlays_.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).ADD, /**
       * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
       */ (event)=>{
            this.addOverlayInternal_(event.element);
        });
        this.overlays_.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).REMOVE, /**
       * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
       */ (event)=>{
            const id = event.element.getId();
            if (id !== undefined) delete this.overlayIdIndex_[id.toString()];
            event.element.setMap(null);
        });
        this.controls.forEach(/**
       * @param {import("./control/Control.js").default} control Control.
       */ (control)=>{
            control.setMap(this);
        });
        this.interactions.forEach(/**
       * @param {import("./interaction/Interaction.js").default} interaction Interaction.
       */ (interaction)=>{
            interaction.setMap(this);
        });
        this.overlays_.forEach(this.addOverlayInternal_.bind(this));
    }
    /**
   * Add the given control to the map.
   * @param {import("./control/Control.js").default} control Control.
   * @api
   */ addControl(control) {
        this.getControls().push(control);
    }
    /**
   * Add the given interaction to the map. If you want to add an interaction
   * at another point of the collection use `getInteractions()` and the methods
   * available on {@link module:ol/Collection~Collection}. This can be used to
   * stop the event propagation from the handleEvent function. The interactions
   * get to handle the events in the reverse order of this collection.
   * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
   * @api
   */ addInteraction(interaction) {
        this.getInteractions().push(interaction);
    }
    /**
   * Adds the given layer to the top of this map. If you want to add a layer
   * elsewhere in the stack, use `getLayers()` and the methods available on
   * {@link module:ol/Collection~Collection}.
   * @param {import("./layer/Base.js").default} layer Layer.
   * @api
   */ addLayer(layer) {
        const layers = this.getLayerGroup().getLayers();
        layers.push(layer);
    }
    /**
   * @param {import("./layer/Group.js").GroupEvent} event The layer add event.
   * @private
   */ handleLayerAdd_(event) {
        $905d64a7b91bb632$var$setLayerMapProperty(event.layer, this);
    }
    /**
   * Add the given overlay to the map.
   * @param {import("./Overlay.js").default} overlay Overlay.
   * @api
   */ addOverlay(overlay) {
        this.getOverlays().push(overlay);
    }
    /**
   * This deals with map's overlay collection changes.
   * @param {import("./Overlay.js").default} overlay Overlay.
   * @private
   */ addOverlayInternal_(overlay) {
        const id = overlay.getId();
        if (id !== undefined) this.overlayIdIndex_[id.toString()] = overlay;
        overlay.setMap(this);
    }
    /**
   *
   * Clean up.
   */ disposeInternal() {
        this.controls.clear();
        this.interactions.clear();
        this.overlays_.clear();
        this.resizeObserver_.disconnect();
        this.setTarget(null);
        super.disposeInternal();
    }
    /**
   * Detect features that intersect a pixel on the viewport, and execute a
   * callback with each intersecting feature. Layers included in the detection can
   * be configured through the `layerFilter` option in `options`.
   * @param {import("./pixel.js").Pixel} pixel Pixel.
   * @param {function(import("./Feature.js").FeatureLike, import("./layer/Layer.js").default<import("./source/Source").default>, import("./geom/SimpleGeometry.js").default): T} callback Feature callback. The callback will be
   *     called with two arguments. The first argument is one
   *     {@link module:ol/Feature~Feature feature} or
   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is
   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
   *     unmanaged layers. To stop detection, callback functions can return a
   *     truthy value.
   * @param {AtPixelOptions} [options] Optional options.
   * @return {T|undefined} Callback result, i.e. the return value of last
   * callback execution, or the first truthy callback return value.
   * @template T
   * @api
   */ forEachFeatureAtPixel(pixel, callback, options) {
        if (!this.frameState_ || !this.renderer_) return;
        const coordinate = this.getCoordinateFromPixelInternal(pixel);
        options = options !== undefined ? options : {};
        const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;
        const layerFilter = options.layerFilter !== undefined ? options.layerFilter : (0, $2c3aa3ce33eccc0f$export$22e23a2304399231);
        const checkWrapped = options.checkWrapped !== false;
        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);
    }
    /**
   * Get all features that intersect a pixel on the viewport.
   * @param {import("./pixel.js").Pixel} pixel Pixel.
   * @param {AtPixelOptions} [options] Optional options.
   * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
   * an empty array if none were found.
   * @api
   */ getFeaturesAtPixel(pixel, options) {
        const features = [];
        this.forEachFeatureAtPixel(pixel, function(feature) {
            features.push(feature);
        }, options);
        return features;
    }
    /**
   * Get all layers from all layer groups.
   * @return {Array<import("./layer/Layer.js").default>} Layers.
   * @api
   */ getAllLayers() {
        const layers = [];
        function addLayersFrom(layerGroup) {
            layerGroup.forEach(function(layer) {
                if (layer instanceof (0, $3c2b2bf26c3e3155$export$2e2bcd8739ae039)) addLayersFrom(layer.getLayers());
                else layers.push(layer);
            });
        }
        addLayersFrom(this.getLayers());
        return layers;
    }
    /**
   * Detect if features intersect a pixel on the viewport. Layers included in the
   * detection can be configured through the `layerFilter` option.
   * @param {import("./pixel.js").Pixel} pixel Pixel.
   * @param {AtPixelOptions} [options] Optional options.
   * @return {boolean} Is there a feature at the given pixel?
   * @api
   */ hasFeatureAtPixel(pixel, options) {
        if (!this.frameState_ || !this.renderer_) return false;
        const coordinate = this.getCoordinateFromPixelInternal(pixel);
        options = options !== undefined ? options : {};
        const layerFilter = options.layerFilter !== undefined ? options.layerFilter : (0, $2c3aa3ce33eccc0f$export$22e23a2304399231);
        const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;
        const checkWrapped = options.checkWrapped !== false;
        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);
    }
    /**
   * Returns the coordinate in user projection for a browser event.
   * @param {MouseEvent} event Event.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   * @api
   */ getEventCoordinate(event) {
        return this.getCoordinateFromPixel(this.getEventPixel(event));
    }
    /**
   * Returns the coordinate in view projection for a browser event.
   * @param {MouseEvent} event Event.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   */ getEventCoordinateInternal(event) {
        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
    }
    /**
   * Returns the map pixel position for a browser event relative to the viewport.
   * @param {UIEvent|{clientX: number, clientY: number}} event Event.
   * @return {import("./pixel.js").Pixel} Pixel.
   * @api
   */ getEventPixel(event) {
        const viewport = this.viewport_;
        const viewportPosition = viewport.getBoundingClientRect();
        const viewportSize = this.getSize();
        const scaleX = viewportPosition.width / viewportSize[0];
        const scaleY = viewportPosition.height / viewportSize[1];
        const eventPosition = //FIXME Are we really calling this with a TouchEvent anywhere?
        "changedTouches" in event ? /** @type {TouchEvent} */ event.changedTouches[0] : /** @type {MouseEvent} */ event;
        return [
            (eventPosition.clientX - viewportPosition.left) / scaleX,
            (eventPosition.clientY - viewportPosition.top) / scaleY
        ];
    }
    /**
   * Get the target in which this map is rendered.
   * Note that this returns what is entered as an option or in setTarget:
   * if that was an element, it returns an element; if a string, it returns that.
   * @return {HTMLElement|string|undefined} The Element or id of the Element that the
   *     map is rendered in.
   * @observable
   * @api
   */ getTarget() {
        return /** @type {HTMLElement|string|undefined} */ this.get((0, $df2cc47d12323995$export$2e2bcd8739ae039).TARGET);
    }
    /**
   * Get the DOM element into which this map is rendered. In contrast to
   * `getTarget` this method always return an `Element`, or `null` if the
   * map has no target.
   * @return {HTMLElement} The element that the map is rendered in.
   * @api
   */ getTargetElement() {
        return this.targetElement_;
    }
    /**
   * Get the coordinate for a given pixel.  This returns a coordinate in the
   * user projection.
   * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
   * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
   * @api
   */ getCoordinateFromPixel(pixel) {
        return (0, $983289ae1d13cd2a$export$698f563af1ba02a5)(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
    }
    /**
   * Get the coordinate for a given pixel.  This returns a coordinate in the
   * map view projection.
   * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
   * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
   */ getCoordinateFromPixelInternal(pixel) {
        const frameState = this.frameState_;
        if (!frameState) return null;
        return (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());
    }
    /**
   * Get the map controls. Modifying this collection changes the controls
   * associated with the map.
   * @return {Collection<import("./control/Control.js").default>} Controls.
   * @api
   */ getControls() {
        return this.controls;
    }
    /**
   * Get the map overlays. Modifying this collection changes the overlays
   * associated with the map.
   * @return {Collection<import("./Overlay.js").default>} Overlays.
   * @api
   */ getOverlays() {
        return this.overlays_;
    }
    /**
   * Get an overlay by its identifier (the value returned by overlay.getId()).
   * Note that the index treats string and numeric identifiers as the same. So
   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
   * @param {string|number} id Overlay identifier.
   * @return {import("./Overlay.js").default} Overlay.
   * @api
   */ getOverlayById(id) {
        const overlay = this.overlayIdIndex_[id.toString()];
        return overlay !== undefined ? overlay : null;
    }
    /**
   * Get the map interactions. Modifying this collection changes the interactions
   * associated with the map.
   *
   * Interactions are used for e.g. pan, zoom and rotate.
   * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
   * @api
   */ getInteractions() {
        return this.interactions;
    }
    /**
   * Get the layergroup associated with this map.
   * @return {LayerGroup} A layer group containing the layers in this map.
   * @observable
   * @api
   */ getLayerGroup() {
        return /** @type {LayerGroup} */ this.get((0, $df2cc47d12323995$export$2e2bcd8739ae039).LAYERGROUP);
    }
    /**
   * Clear any existing layers and add layers to the map.
   * @param {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>} layers The layers to be added to the map.
   * @api
   */ setLayers(layers) {
        const group = this.getLayerGroup();
        if (layers instanceof (0, $6ba3969272323605$export$2e2bcd8739ae039)) {
            group.setLayers(layers);
            return;
        }
        const collection = group.getLayers();
        collection.clear();
        collection.extend(layers);
    }
    /**
   * Get the collection of layers associated with this map.
   * @return {!Collection<import("./layer/Base.js").default>} Layers.
   * @api
   */ getLayers() {
        const layers = this.getLayerGroup().getLayers();
        return layers;
    }
    /**
   * @return {boolean} Layers have sources that are still loading.
   */ getLoadingOrNotReady() {
        const layerStatesArray = this.getLayerGroup().getLayerStatesArray();
        for(let i = 0, ii = layerStatesArray.length; i < ii; ++i){
            const state = layerStatesArray[i];
            if (!state.visible) continue;
            const renderer = state.layer.getRenderer();
            if (renderer && !renderer.ready) return true;
            const source = state.layer.getSource();
            if (source && source.loading) return true;
        }
        return false;
    }
    /**
   * Get the pixel for a coordinate.  This takes a coordinate in the user
   * projection and returns the corresponding pixel.
   * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
   * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
   * @api
   */ getPixelFromCoordinate(coordinate) {
        const viewCoordinate = (0, $983289ae1d13cd2a$export$d4b8ec0b96db1ee2)(coordinate, this.getView().getProjection());
        return this.getPixelFromCoordinateInternal(viewCoordinate);
    }
    /**
   * Get the pixel for a coordinate.  This takes a coordinate in the map view
   * projection and returns the corresponding pixel.
   * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
   * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
   */ getPixelFromCoordinateInternal(coordinate) {
        const frameState = this.frameState_;
        if (!frameState) return null;
        return (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
    }
    /**
   * Get the map renderer.
   * @return {import("./renderer/Map.js").default|null} Renderer
   */ getRenderer() {
        return this.renderer_;
    }
    /**
   * Get the size of this map.
   * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
   * @observable
   * @api
   */ getSize() {
        return /** @type {import("./size.js").Size|undefined} */ this.get((0, $df2cc47d12323995$export$2e2bcd8739ae039).SIZE);
    }
    /**
   * Get the view associated with this map. A view manages properties such as
   * center and resolution.
   * @return {View} The view that controls this map.
   * @observable
   * @api
   */ getView() {
        return /** @type {View} */ this.get((0, $df2cc47d12323995$export$2e2bcd8739ae039).VIEW);
    }
    /**
   * Get the element that serves as the map viewport.
   * @return {HTMLElement} Viewport.
   * @api
   */ getViewport() {
        return this.viewport_;
    }
    /**
   * Get the element that serves as the container for overlays.  Elements added to
   * this container will let mousedown and touchstart events through to the map,
   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
   * events.
   * @return {!HTMLElement} The map's overlay container.
   */ getOverlayContainer() {
        return this.overlayContainer_;
    }
    /**
   * Get the element that serves as a container for overlays that don't allow
   * event propagation. Elements added to this container won't let mousedown and
   * touchstart events through to the map, so clicks and gestures on an overlay
   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
   * @return {!HTMLElement} The map's overlay container that stops events.
   */ getOverlayContainerStopEvent() {
        return this.overlayContainerStopEvent_;
    }
    /**
   * @return {!Document} The document where the map is displayed.
   */ getOwnerDocument() {
        const targetElement = this.getTargetElement();
        return targetElement ? targetElement.ownerDocument : document;
    }
    /**
   * @param {import("./Tile.js").default} tile Tile.
   * @param {string} tileSourceKey Tile source key.
   * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
   * @param {number} tileResolution Tile resolution.
   * @return {number} Tile priority.
   */ getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {
        return (0, $5b2a708996b8a43e$export$f08ad5eceeff5d45)(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);
    }
    /**
   * @param {UIEvent} browserEvent Browser event.
   * @param {string} [type] Type.
   */ handleBrowserEvent(browserEvent, type) {
        type = type || browserEvent.type;
        const mapBrowserEvent = new (0, $ea6dbcd957730cf1$export$2e2bcd8739ae039)(type, this, browserEvent);
        this.handleMapBrowserEvent(mapBrowserEvent);
    }
    /**
   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
   */ handleMapBrowserEvent(mapBrowserEvent) {
        if (!this.frameState_) // With no view defined, we cannot translate pixels into geographical
        // coordinates so interactions cannot be used.
        return;
        const originalEvent = /** @type {PointerEvent} */ mapBrowserEvent.originalEvent;
        const eventType = originalEvent.type;
        if (eventType === (0, $34ee59ecd2aa9258$export$2e2bcd8739ae039).POINTERDOWN || eventType === (0, $f13d17e3c190470c$export$2e2bcd8739ae039).WHEEL || eventType === (0, $f13d17e3c190470c$export$2e2bcd8739ae039).KEYDOWN) {
            const doc = this.getOwnerDocument();
            const rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;
            const target = /** @type {Node} */ originalEvent.target;
            if (// Abort if the target is a child of the container for elements whose events are not meant
            // to be handled by map interactions.
            this.overlayContainerStopEvent_.contains(target) || // Abort if the event target is a child of the container that is no longer in the page.
            // It's possible for the target to no longer be in the page if it has been removed in an
            // event listener, this might happen in a Control that recreates it's content based on
            // user interaction either manually or via a render in something like https://reactjs.org/
            !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) return;
        }
        mapBrowserEvent.frameState = this.frameState_;
        if (this.dispatchEvent(mapBrowserEvent) !== false) {
            const interactionsArray = this.getInteractions().getArray().slice();
            for(let i = interactionsArray.length - 1; i >= 0; i--){
                const interaction = interactionsArray[i];
                if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) continue;
                const cont = interaction.handleEvent(mapBrowserEvent);
                if (!cont || mapBrowserEvent.propagationStopped) break;
            }
        }
    }
    /**
   * @protected
   */ handlePostRender() {
        const frameState = this.frameState_;
        // Manage the tile queue
        // Image loads are expensive and a limited resource, so try to use them
        // efficiently:
        // * When the view is static we allow a large number of parallel tile loads
        //   to complete the frame as quickly as possible.
        // * When animating or interacting, image loads can cause janks, so we reduce
        //   the maximum number of loads per frame and limit the number of parallel
        //   tile loads to remain reactive to view changes and to reduce the chance of
        //   loading tiles that will quickly disappear from view.
        const tileQueue = this.tileQueue_;
        if (!tileQueue.isEmpty()) {
            let maxTotalLoading = this.maxTilesLoading_;
            let maxNewLoads = maxTotalLoading;
            if (frameState) {
                const hints = frameState.viewHints;
                if (hints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING] || hints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING]) {
                    const lowOnFrameBudget = Date.now() - frameState.time > 8;
                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;
                    maxNewLoads = lowOnFrameBudget ? 0 : 2;
                }
            }
            if (tileQueue.getTilesLoading() < maxTotalLoading) {
                tileQueue.reprioritize(); // FIXME only call if view has changed
                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
            }
        }
        if (frameState && this.renderer_ && !frameState.animate) {
            if (this.renderComplete_ === true) {
                if (this.hasListener((0, $4585eb82aab12670$export$2e2bcd8739ae039).RENDERCOMPLETE)) this.renderer_.dispatchRenderEvent((0, $4585eb82aab12670$export$2e2bcd8739ae039).RENDERCOMPLETE, frameState);
                if (this.loaded_ === false) {
                    this.loaded_ = true;
                    this.dispatchEvent(new (0, $08f6d6b264ecce61$export$2e2bcd8739ae039)((0, $e12633bf0699f390$export$2e2bcd8739ae039).LOADEND, this, frameState));
                }
            } else if (this.loaded_ === true) {
                this.loaded_ = false;
                this.dispatchEvent(new (0, $08f6d6b264ecce61$export$2e2bcd8739ae039)((0, $e12633bf0699f390$export$2e2bcd8739ae039).LOADSTART, this, frameState));
            }
        }
        const postRenderFunctions = this.postRenderFunctions_;
        for(let i = 0, ii = postRenderFunctions.length; i < ii; ++i)postRenderFunctions[i](this, frameState);
        postRenderFunctions.length = 0;
    }
    /**
   * @private
   */ handleSizeChanged_() {
        if (this.getView() && !this.getView().getAnimating()) this.getView().resolveConstraints(0);
        this.render();
    }
    /**
   * @private
   */ handleTargetChanged_() {
        if (this.mapBrowserEventHandler_) {
            for(let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i)(0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.targetChangeHandlerKeys_[i]);
            this.targetChangeHandlerKeys_ = null;
            this.viewport_.removeEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CONTEXTMENU, this.boundHandleBrowserEvent_);
            this.viewport_.removeEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).WHEEL, this.boundHandleBrowserEvent_);
            this.mapBrowserEventHandler_.dispose();
            this.mapBrowserEventHandler_ = null;
            (0, $1d92219e1eaa7bd2$export$1d0aa160432dfea5)(this.viewport_);
        }
        if (this.targetElement_) {
            this.resizeObserver_.unobserve(this.targetElement_);
            const rootNode = this.targetElement_.getRootNode();
            if (rootNode instanceof ShadowRoot) this.resizeObserver_.unobserve(rootNode.host);
            this.setSize(undefined);
        }
        // target may be undefined, null, a string or an Element.
        // If it's a string we convert it to an Element before proceeding.
        // If it's not now an Element we remove the viewport from the DOM.
        // If it's an Element we append the viewport element to it.
        const target = this.getTarget();
        const targetElement = typeof target === "string" ? document.getElementById(target) : target;
        this.targetElement_ = targetElement;
        if (!targetElement) {
            if (this.renderer_) {
                clearTimeout(this.postRenderTimeoutHandle_);
                this.postRenderTimeoutHandle_ = undefined;
                this.postRenderFunctions_.length = 0;
                this.renderer_.dispose();
                this.renderer_ = null;
            }
            if (this.animationDelayKey_) {
                cancelAnimationFrame(this.animationDelayKey_);
                this.animationDelayKey_ = undefined;
            }
        } else {
            targetElement.appendChild(this.viewport_);
            if (!this.renderer_) this.renderer_ = new (0, $c0a5b9d051148e52$export$2e2bcd8739ae039)(this);
            this.mapBrowserEventHandler_ = new (0, $d81b48bf28c2aa31$export$2e2bcd8739ae039)(this, this.moveTolerance_);
            for(const key in 0, $ca08bc7d1400c90f$export$2e2bcd8739ae039)this.mapBrowserEventHandler_.addEventListener((0, $ca08bc7d1400c90f$export$2e2bcd8739ae039)[key], this.handleMapBrowserEvent.bind(this));
            this.viewport_.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CONTEXTMENU, this.boundHandleBrowserEvent_, false);
            this.viewport_.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).WHEEL, this.boundHandleBrowserEvent_, (0, $253e11c6a01eb5bc$export$f751ce96c6c4e4fc) ? {
                passive: false
            } : false);
            const keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;
            this.targetChangeHandlerKeys_ = [
                (0, $776f68d2a754760b$export$63174c828edd6ff8)(keyboardEventTarget, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).KEYDOWN, this.handleBrowserEvent, this),
                (0, $776f68d2a754760b$export$63174c828edd6ff8)(keyboardEventTarget, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).KEYPRESS, this.handleBrowserEvent, this)
            ];
            const rootNode = targetElement.getRootNode();
            if (rootNode instanceof ShadowRoot) this.resizeObserver_.observe(rootNode.host);
            this.resizeObserver_.observe(targetElement);
        }
        this.updateSize();
    // updateSize calls setSize, so no need to call this.render
    // ourselves here.
    }
    /**
   * @private
   */ handleTileChange_() {
        this.render();
    }
    /**
   * @private
   */ handleViewPropertyChanged_() {
        this.render();
    }
    /**
   * @private
   */ handleViewChanged_() {
        if (this.viewPropertyListenerKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.viewPropertyListenerKey_);
            this.viewPropertyListenerKey_ = null;
        }
        if (this.viewChangeListenerKey_) {
            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(this.viewChangeListenerKey_);
            this.viewChangeListenerKey_ = null;
        }
        const view = this.getView();
        if (view) {
            this.updateViewportSize_();
            this.viewPropertyListenerKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(view, (0, $a6660a6615220f8c$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleViewPropertyChanged_, this);
            this.viewChangeListenerKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(view, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.handleViewPropertyChanged_, this);
            view.resolveConstraints(0);
        }
        this.render();
    }
    /**
   * @private
   */ handleLayerGroupChanged_() {
        if (this.layerGroupPropertyListenerKeys_) {
            this.layerGroupPropertyListenerKeys_.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
            this.layerGroupPropertyListenerKeys_ = null;
        }
        const layerGroup = this.getLayerGroup();
        if (layerGroup) {
            this.handleLayerAdd_(new (0, $3c2b2bf26c3e3155$export$2f5ff21d758d25a7)("addlayer", layerGroup));
            this.layerGroupPropertyListenerKeys_ = [
                (0, $776f68d2a754760b$export$63174c828edd6ff8)(layerGroup, (0, $a6660a6615220f8c$export$2e2bcd8739ae039).PROPERTYCHANGE, this.render, this),
                (0, $776f68d2a754760b$export$63174c828edd6ff8)(layerGroup, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.render, this),
                (0, $776f68d2a754760b$export$63174c828edd6ff8)(layerGroup, "addlayer", this.handleLayerAdd_, this),
                (0, $776f68d2a754760b$export$63174c828edd6ff8)(layerGroup, "removelayer", this.handleLayerRemove_, this)
            ];
        }
        this.render();
    }
    /**
   * @return {boolean} Is rendered.
   */ isRendered() {
        return !!this.frameState_;
    }
    /**
   * @private
   */ animationDelay_() {
        this.animationDelayKey_ = undefined;
        this.renderFrame_(Date.now());
    }
    /**
   * Requests an immediate render in a synchronous manner.
   * @api
   */ renderSync() {
        if (this.animationDelayKey_) cancelAnimationFrame(this.animationDelayKey_);
        this.animationDelay_();
    }
    /**
   * Redraws all text after new fonts have loaded
   */ redrawText() {
        const layerStates = this.getLayerGroup().getLayerStatesArray();
        for(let i = 0, ii = layerStates.length; i < ii; ++i){
            const layer = layerStates[i].layer;
            if (layer.hasRenderer()) layer.getRenderer().handleFontsChanged();
        }
    }
    /**
   * Request a map rendering (at the next animation frame).
   * @api
   */ render() {
        if (this.renderer_ && this.animationDelayKey_ === undefined) this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
    }
    /**
   * This method is meant to be called in a layer's `prerender` listener. It causes all collected
   * declutter items to be decluttered and rendered on the map immediately. This is useful for
   * layers that need to appear entirely above the decluttered items of layers lower in the layer
   * stack.
   * @api
   */ flushDeclutterItems() {
        const frameState = this.frameState_;
        if (!frameState) return;
        this.renderer_.flushDeclutterItems(frameState);
    }
    /**
   * Remove the given control from the map.
   * @param {import("./control/Control.js").default} control Control.
   * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
   *     if the control was not found).
   * @api
   */ removeControl(control) {
        return this.getControls().remove(control);
    }
    /**
   * Remove the given interaction from the map.
   * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
   * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
   *     undefined if the interaction was not found).
   * @api
   */ removeInteraction(interaction) {
        return this.getInteractions().remove(interaction);
    }
    /**
   * Removes the given layer from the map.
   * @param {import("./layer/Base.js").default} layer Layer.
   * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
   *     layer was not found).
   * @api
   */ removeLayer(layer) {
        const layers = this.getLayerGroup().getLayers();
        return layers.remove(layer);
    }
    /**
   * @param {import("./layer/Group.js").GroupEvent} event The layer remove event.
   * @private
   */ handleLayerRemove_(event) {
        $905d64a7b91bb632$var$removeLayerMapProperty(event.layer);
    }
    /**
   * Remove the given overlay from the map.
   * @param {import("./Overlay.js").default} overlay Overlay.
   * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
   *     if the overlay was not found).
   * @api
   */ removeOverlay(overlay) {
        return this.getOverlays().remove(overlay);
    }
    /**
   * @param {number} time Time.
   * @private
   */ renderFrame_(time) {
        const size = this.getSize();
        const view = this.getView();
        const previousFrameState = this.frameState_;
        /** @type {?FrameState} */ let frameState = null;
        if (size !== undefined && (0, $3db00eb0a4716cab$export$622c471beb1693c7)(size) && view && view.isDef()) {
            const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
            const viewState = view.getState();
            frameState = {
                animate: false,
                coordinateToPixelTransform: this.coordinateToPixelTransform_,
                declutterTree: null,
                extent: (0, $84be800ca44e672c$export$13ba650faf8308)(viewState.center, viewState.resolution, viewState.rotation, size),
                index: this.frameIndex_++,
                layerIndex: 0,
                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
                pixelRatio: this.pixelRatio_,
                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                postRenderFunctions: [],
                size: size,
                tileQueue: this.tileQueue_,
                time: time,
                usedTiles: {},
                viewState: viewState,
                viewHints: viewHints,
                wantedTiles: {},
                mapId: (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(this),
                renderTargets: {}
            };
            if (viewState.nextCenter && viewState.nextResolution) {
                const rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;
                frameState.nextExtent = (0, $84be800ca44e672c$export$13ba650faf8308)(viewState.nextCenter, viewState.nextResolution, rotation, size);
            }
        }
        this.frameState_ = frameState;
        this.renderer_.renderFrame(frameState);
        if (frameState) {
            if (frameState.animate) this.render();
            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
            if (previousFrameState) {
                const moveStart = !this.previousExtent_ || !(0, $84be800ca44e672c$export$dd1bc94b04021eeb)(this.previousExtent_) && !(0, $84be800ca44e672c$export$e9bab7fafb253603)(frameState.extent, this.previousExtent_);
                if (moveStart) {
                    this.dispatchEvent(new (0, $08f6d6b264ecce61$export$2e2bcd8739ae039)((0, $e12633bf0699f390$export$2e2bcd8739ae039).MOVESTART, this, previousFrameState));
                    this.previousExtent_ = (0, $84be800ca44e672c$export$3e2152b047719fa1)(this.previousExtent_);
                }
            }
            const idle = this.previousExtent_ && !frameState.viewHints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING] && !frameState.viewHints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING] && !(0, $84be800ca44e672c$export$e9bab7fafb253603)(frameState.extent, this.previousExtent_);
            if (idle) {
                this.dispatchEvent(new (0, $08f6d6b264ecce61$export$2e2bcd8739ae039)((0, $e12633bf0699f390$export$2e2bcd8739ae039).MOVEEND, this, frameState));
                (0, $84be800ca44e672c$export$9cd59f9826255e47)(frameState.extent, this.previousExtent_);
            }
        }
        this.dispatchEvent(new (0, $08f6d6b264ecce61$export$2e2bcd8739ae039)((0, $e12633bf0699f390$export$2e2bcd8739ae039).POSTRENDER, this, frameState));
        this.renderComplete_ = this.hasListener((0, $e12633bf0699f390$export$2e2bcd8739ae039).LOADSTART) || this.hasListener((0, $e12633bf0699f390$export$2e2bcd8739ae039).LOADEND) || this.hasListener((0, $4585eb82aab12670$export$2e2bcd8739ae039).RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;
        if (!this.postRenderTimeoutHandle_) this.postRenderTimeoutHandle_ = setTimeout(()=>{
            this.postRenderTimeoutHandle_ = undefined;
            this.handlePostRender();
        }, 0);
    }
    /**
   * Sets the layergroup of this map.
   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
   * @observable
   * @api
   */ setLayerGroup(layerGroup) {
        const oldLayerGroup = this.getLayerGroup();
        if (oldLayerGroup) this.handleLayerRemove_(new (0, $3c2b2bf26c3e3155$export$2f5ff21d758d25a7)("removelayer", oldLayerGroup));
        this.set((0, $df2cc47d12323995$export$2e2bcd8739ae039).LAYERGROUP, layerGroup);
    }
    /**
   * Set the size of this map.
   * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
   * @observable
   * @api
   */ setSize(size) {
        this.set((0, $df2cc47d12323995$export$2e2bcd8739ae039).SIZE, size);
    }
    /**
   * Set the target element to render this map into.
   * @param {HTMLElement|string} [target] The Element or id of the Element
   *     that the map is rendered in.
   * @observable
   * @api
   */ setTarget(target) {
        this.set((0, $df2cc47d12323995$export$2e2bcd8739ae039).TARGET, target);
    }
    /**
   * Set the view for this map.
   * @param {View|Promise<import("./View.js").ViewOptions>} view The view that controls this map.
   * It is also possible to pass a promise that resolves to options for constructing a view.  This
   * alternative allows view properties to be resolved by sources or other components that load
   * view-related metadata.
   * @observable
   * @api
   */ setView(view) {
        if (!view || view instanceof (0, $5c065e8fdff88e40$export$2e2bcd8739ae039)) {
            this.set((0, $df2cc47d12323995$export$2e2bcd8739ae039).VIEW, view);
            return;
        }
        this.set((0, $df2cc47d12323995$export$2e2bcd8739ae039).VIEW, new (0, $5c065e8fdff88e40$export$2e2bcd8739ae039)());
        const map = this;
        view.then(function(viewOptions) {
            map.setView(new (0, $5c065e8fdff88e40$export$2e2bcd8739ae039)(viewOptions));
        });
    }
    /**
   * Force a recalculation of the map viewport size.  This should be called when
   * third-party code changes the size of the map viewport.
   * @api
   */ updateSize() {
        const targetElement = this.getTargetElement();
        let size = undefined;
        if (targetElement) {
            const computedStyle = getComputedStyle(targetElement);
            const width = targetElement.offsetWidth - parseFloat(computedStyle["borderLeftWidth"]) - parseFloat(computedStyle["paddingLeft"]) - parseFloat(computedStyle["paddingRight"]) - parseFloat(computedStyle["borderRightWidth"]);
            const height = targetElement.offsetHeight - parseFloat(computedStyle["borderTopWidth"]) - parseFloat(computedStyle["paddingTop"]) - parseFloat(computedStyle["paddingBottom"]) - parseFloat(computedStyle["borderBottomWidth"]);
            if (!isNaN(width) && !isNaN(height)) {
                size = [
                    width,
                    height
                ];
                if (!(0, $3db00eb0a4716cab$export$622c471beb1693c7)(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) (0, $46b514704f775400$export$c106dd0671a0fc2d)("No map visible because the map container's width or height are 0.");
            }
        }
        const oldSize = this.getSize();
        if (size && (!oldSize || !(0, $69c1cc8ae30f997f$export$e9bab7fafb253603)(size, oldSize))) {
            this.setSize(size);
            this.updateViewportSize_();
        }
    }
    /**
   * Recomputes the viewport size and save it on the view object (if any)
   * @private
   */ updateViewportSize_() {
        const view = this.getView();
        if (view) {
            let size = undefined;
            const computedStyle = getComputedStyle(this.viewport_);
            if (computedStyle.width && computedStyle.height) size = [
                parseInt(computedStyle.width, 10),
                parseInt(computedStyle.height, 10)
            ];
            view.setViewportSize(size);
        }
    }
}
/**
 * @param {MapOptions} options Map options.
 * @return {MapOptionsInternal} Internal map options.
 */ function $905d64a7b91bb632$var$createOptionsInternal(options) {
    /**
   * @type {HTMLElement|Document}
   */ let keyboardEventTarget = null;
    if (options.keyboardEventTarget !== undefined) keyboardEventTarget = typeof options.keyboardEventTarget === "string" ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;
    /**
   * @type {Object<string, *>}
   */ const values = {};
    const layerGroup = options.layers && typeof /** @type {?} */ options.layers.getLayers === "function" ? /** @type {LayerGroup} */ options.layers : new (0, $3c2b2bf26c3e3155$export$2e2bcd8739ae039)({
        layers: /** @type {Collection<import("./layer/Base.js").default>|Array<import("./layer/Base.js").default>} */ options.layers
    });
    values[(0, $df2cc47d12323995$export$2e2bcd8739ae039).LAYERGROUP] = layerGroup;
    values[(0, $df2cc47d12323995$export$2e2bcd8739ae039).TARGET] = options.target;
    values[(0, $df2cc47d12323995$export$2e2bcd8739ae039).VIEW] = options.view instanceof (0, $5c065e8fdff88e40$export$2e2bcd8739ae039) ? options.view : new (0, $5c065e8fdff88e40$export$2e2bcd8739ae039)();
    /** @type {Collection<import("./control/Control.js").default>} */ let controls;
    if (options.controls !== undefined) {
        if (Array.isArray(options.controls)) controls = new (0, $6ba3969272323605$export$2e2bcd8739ae039)(options.controls.slice());
        else {
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof /** @type {?} */ options.controls.getArray === "function", 47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
            controls = options.controls;
        }
    }
    /** @type {Collection<import("./interaction/Interaction").default>} */ let interactions;
    if (options.interactions !== undefined) {
        if (Array.isArray(options.interactions)) interactions = new (0, $6ba3969272323605$export$2e2bcd8739ae039)(options.interactions.slice());
        else {
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof /** @type {?} */ options.interactions.getArray === "function", 48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
            interactions = options.interactions;
        }
    }
    /** @type {Collection<import("./Overlay.js").default>} */ let overlays;
    if (options.overlays !== undefined) {
        if (Array.isArray(options.overlays)) overlays = new (0, $6ba3969272323605$export$2e2bcd8739ae039)(options.overlays.slice());
        else {
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof /** @type {?} */ options.overlays.getArray === "function", 49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
            overlays = options.overlays;
        }
    } else overlays = new (0, $6ba3969272323605$export$2e2bcd8739ae039)();
    return {
        controls: controls,
        interactions: interactions,
        keyboardEventTarget: keyboardEventTarget,
        overlays: overlays,
        values: values
    };
}
var $905d64a7b91bb632$export$2e2bcd8739ae039 = $905d64a7b91bb632$var$Map;


var $cf6a3c38f3310fd7$exports = {};
$cf6a3c38f3310fd7$exports = ":root, :host {\n  --ol-background-color: white;\n  --ol-accent-background-color: #f5f5f5;\n  --ol-subtle-background-color: #80808040;\n  --ol-partial-background-color: #ffffffbf;\n  --ol-foreground-color: #333;\n  --ol-subtle-foreground-color: #666;\n  --ol-brand-color: #0af;\n}\n\n.ol-box {\n  box-sizing: border-box;\n  border: 1.5px solid var(--ol-background-color);\n  background-color: var(--ol-partial-background-color);\n  border-radius: 2px;\n}\n\n.ol-mouse-position {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n}\n\n.ol-scale-line {\n  background: var(--ol-partial-background-color);\n  border-radius: 4px;\n  padding: 2px;\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n}\n\n.ol-scale-line-inner {\n  border: 1px solid var(--ol-subtle-foreground-color);\n  color: var(--ol-foreground-color);\n  text-align: center;\n  will-change: contents, width;\n  border-top: none;\n  margin: 1px;\n  font-size: 10px;\n  transition: all .25s;\n}\n\n.ol-scale-bar {\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n}\n\n.ol-scale-bar-inner {\n  display: flex;\n}\n\n.ol-scale-step-marker {\n  background-color: var(--ol-foreground-color);\n  float: right;\n  z-index: 10;\n  width: 1px;\n  height: 15px;\n}\n\n.ol-scale-step-text {\n  z-index: 11;\n  color: var(--ol-foreground-color);\n  text-shadow: -1.5px 0 var(--ol-partial-background-color), 0 1.5px var(--ol-partial-background-color), 1.5px 0 var(--ol-partial-background-color), 0 -1.5px var(--ol-partial-background-color);\n  font-size: 10px;\n  position: absolute;\n  bottom: -5px;\n}\n\n.ol-scale-text {\n  text-align: center;\n  color: var(--ol-foreground-color);\n  text-shadow: -1.5px 0 var(--ol-partial-background-color), 0 1.5px var(--ol-partial-background-color), 1.5px 0 var(--ol-partial-background-color), 0 -1.5px var(--ol-partial-background-color);\n  font-size: 12px;\n  position: absolute;\n  bottom: 25px;\n}\n\n.ol-scale-singlebar {\n  z-index: 9;\n  box-sizing: border-box;\n  border: 1px solid var(--ol-foreground-color);\n  height: 10px;\n  position: relative;\n}\n\n.ol-scale-singlebar-even {\n  background-color: var(--ol-subtle-foreground-color);\n}\n\n.ol-scale-singlebar-odd {\n  background-color: var(--ol-background-color);\n}\n\n.ol-unsupported {\n  display: none;\n}\n\n.ol-viewport, .ol-unselectable {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.ol-viewport canvas {\n  all: unset;\n}\n\n.ol-viewport {\n  touch-action: none;\n}\n\n.ol-selectable {\n  -webkit-touch-callout: default;\n  -webkit-user-select: text;\n  user-select: text;\n}\n\n.ol-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: -moz-grabbing;\n  cursor: grabbing;\n}\n\n.ol-grab {\n  cursor: move;\n  cursor: -webkit-grab;\n  cursor: -moz-grab;\n  cursor: grab;\n}\n\n.ol-control {\n  background-color: var(--ol-subtle-background-color);\n  border-radius: 4px;\n  position: absolute;\n}\n\n.ol-zoom {\n  top: .5em;\n  left: .5em;\n}\n\n.ol-rotate {\n  transition: opacity .25s linear, visibility linear;\n  top: .5em;\n  right: .5em;\n}\n\n.ol-rotate.ol-hidden {\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity .25s linear, visibility 0s linear .25s;\n}\n\n.ol-zoom-extent {\n  top: 4.643em;\n  left: .5em;\n}\n\n.ol-full-screen {\n  top: .5em;\n  right: .5em;\n}\n\n.ol-control button {\n  color: var(--ol-subtle-foreground-color);\n  font-weight: bold;\n  font-size: inherit;\n  text-align: center;\n  background-color: var(--ol-background-color);\n  border: none;\n  border-radius: 2px;\n  width: 1.375em;\n  height: 1.375em;\n  margin: 1px;\n  padding: 0;\n  line-height: .4em;\n  text-decoration: none;\n  display: block;\n}\n\n.ol-control button::-moz-focus-inner {\n  border: none;\n  padding: 0;\n}\n\n.ol-zoom-extent button {\n  line-height: 1.4em;\n}\n\n.ol-compass {\n  will-change: transform;\n  font-weight: normal;\n  display: block;\n}\n\n.ol-touch .ol-control button {\n  font-size: 1.5em;\n}\n\n.ol-touch .ol-zoom-extent {\n  top: 5.5em;\n}\n\n.ol-control button:hover, .ol-control button:focus {\n  outline: 1px solid var(--ol-subtle-foreground-color);\n  color: var(--ol-foreground-color);\n  text-decoration: none;\n}\n\n.ol-zoom .ol-zoom-in {\n  border-radius: 2px 2px 0 0;\n}\n\n.ol-zoom .ol-zoom-out {\n  border-radius: 0 0 2px 2px;\n}\n\n.ol-attribution {\n  text-align: right;\n  flex-flow: row-reverse;\n  align-items: center;\n  max-width: calc(100% - 1.3em);\n  display: flex;\n  bottom: .5em;\n  right: .5em;\n}\n\n.ol-attribution a {\n  color: var(--ol-subtle-foreground-color);\n  text-decoration: none;\n}\n\n.ol-attribution ul {\n  color: var(--ol-foreground-color);\n  text-shadow: 0 0 2px var(--ol-background-color);\n  margin: 0;\n  padding: 1px .5em;\n  font-size: 12px;\n}\n\n.ol-attribution li {\n  list-style: none;\n  display: inline;\n}\n\n.ol-attribution li:not(:last-child):after {\n  content: \" \";\n}\n\n.ol-attribution img {\n  max-width: inherit;\n  vertical-align: middle;\n  max-height: 2em;\n}\n\n.ol-attribution button {\n  flex-shrink: 0;\n}\n\n.ol-attribution.ol-collapsed ul {\n  display: none;\n}\n\n.ol-attribution:not(.ol-collapsed) {\n  background: var(--ol-partial-background-color);\n}\n\n.ol-attribution.ol-uncollapsible {\n  border-radius: 4px 0 0;\n  bottom: 0;\n  right: 0;\n}\n\n.ol-attribution.ol-uncollapsible img {\n  max-height: 1.6em;\n  margin-top: -.2em;\n}\n\n.ol-attribution.ol-uncollapsible button {\n  display: none;\n}\n\n.ol-zoomslider {\n  height: 200px;\n  top: 4.5em;\n  left: .5em;\n}\n\n.ol-zoomslider button {\n  height: 10px;\n  position: relative;\n}\n\n.ol-touch .ol-zoomslider {\n  top: 5.5em;\n}\n\n.ol-overviewmap {\n  bottom: .5em;\n  left: .5em;\n}\n\n.ol-overviewmap.ol-uncollapsible {\n  border-radius: 0 4px 0 0;\n  bottom: 0;\n  left: 0;\n}\n\n.ol-overviewmap .ol-overviewmap-map, .ol-overviewmap button {\n  display: block;\n}\n\n.ol-overviewmap .ol-overviewmap-map {\n  border: 1px solid var(--ol-subtle-foreground-color);\n  width: 150px;\n  height: 150px;\n}\n\n.ol-overviewmap:not(.ol-collapsed) button {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n}\n\n.ol-overviewmap.ol-collapsed .ol-overviewmap-map, .ol-overviewmap.ol-uncollapsible button {\n  display: none;\n}\n\n.ol-overviewmap:not(.ol-collapsed) {\n  background: var(--ol-subtle-background-color);\n}\n\n.ol-overviewmap-box {\n  border: 1.5px dotted var(--ol-subtle-foreground-color);\n}\n\n.ol-overviewmap .ol-overviewmap-box:hover {\n  cursor: move;\n}\n";




/**
 * @module ol/layer/Image
 */ /**
 * @module ol/layer/BaseImage
 */ 
/**
 * @template {import("../source/Image.js").default} ImageSourceType
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link import("../Map.js").default#addLayer map.addLayer()}.
 * @property {ImageSourceType} [source] Source for this layer.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @classdesc
 * Server-rendered images that are available for arbitrary extents and
 * resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Image.js").default} ImageSourceType
 * @template {import("../renderer/Layer.js").default} RendererType
 * @extends {Layer<ImageSourceType, RendererType>}
 * @api
 */ class $436dc64db207ef62$var$BaseImageLayer extends (0, $14019fcc7ba24fd5$export$2e2bcd8739ae039) {
    /**
   * @param {Options<ImageSourceType>} [options] Layer options.
   */ constructor(options){
        options = options ? options : {};
        super(options);
    }
}
var $436dc64db207ef62$export$2e2bcd8739ae039 = $436dc64db207ef62$var$BaseImageLayer;


/**
 * @module ol/renderer/canvas/ImageLayer
 */ /**
 * @module ol/renderer/canvas/Layer
 */ /**
 * @module ol/renderer/Layer
 */ 
/**
 * @module ol/ImageState
 */ /**
 * @enum {number}
 */ var $d5d27ccbbbef5bf5$export$2e2bcd8739ae039 = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    ERROR: 3,
    EMPTY: 4
};




/**
 * @template {import("../layer/Layer.js").default} LayerType
 */ class $c9deccad5a9c4bd6$var$LayerRenderer extends (0, $0a5ecae53e50aa57$export$2e2bcd8739ae039) {
    /**
   * @param {LayerType} layer Layer.
   */ constructor(layer){
        super();
        /**
     * The renderer is initialized and ready to render.
     * @type {boolean}
     */ this.ready = true;
        /** @private */ this.boundHandleImageChange_ = this.handleImageChange_.bind(this);
        /**
     * @protected
     * @type {LayerType}
     */ this.layer_ = layer;
        /**
     * @type {import("../render/canvas/ExecutorGroup").default}
     */ this.declutterExecutorGroup = null;
    }
    /**
   * Asynchronous layer level hit detection.
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
   * an array of features.
   */ getFeatures(pixel) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   */ getData(pixel) {
        return null;
    }
    /**
   * Determine whether render should be called.
   * @abstract
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */ prepareFrame(frameState) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Render the layer.
   * @abstract
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement|null} target Target that may be used to render content to.
   * @return {HTMLElement|null} The rendered element.
   */ renderFrame(frameState, target) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
   * @param {number} zoom Zoom level.
   * @param {import("../Tile.js").default} tile Tile.
   * @return {boolean|void} If `false`, the tile will not be considered loaded.
   */ loadedTileCallback(tiles, zoom, tile) {
        if (!tiles[zoom]) tiles[zoom] = {};
        tiles[zoom][tile.tileCoord.toString()] = tile;
        return undefined;
    }
    /**
   * Create a function that adds loaded tiles to the tile lookup.
   * @param {import("../source/Tile.js").default} source Tile source.
   * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
   * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
   * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
   *     called with a zoom level and a tile range to add loaded tiles to the lookup.
   * @protected
   */ createLoadedTileFinder(source, projection, tiles) {
        return(/**
       * @param {number} zoom Zoom level.
       * @param {import("../TileRange.js").default} tileRange Tile range.
       * @return {boolean} The tile range is fully loaded.
       */ (zoom, tileRange)=>{
            const callback = this.loadedTileCallback.bind(this, tiles, zoom);
            return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        });
    }
    /**
   * @abstract
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
   * @return {T|undefined} Callback result.
   * @template T
   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {
        return undefined;
    }
    /**
   * @return {LayerType} Layer.
   */ getLayer() {
        return this.layer_;
    }
    /**
   * Perform action necessary to get the layer rendered after new fonts have loaded
   * @abstract
   */ handleFontsChanged() {}
    /**
   * Handle changes in image state.
   * @param {import("../events/Event.js").default} event Image change event.
   * @private
   */ handleImageChange_(event) {
        const image = /** @type {import("../Image.js").default} */ event.target;
        if (image.getState() === (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED || image.getState() === (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR) this.renderIfReadyAndVisible();
    }
    /**
   * Load the image if not already loaded, and register the image change
   * listener if needed.
   * @param {import("../ImageBase.js").default} image Image.
   * @return {boolean} `true` if the image is already loaded, `false` otherwise.
   * @protected
   */ loadImage(image) {
        let imageState = image.getState();
        if (imageState != (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED && imageState != (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR) image.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.boundHandleImageChange_);
        if (imageState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE) {
            image.load();
            imageState = image.getState();
        }
        return imageState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED;
    }
    /**
   * @protected
   */ renderIfReadyAndVisible() {
        const layer = this.getLayer();
        if (layer && layer.getVisible() && layer.getSourceState() === "ready") layer.changed();
    }
    /**
   * Clean up.
   */ disposeInternal() {
        delete this.layer_;
        super.disposeInternal();
    }
}
var $c9deccad5a9c4bd6$export$2e2bcd8739ae039 = $c9deccad5a9c4bd6$var$LayerRenderer;









const $df04b1ef9f892809$export$a166f0857c555517 = [];
/**
 * @type {CanvasRenderingContext2D}
 */ let $df04b1ef9f892809$var$pixelContext = null;
function $df04b1ef9f892809$var$createPixelContext() {
    $df04b1ef9f892809$var$pixelContext = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(1, 1, undefined, {
        willReadFrequently: true
    });
}
/**
 * @abstract
 * @template {import("../../layer/Layer.js").default} LayerType
 * @extends {LayerRenderer<LayerType>}
 */ class $df04b1ef9f892809$var$CanvasLayerRenderer extends (0, $c9deccad5a9c4bd6$export$2e2bcd8739ae039) {
    /**
   * @param {LayerType} layer Layer.
   */ constructor(layer){
        super(layer);
        /**
     * @protected
     * @type {HTMLElement}
     */ this.container = null;
        /**
     * @protected
     * @type {number}
     */ this.renderedResolution;
        /**
     * A temporary transform.  The values in this transform should only be used in a
     * function that sets the values.
     * @protected
     * @type {import("../../transform.js").Transform}
     */ this.tempTransform = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
        /**
     * The transform for rendered pixels to viewport CSS pixels.  This transform must
     * be set when rendering a frame and may be used by other functions after rendering.
     * @protected
     * @type {import("../../transform.js").Transform}
     */ this.pixelTransform = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
        /**
     * The transform for viewport CSS pixels to rendered pixels.  This transform must
     * be set when rendering a frame and may be used by other functions after rendering.
     * @protected
     * @type {import("../../transform.js").Transform}
     */ this.inversePixelTransform = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
        /**
     * @type {CanvasRenderingContext2D}
     */ this.context = null;
        /**
     * @type {boolean}
     */ this.containerReused = false;
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.pixelContext_ = null;
        /**
     * @protected
     * @type {import("../../Map.js").FrameState|null}
     */ this.frameState = null;
    }
    /**
   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
   * @param {number} col The column index.
   * @param {number} row The row index.
   * @return {Uint8ClampedArray|null} The image data.
   */ getImageData(image, col, row) {
        if (!$df04b1ef9f892809$var$pixelContext) $df04b1ef9f892809$var$createPixelContext();
        $df04b1ef9f892809$var$pixelContext.clearRect(0, 0, 1, 1);
        let data;
        try {
            $df04b1ef9f892809$var$pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);
            data = $df04b1ef9f892809$var$pixelContext.getImageData(0, 0, 1, 1).data;
        } catch (err) {
            $df04b1ef9f892809$var$pixelContext = null;
            return null;
        }
        return data;
    }
    /**
   * @param {import('../../Map.js').FrameState} frameState Frame state.
   * @return {string} Background color.
   */ getBackground(frameState) {
        const layer = this.getLayer();
        let background = layer.getBackground();
        if (typeof background === "function") background = background(frameState.viewState.resolution);
        return background || undefined;
    }
    /**
   * Get a rendering container from an existing target, if compatible.
   * @param {HTMLElement} target Potential render target.
   * @param {string} transform CSS Transform.
   * @param {string} [backgroundColor] Background color.
   */ useContainer(target, transform, backgroundColor) {
        const layerClassName = this.getLayer().getClassName();
        let container, context;
        if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && (0, $69c1cc8ae30f997f$export$e9bab7fafb253603)((0, $d32b89243a698e8b$export$75093a47a9fa838d)(target.style.backgroundColor), (0, $d32b89243a698e8b$export$75093a47a9fa838d)(backgroundColor)))) {
            const canvas = target.firstElementChild;
            if (canvas instanceof HTMLCanvasElement) context = canvas.getContext("2d");
        }
        if (context && context.canvas.style.transform === transform) {
            // Container of the previous layer renderer can be used.
            this.container = target;
            this.context = context;
            this.containerReused = true;
        } else if (this.containerReused) {
            // Previously reused container cannot be used any more.
            this.container = null;
            this.context = null;
            this.containerReused = false;
        } else if (this.container) this.container.style.backgroundColor = null;
        if (!this.container) {
            container = document.createElement("div");
            container.className = layerClassName;
            let style = container.style;
            style.position = "absolute";
            style.width = "100%";
            style.height = "100%";
            context = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)();
            const canvas = context.canvas;
            container.appendChild(canvas);
            style = canvas.style;
            style.position = "absolute";
            style.left = "0";
            style.transformOrigin = "top left";
            this.container = container;
            this.context = context;
        }
        if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) this.container.style.backgroundColor = backgroundColor;
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../extent.js").Extent} extent Clip extent.
   * @protected
   */ clipUnrotated(context, frameState, extent) {
        const topLeft = (0, $84be800ca44e672c$export$cb1538b07e6964ff)(extent);
        const topRight = (0, $84be800ca44e672c$export$b84fa077c8b05295)(extent);
        const bottomRight = (0, $84be800ca44e672c$export$e77c1cf70445e168)(extent);
        const bottomLeft = (0, $84be800ca44e672c$export$8d09f5e2e1bf560d)(extent);
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topLeft);
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topRight);
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomRight);
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomLeft);
        const inverted = this.inversePixelTransform;
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(inverted, topLeft);
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(inverted, topRight);
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(inverted, bottomRight);
        (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(inverted, bottomLeft);
        context.save();
        context.beginPath();
        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
        context.clip();
    }
    /**
   * @param {import("../../render/EventType.js").default} type Event type.
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @private
   */ dispatchRenderEvent_(type, context, frameState) {
        const layer = this.getLayer();
        if (layer.hasListener(type)) {
            const event = new (0, $b9deb9d8bf8584f6$export$2e2bcd8739ae039)(type, this.inversePixelTransform, frameState, context);
            layer.dispatchEvent(event);
        }
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @protected
   */ preRender(context, frameState) {
        this.frameState = frameState;
        this.dispatchRenderEvent_((0, $4585eb82aab12670$export$2e2bcd8739ae039).PRERENDER, context, frameState);
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @protected
   */ postRender(context, frameState) {
        this.dispatchRenderEvent_((0, $4585eb82aab12670$export$2e2bcd8739ae039).POSTRENDER, context, frameState);
    }
    /**
   * Creates a transform for rendering to an element that will be rotated after rendering.
   * @param {import("../../coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} width Width of the rendered element (in pixels).
   * @param {number} height Height of the rendered element (in pixels).
   * @param {number} offsetX Offset on the x-axis in view coordinates.
   * @protected
   * @return {!import("../../transform.js").Transform} Transform.
   */ getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {
        const dx1 = width / 2;
        const dy1 = height / 2;
        const sx = pixelRatio / resolution;
        const sy = -sx;
        const dx2 = -center[0] + offsetX;
        const dy2 = -center[1];
        return (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);
    }
    /**
   * Clean up.
   */ disposeInternal() {
        delete this.frameState;
        super.disposeInternal();
    }
}
var $df04b1ef9f892809$export$2e2bcd8739ae039 = $df04b1ef9f892809$var$CanvasLayerRenderer;







/**
 * @classdesc
 * Canvas renderer for image layers.
 * @api
 */ class $d8842e30be13b110$var$CanvasImageLayerRenderer extends (0, $df04b1ef9f892809$export$2e2bcd8739ae039) {
    /**
   * @param {import("../../layer/Image.js").default} imageLayer Image layer.
   */ constructor(imageLayer){
        super(imageLayer);
        /**
     * @protected
     * @type {?import("../../ImageBase.js").default}
     */ this.image_ = null;
    }
    /**
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   */ getImage() {
        return this.image_ ? this.image_.getImage() : null;
    }
    /**
   * Determine whether render should be called.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */ prepareFrame(frameState) {
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        const pixelRatio = frameState.pixelRatio;
        const viewState = frameState.viewState;
        const viewResolution = viewState.resolution;
        const imageSource = this.getLayer().getSource();
        const hints = frameState.viewHints;
        let renderedExtent = frameState.extent;
        if (layerState.extent !== undefined) renderedExtent = (0, $84be800ca44e672c$export$72209efa88586d42)(renderedExtent, (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(layerState.extent, viewState.projection));
        if (!hints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING] && !hints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING] && !(0, $84be800ca44e672c$export$dd1bc94b04021eeb)(renderedExtent)) {
            if (imageSource) {
                const projection = viewState.projection;
                const image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);
                if (image) {
                    if (this.loadImage(image)) this.image_ = image;
                    else if (image.getState() === (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).EMPTY) this.image_ = null;
                }
            } else this.image_ = null;
        }
        return !!this.image_;
    }
    /**
   * @param {import("../../pixel.js").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray} Data at the pixel location.
   */ getData(pixel) {
        const frameState = this.frameState;
        if (!frameState) return null;
        const layer = this.getLayer();
        const coordinate = (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());
        const layerExtent = layer.getExtent();
        if (layerExtent) {
            if (!(0, $84be800ca44e672c$export$ac68c24d37ca240f)(layerExtent, coordinate)) return null;
        }
        const imageExtent = this.image_.getExtent();
        const img = this.getImage();
        const imageMapWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(imageExtent);
        const col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));
        if (col < 0 || col >= img.width) return null;
        const imageMapHeight = (0, $84be800ca44e672c$export$c08559766941f856)(imageExtent);
        const row = Math.floor(img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight));
        if (row < 0 || row >= img.height) return null;
        return this.getImageData(img, col, row);
    }
    /**
   * Render the layer.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement} target Target that may be used to render content to.
   * @return {HTMLElement} The rendered element.
   */ renderFrame(frameState, target) {
        const image = this.image_;
        const imageExtent = image.getExtent();
        const imageResolution = image.getResolution();
        const imagePixelRatio = image.getPixelRatio();
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        const pixelRatio = frameState.pixelRatio;
        const viewState = frameState.viewState;
        const viewCenter = viewState.center;
        const viewResolution = viewState.resolution;
        const scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);
        const extent = frameState.extent;
        const resolution = viewState.resolution;
        const rotation = viewState.rotation;
        // desired dimensions of the canvas in pixels
        const width = Math.round((0, $84be800ca44e672c$export$3c49c185de0c2bfc)(extent) / resolution * pixelRatio);
        const height = Math.round((0, $84be800ca44e672c$export$c08559766941f856)(extent) / resolution * pixelRatio);
        // set forward and inverse pixel transforms
        (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);
        (0, $d59a735b25ae191a$export$bd70ea2a93c0fa4)(this.inversePixelTransform, this.pixelTransform);
        const canvasTransform = (0, $d59a735b25ae191a$export$f84e8e69fd4488a5)(this.pixelTransform);
        this.useContainer(target, canvasTransform, this.getBackground(frameState));
        const context = this.context;
        const canvas = context.canvas;
        if (canvas.width != width || canvas.height != height) {
            canvas.width = width;
            canvas.height = height;
        } else if (!this.containerReused) context.clearRect(0, 0, width, height);
        // clipped rendering if layer extent is set
        let clipped = false;
        let render = true;
        if (layerState.extent) {
            const layerExtent = (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(layerState.extent, viewState.projection);
            render = (0, $84be800ca44e672c$export$7b0a31e10bbff018)(layerExtent, frameState.extent);
            clipped = render && !(0, $84be800ca44e672c$export$be866b1e0809b17e)(layerExtent, frameState.extent);
            if (clipped) this.clipUnrotated(context, frameState, layerExtent);
        }
        const img = this.getImage();
        const transform = (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(this.tempTransform, width / 2, height / 2, scale, scale, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);
        this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
        const dw = img.width * transform[0];
        const dh = img.height * transform[3];
        if (!this.getLayer().getSource().getInterpolate()) context.imageSmoothingEnabled = false;
        this.preRender(context, frameState);
        if (render && dw >= 0.5 && dh >= 0.5) {
            const dx = transform[4];
            const dy = transform[5];
            const opacity = layerState.opacity;
            let previousAlpha;
            if (opacity !== 1) {
                previousAlpha = context.globalAlpha;
                context.globalAlpha = opacity;
            }
            context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);
            if (opacity !== 1) context.globalAlpha = previousAlpha;
        }
        this.postRender(context, frameState);
        if (clipped) context.restore();
        context.imageSmoothingEnabled = true;
        if (canvasTransform !== canvas.style.transform) canvas.style.transform = canvasTransform;
        return this.container;
    }
}
var $d8842e30be13b110$export$2e2bcd8739ae039 = $d8842e30be13b110$var$CanvasImageLayerRenderer;


/**
 * @classdesc
 * Server-rendered images that are available for arbitrary extents and
 * resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Image.js").default} ImageSourceType
 * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}
 * @api
 */ class $793e8314e637c0a8$var$ImageLayer extends (0, $436dc64db207ef62$export$2e2bcd8739ae039) {
    /**
   * @param {import("./BaseImage.js").Options<ImageSourceType>} [options] Layer options.
   */ constructor(options){
        super(options);
    }
    createRenderer() {
        return new (0, $d8842e30be13b110$export$2e2bcd8739ae039)(this);
    }
    /**
   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the
   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the
   * source's `crossOrigin` property is set.
   *
   * ```js
   * // display layer data on every pointer move
   * map.on('pointermove', (event) => {
   *   console.log(layer.getData(event.pixel));
   * });
   * ```
   * @param {import("../pixel").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   * @api
   */ getData(pixel) {
        return super.getData(pixel);
    }
}
var $793e8314e637c0a8$export$2e2bcd8739ae039 = $793e8314e637c0a8$var$ImageLayer;

/**
 * @module ol/layer/Tile
 */ /**
 * @module ol/layer/BaseTile
 */ 
/**
 * @module ol/layer/TileProperty
 */ /**
 * @enum {string}
 */ var $9b3522b39d029326$export$2e2bcd8739ae039 = {
    PRELOAD: "preload",
    USE_INTERIM_TILES_ON_ERROR: "useInterimTilesOnError"
};


/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
 *     import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|
 *   import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import("../render/EventType").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature
 */ /**
 * @template {import("../source/Tile.js").default} TileSourceType
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
 * means no preloading.
 * @property {TileSourceType} [source] Source for this layer.
 * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link import("../Map.js").default#addLayer map.addLayer()}.
 * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @classdesc
 * For layer sources that provide pre-rendered, tiled images in grids that are
 * organized by zoom levels for specific resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Tile.js").default} TileSourceType
 * @template {import("../renderer/Layer.js").default} RendererType
 * @extends {Layer<TileSourceType, RendererType>}
 * @api
 */ class $21d7e6e4bcfe81eb$var$BaseTileLayer extends (0, $14019fcc7ba24fd5$export$2e2bcd8739ae039) {
    /**
   * @param {Options<TileSourceType>} [options] Tile layer options.
   */ constructor(options){
        options = options ? options : {};
        const baseOptions = Object.assign({}, options);
        delete baseOptions.preload;
        delete baseOptions.useInterimTilesOnError;
        super(baseOptions);
        /***
     * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {BaseTileLayerOnSignature<void>}
     */ this.un;
        this.setPreload(options.preload !== undefined ? options.preload : 0);
        this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);
    }
    /**
   * Return the level as number to which we will preload tiles up to.
   * @return {number} The level to preload tiles up to.
   * @observable
   * @api
   */ getPreload() {
        return /** @type {number} */ this.get((0, $9b3522b39d029326$export$2e2bcd8739ae039).PRELOAD);
    }
    /**
   * Set the level as number to which we will preload tiles up to.
   * @param {number} preload The level to preload tiles up to.
   * @observable
   * @api
   */ setPreload(preload) {
        this.set((0, $9b3522b39d029326$export$2e2bcd8739ae039).PRELOAD, preload);
    }
    /**
   * Whether we use interim tiles on error.
   * @return {boolean} Use interim tiles on error.
   * @observable
   * @api
   */ getUseInterimTilesOnError() {
        return /** @type {boolean} */ this.get((0, $9b3522b39d029326$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR);
    }
    /**
   * Set whether we use interim tiles on error.
   * @param {boolean} useInterimTilesOnError Use interim tiles on error.
   * @observable
   * @api
   */ setUseInterimTilesOnError(useInterimTilesOnError) {
        this.set((0, $9b3522b39d029326$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    }
    /**
   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,
   * a four element RGBA array will be returned.  For data tiles, the array length will match the
   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.
   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.
   *
   * ```js
   * // display layer data on every pointer move
   * map.on('pointermove', (event) => {
   *   console.log(layer.getData(event.pixel));
   * });
   * ```
   * @param {import("../pixel").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
   * @api
   */ getData(pixel) {
        return super.getData(pixel);
    }
}
var $21d7e6e4bcfe81eb$export$2e2bcd8739ae039 = $21d7e6e4bcfe81eb$var$BaseTileLayer;


/**
 * @module ol/renderer/canvas/TileLayer
 */ 
/**
 * @module ol/ImageTile
 */ /**
 * @module ol/Tile
 */ 




/**
 * A function that takes an {@link module:ol/Tile~Tile} for the tile and a
 * `{string}` for the url as arguments. The default is
 * ```js
 * source.setTileLoadFunction(function(tile, src) {
 *   tile.getImage().src = src;
 * });
 * ```
 * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
 * error handling:
 *
 * ```js
 * import TileState from 'ol/TileState.js';
 *
 * source.setTileLoadFunction(function(tile, src) {
 *   const xhr = new XMLHttpRequest();
 *   xhr.responseType = 'blob';
 *   xhr.addEventListener('loadend', function (evt) {
 *     const data = this.response;
 *     if (data !== undefined) {
 *       tile.getImage().src = URL.createObjectURL(data);
 *     } else {
 *       tile.setState(TileState.ERROR);
 *     }
 *   });
 *   xhr.addEventListener('error', function () {
 *     tile.setState(TileState.ERROR);
 *   });
 *   xhr.open('GET', src);
 *   xhr.send();
 * });
 * ```
 *
 * @typedef {function(Tile, string): void} LoadFunction
 * @api
 */ /**
 * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get
 * the url that provides a tile for a given tile coordinate.
 *
 * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
 * coordinate, a `{number}` representing the pixel ratio and a
 * {@link module:ol/proj/Projection~Projection} for the projection  as arguments
 * and returns a `{string}` representing the tile URL, or undefined if no tile
 * should be requested for the passed tile coordinate.
 *
 * @typedef {function(import("./tilecoord.js").TileCoord, number,
 *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
 * @api
 */ /**
 * @typedef {Object} Options
 * @property {number} [transition=250] A duration for tile opacity
 * transitions in milliseconds. A duration of 0 disables the opacity transition.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 * @api
 */ /**
 * @classdesc
 * Base class for tiles.
 *
 * @abstract
 */ class $776b6e4ea38ddf87$var$Tile extends (0, $fd4e3201ad7386dc$export$2e2bcd8739ae039) {
    /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./TileState.js").default} state State.
   * @param {Options} [options] Tile options.
   */ constructor(tileCoord, state, options){
        super();
        options = options ? options : {};
        /**
     * @type {import("./tilecoord.js").TileCoord}
     */ this.tileCoord = tileCoord;
        /**
     * @protected
     * @type {import("./TileState.js").default}
     */ this.state = state;
        /**
     * An "interim" tile for this tile. The interim tile may be used while this
     * one is loading, for "smooth" transitions when changing params/dimensions
     * on the source.
     * @type {Tile}
     */ this.interimTile = null;
        /**
     * A key assigned to the tile. This is used by the tile source to determine
     * if this tile can effectively be used, or if a new tile should be created
     * and this one be used as an interim tile for this new tile.
     * @type {string}
     */ this.key = "";
        /**
     * The duration for the opacity transition.
     * @type {number}
     */ this.transition_ = options.transition === undefined ? 250 : options.transition;
        /**
     * Lookup of start times for rendering transitions.  If the start time is
     * equal to -1, the transition is complete.
     * @type {Object<string, number>}
     */ this.transitionStarts_ = {};
        /**
     * @type {boolean}
     */ this.interpolate = !!options.interpolate;
    }
    /**
   * @protected
   */ changed() {
        this.dispatchEvent((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE);
    }
    /**
   * Called by the tile cache when the tile is removed from the cache due to expiry
   */ release() {
        if (this.state === (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR) // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`
        this.setState((0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY);
    }
    /**
   * @return {string} Key.
   */ getKey() {
        return this.key + "/" + this.tileCoord;
    }
    /**
   * Get the interim tile most suitable for rendering using the chain of interim
   * tiles. This corresponds to the  most recent tile that has been loaded, if no
   * such tile exists, the original tile is returned.
   * @return {!Tile} Best tile for rendering.
   */ getInterimTile() {
        if (!this.interimTile) //empty chain
        return this;
        let tile = this.interimTile;
        // find the first loaded tile and return it. Since the chain is sorted in
        // decreasing order of creation time, there is no need to search the remainder
        // of the list (all those tiles correspond to older requests and will be
        // cleaned up by refreshInterimChain)
        do {
            if (tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED) {
                // Show tile immediately instead of fading it in after loading, because
                // the interim tile is in place already
                this.transition_ = 0;
                return tile;
            }
            tile = tile.interimTile;
        }while (tile);
        // we can not find a better tile
        return this;
    }
    /**
   * Goes through the chain of interim tiles and discards sections of the chain
   * that are no longer relevant.
   */ refreshInterimChain() {
        if (!this.interimTile) return;
        let tile = this.interimTile;
        /**
     * @type {Tile}
     */ let prev = this;
        do {
            if (tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED) {
                //we have a loaded tile, we can discard the rest of the list
                //we would could abort any LOADING tile request
                //older than this tile (i.e. any LOADING tile following this entry in the chain)
                tile.interimTile = null;
                break;
            } else if (tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADING) //keep this LOADING tile any loaded tiles later in the chain are
            //older than this tile, so we're still interested in the request
            prev = tile;
            else if (tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE) //the head of the list is the most current tile, we don't need
            //to start any other requests for this chain
            prev.interimTile = tile.interimTile;
            else prev = tile;
            tile = prev.interimTile;
        }while (tile);
    }
    /**
   * Get the tile coordinate for this tile.
   * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
   * @api
   */ getTileCoord() {
        return this.tileCoord;
    }
    /**
   * @return {import("./TileState.js").default} State.
   */ getState() {
        return this.state;
    }
    /**
   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
   * when the tile cannot be loaded. Otherwise the tile cannot be removed from
   * the tile queue and will block other requests.
   * @param {import("./TileState.js").default} state State.
   * @api
   */ setState(state) {
        if (this.state !== (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR && this.state > state) throw new Error("Tile load sequence violation");
        this.state = state;
        this.changed();
    }
    /**
   * Load the image or retry if loading previously failed.
   * Loading is taken care of by the tile queue, and calling this method is
   * only needed for preloading or for reloading in case of an error.
   * @abstract
   * @api
   */ load() {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Get the alpha value for rendering.
   * @param {string} id An id for the renderer.
   * @param {number} time The render frame time.
   * @return {number} A number between 0 and 1.
   */ getAlpha(id, time) {
        if (!this.transition_) return 1;
        let start = this.transitionStarts_[id];
        if (!start) {
            start = time;
            this.transitionStarts_[id] = start;
        } else if (start === -1) return 1;
        const delta = time - start + 1000 / 60; // avoid rendering at 0
        if (delta >= this.transition_) return 1;
        return (0, $b6cb732edc5512cf$export$929e5a82286172a6)(delta / this.transition_);
    }
    /**
   * Determine if a tile is in an alpha transition.  A tile is considered in
   * transition if tile.getAlpha() has not yet been called or has been called
   * and returned 1.
   * @param {string} id An id for the renderer.
   * @return {boolean} The tile is in transition.
   */ inTransition(id) {
        if (!this.transition_) return false;
        return this.transitionStarts_[id] !== -1;
    }
    /**
   * Mark a transition as complete.
   * @param {string} id An id for the renderer.
   */ endTransition(id) {
        if (this.transition_) this.transitionStarts_[id] = -1;
    }
}
var $776b6e4ea38ddf87$export$2e2bcd8739ae039 = $776b6e4ea38ddf87$var$Tile;




/**
 * @module ol/Image
 */ 
/**
 * @module ol/ImageBase
 */ 


/**
 * @abstract
 */ class $bfae3f7ef12e7a3a$var$ImageBase extends (0, $fd4e3201ad7386dc$export$2e2bcd8739ae039) {
    /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number|undefined} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("./ImageState.js").default} state State.
   */ constructor(extent, resolution, pixelRatio, state){
        super();
        /**
     * @protected
     * @type {import("./extent.js").Extent}
     */ this.extent = extent;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @protected
     * @type {number|undefined}
     */ this.resolution = resolution;
        /**
     * @protected
     * @type {import("./ImageState.js").default}
     */ this.state = state;
    }
    /**
   * @protected
   */ changed() {
        this.dispatchEvent((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE);
    }
    /**
   * @return {import("./extent.js").Extent} Extent.
   */ getExtent() {
        return this.extent;
    }
    /**
   * @abstract
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   */ getImage() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @return {number} PixelRatio.
   */ getPixelRatio() {
        return this.pixelRatio_;
    }
    /**
   * @return {number} Resolution.
   */ getResolution() {
        return /** @type {number} */ this.resolution;
    }
    /**
   * @return {import("./ImageState.js").default} State.
   */ getState() {
        return this.state;
    }
    /**
   * Load not yet loaded URI.
   * @abstract
   */ load() {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
}
var $bfae3f7ef12e7a3a$export$2e2bcd8739ae039 = $bfae3f7ef12e7a3a$var$ImageBase;






/**
 * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a
 * `{string}` for the src as arguments. It is supposed to make it so the
 * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the
 * content specified by the src. If not specified, the default is
 *
 *     function(image, src) {
 *       image.getImage().src = src;
 *     }
 *
 * Providing a custom `imageLoadFunction` can be useful to load images with
 * post requests or - in general - through XHR requests, where the src of the
 * image element would be set to a data URI when the content is loaded.
 *
 * @typedef {function(ImageWrapper, string): void} LoadFunction
 * @api
 */ class $752084c7f6d5daf1$var$ImageWrapper extends (0, $bfae3f7ef12e7a3a$export$2e2bcd8739ae039) {
    /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number|undefined} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {string} src Image source URI.
   * @param {?string} crossOrigin Cross origin.
   * @param {LoadFunction} imageLoadFunction Image load function.
   * @param {CanvasRenderingContext2D} [context] Canvas context. When provided, the image will be
   *    drawn into the context's canvas, and `getImage()` will return the canvas once the image
   *    has finished loading.
   */ constructor(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction, context){
        super(extent, resolution, pixelRatio, (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE);
        /**
     * @private
     * @type {string}
     */ this.src_ = src;
        /**
     * @private
     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
     */ this.image_ = new Image();
        if (crossOrigin !== null) this.image_.crossOrigin = crossOrigin;
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.context_ = context;
        /**
     * @private
     * @type {?function():void}
     */ this.unlisten_ = null;
        /**
     * @protected
     * @type {import("./ImageState.js").default}
     */ this.state = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE;
        /**
     * @private
     * @type {LoadFunction}
     */ this.imageLoadFunction_ = imageLoadFunction;
    }
    /**
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   * @api
   */ getImage() {
        if (this.state == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED && this.context_ && !(this.image_ instanceof HTMLCanvasElement)) {
            const canvas = this.context_.canvas;
            canvas.width = this.image_.width;
            canvas.height = this.image_.height;
            this.context_.drawImage(this.image_, 0, 0);
            this.image_ = this.context_.canvas;
        }
        return this.image_;
    }
    /**
   * Tracks loading or read errors.
   *
   * @private
   */ handleImageError_() {
        this.state = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR;
        this.unlistenImage_();
        this.changed();
    }
    /**
   * Tracks successful image load.
   *
   * @private
   */ handleImageLoad_() {
        if (this.resolution === undefined) this.resolution = (0, $84be800ca44e672c$export$c08559766941f856)(this.extent) / this.image_.height;
        this.state = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED;
        this.unlistenImage_();
        this.changed();
    }
    /**
   * Load the image or retry if loading previously failed.
   * Loading is taken care of by the tile queue, and calling this method is
   * only needed for preloading or for reloading in case of an error.
   * @api
   */ load() {
        if (this.state == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE || this.state == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR) {
            this.state = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADING;
            this.changed();
            this.imageLoadFunction_(this, this.src_);
            this.unlisten_ = $752084c7f6d5daf1$export$bc96ecc7c2a50764(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
        }
    }
    /**
   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
   */ setImage(image) {
        this.image_ = image;
        this.resolution = (0, $84be800ca44e672c$export$c08559766941f856)(this.extent) / this.image_.height;
    }
    /**
   * Discards event handlers which listen for load completion or errors.
   *
   * @private
   */ unlistenImage_() {
        if (this.unlisten_) {
            this.unlisten_();
            this.unlisten_ = null;
        }
    }
}
function $752084c7f6d5daf1$export$bc96ecc7c2a50764(image, loadHandler, errorHandler) {
    const img = /** @type {HTMLImageElement} */ image;
    let listening = true;
    let decoding = false;
    let loaded = false;
    const listenerKeys = [
        (0, $776f68d2a754760b$export$8d2a95bc11b44725)(img, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).LOAD, function() {
            loaded = true;
            if (!decoding) loadHandler();
        })
    ];
    if (img.src && (0, $253e11c6a01eb5bc$export$716f8695eedb9bad)) {
        decoding = true;
        img.decode().then(function() {
            if (listening) loadHandler();
        }).catch(function(error) {
            if (listening) {
                if (loaded) loadHandler();
                else errorHandler();
            }
        });
    } else listenerKeys.push((0, $776f68d2a754760b$export$8d2a95bc11b44725)(img, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).ERROR, errorHandler));
    return function unlisten() {
        listening = false;
        listenerKeys.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
    };
}
var $752084c7f6d5daf1$export$2e2bcd8739ae039 = $752084c7f6d5daf1$var$ImageWrapper;


class $0abdbb86e416a014$var$ImageTile extends (0, $776b6e4ea38ddf87$export$2e2bcd8739ae039) {
    /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./TileState.js").default} state State.
   * @param {string} src Image source URI.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
   * @param {import("./Tile.js").Options} [options] Tile options.
   */ constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options){
        super(tileCoord, state, options);
        /**
     * @private
     * @type {?string}
     */ this.crossOrigin_ = crossOrigin;
        /**
     * Image URI
     *
     * @private
     * @type {string}
     */ this.src_ = src;
        this.key = src;
        /**
     * @private
     * @type {HTMLImageElement|HTMLCanvasElement}
     */ this.image_ = new Image();
        if (crossOrigin !== null) this.image_.crossOrigin = crossOrigin;
        /**
     * @private
     * @type {?function():void}
     */ this.unlisten_ = null;
        /**
     * @private
     * @type {import("./Tile.js").LoadFunction}
     */ this.tileLoadFunction_ = tileLoadFunction;
    }
    /**
   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   * @api
   */ getImage() {
        return this.image_;
    }
    /**
   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).
   * @param {HTMLCanvasElement|HTMLImageElement} element Element.
   */ setImage(element) {
        this.image_ = element;
        this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED;
        this.unlistenImage_();
        this.changed();
    }
    /**
   * Tracks loading or read errors.
   *
   * @private
   */ handleImageError_() {
        this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR;
        this.unlistenImage_();
        this.image_ = $0abdbb86e416a014$var$getBlankImage();
        this.changed();
    }
    /**
   * Tracks successful image load.
   *
   * @private
   */ handleImageLoad_() {
        const image = /** @type {HTMLImageElement} */ this.image_;
        if (image.naturalWidth && image.naturalHeight) this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED;
        else this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY;
        this.unlistenImage_();
        this.changed();
    }
    /**
   * Load the image or retry if loading previously failed.
   * Loading is taken care of by the tile queue, and calling this method is
   * only needed for preloading or for reloading in case of an error.
   *
   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`
   * that checks for error status codes and reloads only when the status code is
   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been
   * made already:
   *
   * ```js
   * const retryCodes = [408, 429, 500, 502, 503, 504];
   * const retries = {};
   * source.setTileLoadFunction((tile, src) => {
   *   const image = tile.getImage();
   *   fetch(src)
   *     .then((response) => {
   *       if (retryCodes.includes(response.status)) {
   *         retries[src] = (retries[src] || 0) + 1;
   *         if (retries[src] <= 3) {
   *           setTimeout(() => tile.load(), retries[src] * 1000);
   *         }
   *         return Promise.reject();
   *       }
   *       return response.blob();
   *     })
   *     .then((blob) => {
   *       const imageUrl = URL.createObjectURL(blob);
   *       image.src = imageUrl;
   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);
   *     })
   *     .catch(() => tile.setState(3)); // error
   * });
   * ```
   *
   * @api
   */ load() {
        if (this.state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR) {
            this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE;
            this.image_ = new Image();
            if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;
        }
        if (this.state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE) {
            this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADING;
            this.changed();
            this.tileLoadFunction_(this, this.src_);
            this.unlisten_ = (0, $752084c7f6d5daf1$export$bc96ecc7c2a50764)(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
        }
    }
    /**
   * Discards event handlers which listen for load completion or errors.
   *
   * @private
   */ unlistenImage_() {
        if (this.unlisten_) {
            this.unlisten_();
            this.unlisten_ = null;
        }
    }
}
/**
 * Get a 1-pixel blank image.
 * @return {HTMLCanvasElement} Blank image.
 */ function $0abdbb86e416a014$var$getBlankImage() {
    const ctx = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(1, 1);
    ctx.fillStyle = "rgba(0,0,0,0)";
    ctx.fillRect(0, 0, 1, 1);
    return ctx.canvas;
}
var $0abdbb86e416a014$export$2e2bcd8739ae039 = $0abdbb86e416a014$var$ImageTile;


/**
 * @module ol/reproj/Tile
 */ /**
 * @module ol/reproj/common
 */ /**
 * Default maximum allowed threshold  (in pixels) for reprojection
 * triangulation.
 * @type {number}
 */ const $f18ab1cde9e52029$export$3ecb4bcfa5aae855 = 0.5;





/**
 * @module ol/reproj/Triangulation
 */ 


/**
 * Single triangle; consists of 3 source points and 3 target points.
 * @typedef {Object} Triangle
 * @property {Array<import("../coordinate.js").Coordinate>} source Source.
 * @property {Array<import("../coordinate.js").Coordinate>} target Target.
 */ /**
 * Maximum number of subdivision steps during raster reprojection triangulation.
 * Prevents high memory usage and large number of proj4 calls (for certain
 * transformations and areas). At most `2*(2^this)` triangles are created for
 * each triangulated extent (tile/image).
 * @type {number}
 */ const $686d602ee344b3e4$var$MAX_SUBDIVISION = 10;
/**
 * Maximum allowed size of triangle relative to world width. When transforming
 * corners of world extent between certain projections, the resulting
 * triangulation seems to have zero error and no subdivision is performed. If
 * the triangle width is more than this (relative to world width; 0-1),
 * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
 * @type {number}
 */ const $686d602ee344b3e4$var$MAX_TRIANGLE_WIDTH = 0.25;
/**
 * @classdesc
 * Class containing triangulation of the given target extent.
 * Used for determining source data and the reprojection itself.
 */ class $686d602ee344b3e4$var$Triangulation {
    /**
   * @param {import("../proj/Projection.js").default} sourceProj Source projection.
   * @param {import("../proj/Projection.js").default} targetProj Target projection.
   * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
   * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
   * @param {number} errorThreshold Acceptable error (in source units).
   * @param {?number} destinationResolution The (optional) resolution of the destination.
   */ constructor(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, destinationResolution){
        /**
     * @type {import("../proj/Projection.js").default}
     * @private
     */ this.sourceProj_ = sourceProj;
        /**
     * @type {import("../proj/Projection.js").default}
     * @private
     */ this.targetProj_ = targetProj;
        /** @type {!Object<string, import("../coordinate.js").Coordinate>} */ let transformInvCache = {};
        const transformInv = (0, $983289ae1d13cd2a$export$fce0c6cfca85ed96)(this.targetProj_, this.sourceProj_);
        /**
     * @param {import("../coordinate.js").Coordinate} c A coordinate.
     * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
     * @private
     */ this.transformInv_ = function(c) {
            const key = c[0] + "/" + c[1];
            if (!transformInvCache[key]) transformInvCache[key] = transformInv(c);
            return transformInvCache[key];
        };
        /**
     * @type {import("../extent.js").Extent}
     * @private
     */ this.maxSourceExtent_ = maxSourceExtent;
        /**
     * @type {number}
     * @private
     */ this.errorThresholdSquared_ = errorThreshold * errorThreshold;
        /**
     * @type {Array<Triangle>}
     * @private
     */ this.triangles_ = [];
        /**
     * Indicates that the triangulation crosses edge of the source projection.
     * @type {boolean}
     * @private
     */ this.wrapsXInSource_ = false;
        /**
     * @type {boolean}
     * @private
     */ this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(maxSourceExtent) >= (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent());
        /**
     * @type {?number}
     * @private
     */ this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent()) : null;
        /**
     * @type {?number}
     * @private
     */ this.targetWorldWidth_ = this.targetProj_.getExtent() ? (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(this.targetProj_.getExtent()) : null;
        const destinationTopLeft = (0, $84be800ca44e672c$export$cb1538b07e6964ff)(targetExtent);
        const destinationTopRight = (0, $84be800ca44e672c$export$b84fa077c8b05295)(targetExtent);
        const destinationBottomRight = (0, $84be800ca44e672c$export$e77c1cf70445e168)(targetExtent);
        const destinationBottomLeft = (0, $84be800ca44e672c$export$8d09f5e2e1bf560d)(targetExtent);
        const sourceTopLeft = this.transformInv_(destinationTopLeft);
        const sourceTopRight = this.transformInv_(destinationTopRight);
        const sourceBottomRight = this.transformInv_(destinationBottomRight);
        const sourceBottomLeft = this.transformInv_(destinationBottomLeft);
        /*
     * The maxSubdivision controls how many splittings of the target area can
     * be done. The idea here is to do a linear mapping of the target areas
     * but the actual overall reprojection (can be) extremely non-linear. The
     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
     * tile size. However this function is also called to remap canvas rendered
     * layers which can be much larger. This calculation increases the maxSubdivision
     * value by the right factor so that each 256x256 pixel area has
     * MAX_SUBDIVISION divisions.
     */ const maxSubdivision = $686d602ee344b3e4$var$MAX_SUBDIVISION + (destinationResolution ? Math.max(0, Math.ceil(Math.log2((0, $84be800ca44e672c$export$520c40045967cb15)(targetExtent) / (destinationResolution * destinationResolution * 65536)))) : 0);
        this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);
        if (this.wrapsXInSource_) {
            let leftBound = Infinity;
            this.triangles_.forEach(function(triangle, i, arr) {
                leftBound = Math.min(leftBound, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
            });
            // Shift triangles to be as close to `leftBound` as possible
            // (if the distance is more than `worldWidth / 2` it can be closer.
            this.triangles_.forEach((triangle)=>{
                if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {
                    const newTriangle = [
                        [
                            triangle.source[0][0],
                            triangle.source[0][1]
                        ],
                        [
                            triangle.source[1][0],
                            triangle.source[1][1]
                        ],
                        [
                            triangle.source[2][0],
                            triangle.source[2][1]
                        ]
                    ];
                    if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[0][0] -= this.sourceWorldWidth_;
                    if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[1][0] -= this.sourceWorldWidth_;
                    if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[2][0] -= this.sourceWorldWidth_;
                    // Rarely (if the extent contains both the dateline and prime meridian)
                    // the shift can in turn break some triangles.
                    // Detect this here and don't shift in such cases.
                    const minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                    const maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                    if (maxX - minX < this.sourceWorldWidth_ / 2) triangle.source = newTriangle;
                }
            });
        }
        transformInvCache = {};
    }
    /**
   * Adds triangle to the triangulation.
   * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
   * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
   * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
   * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
   * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
   * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
   * @private
   */ addTriangle_(a, b, c, aSrc, bSrc, cSrc) {
        this.triangles_.push({
            source: [
                aSrc,
                bSrc,
                cSrc
            ],
            target: [
                a,
                b,
                c
            ]
        });
    }
    /**
   * Adds quad (points in clock-wise order) to the triangulation
   * (and reprojects the vertices) if valid.
   * Performs quad subdivision if needed to increase precision.
   *
   * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
   * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
   * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
   * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
   * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
   * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
   * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
   * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
   * @private
   */ addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
        const sourceQuadExtent = (0, $84be800ca44e672c$export$8aceca7c77505534)([
            aSrc,
            bSrc,
            cSrc,
            dSrc
        ]);
        const sourceCoverageX = this.sourceWorldWidth_ ? (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(sourceQuadExtent) / this.sourceWorldWidth_ : null;
        const sourceWorldWidth = /** @type {number} */ this.sourceWorldWidth_;
        // when the quad is wrapped in the source projection
        // it covers most of the projection extent, but not fully
        const wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;
        let needsSubdivision = false;
        if (maxSubdivision > 0) {
            if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
                const targetQuadExtent = (0, $84be800ca44e672c$export$8aceca7c77505534)([
                    a,
                    b,
                    c,
                    d
                ]);
                const targetCoverageX = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(targetQuadExtent) / this.targetWorldWidth_;
                needsSubdivision = targetCoverageX > $686d602ee344b3e4$var$MAX_TRIANGLE_WIDTH || needsSubdivision;
            }
            if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) needsSubdivision = sourceCoverageX > $686d602ee344b3e4$var$MAX_TRIANGLE_WIDTH || needsSubdivision;
        }
        if (!needsSubdivision && this.maxSourceExtent_) {
            if (isFinite(sourceQuadExtent[0]) && isFinite(sourceQuadExtent[1]) && isFinite(sourceQuadExtent[2]) && isFinite(sourceQuadExtent[3])) {
                if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(sourceQuadExtent, this.maxSourceExtent_)) // whole quad outside source projection extent -> ignore
                return;
            }
        }
        let isNotFinite = 0;
        if (!needsSubdivision) {
            if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {
                if (maxSubdivision > 0) needsSubdivision = true;
                else {
                    // It might be the case that only 1 of the points is infinite. In this case
                    // we can draw a single triangle with the other three points
                    isNotFinite = (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) + (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) + (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) + (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);
                    if (isNotFinite != 1 && isNotFinite != 2 && isNotFinite != 4 && isNotFinite != 8) return;
                }
            }
        }
        if (maxSubdivision > 0) {
            if (!needsSubdivision) {
                const center = [
                    (a[0] + c[0]) / 2,
                    (a[1] + c[1]) / 2
                ];
                const centerSrc = this.transformInv_(center);
                let dx;
                if (wrapsX) {
                    const centerSrcEstimX = ((0, $57ec69d152197e1d$export$ba467bec01d66def)(aSrc[0], sourceWorldWidth) + (0, $57ec69d152197e1d$export$ba467bec01d66def)(cSrc[0], sourceWorldWidth)) / 2;
                    dx = centerSrcEstimX - (0, $57ec69d152197e1d$export$ba467bec01d66def)(centerSrc[0], sourceWorldWidth);
                } else dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
                const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
                const centerSrcErrorSquared = dx * dx + dy * dy;
                needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
            }
            if (needsSubdivision) {
                if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
                    // split horizontally (top & bottom)
                    const bc = [
                        (b[0] + c[0]) / 2,
                        (b[1] + c[1]) / 2
                    ];
                    const bcSrc = this.transformInv_(bc);
                    const da = [
                        (d[0] + a[0]) / 2,
                        (d[1] + a[1]) / 2
                    ];
                    const daSrc = this.transformInv_(da);
                    this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
                    this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
                } else {
                    // split vertically (left & right)
                    const ab = [
                        (a[0] + b[0]) / 2,
                        (a[1] + b[1]) / 2
                    ];
                    const abSrc = this.transformInv_(ab);
                    const cd = [
                        (c[0] + d[0]) / 2,
                        (c[1] + d[1]) / 2
                    ];
                    const cdSrc = this.transformInv_(cd);
                    this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
                    this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
                }
                return;
            }
        }
        if (wrapsX) {
            if (!this.canWrapXInSource_) return;
            this.wrapsXInSource_ = true;
        }
        // Exactly zero or one of *Src is not finite
        // The triangles must have the diagonal line as the first side
        // This is to allow easy code in reproj.s to make it straight for broken
        // browsers that can't handle diagonal clipping
        if ((isNotFinite & 0xb) == 0) this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
        if ((isNotFinite & 0xe) == 0) this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);
        if (isNotFinite) {
            // Try the other two triangles
            if ((isNotFinite & 0xd) == 0) this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);
            if ((isNotFinite & 0x7) == 0) this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);
        }
    }
    /**
   * Calculates extent of the `source` coordinates from all the triangles.
   *
   * @return {import("../extent.js").Extent} Calculated extent.
   */ calculateSourceExtent() {
        const extent = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
        this.triangles_.forEach(function(triangle, i, arr) {
            const src = triangle.source;
            (0, $84be800ca44e672c$export$1f820e3920fa5715)(extent, src[0]);
            (0, $84be800ca44e672c$export$1f820e3920fa5715)(extent, src[1]);
            (0, $84be800ca44e672c$export$1f820e3920fa5715)(extent, src[2]);
        });
        return extent;
    }
    /**
   * @return {Array<Triangle>} Array of the calculated triangles.
   */ getTriangles() {
        return this.triangles_;
    }
}
var $686d602ee344b3e4$export$2e2bcd8739ae039 = $686d602ee344b3e4$var$Triangulation;


/**
 * @module ol/reproj
 */ 



let $6f210e8a8cb248a3$var$brokenDiagonalRendering_;
const $6f210e8a8cb248a3$export$a166f0857c555517 = [];
/**
 * This draws a small triangle into a canvas by setting the triangle as the clip region
 * and then drawing a (too large) rectangle
 *
 * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle
 * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.
 * @param {number} v1 The y-coordinate of the second point.
 * @param {number} u2 The x-coordinate of the third point.
 * @param {number} v2 The y-coordinate of the third point.
 */ function $6f210e8a8cb248a3$var$drawTestTriangle(ctx, u1, v1, u2, v2) {
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(u1, v1);
    ctx.lineTo(u2, v2);
    ctx.closePath();
    ctx.save();
    ctx.clip();
    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));
    ctx.restore();
}
/**
 * Given the data from getImageData, see if the right values appear at the provided offset.
 * Returns true if either the color or transparency is off
 *
 * @param {Uint8ClampedArray} data The data returned from getImageData
 * @param {number} offset The pixel offset from the start of data.
 * @return {boolean} true if the diagonal rendering is broken
 */ function $6f210e8a8cb248a3$var$verifyBrokenDiagonalRendering(data, offset) {
    // the values ought to be close to the rgba(210, 0, 0, 0.75)
    return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 191.25) > 2;
}
/**
 * Determines if the current browser configuration can render triangular clip regions correctly.
 * This value is cached so the function is only expensive the first time called.
 * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976
 * Chrome works, and everything seems to work on OSX and Android. This function caches the
 * result. I suppose that it is conceivably possible that a browser might flip modes while the app is
 * running, but lets hope not.
 *
 * @return {boolean} true if the Diagonal Rendering is broken.
 */ function $6f210e8a8cb248a3$var$isBrokenDiagonalRendering() {
    if ($6f210e8a8cb248a3$var$brokenDiagonalRendering_ === undefined) {
        const ctx = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(6, 6, $6f210e8a8cb248a3$export$a166f0857c555517);
        ctx.globalCompositeOperation = "lighter";
        ctx.fillStyle = "rgba(210, 0, 0, 0.75)";
        $6f210e8a8cb248a3$var$drawTestTriangle(ctx, 4, 5, 4, 0);
        $6f210e8a8cb248a3$var$drawTestTriangle(ctx, 4, 5, 0, 5);
        const data = ctx.getImageData(0, 0, 3, 3).data;
        $6f210e8a8cb248a3$var$brokenDiagonalRendering_ = $6f210e8a8cb248a3$var$verifyBrokenDiagonalRendering(data, 0) || $6f210e8a8cb248a3$var$verifyBrokenDiagonalRendering(data, 4) || $6f210e8a8cb248a3$var$verifyBrokenDiagonalRendering(data, 8);
        (0, $1d92219e1eaa7bd2$export$e918ac6a1026a12a)(ctx);
        $6f210e8a8cb248a3$export$a166f0857c555517.push(ctx.canvas);
    }
    return $6f210e8a8cb248a3$var$brokenDiagonalRendering_;
}
function $6f210e8a8cb248a3$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution) {
    const sourceCenter = (0, $983289ae1d13cd2a$export$51186ad6e864892a)(targetCenter, targetProj, sourceProj);
    // calculate the ideal resolution of the source data
    let sourceResolution = (0, $983289ae1d13cd2a$export$2d8f7b4eec383d44)(targetProj, targetResolution, targetCenter);
    const targetMetersPerUnit = targetProj.getMetersPerUnit();
    if (targetMetersPerUnit !== undefined) sourceResolution *= targetMetersPerUnit;
    const sourceMetersPerUnit = sourceProj.getMetersPerUnit();
    if (sourceMetersPerUnit !== undefined) sourceResolution /= sourceMetersPerUnit;
    // Based on the projection properties, the point resolution at the specified
    // coordinates may be slightly different. We need to reverse-compensate this
    // in order to achieve optimal results.
    const sourceExtent = sourceProj.getExtent();
    if (!sourceExtent || (0, $84be800ca44e672c$export$ac68c24d37ca240f)(sourceExtent, sourceCenter)) {
        const compensationFactor = (0, $983289ae1d13cd2a$export$2d8f7b4eec383d44)(sourceProj, sourceResolution, sourceCenter) / sourceResolution;
        if (isFinite(compensationFactor) && compensationFactor > 0) sourceResolution /= compensationFactor;
    }
    return sourceResolution;
}
function $6f210e8a8cb248a3$export$16d356211d01f1cc(sourceProj, targetProj, targetExtent, targetResolution) {
    const targetCenter = (0, $84be800ca44e672c$export$c91255cadecfe081)(targetExtent);
    let sourceResolution = $6f210e8a8cb248a3$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution);
    if (!isFinite(sourceResolution) || sourceResolution <= 0) (0, $84be800ca44e672c$export$f9ed8a3d123a08e2)(targetExtent, function(corner) {
        sourceResolution = $6f210e8a8cb248a3$export$5fbb958059b7e71f(sourceProj, targetProj, corner, targetResolution);
        return isFinite(sourceResolution) && sourceResolution > 0;
    });
    return sourceResolution;
}
function $6f210e8a8cb248a3$export$b3890eb0ae9dca99(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, renderEdges, interpolate) {
    const context = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(Math.round(pixelRatio * width), Math.round(pixelRatio * height), $6f210e8a8cb248a3$export$a166f0857c555517);
    if (!interpolate) context.imageSmoothingEnabled = false;
    if (sources.length === 0) return context.canvas;
    context.scale(pixelRatio, pixelRatio);
    function pixelRound(value) {
        return Math.round(value * pixelRatio) / pixelRatio;
    }
    context.globalCompositeOperation = "lighter";
    const sourceDataExtent = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
    sources.forEach(function(src, i, arr) {
        (0, $84be800ca44e672c$export$8b58be045bf06082)(sourceDataExtent, src.extent);
    });
    const canvasWidthInUnits = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(sourceDataExtent);
    const canvasHeightInUnits = (0, $84be800ca44e672c$export$c08559766941f856)(sourceDataExtent);
    const stitchContext = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution), $6f210e8a8cb248a3$export$a166f0857c555517);
    if (!interpolate) stitchContext.imageSmoothingEnabled = false;
    const stitchScale = pixelRatio / sourceResolution;
    sources.forEach(function(src, i, arr) {
        const xPos = src.extent[0] - sourceDataExtent[0];
        const yPos = -(src.extent[3] - sourceDataExtent[3]);
        const srcWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(src.extent);
        const srcHeight = (0, $84be800ca44e672c$export$c08559766941f856)(src.extent);
        // This test should never fail -- but it does. Need to find a fix the upstream condition
        if (src.image.width > 0 && src.image.height > 0) stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);
    });
    const targetTopLeft = (0, $84be800ca44e672c$export$cb1538b07e6964ff)(targetExtent);
    triangulation.getTriangles().forEach(function(triangle, i, arr) {
        /* Calculate affine transform (src -> dst)
     * Resulting matrix can be used to transform coordinate
     * from `sourceProjection` to destination pixels.
     *
     * To optimize number of context calls and increase numerical stability,
     * we also do the following operations:
     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
     * here before solving the linear system so [ui, vi] are pixel coordinates.
     *
     * Src points: xi, yi
     * Dst points: ui, vi
     * Affine coefficients: aij
     *
     * | x0 y0 1  0  0 0 |   |a00|   |u0|
     * | x1 y1 1  0  0 0 |   |a01|   |u1|
     * | x2 y2 1  0  0 0 | x |a02| = |u2|
     * |  0  0 0 x0 y0 1 |   |a10|   |v0|
     * |  0  0 0 x1 y1 1 |   |a11|   |v1|
     * |  0  0 0 x2 y2 1 |   |a12|   |v2|
     */ const source = triangle.source;
        const target = triangle.target;
        let x0 = source[0][0], y0 = source[0][1];
        let x1 = source[1][0], y1 = source[1][1];
        let x2 = source[2][0], y2 = source[2][1];
        // Make sure that everything is on pixel boundaries
        const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);
        const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);
        const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);
        const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);
        const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);
        const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);
        // Shift all the source points to improve numerical stability
        // of all the subsequent calculations. The [x0, y0] is used here.
        // This is also used to simplify the linear system.
        const sourceNumericalShiftX = x0;
        const sourceNumericalShiftY = y0;
        x0 = 0;
        y0 = 0;
        x1 -= sourceNumericalShiftX;
        y1 -= sourceNumericalShiftY;
        x2 -= sourceNumericalShiftX;
        y2 -= sourceNumericalShiftY;
        const augmentedMatrix = [
            [
                x1,
                y1,
                0,
                0,
                u1 - u0
            ],
            [
                x2,
                y2,
                0,
                0,
                u2 - u0
            ],
            [
                0,
                0,
                x1,
                y1,
                v1 - v0
            ],
            [
                0,
                0,
                x2,
                y2,
                v2 - v0
            ]
        ];
        const affineCoefs = (0, $57ec69d152197e1d$export$8240f01c446270e6)(augmentedMatrix);
        if (!affineCoefs) return;
        context.save();
        context.beginPath();
        if ($6f210e8a8cb248a3$var$isBrokenDiagonalRendering() || !interpolate) {
            // Make sure that all lines are horizontal or vertical
            context.moveTo(u1, v1);
            // This is the diagonal line. Do it in 4 steps
            const steps = 4;
            const ud = u0 - u1;
            const vd = v0 - v1;
            for(let step = 0; step < steps; step++){
                // Go horizontally
                context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1)));
                // Go vertically
                if (step != steps - 1) context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));
            }
            // We are almost at u0r, v0r
            context.lineTo(u2, v2);
        } else {
            context.moveTo(u1, v1);
            context.lineTo(u0, v0);
            context.lineTo(u2, v2);
        }
        context.clip();
        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);
        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);
        context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);
        context.drawImage(stitchContext.canvas, 0, 0);
        context.restore();
    });
    (0, $1d92219e1eaa7bd2$export$e918ac6a1026a12a)(stitchContext);
    $6f210e8a8cb248a3$export$a166f0857c555517.push(stitchContext.canvas);
    if (renderEdges) {
        context.save();
        context.globalCompositeOperation = "source-over";
        context.strokeStyle = "black";
        context.lineWidth = 1;
        triangulation.getTriangles().forEach(function(triangle, i, arr) {
            const target = triangle.target;
            const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
            const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
            const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
            const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
            const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
            const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
            context.beginPath();
            context.moveTo(u1, v1);
            context.lineTo(u0, v0);
            context.lineTo(u2, v2);
            context.closePath();
            context.stroke();
        });
        context.restore();
    }
    return context.canvas;
}






/**
 * @typedef {function(number, number, number, number) : (import("../ImageTile.js").default)} FunctionType
 */ /**
 * @classdesc
 * Class encapsulating single reprojected tile.
 * See {@link module:ol/source/TileImage~TileImage}.
 *
 */ class $8caf134bcaf1c970$var$ReprojTile extends (0, $776b6e4ea38ddf87$export$2e2bcd8739ae039) {
    /**
   * @param {import("../proj/Projection.js").default} sourceProj Source projection.
   * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
   * @param {import("../proj/Projection.js").default} targetProj Target projection.
   * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
   * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
   * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} gutter Gutter of the source tiles.
   * @param {FunctionType} getTileFunction
   *     Function returning source tiles (z, x, y, pixelRatio).
   * @param {number} [errorThreshold] Acceptable reprojection error (in px).
   * @param {boolean} [renderEdges] Render reprojection edges.
   * @param {boolean} [interpolate] Use linear interpolation when resampling.
   */ constructor(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, errorThreshold, renderEdges, interpolate){
        super(tileCoord, (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE, {
            interpolate: !!interpolate
        });
        /**
     * @private
     * @type {boolean}
     */ this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @private
     * @type {number}
     */ this.gutter_ = gutter;
        /**
     * @private
     * @type {HTMLCanvasElement}
     */ this.canvas_ = null;
        /**
     * @private
     * @type {import("../tilegrid/TileGrid.js").default}
     */ this.sourceTileGrid_ = sourceTileGrid;
        /**
     * @private
     * @type {import("../tilegrid/TileGrid.js").default}
     */ this.targetTileGrid_ = targetTileGrid;
        /**
     * @private
     * @type {import("../tilecoord.js").TileCoord}
     */ this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
        /**
     * @private
     * @type {!Array<import("../ImageTile.js").default>}
     */ this.sourceTiles_ = [];
        /**
     * @private
     * @type {?Array<import("../events.js").EventsKey>}
     */ this.sourcesListenerKeys_ = null;
        /**
     * @private
     * @type {number}
     */ this.sourceZ_ = 0;
        const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);
        const maxTargetExtent = this.targetTileGrid_.getExtent();
        let maxSourceExtent = this.sourceTileGrid_.getExtent();
        const limitedTargetExtent = maxTargetExtent ? (0, $84be800ca44e672c$export$72209efa88586d42)(targetExtent, maxTargetExtent) : targetExtent;
        if ((0, $84be800ca44e672c$export$520c40045967cb15)(limitedTargetExtent) === 0) {
            // Tile is completely outside range -> EMPTY
            // TODO: is it actually correct that the source even creates the tile ?
            this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY;
            return;
        }
        const sourceProjExtent = sourceProj.getExtent();
        if (sourceProjExtent) {
            if (!maxSourceExtent) maxSourceExtent = sourceProjExtent;
            else maxSourceExtent = (0, $84be800ca44e672c$export$72209efa88586d42)(maxSourceExtent, sourceProjExtent);
        }
        const targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);
        const sourceResolution = (0, $6f210e8a8cb248a3$export$16d356211d01f1cc)(sourceProj, targetProj, limitedTargetExtent, targetResolution);
        if (!isFinite(sourceResolution) || sourceResolution <= 0) {
            // invalid sourceResolution -> EMPTY
            // probably edges of the projections when no extent is defined
            this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY;
            return;
        }
        const errorThresholdInPixels = errorThreshold !== undefined ? errorThreshold : (0, $f18ab1cde9e52029$export$3ecb4bcfa5aae855);
        /**
     * @private
     * @type {!import("./Triangulation.js").default}
     */ this.triangulation_ = new (0, $686d602ee344b3e4$export$2e2bcd8739ae039)(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
        if (this.triangulation_.getTriangles().length === 0) {
            // no valid triangles -> EMPTY
            this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY;
            return;
        }
        this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
        let sourceExtent = this.triangulation_.calculateSourceExtent();
        if (maxSourceExtent) {
            if (sourceProj.canWrapX()) {
                sourceExtent[1] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
                sourceExtent[3] = (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
            } else sourceExtent = (0, $84be800ca44e672c$export$72209efa88586d42)(sourceExtent, maxSourceExtent);
        }
        if (!(0, $84be800ca44e672c$export$520c40045967cb15)(sourceExtent)) this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY;
        else {
            const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, this.sourceZ_);
            for(let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++)for(let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++){
                const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);
                if (tile) this.sourceTiles_.push(tile);
            }
            if (this.sourceTiles_.length === 0) this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY;
        }
    }
    /**
   * Get the HTML Canvas element for this tile.
   * @return {HTMLCanvasElement} Canvas.
   */ getImage() {
        return this.canvas_;
    }
    /**
   * @private
   */ reproject_() {
        const sources = [];
        this.sourceTiles_.forEach((tile)=>{
            if (tile && tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED) sources.push({
                extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
                image: tile.getImage()
            });
        });
        this.sourceTiles_.length = 0;
        if (sources.length === 0) this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR;
        else {
            const z = this.wrappedTileCoord_[0];
            const size = this.targetTileGrid_.getTileSize(z);
            const width = typeof size === "number" ? size : size[0];
            const height = typeof size === "number" ? size : size[1];
            const targetResolution = this.targetTileGrid_.getResolution(z);
            const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
            const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
            this.canvas_ = (0, $6f210e8a8cb248a3$export$b3890eb0ae9dca99)(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);
            this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED;
        }
        this.changed();
    }
    /**
   * Load not yet loaded URI.
   */ load() {
        if (this.state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE) {
            this.state = (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADING;
            this.changed();
            let leftToLoad = 0;
            this.sourcesListenerKeys_ = [];
            this.sourceTiles_.forEach((tile)=>{
                const state = tile.getState();
                if (state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE || state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADING) {
                    leftToLoad++;
                    const sourceListenKey = (0, $776f68d2a754760b$export$63174c828edd6ff8)(tile, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, function(e) {
                        const state = tile.getState();
                        if (state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED || state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR || state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY) {
                            (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(sourceListenKey);
                            leftToLoad--;
                            if (leftToLoad === 0) {
                                this.unlistenSources_();
                                this.reproject_();
                            }
                        }
                    }, this);
                    this.sourcesListenerKeys_.push(sourceListenKey);
                }
            });
            if (leftToLoad === 0) setTimeout(this.reproject_.bind(this), 0);
            else this.sourceTiles_.forEach(function(tile, i, arr) {
                const state = tile.getState();
                if (state == (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE) tile.load();
            });
        }
    }
    /**
   * @private
   */ unlistenSources_() {
        this.sourcesListenerKeys_.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
        this.sourcesListenerKeys_ = null;
    }
    /**
   * Remove from the cache due to expiry
   */ release() {
        if (this.canvas_) {
            (0, $1d92219e1eaa7bd2$export$e918ac6a1026a12a)(this.canvas_.getContext("2d"));
            (0, $6f210e8a8cb248a3$export$a166f0857c555517).push(this.canvas_);
            this.canvas_ = null;
        }
        super.release();
    }
}
var $8caf134bcaf1c970$export$2e2bcd8739ae039 = $8caf134bcaf1c970$var$ReprojTile;


/**
 * @module ol/TileRange
 */ /**
 * A representation of a contiguous block of tiles.  A tile range is specified
 * by its min/max tile coordinates and is inclusive of coordinates.
 */ class $35236bccfd8a82eb$var$TileRange {
    /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   */ constructor(minX, maxX, minY, maxY){
        /**
     * @type {number}
     */ this.minX = minX;
        /**
     * @type {number}
     */ this.maxX = maxX;
        /**
     * @type {number}
     */ this.minY = minY;
        /**
     * @type {number}
     */ this.maxY = maxY;
    }
    /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {boolean} Contains tile coordinate.
   */ contains(tileCoord) {
        return this.containsXY(tileCoord[1], tileCoord[2]);
    }
    /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Contains.
   */ containsTileRange(tileRange) {
        return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
    }
    /**
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @return {boolean} Contains coordinate.
   */ containsXY(x, y) {
        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
    }
    /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Equals.
   */ equals(tileRange) {
        return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
    }
    /**
   * @param {TileRange} tileRange Tile range.
   */ extend(tileRange) {
        if (tileRange.minX < this.minX) this.minX = tileRange.minX;
        if (tileRange.maxX > this.maxX) this.maxX = tileRange.maxX;
        if (tileRange.minY < this.minY) this.minY = tileRange.minY;
        if (tileRange.maxY > this.maxY) this.maxY = tileRange.maxY;
    }
    /**
   * @return {number} Height.
   */ getHeight() {
        return this.maxY - this.minY + 1;
    }
    /**
   * @return {import("./size.js").Size} Size.
   */ getSize() {
        return [
            this.getWidth(),
            this.getHeight()
        ];
    }
    /**
   * @return {number} Width.
   */ getWidth() {
        return this.maxX - this.minX + 1;
    }
    /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Intersects.
   */ intersects(tileRange) {
        return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;
    }
}
function $35236bccfd8a82eb$export$958e3e1a02eac4b6(minX, maxX, minY, maxY, tileRange) {
    if (tileRange !== undefined) {
        tileRange.minX = minX;
        tileRange.maxX = maxX;
        tileRange.minY = minY;
        tileRange.maxY = maxY;
        return tileRange;
    }
    return new $35236bccfd8a82eb$var$TileRange(minX, maxX, minY, maxY);
}
var $35236bccfd8a82eb$export$2e2bcd8739ae039 = $35236bccfd8a82eb$var$TileRange;









/**
 * @classdesc
 * Canvas renderer for tile layers.
 * @api
 * @template {import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default} [LayerType=import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default]
 * @extends {CanvasLayerRenderer<LayerType>}
 */ class $ce5f434861b61c52$var$CanvasTileLayerRenderer extends (0, $df04b1ef9f892809$export$2e2bcd8739ae039) {
    /**
   * @param {LayerType} tileLayer Tile layer.
   */ constructor(tileLayer){
        super(tileLayer);
        /**
     * Rendered extent has changed since the previous `renderFrame()` call
     * @type {boolean}
     */ this.extentChanged = true;
        /**
     * @private
     * @type {?import("../../extent.js").Extent}
     */ this.renderedExtent_ = null;
        /**
     * @protected
     * @type {number}
     */ this.renderedPixelRatio;
        /**
     * @protected
     * @type {import("../../proj/Projection.js").default}
     */ this.renderedProjection = null;
        /**
     * @protected
     * @type {number}
     */ this.renderedRevision;
        /**
     * @protected
     * @type {!Array<import("../../Tile.js").default>}
     */ this.renderedTiles = [];
        /**
     * @private
     * @type {boolean}
     */ this.newTiles_ = false;
        /**
     * @protected
     * @type {import("../../extent.js").Extent}
     */ this.tmpExtent = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
        /**
     * @private
     * @type {import("../../TileRange.js").default}
     */ this.tmpTileRange_ = new (0, $35236bccfd8a82eb$export$2e2bcd8739ae039)(0, 0, 0, 0);
    }
    /**
   * @protected
   * @param {import("../../Tile.js").default} tile Tile.
   * @return {boolean} Tile is drawable.
   */ isDrawableTile(tile) {
        const tileLayer = this.getLayer();
        const tileState = tile.getState();
        const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
        return tileState == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED || tileState == (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY || tileState == (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR && !useInterimTilesOnError;
    }
    /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {!import("../../Tile.js").default} Tile.
   */ getTile(z, x, y, frameState) {
        const pixelRatio = frameState.pixelRatio;
        const projection = frameState.viewState.projection;
        const tileLayer = this.getLayer();
        const tileSource = tileLayer.getSource();
        let tile = tileSource.getTile(z, x, y, pixelRatio, projection);
        if (tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR) {
            if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) // Preloaded tiles for lower resolutions might have finished loading.
            this.newTiles_ = true;
        }
        if (!this.isDrawableTile(tile)) tile = tile.getInterimTile();
        return tile;
    }
    /**
   * @param {import("../../pixel.js").Pixel} pixel Pixel.
   * @return {Uint8ClampedArray} Data at the pixel location.
   */ getData(pixel) {
        const frameState = this.frameState;
        if (!frameState) return null;
        const layer = this.getLayer();
        const coordinate = (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());
        const layerExtent = layer.getExtent();
        if (layerExtent) {
            if (!(0, $84be800ca44e672c$export$ac68c24d37ca240f)(layerExtent, coordinate)) return null;
        }
        const pixelRatio = frameState.pixelRatio;
        const projection = frameState.viewState.projection;
        const viewState = frameState.viewState;
        const source = layer.getRenderSource();
        const tileGrid = source.getTileGridForProjection(viewState.projection);
        const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);
        for(let z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z){
            const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
            const tile = source.getTile(z, tileCoord[1], tileCoord[2], pixelRatio, projection);
            if (!(tile instanceof (0, $0abdbb86e416a014$export$2e2bcd8739ae039) || tile instanceof (0, $8caf134bcaf1c970$export$2e2bcd8739ae039)) || tile instanceof (0, $8caf134bcaf1c970$export$2e2bcd8739ae039) && tile.getState() === (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY) return null;
            if (tile.getState() !== (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED) continue;
            const tileOrigin = tileGrid.getOrigin(z);
            const tileSize = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z));
            const tileResolution = tileGrid.getResolution(z);
            const col = Math.floor(tilePixelRatio * ((coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0]));
            const row = Math.floor(tilePixelRatio * ((tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1]));
            const gutter = Math.round(tilePixelRatio * source.getGutterForProjection(viewState.projection));
            return this.getImageData(tile.getImage(), col + gutter, row + gutter);
        }
        return null;
    }
    /**
   * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
   * @param {number} zoom Zoom level.
   * @param {import("../../Tile.js").default} tile Tile.
   * @return {boolean|void} If `false`, the tile will not be considered loaded.
   */ loadedTileCallback(tiles, zoom, tile) {
        if (this.isDrawableTile(tile)) return super.loadedTileCallback(tiles, zoom, tile);
        return false;
    }
    /**
   * Determine whether render should be called.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */ prepareFrame(frameState) {
        return !!this.getLayer().getSource();
    }
    /**
   * Render the layer.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement} target Target that may be used to render content to.
   * @return {HTMLElement} The rendered element.
   */ renderFrame(frameState, target) {
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        const viewState = frameState.viewState;
        const projection = viewState.projection;
        const viewResolution = viewState.resolution;
        const viewCenter = viewState.center;
        const rotation = viewState.rotation;
        const pixelRatio = frameState.pixelRatio;
        const tileLayer = this.getLayer();
        const tileSource = tileLayer.getSource();
        const sourceRevision = tileSource.getRevision();
        const tileGrid = tileSource.getTileGridForProjection(projection);
        const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
        const tileResolution = tileGrid.getResolution(z);
        let extent = frameState.extent;
        const resolution = frameState.viewState.resolution;
        const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
        // desired dimensions of the canvas in pixels
        const width = Math.round((0, $84be800ca44e672c$export$3c49c185de0c2bfc)(extent) / resolution * pixelRatio);
        const height = Math.round((0, $84be800ca44e672c$export$c08559766941f856)(extent) / resolution * pixelRatio);
        const layerExtent = layerState.extent && (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(layerState.extent, projection);
        if (layerExtent) extent = (0, $84be800ca44e672c$export$72209efa88586d42)(extent, (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(layerState.extent, projection));
        const dx = tileResolution * width / 2 / tilePixelRatio;
        const dy = tileResolution * height / 2 / tilePixelRatio;
        const canvasExtent = [
            viewCenter[0] - dx,
            viewCenter[1] - dy,
            viewCenter[0] + dx,
            viewCenter[1] + dy
        ];
        const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
        /**
     * @type {Object<number, Object<string, import("../../Tile.js").default>>}
     */ const tilesToDrawByZ = {};
        tilesToDrawByZ[z] = {};
        const findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
        const tmpExtent = this.tmpExtent;
        const tmpTileRange = this.tmpTileRange_;
        this.newTiles_ = false;
        const viewport = rotation ? (0, $84be800ca44e672c$export$4b7a6fb4002cd6ac)(viewState.center, resolution, rotation, frameState.size) : undefined;
        for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){
            if (rotation && !tileGrid.tileCoordIntersectsViewport([
                z,
                x,
                y
            ], viewport)) continue;
            const tile = this.getTile(z, x, y, frameState);
            if (this.isDrawableTile(tile)) {
                const uid = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(this);
                if (tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED) {
                    tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                    let inTransition = tile.inTransition(uid);
                    if (inTransition && layerState.opacity !== 1) {
                        // Skipping transition when layer is not fully opaque avoids visual artifacts.
                        tile.endTransition(uid);
                        inTransition = false;
                    }
                    if (!this.newTiles_ && (inTransition || !this.renderedTiles.includes(tile))) this.newTiles_ = true;
                }
                if (tile.getAlpha(uid, frameState.time) === 1) continue;
            }
            const childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
            let covered = false;
            if (childTileRange) covered = findLoadedTiles(z + 1, childTileRange);
            if (!covered) tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
        }
        const canvasScale = tileResolution / viewResolution * pixelRatio / tilePixelRatio;
        // set forward and inverse pixel transforms
        (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);
        const canvasTransform = (0, $d59a735b25ae191a$export$f84e8e69fd4488a5)(this.pixelTransform);
        this.useContainer(target, canvasTransform, this.getBackground(frameState));
        const context = this.context;
        const canvas = context.canvas;
        (0, $d59a735b25ae191a$export$bd70ea2a93c0fa4)(this.inversePixelTransform, this.pixelTransform);
        // set scale transform for calculating tile positions on the canvas
        (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
        if (canvas.width != width || canvas.height != height) {
            canvas.width = width;
            canvas.height = height;
        } else if (!this.containerReused) context.clearRect(0, 0, width, height);
        if (layerExtent) this.clipUnrotated(context, frameState, layerExtent);
        if (!tileSource.getInterpolate()) context.imageSmoothingEnabled = false;
        this.preRender(context, frameState);
        this.renderedTiles.length = 0;
        /** @type {Array<number>} */ let zs = Object.keys(tilesToDrawByZ).map(Number);
        zs.sort((0, $69c1cc8ae30f997f$export$fcb633242ef15540));
        let clips, clipZs, currentClip;
        if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) zs = zs.reverse();
        else {
            clips = [];
            clipZs = [];
        }
        for(let i = zs.length - 1; i >= 0; --i){
            const currentZ = zs[i];
            const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
            const currentResolution = tileGrid.getResolution(currentZ);
            const currentScale = currentResolution / tileResolution;
            const dx = currentTilePixelSize[0] * currentScale * canvasScale;
            const dy = currentTilePixelSize[1] * currentScale * canvasScale;
            const originTileCoord = tileGrid.getTileCoordForCoordAndZ((0, $84be800ca44e672c$export$cb1538b07e6964ff)(canvasExtent), currentZ);
            const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
            const origin = (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(this.tempTransform, [
                tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,
                tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution
            ]);
            const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
            const tilesToDraw = tilesToDrawByZ[currentZ];
            for(const tileCoordKey in tilesToDraw){
                const tile = /** @type {import("../../ImageTile.js").default} */ tilesToDraw[tileCoordKey];
                const tileCoord = tile.tileCoord;
                // Calculate integer positions and sizes so that tiles align
                const xIndex = originTileCoord[1] - tileCoord[1];
                const nextX = Math.round(origin[0] - (xIndex - 1) * dx);
                const yIndex = originTileCoord[2] - tileCoord[2];
                const nextY = Math.round(origin[1] - (yIndex - 1) * dy);
                const x = Math.round(origin[0] - xIndex * dx);
                const y = Math.round(origin[1] - yIndex * dy);
                const w = nextX - x;
                const h = nextY - y;
                const transition = z === currentZ;
                const inTransition = transition && tile.getAlpha((0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(this), frameState.time) !== 1;
                let contextSaved = false;
                if (!inTransition) {
                    if (clips) {
                        // Clip mask for regions in this tile that already filled by a higher z tile
                        currentClip = [
                            x,
                            y,
                            x + w,
                            y,
                            x + w,
                            y + h,
                            x,
                            y + h
                        ];
                        for(let i = 0, ii = clips.length; i < ii; ++i)if (z !== currentZ && currentZ < clipZs[i]) {
                            const clip = clips[i];
                            if ((0, $84be800ca44e672c$export$7b0a31e10bbff018)([
                                x,
                                y,
                                x + w,
                                y + h
                            ], [
                                clip[0],
                                clip[3],
                                clip[4],
                                clip[7]
                            ])) {
                                if (!contextSaved) {
                                    context.save();
                                    contextSaved = true;
                                }
                                context.beginPath();
                                // counter-clockwise (outer ring) for current tile
                                context.moveTo(currentClip[0], currentClip[1]);
                                context.lineTo(currentClip[2], currentClip[3]);
                                context.lineTo(currentClip[4], currentClip[5]);
                                context.lineTo(currentClip[6], currentClip[7]);
                                // clockwise (inner ring) for higher z tile
                                context.moveTo(clip[6], clip[7]);
                                context.lineTo(clip[4], clip[5]);
                                context.lineTo(clip[2], clip[3]);
                                context.lineTo(clip[0], clip[1]);
                                context.clip();
                            }
                        }
                        clips.push(currentClip);
                        clipZs.push(currentZ);
                    } else context.clearRect(x, y, w, h);
                }
                this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition);
                if (clips && !inTransition) {
                    if (contextSaved) context.restore();
                    this.renderedTiles.unshift(tile);
                } else this.renderedTiles.push(tile);
                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
            }
        }
        this.renderedRevision = sourceRevision;
        this.renderedResolution = tileResolution;
        this.extentChanged = !this.renderedExtent_ || !(0, $84be800ca44e672c$export$e9bab7fafb253603)(this.renderedExtent_, canvasExtent);
        this.renderedExtent_ = canvasExtent;
        this.renderedPixelRatio = pixelRatio;
        this.renderedProjection = projection;
        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
        this.scheduleExpireCache(frameState, tileSource);
        this.postRender(context, frameState);
        if (layerState.extent) context.restore();
        context.imageSmoothingEnabled = true;
        if (canvasTransform !== canvas.style.transform) canvas.style.transform = canvasTransform;
        return this.container;
    }
    /**
   * @param {import("../../ImageTile.js").default} tile Tile.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {number} x Left of the tile.
   * @param {number} y Top of the tile.
   * @param {number} w Width of the tile.
   * @param {number} h Height of the tile.
   * @param {number} gutter Tile gutter.
   * @param {boolean} transition Apply an alpha transition.
   */ drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {
        const image = this.getTileImage(tile);
        if (!image) return;
        const uid = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(this);
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        const alpha = layerState.opacity * (transition ? tile.getAlpha(uid, frameState.time) : 1);
        const alphaChanged = alpha !== this.context.globalAlpha;
        if (alphaChanged) {
            this.context.save();
            this.context.globalAlpha = alpha;
        }
        this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
        if (alphaChanged) this.context.restore();
        if (alpha !== layerState.opacity) frameState.animate = true;
        else if (transition) tile.endTransition(uid);
    }
    /**
   * @return {HTMLCanvasElement} Image
   */ getImage() {
        const context = this.context;
        return context ? context.canvas : null;
    }
    /**
   * Get the image from a tile.
   * @param {import("../../ImageTile.js").default} tile Tile.
   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
   * @protected
   */ getTileImage(tile) {
        return tile.getImage();
    }
    /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../source/Tile.js").default} tileSource Tile source.
   * @protected
   */ scheduleExpireCache(frameState, tileSource) {
        if (tileSource.canExpireCache()) {
            /**
       * @param {import("../../source/Tile.js").default} tileSource Tile source.
       * @param {import("../../Map.js").default} map Map.
       * @param {import("../../Map.js").FrameState} frameState Frame state.
       */ const postRenderFunction = (function(tileSource, map, frameState) {
                const tileSourceKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(tileSource);
                if (tileSourceKey in frameState.usedTiles) tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);
            }).bind(null, tileSource);
            frameState.postRenderFunctions.push(/** @type {import("../../Map.js").PostRenderFunction} */ postRenderFunction);
        }
    }
    /**
   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
   * @param {import("../../source/Tile.js").default} tileSource Tile source.
   * @param {import('../../Tile.js').default} tile Tile.
   * @protected
   */ updateUsedTiles(usedTiles, tileSource, tile) {
        // FIXME should we use tilesToDrawByZ instead?
        const tileSourceKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(tileSource);
        if (!(tileSourceKey in usedTiles)) usedTiles[tileSourceKey] = {};
        usedTiles[tileSourceKey][tile.getKey()] = true;
    }
    /**
   * Manage tile pyramid.
   * This function performs a number of functions related to the tiles at the
   * current zoom and lower zoom levels:
   * - registers idle tiles in frameState.wantedTiles so that they are not
   *   discarded by the tile queue
   * - enqueues missing tiles
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../source/Tile.js").default} tileSource Tile source.
   * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../../proj/Projection.js").default} projection Projection.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {number} currentZ Current Z.
   * @param {number} preload Load low resolution tiles up to `preload` levels.
   * @param {function(import("../../Tile.js").default):void} [tileCallback] Tile callback.
   * @protected
   */ manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, tileCallback) {
        const tileSourceKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(tileSource);
        if (!(tileSourceKey in frameState.wantedTiles)) frameState.wantedTiles[tileSourceKey] = {};
        const wantedTiles = frameState.wantedTiles[tileSourceKey];
        const tileQueue = frameState.tileQueue;
        const minZoom = tileGrid.getMinZoom();
        const rotation = frameState.viewState.rotation;
        const viewport = rotation ? (0, $84be800ca44e672c$export$4b7a6fb4002cd6ac)(frameState.viewState.center, frameState.viewState.resolution, rotation, frameState.size) : undefined;
        let tileCount = 0;
        let tile, tileRange, tileResolution, x, y, z;
        for(z = minZoom; z <= currentZ; ++z){
            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
            tileResolution = tileGrid.getResolution(z);
            for(x = tileRange.minX; x <= tileRange.maxX; ++x)for(y = tileRange.minY; y <= tileRange.maxY; ++y){
                if (rotation && !tileGrid.tileCoordIntersectsViewport([
                    z,
                    x,
                    y
                ], viewport)) continue;
                if (currentZ - z <= preload) {
                    ++tileCount;
                    tile = tileSource.getTile(z, x, y, pixelRatio, projection);
                    if (tile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE) {
                        wantedTiles[tile.getKey()] = true;
                        if (!tileQueue.isKeyQueued(tile.getKey())) tileQueue.enqueue([
                            tile,
                            tileSourceKey,
                            tileGrid.getTileCoordCenter(tile.tileCoord),
                            tileResolution
                        ]);
                    }
                    if (tileCallback !== undefined) tileCallback(tile);
                } else tileSource.useTile(z, x, y, projection);
            }
        }
        tileSource.updateCacheSize(tileCount, projection);
    }
}
var $ce5f434861b61c52$export$2e2bcd8739ae039 = $ce5f434861b61c52$var$CanvasTileLayerRenderer;


/**
 * @classdesc
 * For layer sources that provide pre-rendered, tiled images in grids that are
 * organized by zoom levels for specific resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Tile.js").default} TileSourceType
 * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>
 * @api
 */ class $da4918b2f77ef6de$var$TileLayer extends (0, $21d7e6e4bcfe81eb$export$2e2bcd8739ae039) {
    /**
   * @param {import("./BaseTile.js").Options<TileSourceType>} [options] Tile layer options.
   */ constructor(options){
        super(options);
    }
    createRenderer() {
        return new (0, $ce5f434861b61c52$export$2e2bcd8739ae039)(this);
    }
}
var $da4918b2f77ef6de$export$2e2bcd8739ae039 = $da4918b2f77ef6de$var$TileLayer;

/**
 * @module ol/layer/Vector
 */ /**
 * @module ol/layer/BaseVector
 */ 
var $878c4f61c06eb00a$exports = {};
!function(t, i) {
    $878c4f61c06eb00a$exports = i();
}($878c4f61c06eb00a$exports, function() {
    "use strict";
    function t(t, r, e, a, h) {
        !function t(n, r, e, a, h) {
            for(; a > e;){
                if (a - e > 600) {
                    var o = a - e + 1, s = r - e + 1, l = Math.log(o), f = .5 * Math.exp(2 * l / 3), u = .5 * Math.sqrt(l * f * (o - f) / o) * (s - o / 2 < 0 ? -1 : 1), m = Math.max(e, Math.floor(r - s * f / o + u)), c = Math.min(a, Math.floor(r + (o - s) * f / o + u));
                    t(n, r, m, c, h);
                }
                var p = n[r], d = e, x = a;
                for(i(n, e, r), h(n[a], p) > 0 && i(n, e, a); d < x;){
                    for(i(n, d, x), d++, x--; h(n[d], p) < 0;)d++;
                    for(; h(n[x], p) > 0;)x--;
                }
                0 === h(n[e], p) ? i(n, e, x) : i(n, ++x, a), x <= r && (e = x + 1), r <= x && (a = x - 1);
            }
        }(t, r, e || 0, a || t.length - 1, h || n);
    }
    function i(t, i, n) {
        var r = t[i];
        t[i] = t[n], t[n] = r;
    }
    function n(t, i) {
        return t < i ? -1 : t > i ? 1 : 0;
    }
    var r = function(t) {
        void 0 === t && (t = 9), this._maxEntries = Math.max(4, t), this._minEntries = Math.max(2, Math.ceil(.4 * this._maxEntries)), this.clear();
    };
    function e(t, i, n) {
        if (!n) return i.indexOf(t);
        for(var r = 0; r < i.length; r++)if (n(t, i[r])) return r;
        return -1;
    }
    function a(t, i) {
        h(t, 0, t.children.length, i, t);
    }
    function h(t, i, n, r, e) {
        e || (e = p(null)), e.minX = 1 / 0, e.minY = 1 / 0, e.maxX = -1 / 0, e.maxY = -1 / 0;
        for(var a = i; a < n; a++){
            var h = t.children[a];
            o(e, t.leaf ? r(h) : h);
        }
        return e;
    }
    function o(t, i) {
        return t.minX = Math.min(t.minX, i.minX), t.minY = Math.min(t.minY, i.minY), t.maxX = Math.max(t.maxX, i.maxX), t.maxY = Math.max(t.maxY, i.maxY), t;
    }
    function s(t, i) {
        return t.minX - i.minX;
    }
    function l(t, i) {
        return t.minY - i.minY;
    }
    function f(t) {
        return (t.maxX - t.minX) * (t.maxY - t.minY);
    }
    function u(t) {
        return t.maxX - t.minX + (t.maxY - t.minY);
    }
    function m(t, i) {
        return t.minX <= i.minX && t.minY <= i.minY && i.maxX <= t.maxX && i.maxY <= t.maxY;
    }
    function c(t, i) {
        return i.minX <= t.maxX && i.minY <= t.maxY && i.maxX >= t.minX && i.maxY >= t.minY;
    }
    function p(t) {
        return {
            children: t,
            height: 1,
            leaf: !0,
            minX: 1 / 0,
            minY: 1 / 0,
            maxX: -1 / 0,
            maxY: -1 / 0
        };
    }
    function d(i, n, r, e, a) {
        for(var h = [
            n,
            r
        ]; h.length;)if (!((r = h.pop()) - (n = h.pop()) <= e)) {
            var o = n + Math.ceil((r - n) / e / 2) * e;
            t(i, o, n, r, a), h.push(n, o, o, r);
        }
    }
    return r.prototype.all = function() {
        return this._all(this.data, []);
    }, r.prototype.search = function(t) {
        var i = this.data, n = [];
        if (!c(t, i)) return n;
        for(var r = this.toBBox, e = []; i;){
            for(var a = 0; a < i.children.length; a++){
                var h = i.children[a], o = i.leaf ? r(h) : h;
                c(t, o) && (i.leaf ? n.push(h) : m(t, o) ? this._all(h, n) : e.push(h));
            }
            i = e.pop();
        }
        return n;
    }, r.prototype.collides = function(t) {
        var i = this.data;
        if (!c(t, i)) return !1;
        for(var n = []; i;){
            for(var r = 0; r < i.children.length; r++){
                var e = i.children[r], a = i.leaf ? this.toBBox(e) : e;
                if (c(t, a)) {
                    if (i.leaf || m(t, a)) return !0;
                    n.push(e);
                }
            }
            i = n.pop();
        }
        return !1;
    }, r.prototype.load = function(t) {
        if (!t || !t.length) return this;
        if (t.length < this._minEntries) {
            for(var i = 0; i < t.length; i++)this.insert(t[i]);
            return this;
        }
        var n = this._build(t.slice(), 0, t.length - 1, 0);
        if (this.data.children.length) {
            if (this.data.height === n.height) this._splitRoot(this.data, n);
            else {
                if (this.data.height < n.height) {
                    var r = this.data;
                    this.data = n, n = r;
                }
                this._insert(n, this.data.height - n.height - 1, !0);
            }
        } else this.data = n;
        return this;
    }, r.prototype.insert = function(t) {
        return t && this._insert(t, this.data.height - 1), this;
    }, r.prototype.clear = function() {
        return this.data = p([]), this;
    }, r.prototype.remove = function(t, i) {
        if (!t) return this;
        for(var n, r, a, h = this.data, o = this.toBBox(t), s = [], l = []; h || s.length;){
            if (h || (h = s.pop(), r = s[s.length - 1], n = l.pop(), a = !0), h.leaf) {
                var f = e(t, h.children, i);
                if (-1 !== f) return h.children.splice(f, 1), s.push(h), this._condense(s), this;
            }
            a || h.leaf || !m(h, o) ? r ? (n++, h = r.children[n], a = !1) : h = null : (s.push(h), l.push(n), n = 0, r = h, h = h.children[0]);
        }
        return this;
    }, r.prototype.toBBox = function(t) {
        return t;
    }, r.prototype.compareMinX = function(t, i) {
        return t.minX - i.minX;
    }, r.prototype.compareMinY = function(t, i) {
        return t.minY - i.minY;
    }, r.prototype.toJSON = function() {
        return this.data;
    }, r.prototype.fromJSON = function(t) {
        return this.data = t, this;
    }, r.prototype._all = function(t, i) {
        for(var n = []; t;)t.leaf ? i.push.apply(i, t.children) : n.push.apply(n, t.children), t = n.pop();
        return i;
    }, r.prototype._build = function(t, i, n, r) {
        var e, h = n - i + 1, o = this._maxEntries;
        if (h <= o) return a(e = p(t.slice(i, n + 1)), this.toBBox), e;
        r || (r = Math.ceil(Math.log(h) / Math.log(o)), o = Math.ceil(h / Math.pow(o, r - 1))), (e = p([])).leaf = !1, e.height = r;
        var s = Math.ceil(h / o), l = s * Math.ceil(Math.sqrt(o));
        d(t, i, n, l, this.compareMinX);
        for(var f = i; f <= n; f += l){
            var u = Math.min(f + l - 1, n);
            d(t, f, u, s, this.compareMinY);
            for(var m = f; m <= u; m += s){
                var c = Math.min(m + s - 1, u);
                e.children.push(this._build(t, m, c, r - 1));
            }
        }
        return a(e, this.toBBox), e;
    }, r.prototype._chooseSubtree = function(t, i, n, r) {
        for(; r.push(i), !i.leaf && r.length - 1 !== n;){
            for(var e = 1 / 0, a = 1 / 0, h = void 0, o = 0; o < i.children.length; o++){
                var s = i.children[o], l = f(s), u = (m = t, c = s, (Math.max(c.maxX, m.maxX) - Math.min(c.minX, m.minX)) * (Math.max(c.maxY, m.maxY) - Math.min(c.minY, m.minY)) - l);
                u < a ? (a = u, e = l < e ? l : e, h = s) : u === a && l < e && (e = l, h = s);
            }
            i = h || i.children[0];
        }
        var m, c;
        return i;
    }, r.prototype._insert = function(t, i, n) {
        var r = n ? t : this.toBBox(t), e = [], a = this._chooseSubtree(r, this.data, i, e);
        for(a.children.push(t), o(a, r); i >= 0 && e[i].children.length > this._maxEntries;)this._split(e, i), i--;
        this._adjustParentBBoxes(r, e, i);
    }, r.prototype._split = function(t, i) {
        var n = t[i], r = n.children.length, e = this._minEntries;
        this._chooseSplitAxis(n, e, r);
        var h = this._chooseSplitIndex(n, e, r), o = p(n.children.splice(h, n.children.length - h));
        o.height = n.height, o.leaf = n.leaf, a(n, this.toBBox), a(o, this.toBBox), i ? t[i - 1].children.push(o) : this._splitRoot(n, o);
    }, r.prototype._splitRoot = function(t, i) {
        this.data = p([
            t,
            i
        ]), this.data.height = t.height + 1, this.data.leaf = !1, a(this.data, this.toBBox);
    }, r.prototype._chooseSplitIndex = function(t, i, n) {
        for(var r, e, a, o, s, l, u, m = 1 / 0, c = 1 / 0, p = i; p <= n - i; p++){
            var d = h(t, 0, p, this.toBBox), x = h(t, p, n, this.toBBox), v = (e = d, a = x, o = void 0, s = void 0, l = void 0, u = void 0, o = Math.max(e.minX, a.minX), s = Math.max(e.minY, a.minY), l = Math.min(e.maxX, a.maxX), u = Math.min(e.maxY, a.maxY), Math.max(0, l - o) * Math.max(0, u - s)), M = f(d) + f(x);
            v < m ? (m = v, r = p, c = M < c ? M : c) : v === m && M < c && (c = M, r = p);
        }
        return r || n - i;
    }, r.prototype._chooseSplitAxis = function(t, i, n) {
        var r = t.leaf ? this.compareMinX : s, e = t.leaf ? this.compareMinY : l;
        this._allDistMargin(t, i, n, r) < this._allDistMargin(t, i, n, e) && t.children.sort(r);
    }, r.prototype._allDistMargin = function(t, i, n, r) {
        t.children.sort(r);
        for(var e = this.toBBox, a = h(t, 0, i, e), s = h(t, n - i, n, e), l = u(a) + u(s), f = i; f < n - i; f++){
            var m = t.children[f];
            o(a, t.leaf ? e(m) : m), l += u(a);
        }
        for(var c = n - i - 1; c >= i; c--){
            var p = t.children[c];
            o(s, t.leaf ? e(p) : p), l += u(s);
        }
        return l;
    }, r.prototype._adjustParentBBoxes = function(t, i, n) {
        for(var r = n; r >= 0; r--)o(i[r], t);
    }, r.prototype._condense = function(t) {
        for(var i = t.length - 1, n = void 0; i >= 0; i--)0 === t[i].children.length ? i > 0 ? (n = t[i - 1].children).splice(n.indexOf(t[i]), 1) : this.clear() : a(t[i], this.toBBox);
    }, r;
});


/**
 * @module ol/style/Style
 */ /**
 * @module ol/style/Circle
 */ /**
 * @module ol/style/RegularShape
 */ 
/**
 * @module ol/style/Image
 */ 

/**
 * @typedef {Object} Options
 * @property {number} opacity Opacity.
 * @property {boolean} rotateWithView If the image should get rotated with the view.
 * @property {number} rotation Rotation.
 * @property {number|import("../size.js").Size} scale Scale.
 * @property {Array<number>} displacement Displacement.
 * @property {"declutter"|"obstacle"|"none"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */ /**
 * @classdesc
 * A base class used for creating subclasses and not instantiated in
 * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
 * {@link module:ol/style/RegularShape~RegularShape}.
 * @abstract
 * @api
 */ class $86ef58b83c2a6f52$var$ImageStyle {
    /**
   * @param {Options} options Options.
   */ constructor(options){
        /**
     * @private
     * @type {number}
     */ this.opacity_ = options.opacity;
        /**
     * @private
     * @type {boolean}
     */ this.rotateWithView_ = options.rotateWithView;
        /**
     * @private
     * @type {number}
     */ this.rotation_ = options.rotation;
        /**
     * @private
     * @type {number|import("../size.js").Size}
     */ this.scale_ = options.scale;
        /**
     * @private
     * @type {import("../size.js").Size}
     */ this.scaleArray_ = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(options.scale);
        /**
     * @private
     * @type {Array<number>}
     */ this.displacement_ = options.displacement;
        /**
     * @private
     * @type {"declutter"|"obstacle"|"none"|undefined}
     */ this.declutterMode_ = options.declutterMode;
    }
    /**
   * Clones the style.
   * @return {ImageStyle} The cloned style.
   * @api
   */ clone() {
        const scale = this.getScale();
        return new $86ef58b83c2a6f52$var$ImageStyle({
            opacity: this.getOpacity(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            rotation: this.getRotation(),
            rotateWithView: this.getRotateWithView(),
            displacement: this.getDisplacement().slice(),
            declutterMode: this.getDeclutterMode()
        });
    }
    /**
   * Get the symbolizer opacity.
   * @return {number} Opacity.
   * @api
   */ getOpacity() {
        return this.opacity_;
    }
    /**
   * Determine whether the symbolizer rotates with the map.
   * @return {boolean} Rotate with map.
   * @api
   */ getRotateWithView() {
        return this.rotateWithView_;
    }
    /**
   * Get the symoblizer rotation.
   * @return {number} Rotation.
   * @api
   */ getRotation() {
        return this.rotation_;
    }
    /**
   * Get the symbolizer scale.
   * @return {number|import("../size.js").Size} Scale.
   * @api
   */ getScale() {
        return this.scale_;
    }
    /**
   * Get the symbolizer scale array.
   * @return {import("../size.js").Size} Scale array.
   */ getScaleArray() {
        return this.scaleArray_;
    }
    /**
   * Get the displacement of the shape
   * @return {Array<number>} Shape's center displacement
   * @api
   */ getDisplacement() {
        return this.displacement_;
    }
    /**
   * Get the declutter mode of the shape
   * @return {"declutter"|"obstacle"|"none"|undefined} Shape's declutter mode
   * @api
   */ getDeclutterMode() {
        return this.declutterMode_;
    }
    /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @abstract
   * @return {Array<number>} Anchor.
   */ getAnchor() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Get the image element for the symbolizer.
   * @abstract
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
   */ getImage(pixelRatio) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @abstract
   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
   */ getHitDetectionImage() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Get the image pixel ratio.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel ratio.
   */ getPixelRatio(pixelRatio) {
        return 1;
    }
    /**
   * @abstract
   * @return {import("../ImageState.js").default} Image state.
   */ getImageState() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @abstract
   * @return {import("../size.js").Size} Image size.
   */ getImageSize() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Get the origin of the symbolizer.
   * @abstract
   * @return {Array<number>} Origin.
   */ getOrigin() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Get the size of the symbolizer (in pixels).
   * @abstract
   * @return {import("../size.js").Size} Size.
   */ getSize() {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Set the displacement.
   *
   * @param {Array<number>} displacement Displacement.
   * @api
   */ setDisplacement(displacement) {
        this.displacement_ = displacement;
    }
    /**
   * Set the opacity.
   *
   * @param {number} opacity Opacity.
   * @api
   */ setOpacity(opacity) {
        this.opacity_ = opacity;
    }
    /**
   * Set whether to rotate the style with the view.
   *
   * @param {boolean} rotateWithView Rotate with map.
   * @api
   */ setRotateWithView(rotateWithView) {
        this.rotateWithView_ = rotateWithView;
    }
    /**
   * Set the rotation.
   *
   * @param {number} rotation Rotation.
   * @api
   */ setRotation(rotation) {
        this.rotation_ = rotation;
    }
    /**
   * Set the scale.
   *
   * @param {number|import("../size.js").Size} scale Scale.
   * @api
   */ setScale(scale) {
        this.scale_ = scale;
        this.scaleArray_ = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(scale);
    }
    /**
   * @abstract
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */ listenImageChange(listener) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Load not yet loaded URI.
   * @abstract
   */ load() {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * @abstract
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */ unlistenImageChange(listener) {
        (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
}
var $86ef58b83c2a6f52$export$2e2bcd8739ae039 = $86ef58b83c2a6f52$var$ImageStyle;



/**
 * @module ol/colorlike
 */ 
function $172307d3521121a6$export$dc5b1400ac3a10a8(color) {
    if (Array.isArray(color)) return (0, $d32b89243a698e8b$export$f84e8e69fd4488a5)(color);
    return color;
}




/**
 * Specify radius for regular polygons, or radius1 and radius2 for stars.
 * @typedef {Object} Options
 * @property {import("./Fill.js").default} [fill] Fill style.
 * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
 * is the number of sides.
 * @property {number} [radius] Radius of a regular polygon.
 * @property {number} [radius1] First radius of a star. Ignored if radius is set.
 * @property {number} [radius2] Second radius of a star.
 * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.
 * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.
 * Positive values will shift the shape right and up.
 * @property {import("./Stroke.js").default} [stroke] Stroke style.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
 * @property {number|import("../size.js").Size} [scale=1] Scale. Unless two dimensional scaling is required a better
 * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.
 * @property {"declutter"|"obstacle"|"none"|undefined} [declutterMode] Declutter mode.
 */ /**
 * @typedef {Object} RenderOptions
 * @property {import("../colorlike.js").ColorLike} [strokeStyle] StrokeStyle.
 * @property {number} strokeWidth StrokeWidth.
 * @property {number} size Size.
 * @property {Array<number>|null} lineDash LineDash.
 * @property {number} lineDashOffset LineDashOffset.
 * @property {CanvasLineJoin} lineJoin LineJoin.
 * @property {number} miterLimit MiterLimit.
 */ /**
 * @classdesc
 * Set regular shape style for vector features. The resulting shape will be
 * a regular polygon when `radius` is provided, or a star when `radius1` and
 * `radius2` are provided.
 * @api
 */ class $839f5b0b6dbb6b4a$var$RegularShape extends (0, $86ef58b83c2a6f52$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options Options.
   */ constructor(options){
        /**
     * @type {boolean}
     */ const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
        super({
            opacity: 1,
            rotateWithView: rotateWithView,
            rotation: options.rotation !== undefined ? options.rotation : 0,
            scale: options.scale !== undefined ? options.scale : 1,
            displacement: options.displacement !== undefined ? options.displacement : [
                0,
                0
            ],
            declutterMode: options.declutterMode
        });
        /**
     * @private
     * @type {Object<number, HTMLCanvasElement>}
     */ this.canvas_ = undefined;
        /**
     * @private
     * @type {HTMLCanvasElement}
     */ this.hitDetectionCanvas_ = null;
        /**
     * @private
     * @type {import("./Fill.js").default}
     */ this.fill_ = options.fill !== undefined ? options.fill : null;
        /**
     * @private
     * @type {Array<number>}
     */ this.origin_ = [
            0,
            0
        ];
        /**
     * @private
     * @type {number}
     */ this.points_ = options.points;
        /**
     * @protected
     * @type {number}
     */ this.radius_ = options.radius !== undefined ? options.radius : options.radius1;
        /**
     * @private
     * @type {number|undefined}
     */ this.radius2_ = options.radius2;
        /**
     * @private
     * @type {number}
     */ this.angle_ = options.angle !== undefined ? options.angle : 0;
        /**
     * @private
     * @type {import("./Stroke.js").default}
     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;
        /**
     * @private
     * @type {import("../size.js").Size}
     */ this.size_ = null;
        /**
     * @private
     * @type {RenderOptions}
     */ this.renderOptions_ = null;
        this.render();
    }
    /**
   * Clones the style.
   * @return {RegularShape} The cloned style.
   * @api
   */ clone() {
        const scale = this.getScale();
        const style = new $839f5b0b6dbb6b4a$var$RegularShape({
            fill: this.getFill() ? this.getFill().clone() : undefined,
            points: this.getPoints(),
            radius: this.getRadius(),
            radius2: this.getRadius2(),
            angle: this.getAngle(),
            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
            rotation: this.getRotation(),
            rotateWithView: this.getRotateWithView(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            displacement: this.getDisplacement().slice(),
            declutterMode: this.getDeclutterMode()
        });
        style.setOpacity(this.getOpacity());
        return style;
    }
    /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @return {Array<number>} Anchor.
   * @api
   */ getAnchor() {
        const size = this.size_;
        if (!size) return null;
        const displacement = this.getDisplacement();
        const scale = this.getScaleArray();
        // anchor is scaled by renderer but displacement should not be scaled
        // so divide by scale here
        return [
            size[0] / 2 - displacement[0] / scale[0],
            size[1] / 2 + displacement[1] / scale[1]
        ];
    }
    /**
   * Get the angle used in generating the shape.
   * @return {number} Shape's rotation in radians.
   * @api
   */ getAngle() {
        return this.angle_;
    }
    /**
   * Get the fill style for the shape.
   * @return {import("./Fill.js").default} Fill style.
   * @api
   */ getFill() {
        return this.fill_;
    }
    /**
   * Set the fill style.
   * @param {import("./Fill.js").default} fill Fill style.
   * @api
   */ setFill(fill) {
        this.fill_ = fill;
        this.render();
    }
    /**
   * @return {HTMLCanvasElement} Image element.
   */ getHitDetectionImage() {
        if (!this.hitDetectionCanvas_) this.createHitDetectionCanvas_(this.renderOptions_);
        return this.hitDetectionCanvas_;
    }
    /**
   * Get the image icon.
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLCanvasElement} Image or Canvas element.
   * @api
   */ getImage(pixelRatio) {
        let image = this.canvas_[pixelRatio];
        if (!image) {
            const renderOptions = this.renderOptions_;
            const context = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);
            this.draw_(renderOptions, context, pixelRatio);
            image = context.canvas;
            this.canvas_[pixelRatio] = image;
        }
        return image;
    }
    /**
   * Get the image pixel ratio.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel ratio.
   */ getPixelRatio(pixelRatio) {
        return pixelRatio;
    }
    /**
   * @return {import("../size.js").Size} Image size.
   */ getImageSize() {
        return this.size_;
    }
    /**
   * @return {import("../ImageState.js").default} Image state.
   */ getImageState() {
        return (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED;
    }
    /**
   * Get the origin of the symbolizer.
   * @return {Array<number>} Origin.
   * @api
   */ getOrigin() {
        return this.origin_;
    }
    /**
   * Get the number of points for generating the shape.
   * @return {number} Number of points for stars and regular polygons.
   * @api
   */ getPoints() {
        return this.points_;
    }
    /**
   * Get the (primary) radius for the shape.
   * @return {number} Radius.
   * @api
   */ getRadius() {
        return this.radius_;
    }
    /**
   * Get the secondary radius for the shape.
   * @return {number|undefined} Radius2.
   * @api
   */ getRadius2() {
        return this.radius2_;
    }
    /**
   * Get the size of the symbolizer (in pixels).
   * @return {import("../size.js").Size} Size.
   * @api
   */ getSize() {
        return this.size_;
    }
    /**
   * Get the stroke style for the shape.
   * @return {import("./Stroke.js").default} Stroke style.
   * @api
   */ getStroke() {
        return this.stroke_;
    }
    /**
   * Set the stroke style.
   * @param {import("./Stroke.js").default} stroke Stroke style.
   * @api
   */ setStroke(stroke) {
        this.stroke_ = stroke;
        this.render();
    }
    /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */ listenImageChange(listener) {}
    /**
   * Load not yet loaded URI.
   */ load() {}
    /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */ unlistenImageChange(listener) {}
    /**
   * Calculate additional canvas size needed for the miter.
   * @param {string} lineJoin Line join
   * @param {number} strokeWidth Stroke width
   * @param {number} miterLimit Miter limit
   * @return {number} Additional canvas size needed
   * @private
   */ calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {
        if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== "bevel" && lineJoin !== "miter") return strokeWidth;
        // m  | ^
        // i  | |\                  .
        // t >|  #\
        // e  | |\ \              .
        // r      \s\
        //      |  \t\          .                 .
        //          \r\                      .   .
        //      |    \o\      .          .  . . .
        //          e \k\            .  .    . .
        //      |      \e\  .    .  .       . .
        //       d      \ \  .  .          . .
        //      | _ _a_ _\#  .            . .
        //   r1          / `             . .
        //      |                       . .
        //       b     /               . .
        //      |                     . .
        //           / r2            . .
        //      |                        .   .
        //         /                           .   .
        //      |α                                   .   .
        //       /                                         .   .
        //      ° center
        let r1 = this.radius_;
        let r2 = this.radius2_ === undefined ? r1 : this.radius2_;
        if (r1 < r2) {
            const tmp = r1;
            r1 = r2;
            r2 = tmp;
        }
        const points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;
        const alpha = 2 * Math.PI / points;
        const a = r2 * Math.sin(alpha);
        const b = Math.sqrt(r2 * r2 - a * a);
        const d = r1 - b;
        const e = Math.sqrt(a * a + d * d);
        const miterRatio = e / a;
        if (lineJoin === "miter" && miterRatio <= miterLimit) return miterRatio * strokeWidth;
        // Calculate the distance from center to the stroke corner where
        // it was cut short because of the miter limit.
        //              l
        //        ----+---- <= distance from center to here is maxr
        //       /####|k ##\
        //      /#####^#####\
        //     /#### /+\# s #\
        //    /### h/+++\# t #\
        //   /### t/+++++\# r #\
        //  /### a/+++++++\# o #\
        // /### p/++ fill +\# k #\
        ///#### /+++++^+++++\# e #\
        //#####/+++++/+\+++++\#####\
        const k = strokeWidth / 2 / miterRatio;
        const l = strokeWidth / 2 * (d / e);
        const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);
        const bevelAdd = maxr - r1;
        if (this.radius2_ === undefined || lineJoin === "bevel") return bevelAdd * 2;
        // If outer miter is over the miter limit the inner miter may reach through the
        // center and be longer than the bevel, same calculation as above but swap r1 / r2.
        const aa = r1 * Math.sin(alpha);
        const bb = Math.sqrt(r1 * r1 - aa * aa);
        const dd = r2 - bb;
        const ee = Math.sqrt(aa * aa + dd * dd);
        const innerMiterRatio = ee / aa;
        if (innerMiterRatio <= miterLimit) {
            const innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;
            return 2 * Math.max(bevelAdd, innerLength);
        }
        return bevelAdd * 2;
    }
    /**
   * @return {RenderOptions}  The render options
   * @protected
   */ createRenderOptions() {
        let lineJoin = (0, $ba06fcc662408736$export$365eb9648cf19bd0);
        let miterLimit = 0;
        let lineDash = null;
        let lineDashOffset = 0;
        let strokeStyle;
        let strokeWidth = 0;
        if (this.stroke_) {
            strokeStyle = this.stroke_.getColor();
            if (strokeStyle === null) strokeStyle = (0, $ba06fcc662408736$export$1eb2eaecacf2031e);
            strokeStyle = (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(strokeStyle);
            strokeWidth = this.stroke_.getWidth();
            if (strokeWidth === undefined) strokeWidth = (0, $ba06fcc662408736$export$79661f132c62010e);
            lineDash = this.stroke_.getLineDash();
            lineDashOffset = this.stroke_.getLineDashOffset();
            lineJoin = this.stroke_.getLineJoin();
            if (lineJoin === undefined) lineJoin = (0, $ba06fcc662408736$export$365eb9648cf19bd0);
            miterLimit = this.stroke_.getMiterLimit();
            if (miterLimit === undefined) miterLimit = (0, $ba06fcc662408736$export$80c1c01844597b7b);
        }
        const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);
        const maxRadius = Math.max(this.radius_, this.radius2_ || 0);
        const size = Math.ceil(2 * maxRadius + add);
        return {
            strokeStyle: strokeStyle,
            strokeWidth: strokeWidth,
            size: size,
            lineDash: lineDash,
            lineDashOffset: lineDashOffset,
            lineJoin: lineJoin,
            miterLimit: miterLimit
        };
    }
    /**
   * @protected
   */ render() {
        this.renderOptions_ = this.createRenderOptions();
        const size = this.renderOptions_.size;
        this.canvas_ = {};
        this.size_ = [
            size,
            size
        ];
    }
    /**
   * @private
   * @param {RenderOptions} renderOptions Render options.
   * @param {CanvasRenderingContext2D} context The rendering context.
   * @param {number} pixelRatio The pixel ratio.
   */ draw_(renderOptions, context, pixelRatio) {
        context.scale(pixelRatio, pixelRatio);
        // set origin to canvas center
        context.translate(renderOptions.size / 2, renderOptions.size / 2);
        this.createPath_(context);
        if (this.fill_) {
            let color = this.fill_.getColor();
            if (color === null) color = (0, $ba06fcc662408736$export$c495d52ee3fd74b2);
            context.fillStyle = (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(color);
            context.fill();
        }
        if (this.stroke_) {
            context.strokeStyle = renderOptions.strokeStyle;
            context.lineWidth = renderOptions.strokeWidth;
            if (renderOptions.lineDash) {
                context.setLineDash(renderOptions.lineDash);
                context.lineDashOffset = renderOptions.lineDashOffset;
            }
            context.lineJoin = renderOptions.lineJoin;
            context.miterLimit = renderOptions.miterLimit;
            context.stroke();
        }
    }
    /**
   * @private
   * @param {RenderOptions} renderOptions Render options.
   */ createHitDetectionCanvas_(renderOptions) {
        if (this.fill_) {
            let color = this.fill_.getColor();
            // determine if fill is transparent (or pattern or gradient)
            let opacity = 0;
            if (typeof color === "string") color = (0, $d32b89243a698e8b$export$75093a47a9fa838d)(color);
            if (color === null) opacity = 1;
            else if (Array.isArray(color)) opacity = color.length === 4 ? color[3] : 1;
            if (opacity === 0) {
                // if a transparent fill style is set, create an extra hit-detection image
                // with a default fill style
                const context = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(renderOptions.size, renderOptions.size);
                this.hitDetectionCanvas_ = context.canvas;
                this.drawHitDetectionCanvas_(renderOptions, context);
            }
        }
        if (!this.hitDetectionCanvas_) this.hitDetectionCanvas_ = this.getImage(1);
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context The context to draw in.
   */ createPath_(context) {
        let points = this.points_;
        const radius = this.radius_;
        if (points === Infinity) context.arc(0, 0, radius, 0, 2 * Math.PI);
        else {
            const radius2 = this.radius2_ === undefined ? radius : this.radius2_;
            if (this.radius2_ !== undefined) points *= 2;
            const startAngle = this.angle_ - Math.PI / 2;
            const step = 2 * Math.PI / points;
            for(let i = 0; i < points; i++){
                const angle0 = startAngle + i * step;
                const radiusC = i % 2 === 0 ? radius : radius2;
                context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));
            }
            context.closePath();
        }
    }
    /**
   * @private
   * @param {RenderOptions} renderOptions Render options.
   * @param {CanvasRenderingContext2D} context The context.
   */ drawHitDetectionCanvas_(renderOptions, context) {
        // set origin to canvas center
        context.translate(renderOptions.size / 2, renderOptions.size / 2);
        this.createPath_(context);
        context.fillStyle = (0, $ba06fcc662408736$export$c495d52ee3fd74b2);
        context.fill();
        if (this.stroke_) {
            context.strokeStyle = renderOptions.strokeStyle;
            context.lineWidth = renderOptions.strokeWidth;
            if (renderOptions.lineDash) {
                context.setLineDash(renderOptions.lineDash);
                context.lineDashOffset = renderOptions.lineDashOffset;
            }
            context.lineJoin = renderOptions.lineJoin;
            context.miterLimit = renderOptions.miterLimit;
            context.stroke();
        }
    }
}
var $839f5b0b6dbb6b4a$export$2e2bcd8739ae039 = $839f5b0b6dbb6b4a$var$RegularShape;


/**
 * @typedef {Object} Options
 * @property {import("./Fill.js").default} [fill] Fill style.
 * @property {number} radius Circle radius.
 * @property {import("./Stroke.js").default} [stroke] Stroke style.
 * @property {Array<number>} [displacement=[0,0]] displacement
 * @property {number|import("../size.js").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.
 * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.
 * @property {number} [rotation=0] Rotation in radians
 * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).
 * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view
 * (meaningful only when used in conjunction with a two dimensional scale).
 * @property {"declutter"|"obstacle"|"none"|undefined} [declutterMode] Declutter mode
 */ /**
 * @classdesc
 * Set circle style for vector features.
 * @api
 */ class $4702fef2bdf52596$var$CircleStyle extends (0, $839f5b0b6dbb6b4a$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options ? options : {
            radius: 5
        };
        super({
            points: Infinity,
            fill: options.fill,
            radius: options.radius,
            stroke: options.stroke,
            scale: options.scale !== undefined ? options.scale : 1,
            rotation: options.rotation !== undefined ? options.rotation : 0,
            rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,
            displacement: options.displacement !== undefined ? options.displacement : [
                0,
                0
            ],
            declutterMode: options.declutterMode
        });
    }
    /**
   * Clones the style.
   * @return {CircleStyle} The cloned style.
   * @api
   */ clone() {
        const scale = this.getScale();
        const style = new $4702fef2bdf52596$var$CircleStyle({
            fill: this.getFill() ? this.getFill().clone() : undefined,
            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
            radius: this.getRadius(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            rotation: this.getRotation(),
            rotateWithView: this.getRotateWithView(),
            displacement: this.getDisplacement().slice(),
            declutterMode: this.getDeclutterMode()
        });
        style.setOpacity(this.getOpacity());
        return style;
    }
    /**
   * Set the circle radius.
   *
   * @param {number} radius Circle radius.
   * @api
   */ setRadius(radius) {
        this.radius_ = radius;
        this.render();
    }
}
var $4702fef2bdf52596$export$2e2bcd8739ae039 = $4702fef2bdf52596$var$CircleStyle;


/**
 * @module ol/style/Fill
 */ /**
 * @typedef {Object} Options
 * @property {import("../color.js").Color|import("../colorlike.js").ColorLike|null} [color=null] A color, gradient or pattern.
 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
 * Default null; if null, the Canvas/renderer default black will be used.
 */ /**
 * @classdesc
 * Set fill style for vector features.
 * @api
 */ class $1646510b52ef7eda$var$Fill {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options || {};
        /**
     * @private
     * @type {import("../color.js").Color|import("../colorlike.js").ColorLike|null}
     */ this.color_ = options.color !== undefined ? options.color : null;
    }
    /**
   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
   * @return {Fill} The cloned style.
   * @api
   */ clone() {
        const color = this.getColor();
        return new $1646510b52ef7eda$var$Fill({
            color: Array.isArray(color) ? color.slice() : color || undefined
        });
    }
    /**
   * Get the fill color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike|null} Color.
   * @api
   */ getColor() {
        return this.color_;
    }
    /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike|null} color Color.
   * @api
   */ setColor(color) {
        this.color_ = color;
    }
}
var $1646510b52ef7eda$export$2e2bcd8739ae039 = $1646510b52ef7eda$var$Fill;


/**
 * @module ol/style/Stroke
 */ /**
 * @typedef {Object} Options
 * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
 * Default null; if null, the Canvas/renderer default black will be used.
 * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
 * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
 * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).
 * @property {number} [lineDashOffset=0] Line dash offset.
 * @property {number} [miterLimit=10] Miter limit.
 * @property {number} [width] Width.
 */ /**
 * @classdesc
 * Set stroke style for vector features.
 * Note that the defaults given are the Canvas defaults, which will be used if
 * option is not defined. The `get` functions return whatever was entered in
 * the options; they will not return the default.
 * @api
 */ class $5bb5a6da769d8762$var$Stroke {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options || {};
        /**
     * @private
     * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
     */ this.color_ = options.color !== undefined ? options.color : null;
        /**
     * @private
     * @type {CanvasLineCap|undefined}
     */ this.lineCap_ = options.lineCap;
        /**
     * @private
     * @type {Array<number>|null}
     */ this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;
        /**
     * @private
     * @type {number|undefined}
     */ this.lineDashOffset_ = options.lineDashOffset;
        /**
     * @private
     * @type {CanvasLineJoin|undefined}
     */ this.lineJoin_ = options.lineJoin;
        /**
     * @private
     * @type {number|undefined}
     */ this.miterLimit_ = options.miterLimit;
        /**
     * @private
     * @type {number|undefined}
     */ this.width_ = options.width;
    }
    /**
   * Clones the style.
   * @return {Stroke} The cloned style.
   * @api
   */ clone() {
        const color = this.getColor();
        return new $5bb5a6da769d8762$var$Stroke({
            color: Array.isArray(color) ? color.slice() : color || undefined,
            lineCap: this.getLineCap(),
            lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
            lineDashOffset: this.getLineDashOffset(),
            lineJoin: this.getLineJoin(),
            miterLimit: this.getMiterLimit(),
            width: this.getWidth()
        });
    }
    /**
   * Get the stroke color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
   * @api
   */ getColor() {
        return this.color_;
    }
    /**
   * Get the line cap type for the stroke.
   * @return {CanvasLineCap|undefined} Line cap.
   * @api
   */ getLineCap() {
        return this.lineCap_;
    }
    /**
   * Get the line dash style for the stroke.
   * @return {Array<number>|null} Line dash.
   * @api
   */ getLineDash() {
        return this.lineDash_;
    }
    /**
   * Get the line dash offset for the stroke.
   * @return {number|undefined} Line dash offset.
   * @api
   */ getLineDashOffset() {
        return this.lineDashOffset_;
    }
    /**
   * Get the line join type for the stroke.
   * @return {CanvasLineJoin|undefined} Line join.
   * @api
   */ getLineJoin() {
        return this.lineJoin_;
    }
    /**
   * Get the miter limit for the stroke.
   * @return {number|undefined} Miter limit.
   * @api
   */ getMiterLimit() {
        return this.miterLimit_;
    }
    /**
   * Get the stroke width.
   * @return {number|undefined} Width.
   * @api
   */ getWidth() {
        return this.width_;
    }
    /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
   * @api
   */ setColor(color) {
        this.color_ = color;
    }
    /**
   * Set the line cap.
   *
   * @param {CanvasLineCap|undefined} lineCap Line cap.
   * @api
   */ setLineCap(lineCap) {
        this.lineCap_ = lineCap;
    }
    /**
   * Set the line dash.
   *
   * @param {Array<number>|null} lineDash Line dash.
   * @api
   */ setLineDash(lineDash) {
        this.lineDash_ = lineDash;
    }
    /**
   * Set the line dash offset.
   *
   * @param {number|undefined} lineDashOffset Line dash offset.
   * @api
   */ setLineDashOffset(lineDashOffset) {
        this.lineDashOffset_ = lineDashOffset;
    }
    /**
   * Set the line join.
   *
   * @param {CanvasLineJoin|undefined} lineJoin Line join.
   * @api
   */ setLineJoin(lineJoin) {
        this.lineJoin_ = lineJoin;
    }
    /**
   * Set the miter limit.
   *
   * @param {number|undefined} miterLimit Miter limit.
   * @api
   */ setMiterLimit(miterLimit) {
        this.miterLimit_ = miterLimit;
    }
    /**
   * Set the width.
   *
   * @param {number|undefined} width Width.
   * @api
   */ setWidth(width) {
        this.width_ = width;
    }
}
var $5bb5a6da769d8762$export$2e2bcd8739ae039 = $5bb5a6da769d8762$var$Stroke;



/**
 * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`
 * representing the view's resolution. The function should return a
 * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a
 * vector layer can be styled. If the function returns `undefined`, the
 * feature will not be rendered.
 *
 * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction
 */ /**
 * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
 * @typedef {Style|Array<Style>|StyleFunction} StyleLike
 */ /**
 * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an
 * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.
 *
 * @typedef {function(import("../Feature.js").FeatureLike):
 *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
 */ /**
 * Custom renderer function. Takes two arguments:
 *
 * 1. The pixel coordinates of the geometry in GeoJSON notation.
 * 2. The {@link module:ol/render~State} of the layer renderer.
 *
 * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>|Array<Array<Array<import("../coordinate.js").Coordinate>>>),import("../render.js").State): void} RenderFunction
 */ /**
 * @typedef {Object} Options
 * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
 * or function returning a geometry to render for this style.
 * @property {import("./Fill.js").default} [fill] Fill style.
 * @property {import("./Image.js").default} [image] Image style.
 * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
 * ignored, and the provided function will be called with each render frame for each geometry.
 * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used
 * in hit detection rendering.
 * @property {import("./Stroke.js").default} [stroke] Stroke style.
 * @property {import("./Text.js").default} [text] Text style.
 * @property {number} [zIndex] Z index.
 */ /**
 * @classdesc
 * Container for vector feature rendering styles. Any changes made to the style
 * or its children through `set*()` methods will not take effect until the
 * feature or layer that uses the style is re-rendered.
 *
 * ## Feature styles
 *
 * If no style is defined, the following default style is used:
 * ```js
 *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';
 *
 *  const fill = new Fill({
 *    color: 'rgba(255,255,255,0.4)',
 *  });
 *  const stroke = new Stroke({
 *    color: '#3399CC',
 *    width: 1.25,
 *  });
 *  const styles = [
 *    new Style({
 *      image: new Circle({
 *        fill: fill,
 *        stroke: stroke,
 *        radius: 5,
 *      }),
 *      fill: fill,
 *      stroke: stroke,
 *    }),
 *  ];
 * ```
 *
 * A separate editing style has the following defaults:
 * ```js
 *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';
 *
 *  const styles = {};
 *  const white = [255, 255, 255, 1];
 *  const blue = [0, 153, 255, 1];
 *  const width = 3;
 *  styles['Polygon'] = [
 *    new Style({
 *      fill: new Fill({
 *        color: [255, 255, 255, 0.5],
 *      }),
 *    }),
 *  ];
 *  styles['MultiPolygon'] =
 *      styles['Polygon'];
 *  styles['LineString'] = [
 *    new Style({
 *      stroke: new Stroke({
 *        color: white,
 *        width: width + 2,
 *      }),
 *    }),
 *    new Style({
 *      stroke: new Stroke({
 *        color: blue,
 *        width: width,
 *      }),
 *    }),
 *  ];
 *  styles['MultiLineString'] = styles['LineString'];
 *
 *  styles['Circle'] = styles['Polygon'].concat(
 *    styles['LineString']
 *  );
 *
 *  styles['Point'] = [
 *    new Style({
 *      image: new Circle({
 *        radius: width * 2,
 *        fill: new Fill({
 *          color: blue,
 *        }),
 *        stroke: new Stroke({
 *          color: white,
 *          width: width / 2,
 *        }),
 *      }),
 *      zIndex: Infinity,
 *    }),
 *  ];
 *  styles['MultiPoint'] =
 *      styles['Point'];
 *  styles['GeometryCollection'] =
 *      styles['Polygon'].concat(
 *          styles['LineString'],
 *          styles['Point']
 *      );
 * ```
 *
 * @api
 */ class $0e8e066c6965c811$var$Style {
    /**
   * @param {Options} [options] Style options.
   */ constructor(options){
        options = options || {};
        /**
     * @private
     * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
     */ this.geometry_ = null;
        /**
     * @private
     * @type {!GeometryFunction}
     */ this.geometryFunction_ = $0e8e066c6965c811$var$defaultGeometryFunction;
        if (options.geometry !== undefined) this.setGeometry(options.geometry);
        /**
     * @private
     * @type {import("./Fill.js").default}
     */ this.fill_ = options.fill !== undefined ? options.fill : null;
        /**
     * @private
     * @type {import("./Image.js").default}
     */ this.image_ = options.image !== undefined ? options.image : null;
        /**
     * @private
     * @type {RenderFunction|null}
     */ this.renderer_ = options.renderer !== undefined ? options.renderer : null;
        /**
     * @private
     * @type {RenderFunction|null}
     */ this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;
        /**
     * @private
     * @type {import("./Stroke.js").default}
     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;
        /**
     * @private
     * @type {import("./Text.js").default}
     */ this.text_ = options.text !== undefined ? options.text : null;
        /**
     * @private
     * @type {number|undefined}
     */ this.zIndex_ = options.zIndex;
    }
    /**
   * Clones the style.
   * @return {Style} The cloned style.
   * @api
   */ clone() {
        let geometry = this.getGeometry();
        if (geometry && typeof geometry === "object") geometry = /** @type {import("../geom/Geometry.js").default} */ geometry.clone();
        return new $0e8e066c6965c811$var$Style({
            geometry: geometry,
            fill: this.getFill() ? this.getFill().clone() : undefined,
            image: this.getImage() ? this.getImage().clone() : undefined,
            renderer: this.getRenderer(),
            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
            text: this.getText() ? this.getText().clone() : undefined,
            zIndex: this.getZIndex()
        });
    }
    /**
   * Get the custom renderer function that was configured with
   * {@link #setRenderer} or the `renderer` constructor option.
   * @return {RenderFunction|null} Custom renderer function.
   * @api
   */ getRenderer() {
        return this.renderer_;
    }
    /**
   * Sets a custom renderer function for this style. When set, `fill`, `stroke`
   * and `image` options of the style will be ignored.
   * @param {RenderFunction|null} renderer Custom renderer function.
   * @api
   */ setRenderer(renderer) {
        this.renderer_ = renderer;
    }
    /**
   * Sets a custom renderer function for this style used
   * in hit detection.
   * @param {RenderFunction|null} renderer Custom renderer function.
   * @api
   */ setHitDetectionRenderer(renderer) {
        this.hitDetectionRenderer_ = renderer;
    }
    /**
   * Get the custom renderer function that was configured with
   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.
   * @return {RenderFunction|null} Custom renderer function.
   * @api
   */ getHitDetectionRenderer() {
        return this.hitDetectionRenderer_;
    }
    /**
   * Get the geometry to be rendered.
   * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
   * Feature property or geometry or function that returns the geometry that will
   * be rendered with this style.
   * @api
   */ getGeometry() {
        return this.geometry_;
    }
    /**
   * Get the function used to generate a geometry for rendering.
   * @return {!GeometryFunction} Function that is called with a feature
   * and returns the geometry to render instead of the feature's geometry.
   * @api
   */ getGeometryFunction() {
        return this.geometryFunction_;
    }
    /**
   * Get the fill style.
   * @return {import("./Fill.js").default} Fill style.
   * @api
   */ getFill() {
        return this.fill_;
    }
    /**
   * Set the fill style.
   * @param {import("./Fill.js").default} fill Fill style.
   * @api
   */ setFill(fill) {
        this.fill_ = fill;
    }
    /**
   * Get the image style.
   * @return {import("./Image.js").default} Image style.
   * @api
   */ getImage() {
        return this.image_;
    }
    /**
   * Set the image style.
   * @param {import("./Image.js").default} image Image style.
   * @api
   */ setImage(image) {
        this.image_ = image;
    }
    /**
   * Get the stroke style.
   * @return {import("./Stroke.js").default} Stroke style.
   * @api
   */ getStroke() {
        return this.stroke_;
    }
    /**
   * Set the stroke style.
   * @param {import("./Stroke.js").default} stroke Stroke style.
   * @api
   */ setStroke(stroke) {
        this.stroke_ = stroke;
    }
    /**
   * Get the text style.
   * @return {import("./Text.js").default} Text style.
   * @api
   */ getText() {
        return this.text_;
    }
    /**
   * Set the text style.
   * @param {import("./Text.js").default} text Text style.
   * @api
   */ setText(text) {
        this.text_ = text;
    }
    /**
   * Get the z-index for the style.
   * @return {number|undefined} ZIndex.
   * @api
   */ getZIndex() {
        return this.zIndex_;
    }
    /**
   * Set a geometry that is rendered instead of the feature's geometry.
   *
   * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
   *     Feature property or geometry or function returning a geometry to render
   *     for this style.
   * @api
   */ setGeometry(geometry) {
        if (typeof geometry === "function") this.geometryFunction_ = geometry;
        else if (typeof geometry === "string") this.geometryFunction_ = function(feature) {
            return /** @type {import("../geom/Geometry.js").default} */ feature.get(geometry);
        };
        else if (!geometry) this.geometryFunction_ = $0e8e066c6965c811$var$defaultGeometryFunction;
        else if (geometry !== undefined) this.geometryFunction_ = function() {
            return /** @type {import("../geom/Geometry.js").default} */ geometry;
        };
        this.geometry_ = geometry;
    }
    /**
   * Set the z-index.
   *
   * @param {number|undefined} zIndex ZIndex.
   * @api
   */ setZIndex(zIndex) {
        this.zIndex_ = zIndex;
    }
}
function $0e8e066c6965c811$export$c314ea3f6b164147(obj) {
    let styleFunction;
    if (typeof obj === "function") styleFunction = obj;
    else {
        /**
     * @type {Array<Style>}
     */ let styles;
        if (Array.isArray(obj)) styles = obj;
        else {
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(typeof /** @type {?} */ obj.getZIndex === "function", 41); // Expected an `Style` or an array of `Style`
            const style = /** @type {Style} */ obj;
            styles = [
                style
            ];
        }
        styleFunction = function() {
            return styles;
        };
    }
    return styleFunction;
}
/**
 * @type {Array<Style>|null}
 */ let $0e8e066c6965c811$var$defaultStyles = null;
function $0e8e066c6965c811$export$6865c5ac2f5ce8b6(feature, resolution) {
    // We don't use an immediately-invoked function
    // and a closure so we don't get an error at script evaluation time in
    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
    // canvas.getContext('2d') at construction time, which will cause an.error
    // in such browsers.)
    if (!$0e8e066c6965c811$var$defaultStyles) {
        const fill = new (0, $1646510b52ef7eda$export$2e2bcd8739ae039)({
            color: "rgba(255,255,255,0.4)"
        });
        const stroke = new (0, $5bb5a6da769d8762$export$2e2bcd8739ae039)({
            color: "#3399CC",
            width: 1.25
        });
        $0e8e066c6965c811$var$defaultStyles = [
            new $0e8e066c6965c811$var$Style({
                image: new (0, $4702fef2bdf52596$export$2e2bcd8739ae039)({
                    fill: fill,
                    stroke: stroke,
                    radius: 5
                }),
                fill: fill,
                stroke: stroke
            })
        ];
    }
    return $0e8e066c6965c811$var$defaultStyles;
}
function $0e8e066c6965c811$export$ed1eaede5d0e77ac() {
    /** @type {Object<import("../geom/Geometry.js").Type, Array<Style>>} */ const styles = {};
    const white = [
        255,
        255,
        255,
        1
    ];
    const blue = [
        0,
        153,
        255,
        1
    ];
    const width = 3;
    styles["Polygon"] = [
        new $0e8e066c6965c811$var$Style({
            fill: new (0, $1646510b52ef7eda$export$2e2bcd8739ae039)({
                color: [
                    255,
                    255,
                    255,
                    0.5
                ]
            })
        })
    ];
    styles["MultiPolygon"] = styles["Polygon"];
    styles["LineString"] = [
        new $0e8e066c6965c811$var$Style({
            stroke: new (0, $5bb5a6da769d8762$export$2e2bcd8739ae039)({
                color: white,
                width: width + 2
            })
        }),
        new $0e8e066c6965c811$var$Style({
            stroke: new (0, $5bb5a6da769d8762$export$2e2bcd8739ae039)({
                color: blue,
                width: width
            })
        })
    ];
    styles["MultiLineString"] = styles["LineString"];
    styles["Circle"] = styles["Polygon"].concat(styles["LineString"]);
    styles["Point"] = [
        new $0e8e066c6965c811$var$Style({
            image: new (0, $4702fef2bdf52596$export$2e2bcd8739ae039)({
                radius: width * 2,
                fill: new (0, $1646510b52ef7eda$export$2e2bcd8739ae039)({
                    color: blue
                }),
                stroke: new (0, $5bb5a6da769d8762$export$2e2bcd8739ae039)({
                    color: white,
                    width: width / 2
                })
            }),
            zIndex: Infinity
        })
    ];
    styles["MultiPoint"] = styles["Point"];
    styles["GeometryCollection"] = styles["Polygon"].concat(styles["LineString"], styles["Point"]);
    return styles;
}
/**
 * Function that is called with a feature and returns its default geometry.
 * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
 * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
 */ function $0e8e066c6965c811$var$defaultGeometryFunction(feature) {
    return feature.getGeometry();
}
var $0e8e066c6965c811$export$2e2bcd8739ae039 = $0e8e066c6965c811$var$Style;


/**
 * @module ol/style/flat
 */ 

/**
 * @module ol/style/Icon
 */ 




/**
 * @module ol/style/IconImage
 */ 






/**
 * @type {CanvasRenderingContext2D}
 */ let $064229adb158691e$var$taintedTestContext = null;
class $064229adb158691e$var$IconImage extends (0, $fd4e3201ad7386dc$export$2e2bcd8739ae039) {
    /**
   * @param {HTMLImageElement|HTMLCanvasElement} image Image.
   * @param {string|undefined} src Src.
   * @param {import("../size.js").Size} size Size.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../ImageState.js").default} imageState Image state.
   * @param {import("../color.js").Color} color Color.
   */ constructor(image, src, size, crossOrigin, imageState, color){
        super();
        /**
     * @private
     * @type {HTMLImageElement|HTMLCanvasElement}
     */ this.hitDetectionImage_ = null;
        /**
     * @private
     * @type {HTMLImageElement|HTMLCanvasElement}
     */ this.image_ = image;
        /**
     * @private
     * @type {string|null}
     */ this.crossOrigin_ = crossOrigin;
        /**
     * @private
     * @type {Object<number, HTMLCanvasElement>}
     */ this.canvas_ = {};
        /**
     * @private
     * @type {import("../color.js").Color}
     */ this.color_ = color;
        /**
     * @private
     * @type {?function():void}
     */ this.unlisten_ = null;
        /**
     * @private
     * @type {import("../ImageState.js").default}
     */ this.imageState_ = imageState;
        /**
     * @private
     * @type {import("../size.js").Size}
     */ this.size_ = size;
        /**
     * @private
     * @type {string|undefined}
     */ this.src_ = src;
        /**
     * @private
     */ this.tainted_;
    }
    /**
   * @private
   */ initializeImage_() {
        this.image_ = new Image();
        if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;
    }
    /**
   * @private
   * @return {boolean} The image canvas is tainted.
   */ isTainted_() {
        if (this.tainted_ === undefined && this.imageState_ === (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) {
            if (!$064229adb158691e$var$taintedTestContext) $064229adb158691e$var$taintedTestContext = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(1, 1, undefined, {
                willReadFrequently: true
            });
            $064229adb158691e$var$taintedTestContext.drawImage(this.image_, 0, 0);
            try {
                $064229adb158691e$var$taintedTestContext.getImageData(0, 0, 1, 1);
                this.tainted_ = false;
            } catch (e) {
                $064229adb158691e$var$taintedTestContext = null;
                this.tainted_ = true;
            }
        }
        return this.tainted_ === true;
    }
    /**
   * @private
   */ dispatchChangeEvent_() {
        this.dispatchEvent((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE);
    }
    /**
   * @private
   */ handleImageError_() {
        this.imageState_ = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR;
        this.unlistenImage_();
        this.dispatchChangeEvent_();
    }
    /**
   * @private
   */ handleImageLoad_() {
        this.imageState_ = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED;
        if (this.size_) {
            this.image_.width = this.size_[0];
            this.image_.height = this.size_[1];
        } else this.size_ = [
            this.image_.width,
            this.image_.height
        ];
        this.unlistenImage_();
        this.dispatchChangeEvent_();
    }
    /**
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
   */ getImage(pixelRatio) {
        if (!this.image_) this.initializeImage_();
        this.replaceColor_(pixelRatio);
        return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;
    }
    /**
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Image or Canvas element.
   */ getPixelRatio(pixelRatio) {
        this.replaceColor_(pixelRatio);
        return this.canvas_[pixelRatio] ? pixelRatio : 1;
    }
    /**
   * @return {import("../ImageState.js").default} Image state.
   */ getImageState() {
        return this.imageState_;
    }
    /**
   * @return {HTMLImageElement|HTMLCanvasElement} Image element.
   */ getHitDetectionImage() {
        if (!this.image_) this.initializeImage_();
        if (!this.hitDetectionImage_) {
            if (this.isTainted_()) {
                const width = this.size_[0];
                const height = this.size_[1];
                const context = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(width, height);
                context.fillRect(0, 0, width, height);
                this.hitDetectionImage_ = context.canvas;
            } else this.hitDetectionImage_ = this.image_;
        }
        return this.hitDetectionImage_;
    }
    /**
   * Get the size of the icon (in pixels).
   * @return {import("../size.js").Size} Image size.
   */ getSize() {
        return this.size_;
    }
    /**
   * @return {string|undefined} Image src.
   */ getSrc() {
        return this.src_;
    }
    /**
   * Load not yet loaded URI.
   */ load() {
        if (this.imageState_ !== (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE) return;
        if (!this.image_) this.initializeImage_();
        this.imageState_ = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADING;
        try {
            /** @type {HTMLImageElement} */ this.image_.src = this.src_;
        } catch (e) {
            this.handleImageError_();
        }
        this.unlisten_ = (0, $752084c7f6d5daf1$export$bc96ecc7c2a50764)(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
    }
    /**
   * @param {number} pixelRatio Pixel ratio.
   * @private
   */ replaceColor_(pixelRatio) {
        if (!this.color_ || this.canvas_[pixelRatio] || this.imageState_ !== (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) return;
        const image = this.image_;
        const canvas = document.createElement("canvas");
        canvas.width = Math.ceil(image.width * pixelRatio);
        canvas.height = Math.ceil(image.height * pixelRatio);
        const ctx = canvas.getContext("2d");
        ctx.scale(pixelRatio, pixelRatio);
        ctx.drawImage(image, 0, 0);
        ctx.globalCompositeOperation = "multiply";
        ctx.fillStyle = (0, $d32b89243a698e8b$export$590567be997858b6)(this.color_);
        ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);
        ctx.globalCompositeOperation = "destination-in";
        ctx.drawImage(image, 0, 0);
        this.canvas_[pixelRatio] = canvas;
    }
    /**
   * Discards event handlers which listen for load completion or errors.
   *
   * @private
   */ unlistenImage_() {
        if (this.unlisten_) {
            this.unlisten_();
            this.unlisten_ = null;
        }
    }
}
function $064229adb158691e$export$3988ae62b71be9a3(image, src, size, crossOrigin, imageState, color) {
    let iconImage = (0, $82136d2ec01af9ba$export$747ccdf771a87ab8).get(src, crossOrigin, color);
    if (!iconImage) {
        iconImage = new $064229adb158691e$var$IconImage(image, src, size, crossOrigin, imageState, color);
        (0, $82136d2ec01af9ba$export$747ccdf771a87ab8).set(src, crossOrigin, color, iconImage);
    }
    return iconImage;
}
var $064229adb158691e$export$2e2bcd8739ae039 = $064229adb158691e$var$IconImage;



/**
 * @typedef {'fraction' | 'pixels'} IconAnchorUnits
 * Anchor unit can be either a fraction of the icon size or in pixels.
 */ /**
 * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin
 * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
 */ /**
 * @typedef {Object} Options
 * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
 * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
 * `top-left` or `top-right`.
 * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is
 * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
 * the x value in pixels.
 * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is
 * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
 * the y value in pixels.
 * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
 * the icon will be left as is.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
 * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
 * provided image must already be loaded. And in that case, it is required
 * to provide the size of the image, with the `imgSize` option.
 * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.
 * The provided `imgSize` needs to match the actual size of the image.
 * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.
 * Positive values will shift the icon right and up.
 * @property {number} [opacity=1] Opacity of the icon.
 * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.
 * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.
 * @property {number|import("../size.js").Size} [scale=1] Scale.
 * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the
 * sub-rectangle to use from the original (sprite) image.
 * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
 * `top-left` or `top-right`.
 * @property {import("../size.js").Size} [size] Icon size in pixels. Used together with `offset` to define the
 * sub-rectangle to use from the original (sprite) image.
 * @property {string} [src] Image source URI.
 * @property {"declutter"|"obstacle"|"none"|undefined} [declutterMode] Declutter mode.
 */ /**
 * @param {number} width The width.
 * @param {number} height The height.
 * @param {number|undefined} wantedWidth The wanted width.
 * @param {number|undefined} wantedHeight The wanted height.
 * @return {number|Array<number>} The scale.
 */ function $4dd3b6f7e2acb5b2$var$calculateScale(width, height, wantedWidth, wantedHeight) {
    if (wantedWidth !== undefined && wantedHeight !== undefined) return [
        wantedWidth / width,
        wantedHeight / height
    ];
    if (wantedWidth !== undefined) return wantedWidth / width;
    if (wantedHeight !== undefined) return wantedHeight / height;
    return 1;
}
/**
 * @classdesc
 * Set icon style for vector features.
 * @api
 */ class $4dd3b6f7e2acb5b2$var$Icon extends (0, $86ef58b83c2a6f52$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options || {};
        /**
     * @type {number}
     */ const opacity = options.opacity !== undefined ? options.opacity : 1;
        /**
     * @type {number}
     */ const rotation = options.rotation !== undefined ? options.rotation : 0;
        /**
     * @type {number|import("../size.js").Size}
     */ const scale = options.scale !== undefined ? options.scale : 1;
        /**
     * @type {boolean}
     */ const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
        super({
            opacity: opacity,
            rotation: rotation,
            scale: scale,
            displacement: options.displacement !== undefined ? options.displacement : [
                0,
                0
            ],
            rotateWithView: rotateWithView,
            declutterMode: options.declutterMode
        });
        /**
     * @private
     * @type {Array<number>}
     */ this.anchor_ = options.anchor !== undefined ? options.anchor : [
            0.5,
            0.5
        ];
        /**
     * @private
     * @type {Array<number>}
     */ this.normalizedAnchor_ = null;
        /**
     * @private
     * @type {IconOrigin}
     */ this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : "top-left";
        /**
     * @private
     * @type {IconAnchorUnits}
     */ this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : "fraction";
        /**
     * @private
     * @type {IconAnchorUnits}
     */ this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : "fraction";
        /**
     * @private
     * @type {?string}
     */ this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;
        /**
     * @type {HTMLImageElement|HTMLCanvasElement}
     */ const image = options.img !== undefined ? options.img : null;
        /**
     * @private
     * @type {import("../size.js").Size|undefined}
     */ this.imgSize_ = options.imgSize;
        /**
     * @type {string|undefined}
     */ let src = options.src;
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!image || image && this.imgSize_, 5); // `imgSize` must be set when `image` is provided
        if ((src === undefined || src.length === 0) && image) src = /** @type {HTMLImageElement} */ image.src || (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(image);
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided
        // `width` or `height` cannot be provided together with `scale`
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), 69);
        /**
     * @type {import("../ImageState.js").default}
     */ const imageState = options.src !== undefined ? (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE : (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED;
        /**
     * @private
     * @type {import("../color.js").Color}
     */ this.color_ = options.color !== undefined ? (0, $d32b89243a698e8b$export$75093a47a9fa838d)(options.color) : null;
        /**
     * @private
     * @type {import("./IconImage.js").default}
     */ this.iconImage_ = (0, $064229adb158691e$export$3988ae62b71be9a3)(image, /** @type {string} */ src, this.imgSize_ !== undefined ? this.imgSize_ : null, this.crossOrigin_, imageState, this.color_);
        /**
     * @private
     * @type {Array<number>}
     */ this.offset_ = options.offset !== undefined ? options.offset : [
            0,
            0
        ];
        /**
     * @private
     * @type {IconOrigin}
     */ this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : "top-left";
        /**
     * @private
     * @type {Array<number>}
     */ this.origin_ = null;
        /**
     * @private
     * @type {import("../size.js").Size}
     */ this.size_ = options.size !== undefined ? options.size : null;
        /**
     * Calculate the scale if width or height were given.
     */ if (options.width !== undefined || options.height !== undefined) {
            let width, height;
            if (options.size) [width, height] = options.size;
            else {
                const image = this.getImage(1);
                if (image instanceof HTMLCanvasElement || image.src && image.complete) {
                    width = image.width;
                    height = image.height;
                } else {
                    this.initialOptions_ = options;
                    const onload = ()=>{
                        this.unlistenImageChange(onload);
                        if (!this.initialOptions_) return;
                        const imageSize = this.iconImage_.getSize();
                        this.setScale($4dd3b6f7e2acb5b2$var$calculateScale(imageSize[0], imageSize[1], options.width, options.height));
                    };
                    this.listenImageChange(onload);
                    return;
                }
            }
            if (width !== undefined) this.setScale($4dd3b6f7e2acb5b2$var$calculateScale(width, height, options.width, options.height));
        }
    }
    /**
   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
   * @return {Icon} The cloned style.
   * @api
   */ clone() {
        let scale, width, height;
        if (this.initialOptions_) {
            width = this.initialOptions_.width;
            height = this.initialOptions_.height;
        } else {
            scale = this.getScale();
            scale = Array.isArray(scale) ? scale.slice() : scale;
        }
        const clone = new $4dd3b6f7e2acb5b2$var$Icon({
            anchor: this.anchor_.slice(),
            anchorOrigin: this.anchorOrigin_,
            anchorXUnits: this.anchorXUnits_,
            anchorYUnits: this.anchorYUnits_,
            color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,
            crossOrigin: this.crossOrigin_,
            imgSize: this.imgSize_,
            offset: this.offset_.slice(),
            offsetOrigin: this.offsetOrigin_,
            opacity: this.getOpacity(),
            rotateWithView: this.getRotateWithView(),
            rotation: this.getRotation(),
            scale: scale,
            width: width,
            height: height,
            size: this.size_ !== null ? this.size_.slice() : undefined,
            src: this.getSrc(),
            displacement: this.getDisplacement().slice(),
            declutterMode: this.getDeclutterMode()
        });
        return clone;
    }
    /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @return {Array<number>} Anchor.
   * @api
   */ getAnchor() {
        let anchor = this.normalizedAnchor_;
        if (!anchor) {
            anchor = this.anchor_;
            const size = this.getSize();
            if (this.anchorXUnits_ == "fraction" || this.anchorYUnits_ == "fraction") {
                if (!size) return null;
                anchor = this.anchor_.slice();
                if (this.anchorXUnits_ == "fraction") anchor[0] *= size[0];
                if (this.anchorYUnits_ == "fraction") anchor[1] *= size[1];
            }
            if (this.anchorOrigin_ != "top-left") {
                if (!size) return null;
                if (anchor === this.anchor_) anchor = this.anchor_.slice();
                if (this.anchorOrigin_ == "top-right" || this.anchorOrigin_ == "bottom-right") anchor[0] = -anchor[0] + size[0];
                if (this.anchorOrigin_ == "bottom-left" || this.anchorOrigin_ == "bottom-right") anchor[1] = -anchor[1] + size[1];
            }
            this.normalizedAnchor_ = anchor;
        }
        const displacement = this.getDisplacement();
        const scale = this.getScaleArray();
        // anchor is scaled by renderer but displacement should not be scaled
        // so divide by scale here
        return [
            anchor[0] - displacement[0] / scale[0],
            anchor[1] + displacement[1] / scale[1]
        ];
    }
    /**
   * Set the anchor point. The anchor determines the center point for the
   * symbolizer.
   *
   * @param {Array<number>} anchor Anchor.
   * @api
   */ setAnchor(anchor) {
        this.anchor_ = anchor;
        this.normalizedAnchor_ = null;
    }
    /**
   * Get the icon color.
   * @return {import("../color.js").Color} Color.
   * @api
   */ getColor() {
        return this.color_;
    }
    /**
   * Get the image icon.
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
   * @api
   */ getImage(pixelRatio) {
        return this.iconImage_.getImage(pixelRatio);
    }
    /**
   * Get the pixel ratio.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} The pixel ratio of the image.
   * @api
   */ getPixelRatio(pixelRatio) {
        return this.iconImage_.getPixelRatio(pixelRatio);
    }
    /**
   * @return {import("../size.js").Size} Image size.
   */ getImageSize() {
        return this.iconImage_.getSize();
    }
    /**
   * @return {import("../ImageState.js").default} Image state.
   */ getImageState() {
        return this.iconImage_.getImageState();
    }
    /**
   * @return {HTMLImageElement|HTMLCanvasElement} Image element.
   */ getHitDetectionImage() {
        return this.iconImage_.getHitDetectionImage();
    }
    /**
   * Get the origin of the symbolizer.
   * @return {Array<number>} Origin.
   * @api
   */ getOrigin() {
        if (this.origin_) return this.origin_;
        let offset = this.offset_;
        if (this.offsetOrigin_ != "top-left") {
            const size = this.getSize();
            const iconImageSize = this.iconImage_.getSize();
            if (!size || !iconImageSize) return null;
            offset = offset.slice();
            if (this.offsetOrigin_ == "top-right" || this.offsetOrigin_ == "bottom-right") offset[0] = iconImageSize[0] - size[0] - offset[0];
            if (this.offsetOrigin_ == "bottom-left" || this.offsetOrigin_ == "bottom-right") offset[1] = iconImageSize[1] - size[1] - offset[1];
        }
        this.origin_ = offset;
        return this.origin_;
    }
    /**
   * Get the image URL.
   * @return {string|undefined} Image src.
   * @api
   */ getSrc() {
        return this.iconImage_.getSrc();
    }
    /**
   * Get the size of the icon (in pixels).
   * @return {import("../size.js").Size} Image size.
   * @api
   */ getSize() {
        return !this.size_ ? this.iconImage_.getSize() : this.size_;
    }
    /**
   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.
   * @return {number} Icon width (in pixels).
   * @api
   */ getWidth() {
        const scale = this.getScaleArray();
        if (this.size_) return this.size_[0] * scale[0];
        if (this.iconImage_.getImageState() == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) return this.iconImage_.getSize()[0] * scale[0];
        return undefined;
    }
    /**
   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.
   * @return {number} Icon height (in pixels).
   * @api
   */ getHeight() {
        const scale = this.getScaleArray();
        if (this.size_) return this.size_[1] * scale[1];
        if (this.iconImage_.getImageState() == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) return this.iconImage_.getSize()[1] * scale[1];
        return undefined;
    }
    /**
   * Set the scale.
   *
   * @param {number|import("../size.js").Size} scale Scale.
   * @api
   */ setScale(scale) {
        delete this.initialOptions_;
        super.setScale(scale);
    }
    /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */ listenImageChange(listener) {
        this.iconImage_.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, listener);
    }
    /**
   * Load not yet loaded URI.
   * When rendering a feature with an icon style, the vector renderer will
   * automatically call this method. However, you might want to call this
   * method yourself for preloading or other purposes.
   * @api
   */ load() {
        this.iconImage_.load();
    }
    /**
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   */ unlistenImageChange(listener) {
        this.iconImage_.removeEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, listener);
    }
}
var $4dd3b6f7e2acb5b2$export$2e2bcd8739ae039 = $4dd3b6f7e2acb5b2$var$Icon;





/**
 * @module ol/style/Text
 */ 

/**
 * @typedef {'point' | 'line'} TextPlacement
 * Default text placement is `'point'`. Note that
 * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
 * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
 * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
 */ /**
 * @typedef {'left' | 'center' | 'right'} TextJustify
 */ /**
 * The default fill color to use if no fill was set at construction time; a
 * blackish `#333`.
 *
 * @const {string}
 */ const $546674d0724a0df5$var$DEFAULT_FILL_COLOR = "#333";
/**
 * @typedef {Object} Options
 * @property {string} [font] Font style as CSS `font` value, see:
 * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`
 * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.
 * The expected value is in radians, and the default is 45° (`Math.PI / 4`).
 * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.
 * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.
 * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
 * the width of the polygon at the label position or the length of the path that it follows.
 * @property {TextPlacement} [placement='point'] Text placement.
 * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies
 * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.
 * @property {number|import("../size.js").Size} [scale] Scale.
 * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can
 * contain line breaks (`\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to
 * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\n', ''`).
 * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield "**foo** *bar* baz".
 * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.
 * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.
 * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a
 * placement where `maxAngle` is not exceeded.
 * @property {TextJustify} [justify] Text justification within the text box.
 * If not set, text is justified towards the `textAlign` anchor.
 * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.
 * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.
 * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,
 * `'hanging'`, `'ideographic'`.
 * @property {import("./Fill.js").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.
 * @property {import("./Stroke.js").default} [stroke] Stroke style.
 * @property {import("./Fill.js").default} [backgroundFill] Fill style for the text background when `placement` is
 * `'point'`. Default is no fill.
 * @property {import("./Stroke.js").default} [backgroundStroke] Stroke style for the text background  when `placement`
 * is `'point'`. Default is no stroke.
 * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
 * values in the array is `[top, right, bottom, left]`.
 */ /**
 * @classdesc
 * Set text style for vector features.
 * @api
 */ class $546674d0724a0df5$var$Text {
    /**
   * @param {Options} [options] Options.
   */ constructor(options){
        options = options || {};
        /**
     * @private
     * @type {string|undefined}
     */ this.font_ = options.font;
        /**
     * @private
     * @type {number|undefined}
     */ this.rotation_ = options.rotation;
        /**
     * @private
     * @type {boolean|undefined}
     */ this.rotateWithView_ = options.rotateWithView;
        /**
     * @private
     * @type {number|import("../size.js").Size|undefined}
     */ this.scale_ = options.scale;
        /**
     * @private
     * @type {import("../size.js").Size}
     */ this.scaleArray_ = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(options.scale !== undefined ? options.scale : 1);
        /**
     * @private
     * @type {string|Array<string>|undefined}
     */ this.text_ = options.text;
        /**
     * @private
     * @type {CanvasTextAlign|undefined}
     */ this.textAlign_ = options.textAlign;
        /**
     * @private
     * @type {TextJustify|undefined}
     */ this.justify_ = options.justify;
        /**
     * @private
     * @type {number|undefined}
     */ this.repeat_ = options.repeat;
        /**
     * @private
     * @type {CanvasTextBaseline|undefined}
     */ this.textBaseline_ = options.textBaseline;
        /**
     * @private
     * @type {import("./Fill.js").default}
     */ this.fill_ = options.fill !== undefined ? options.fill : new (0, $1646510b52ef7eda$export$2e2bcd8739ae039)({
            color: $546674d0724a0df5$var$DEFAULT_FILL_COLOR
        });
        /**
     * @private
     * @type {number}
     */ this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;
        /**
     * @private
     * @type {TextPlacement}
     */ this.placement_ = options.placement !== undefined ? options.placement : "point";
        /**
     * @private
     * @type {boolean}
     */ this.overflow_ = !!options.overflow;
        /**
     * @private
     * @type {import("./Stroke.js").default}
     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;
        /**
     * @private
     * @type {number}
     */ this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;
        /**
     * @private
     * @type {number}
     */ this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;
        /**
     * @private
     * @type {import("./Fill.js").default}
     */ this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;
        /**
     * @private
     * @type {import("./Stroke.js").default}
     */ this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;
        /**
     * @private
     * @type {Array<number>|null}
     */ this.padding_ = options.padding === undefined ? null : options.padding;
    }
    /**
   * Clones the style.
   * @return {Text} The cloned style.
   * @api
   */ clone() {
        const scale = this.getScale();
        return new $546674d0724a0df5$var$Text({
            font: this.getFont(),
            placement: this.getPlacement(),
            repeat: this.getRepeat(),
            maxAngle: this.getMaxAngle(),
            overflow: this.getOverflow(),
            rotation: this.getRotation(),
            rotateWithView: this.getRotateWithView(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            text: this.getText(),
            textAlign: this.getTextAlign(),
            justify: this.getJustify(),
            textBaseline: this.getTextBaseline(),
            fill: this.getFill() ? this.getFill().clone() : undefined,
            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
            offsetX: this.getOffsetX(),
            offsetY: this.getOffsetY(),
            backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,
            backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,
            padding: this.getPadding() || undefined
        });
    }
    /**
   * Get the `overflow` configuration.
   * @return {boolean} Let text overflow the length of the path they follow.
   * @api
   */ getOverflow() {
        return this.overflow_;
    }
    /**
   * Get the font name.
   * @return {string|undefined} Font.
   * @api
   */ getFont() {
        return this.font_;
    }
    /**
   * Get the maximum angle between adjacent characters.
   * @return {number} Angle in radians.
   * @api
   */ getMaxAngle() {
        return this.maxAngle_;
    }
    /**
   * Get the label placement.
   * @return {TextPlacement} Text placement.
   * @api
   */ getPlacement() {
        return this.placement_;
    }
    /**
   * Get the repeat interval of the text.
   * @return {number|undefined} Repeat interval in pixels.
   * @api
   */ getRepeat() {
        return this.repeat_;
    }
    /**
   * Get the x-offset for the text.
   * @return {number} Horizontal text offset.
   * @api
   */ getOffsetX() {
        return this.offsetX_;
    }
    /**
   * Get the y-offset for the text.
   * @return {number} Vertical text offset.
   * @api
   */ getOffsetY() {
        return this.offsetY_;
    }
    /**
   * Get the fill style for the text.
   * @return {import("./Fill.js").default} Fill style.
   * @api
   */ getFill() {
        return this.fill_;
    }
    /**
   * Determine whether the text rotates with the map.
   * @return {boolean|undefined} Rotate with map.
   * @api
   */ getRotateWithView() {
        return this.rotateWithView_;
    }
    /**
   * Get the text rotation.
   * @return {number|undefined} Rotation.
   * @api
   */ getRotation() {
        return this.rotation_;
    }
    /**
   * Get the text scale.
   * @return {number|import("../size.js").Size|undefined} Scale.
   * @api
   */ getScale() {
        return this.scale_;
    }
    /**
   * Get the symbolizer scale array.
   * @return {import("../size.js").Size} Scale array.
   */ getScaleArray() {
        return this.scaleArray_;
    }
    /**
   * Get the stroke style for the text.
   * @return {import("./Stroke.js").default} Stroke style.
   * @api
   */ getStroke() {
        return this.stroke_;
    }
    /**
   * Get the text to be rendered.
   * @return {string|Array<string>|undefined} Text.
   * @api
   */ getText() {
        return this.text_;
    }
    /**
   * Get the text alignment.
   * @return {CanvasTextAlign|undefined} Text align.
   * @api
   */ getTextAlign() {
        return this.textAlign_;
    }
    /**
   * Get the justification.
   * @return {TextJustify|undefined} Justification.
   * @api
   */ getJustify() {
        return this.justify_;
    }
    /**
   * Get the text baseline.
   * @return {CanvasTextBaseline|undefined} Text baseline.
   * @api
   */ getTextBaseline() {
        return this.textBaseline_;
    }
    /**
   * Get the background fill style for the text.
   * @return {import("./Fill.js").default} Fill style.
   * @api
   */ getBackgroundFill() {
        return this.backgroundFill_;
    }
    /**
   * Get the background stroke style for the text.
   * @return {import("./Stroke.js").default} Stroke style.
   * @api
   */ getBackgroundStroke() {
        return this.backgroundStroke_;
    }
    /**
   * Get the padding for the text.
   * @return {Array<number>|null} Padding.
   * @api
   */ getPadding() {
        return this.padding_;
    }
    /**
   * Set the `overflow` property.
   *
   * @param {boolean} overflow Let text overflow the path that it follows.
   * @api
   */ setOverflow(overflow) {
        this.overflow_ = overflow;
    }
    /**
   * Set the font.
   *
   * @param {string|undefined} font Font.
   * @api
   */ setFont(font) {
        this.font_ = font;
    }
    /**
   * Set the maximum angle between adjacent characters.
   *
   * @param {number} maxAngle Angle in radians.
   * @api
   */ setMaxAngle(maxAngle) {
        this.maxAngle_ = maxAngle;
    }
    /**
   * Set the x offset.
   *
   * @param {number} offsetX Horizontal text offset.
   * @api
   */ setOffsetX(offsetX) {
        this.offsetX_ = offsetX;
    }
    /**
   * Set the y offset.
   *
   * @param {number} offsetY Vertical text offset.
   * @api
   */ setOffsetY(offsetY) {
        this.offsetY_ = offsetY;
    }
    /**
   * Set the text placement.
   *
   * @param {TextPlacement} placement Placement.
   * @api
   */ setPlacement(placement) {
        this.placement_ = placement;
    }
    /**
   * Set the repeat interval of the text.
   * @param {number|undefined} [repeat] Repeat interval in pixels.
   * @api
   */ setRepeat(repeat) {
        this.repeat_ = repeat;
    }
    /**
   * Set whether to rotate the text with the view.
   *
   * @param {boolean} rotateWithView Rotate with map.
   * @api
   */ setRotateWithView(rotateWithView) {
        this.rotateWithView_ = rotateWithView;
    }
    /**
   * Set the fill.
   *
   * @param {import("./Fill.js").default} fill Fill style.
   * @api
   */ setFill(fill) {
        this.fill_ = fill;
    }
    /**
   * Set the rotation.
   *
   * @param {number|undefined} rotation Rotation.
   * @api
   */ setRotation(rotation) {
        this.rotation_ = rotation;
    }
    /**
   * Set the scale.
   *
   * @param {number|import("../size.js").Size|undefined} scale Scale.
   * @api
   */ setScale(scale) {
        this.scale_ = scale;
        this.scaleArray_ = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(scale !== undefined ? scale : 1);
    }
    /**
   * Set the stroke.
   *
   * @param {import("./Stroke.js").default} stroke Stroke style.
   * @api
   */ setStroke(stroke) {
        this.stroke_ = stroke;
    }
    /**
   * Set the text.
   *
   * @param {string|Array<string>|undefined} text Text.
   * @api
   */ setText(text) {
        this.text_ = text;
    }
    /**
   * Set the text alignment.
   *
   * @param {CanvasTextAlign|undefined} textAlign Text align.
   * @api
   */ setTextAlign(textAlign) {
        this.textAlign_ = textAlign;
    }
    /**
   * Set the justification.
   *
   * @param {TextJustify|undefined} justify Justification.
   * @api
   */ setJustify(justify) {
        this.justify_ = justify;
    }
    /**
   * Set the text baseline.
   *
   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.
   * @api
   */ setTextBaseline(textBaseline) {
        this.textBaseline_ = textBaseline;
    }
    /**
   * Set the background fill.
   *
   * @param {import("./Fill.js").default} fill Fill style.
   * @api
   */ setBackgroundFill(fill) {
        this.backgroundFill_ = fill;
    }
    /**
   * Set the background stroke.
   *
   * @param {import("./Stroke.js").default} stroke Stroke style.
   * @api
   */ setBackgroundStroke(stroke) {
        this.backgroundStroke_ = stroke;
    }
    /**
   * Set the padding (`[top, right, bottom, left]`).
   *
   * @param {Array<number>|null} padding Padding.
   * @api
   */ setPadding(padding) {
        this.padding_ = padding;
    }
}
var $546674d0724a0df5$export$2e2bcd8739ae039 = $546674d0724a0df5$var$Text;


function $b0dc507c91f0d524$export$b7b312ddf6b38c9f(flatStyle) {
    const style = new (0, $0e8e066c6965c811$export$2e2bcd8739ae039)({
        fill: $b0dc507c91f0d524$var$getFill(flatStyle, ""),
        stroke: $b0dc507c91f0d524$var$getStroke(flatStyle, ""),
        text: $b0dc507c91f0d524$var$getText(flatStyle),
        image: $b0dc507c91f0d524$var$getImage(flatStyle)
    });
    return style;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} prefix The property prefix.
 * @return {Fill|null|undefined} The fill (if any).
 */ function $b0dc507c91f0d524$var$getFill(flatStyle, prefix) {
    const color = flatStyle[prefix + "fill-color"];
    if (!color) return;
    if (color === "none") return null;
    return new (0, $1646510b52ef7eda$export$2e2bcd8739ae039)({
        color: color
    });
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @param {string} prefix The property prefix.
 * @return {Stroke|undefined} The stroke (if any).
 */ function $b0dc507c91f0d524$var$getStroke(flatStyle, prefix) {
    const width = flatStyle[prefix + "stroke-width"];
    const color = flatStyle[prefix + "stroke-color"];
    if (!width && !color) return;
    return new (0, $5bb5a6da769d8762$export$2e2bcd8739ae039)({
        width: width,
        color: color,
        lineCap: flatStyle[prefix + "stroke-line-cap"],
        lineJoin: flatStyle[prefix + "stroke-line-join"],
        lineDash: flatStyle[prefix + "stroke-line-dash"],
        lineDashOffset: flatStyle[prefix + "stroke-line-dash-offset"],
        miterLimit: flatStyle[prefix + "stroke-miter-limit"]
    });
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @return {Text|undefined} The text (if any).
 */ function $b0dc507c91f0d524$var$getText(flatStyle) {
    const value = flatStyle["text-value"];
    if (!value) return;
    const text = new (0, $546674d0724a0df5$export$2e2bcd8739ae039)({
        text: value,
        font: flatStyle["text-font"],
        maxAngle: flatStyle["text-max-angle"],
        offsetX: flatStyle["text-offset-x"],
        offsetY: flatStyle["text-offset-y"],
        overflow: flatStyle["text-overflow"],
        placement: flatStyle["text-placement"],
        repeat: flatStyle["text-repeat"],
        scale: flatStyle["text-scale"],
        rotateWithView: flatStyle["text-rotate-with-view"],
        rotation: flatStyle["text-rotation"],
        textAlign: flatStyle["text-align"],
        justify: flatStyle["text-justify"],
        textBaseline: flatStyle["text-baseline"],
        padding: flatStyle["text-padding"],
        fill: $b0dc507c91f0d524$var$getFill(flatStyle, "text-"),
        backgroundFill: $b0dc507c91f0d524$var$getFill(flatStyle, "text-background-"),
        stroke: $b0dc507c91f0d524$var$getStroke(flatStyle, "text-"),
        backgroundStroke: $b0dc507c91f0d524$var$getStroke(flatStyle, "text-background-")
    });
    return text;
}
/**
 * @param {FlatStyle} flatStyle The flat style.
 * @return {import("./Image.js").default|undefined} The image (if any).
 */ function $b0dc507c91f0d524$var$getImage(flatStyle) {
    const iconSrc = flatStyle["icon-src"];
    const iconImg = flatStyle["icon-img"];
    if (iconSrc || iconImg) {
        const icon = new (0, $4dd3b6f7e2acb5b2$export$2e2bcd8739ae039)({
            src: iconSrc,
            img: iconImg,
            imgSize: flatStyle["icon-img-size"],
            anchor: flatStyle["icon-anchor"],
            anchorOrigin: flatStyle["icon-anchor-origin"],
            anchorXUnits: flatStyle["icon-anchor-x-units"],
            anchorYUnits: flatStyle["icon-anchor-y-units"],
            color: flatStyle["icon-color"],
            crossOrigin: flatStyle["icon-cross-origin"],
            offset: flatStyle["icon-offset"],
            displacement: flatStyle["icon-displacement"],
            opacity: flatStyle["icon-opacity"],
            scale: flatStyle["icon-scale"],
            width: flatStyle["icon-width"],
            height: flatStyle["icon-height"],
            rotation: flatStyle["icon-rotation"],
            rotateWithView: flatStyle["icon-rotate-with-view"],
            size: flatStyle["icon-size"],
            declutterMode: flatStyle["icon-declutter-mode"]
        });
        return icon;
    }
    const shapePoints = flatStyle["shape-points"];
    if (shapePoints) {
        const prefix = "shape-";
        const shape = new (0, $839f5b0b6dbb6b4a$export$2e2bcd8739ae039)({
            points: shapePoints,
            fill: $b0dc507c91f0d524$var$getFill(flatStyle, prefix),
            stroke: $b0dc507c91f0d524$var$getStroke(flatStyle, prefix),
            radius: flatStyle["shape-radius"],
            radius1: flatStyle["shape-radius1"],
            radius2: flatStyle["shape-radius2"],
            angle: flatStyle["shape-angle"],
            displacement: flatStyle["shape-displacement"],
            rotation: flatStyle["shape-rotation"],
            rotateWithView: flatStyle["shape-rotate-with-view"],
            scale: flatStyle["shape-scale"],
            declutterMode: flatStyle["shape-declutter-mode"]
        });
        return shape;
    }
    const circleRadius = flatStyle["circle-radius"];
    if (circleRadius) {
        const prefix = "circle-";
        const circle = new (0, $4702fef2bdf52596$export$2e2bcd8739ae039)({
            radius: circleRadius,
            fill: $b0dc507c91f0d524$var$getFill(flatStyle, prefix),
            stroke: $b0dc507c91f0d524$var$getStroke(flatStyle, prefix),
            displacement: flatStyle["circle-displacement"],
            scale: flatStyle["circle-scale"],
            rotation: flatStyle["circle-rotation"],
            rotateWithView: flatStyle["circle-rotate-with-view"],
            declutterMode: flatStyle["circle-declutter-mode"]
        });
        return circle;
    }
    return;
}
function $b0dc507c91f0d524$export$6865c5ac2f5ce8b6() {
    return {
        "fill-color": "rgba(255,255,255,0.4)",
        "stroke-color": "#3399CC",
        "stroke-width": 1.25,
        "circle-radius": 5,
        "circle-fill-color": "rgba(255,255,255,0.4)",
        "circle-stroke-width": 1.25,
        "circle-stroke-color": "#3399CC"
    };
}


/**
 * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
 * features before rendering. By default features are drawn in the order that they are created. Use
 * `null` to avoid the sort, but get an undefined draw order.
 * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
 * renderer when getting features from the vector source for the rendering or hit-detection.
 * Recommended value: the size of the largest symbol, line width or label.
 * @property {VectorSourceType} [source] Source.
 * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use [map.addLayer()]{@link import("../Map.js").default#addLayer}.
 * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
 * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
 * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
 * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
 * higher priority.
 *
 * As an optimization decluttered features from layers with the same `className` are rendered above
 * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this
 * behavior and place declutterd features with their own layer configure the layer with a `className`
 * other than `ol-layer`.
 * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style. When set to `null`, only
 * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style
 * which will be used if this is not set.
 * @property {import("./Base.js").BackgroundColor} [background] Background color for the layer. If not specified, no background
 * will be rendered.
 * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
 * be recreated during animations. This means that no vectors will be shown clipped, but the
 * setting will have a performance impact for large amounts of vector data. When set to `false`,
 * batches will be recreated when no animation is active.
 * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
 * be recreated during interactions. See also `updateWhileAnimating`.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @enum {string}
 * @private
 */ const $d0e9dd5889579bca$var$Property = {
    RENDER_ORDER: "renderOrder"
};
/**
 * @classdesc
 * Vector data that is rendered client-side.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
 * @template {import("../renderer/canvas/VectorLayer.js").default|import("../renderer/canvas/VectorTileLayer.js").default|import("../renderer/canvas/VectorImageLayer.js").default|import("../renderer/webgl/PointsLayer.js").default} RendererType
 * @extends {Layer<VectorSourceType, RendererType>}
 * @api
 */ class $d0e9dd5889579bca$var$BaseVectorLayer extends (0, $14019fcc7ba24fd5$export$2e2bcd8739ae039) {
    /**
   * @param {Options<VectorSourceType>} [options] Options.
   */ constructor(options){
        options = options ? options : {};
        const baseOptions = Object.assign({}, options);
        delete baseOptions.style;
        delete baseOptions.renderBuffer;
        delete baseOptions.updateWhileAnimating;
        delete baseOptions.updateWhileInteracting;
        super(baseOptions);
        /**
     * @private
     * @type {boolean}
     */ this.declutter_ = options.declutter !== undefined ? options.declutter : false;
        /**
     * @type {number}
     * @private
     */ this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;
        /**
     * User provided style.
     * @type {import("../style/Style.js").StyleLike}
     * @private
     */ this.style_ = null;
        /**
     * Style function for use within the library.
     * @type {import("../style/Style.js").StyleFunction|undefined}
     * @private
     */ this.styleFunction_ = undefined;
        this.setStyle(options.style);
        /**
     * @type {boolean}
     * @private
     */ this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;
        /**
     * @type {boolean}
     * @private
     */ this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;
    }
    /**
   * @return {boolean} Declutter.
   */ getDeclutter() {
        return this.declutter_;
    }
    /**
   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
   * that resolves with an array of features. The array will either contain the topmost feature
   * when a hit was detected, or it will be empty.
   *
   * The hit detection algorithm used for this method is optimized for performance, but is less
   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import("../Map.js").default#getFeaturesAtPixel}.
   * Text is not considered, and icons are only represented by their bounding box instead of the exact
   * image.
   *
   * @param {import("../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with an array of features.
   * @api
   */ getFeatures(pixel) {
        return super.getFeatures(pixel);
    }
    /**
   * @return {number|undefined} Render buffer.
   */ getRenderBuffer() {
        return this.renderBuffer_;
    }
    /**
   * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
   *     order.
   */ getRenderOrder() {
        return /** @type {import("../render.js").OrderFunction|null|undefined} */ this.get($d0e9dd5889579bca$var$Property.RENDER_ORDER);
    }
    /**
   * Get the style for features.  This returns whatever was passed to the `style`
   * option at construction or to the `setStyle` method.
   * @return {import("../style/Style.js").StyleLike|null|undefined} Layer style.
   * @api
   */ getStyle() {
        return this.style_;
    }
    /**
   * Get the style function.
   * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
   * @api
   */ getStyleFunction() {
        return this.styleFunction_;
    }
    /**
   * @return {boolean} Whether the rendered layer should be updated while
   *     animating.
   */ getUpdateWhileAnimating() {
        return this.updateWhileAnimating_;
    }
    /**
   * @return {boolean} Whether the rendered layer should be updated while
   *     interacting.
   */ getUpdateWhileInteracting() {
        return this.updateWhileInteracting_;
    }
    /**
   * Render declutter items for this layer
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */ renderDeclutter(frameState) {
        if (!frameState.declutterTree) frameState.declutterTree = new (0, (/*@__PURE__*/$parcel$interopDefault($878c4f61c06eb00a$exports)))(9);
        /** @type {*} */ this.getRenderer().renderDeclutter(frameState);
    }
    /**
   * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
   *     Render order.
   */ setRenderOrder(renderOrder) {
        this.set($d0e9dd5889579bca$var$Property.RENDER_ORDER, renderOrder);
    }
    /**
   * Set the style for features.  This can be a single style object, an array
   * of styles, or a function that takes a feature and resolution and returns
   * an array of styles. If set to `null`, the layer has no style (a `null` style),
   * so only features that have their own styles will be rendered in the layer. Call
   * `setStyle()` without arguments to reset to the default style. See
   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.
   *
   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object
   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):
   * ```js
   * vectorLayer.setStyle({
   *   "fill-color": "yellow",
   *   "stroke-color": "black",
   *   "stroke-width": 4
   * })
   * ```
   *
   * @param {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style.
   * @api
   */ setStyle(style) {
        /**
     * @type {import("../style/Style.js").StyleLike|null}
     */ let styleLike;
        if (style === undefined) styleLike = (0, $0e8e066c6965c811$export$6865c5ac2f5ce8b6);
        else if (style === null) styleLike = null;
        else if (typeof style === "function") styleLike = style;
        else if (style instanceof (0, $0e8e066c6965c811$export$2e2bcd8739ae039)) styleLike = style;
        else if (Array.isArray(style)) {
            const len = style.length;
            /**
       * @type {Array<Style>}
       */ const styles = new Array(len);
            for(let i = 0; i < len; ++i){
                const s = style[i];
                if (s instanceof (0, $0e8e066c6965c811$export$2e2bcd8739ae039)) styles[i] = s;
                else styles[i] = (0, $b0dc507c91f0d524$export$b7b312ddf6b38c9f)(s);
            }
            styleLike = styles;
        } else styleLike = (0, $b0dc507c91f0d524$export$b7b312ddf6b38c9f)(style);
        this.style_ = styleLike;
        this.styleFunction_ = style === null ? undefined : (0, $0e8e066c6965c811$export$c314ea3f6b164147)(this.style_);
        this.changed();
    }
}
var $d0e9dd5889579bca$export$2e2bcd8739ae039 = $d0e9dd5889579bca$var$BaseVectorLayer;


/**
 * @module ol/renderer/canvas/VectorLayer
 */ /**
 * @module ol/render/canvas/BuilderGroup
 */ /**
 * @module ol/render/canvas/Builder
 */ /**
 * @module ol/render/canvas/Instruction
 */ /**
 * @enum {number}
 */ const $3740963e6530651e$var$Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12
};
const $3740963e6530651e$export$f21891651e408226 = [
    $3740963e6530651e$var$Instruction.FILL
];
const $3740963e6530651e$export$7a98aa5364d62ba8 = [
    $3740963e6530651e$var$Instruction.STROKE
];
const $3740963e6530651e$export$9f746cc58a899a00 = [
    $3740963e6530651e$var$Instruction.BEGIN_PATH
];
const $3740963e6530651e$export$89b10f327e413e71 = [
    $3740963e6530651e$var$Instruction.CLOSE_PATH
];
var $3740963e6530651e$export$2e2bcd8739ae039 = $3740963e6530651e$var$Instruction;



/**
 * @module ol/render/VectorContext
 */ /**
 * @classdesc
 * Context for drawing geometries.  A vector context is available on render
 * events and does not need to be constructed directly.
 * @api
 */ class $f58af45c89f48916$var$VectorContext {
    /**
   * Render a geometry with a custom renderer.
   *
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {Function} renderer Renderer.
   * @param {Function} hitDetectionRenderer Renderer.
   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer) {}
    /**
   * Render a geometry.
   *
   * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
   */ drawGeometry(geometry) {}
    /**
   * Set the rendering style.
   *
   * @param {import("../style/Style.js").default} style The rendering style.
   */ setStyle(style) {}
    /**
   * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../Feature.js").default} feature Feature.
   */ drawCircle(circleGeometry, feature) {}
    /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   */ drawFeature(feature, style) {}
    /**
   * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
   * @param {import("../Feature.js").default} feature Feature.
   */ drawGeometryCollection(geometryCollectionGeometry, feature) {}
    /**
   * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */ drawLineString(lineStringGeometry, feature) {}
    /**
   * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */ drawMultiLineString(multiLineStringGeometry, feature) {}
    /**
   * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */ drawMultiPoint(multiPointGeometry, feature) {}
    /**
   * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */ drawMultiPolygon(multiPolygonGeometry, feature) {}
    /**
   * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */ drawPoint(pointGeometry, feature) {}
    /**
   * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */ drawPolygon(polygonGeometry, feature) {}
    /**
   * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */ drawText(geometry, feature) {}
    /**
   * @param {import("../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
   */ setFillStrokeStyle(fillStyle, strokeStyle) {}
    /**
   * @param {import("../style/Image.js").default} imageStyle Image style.
   * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.
   */ setImageStyle(imageStyle, declutterImageWithText) {}
    /**
   * @param {import("../style/Text.js").default} textStyle Text style.
   * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.
   */ setTextStyle(textStyle, declutterImageWithText) {}
}
var $f58af45c89f48916$export$2e2bcd8739ae039 = $f58af45c89f48916$var$VectorContext;







class $4a55c8b0b7396ae3$var$CanvasBuilder extends (0, $f58af45c89f48916$export$2e2bcd8739ae039) {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super();
        /**
     * @protected
     * @type {number}
     */ this.tolerance = tolerance;
        /**
     * @protected
     * @const
     * @type {import("../../extent.js").Extent}
     */ this.maxExtent = maxExtent;
        /**
     * @protected
     * @type {number}
     */ this.pixelRatio = pixelRatio;
        /**
     * @protected
     * @type {number}
     */ this.maxLineWidth = 0;
        /**
     * @protected
     * @const
     * @type {number}
     */ this.resolution = resolution;
        /**
     * @private
     * @type {Array<*>}
     */ this.beginGeometryInstruction1_ = null;
        /**
     * @private
     * @type {Array<*>}
     */ this.beginGeometryInstruction2_ = null;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.bufferedMaxExtent_ = null;
        /**
     * @protected
     * @type {Array<*>}
     */ this.instructions = [];
        /**
     * @protected
     * @type {Array<number>}
     */ this.coordinates = [];
        /**
     * @private
     * @type {import("../../coordinate.js").Coordinate}
     */ this.tmpCoordinate_ = [];
        /**
     * @protected
     * @type {Array<*>}
     */ this.hitDetectionInstructions = [];
        /**
     * @protected
     * @type {import("../canvas.js").FillStrokeState}
     */ this.state = /** @type {import("../canvas.js").FillStrokeState} */ {};
    }
    /**
   * @protected
   * @param {Array<number>} dashArray Dash array.
   * @return {Array<number>} Dash array with pixel ratio applied
   */ applyPixelRatio(dashArray) {
        const pixelRatio = this.pixelRatio;
        return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {
            return dash * pixelRatio;
        });
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} stride Stride.
   * @protected
   * @return {number} My end
   */ appendFlatPointCoordinates(flatCoordinates, stride) {
        const extent = this.getBufferedMaxExtent();
        const tmpCoord = this.tmpCoordinate_;
        const coordinates = this.coordinates;
        let myEnd = coordinates.length;
        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){
            tmpCoord[0] = flatCoordinates[i];
            tmpCoord[1] = flatCoordinates[i + 1];
            if ((0, $84be800ca44e672c$export$ac68c24d37ca240f)(extent, tmpCoord)) {
                coordinates[myEnd++] = tmpCoord[0];
                coordinates[myEnd++] = tmpCoord[1];
            }
        }
        return myEnd;
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {boolean} closed Last input coordinate equals first.
   * @param {boolean} skipFirst Skip first coordinate.
   * @protected
   * @return {number} My end.
   */ appendFlatLineCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {
        const coordinates = this.coordinates;
        let myEnd = coordinates.length;
        const extent = this.getBufferedMaxExtent();
        if (skipFirst) offset += stride;
        let lastXCoord = flatCoordinates[offset];
        let lastYCoord = flatCoordinates[offset + 1];
        const nextCoord = this.tmpCoordinate_;
        let skipped = true;
        let i, lastRel, nextRel;
        for(i = offset + stride; i < end; i += stride){
            nextCoord[0] = flatCoordinates[i];
            nextCoord[1] = flatCoordinates[i + 1];
            nextRel = (0, $84be800ca44e672c$export$f97905ead28c61a8)(extent, nextCoord);
            if (nextRel !== lastRel) {
                if (skipped) {
                    coordinates[myEnd++] = lastXCoord;
                    coordinates[myEnd++] = lastYCoord;
                    skipped = false;
                }
                coordinates[myEnd++] = nextCoord[0];
                coordinates[myEnd++] = nextCoord[1];
            } else if (nextRel === (0, $3b21d84e5edf3751$export$2e2bcd8739ae039).INTERSECTING) {
                coordinates[myEnd++] = nextCoord[0];
                coordinates[myEnd++] = nextCoord[1];
                skipped = false;
            } else skipped = true;
            lastXCoord = nextCoord[0];
            lastYCoord = nextCoord[1];
            lastRel = nextRel;
        }
        // Last coordinate equals first or only one point to append:
        if (closed && skipped || i === offset + stride) {
            coordinates[myEnd++] = lastXCoord;
            coordinates[myEnd++] = lastYCoord;
        }
        return myEnd;
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} builderEnds Builder ends.
   * @return {number} Offset.
   */ drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {
        for(let i = 0, ii = ends.length; i < ii; ++i){
            const end = ends[i];
            const builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
            builderEnds.push(builderEnd);
            offset = end;
        }
        return offset;
    }
    /**
   * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @param {Function} renderer Renderer.
   * @param {Function} hitDetectionRenderer Renderer.
   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer) {
        this.beginGeometry(geometry, feature);
        const type = geometry.getType();
        const stride = geometry.getStride();
        const builderBegin = this.coordinates.length;
        let flatCoordinates, builderEnd, builderEnds, builderEndss;
        let offset;
        switch(type){
            case "MultiPolygon":
                flatCoordinates = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getOrientedFlatCoordinates();
                builderEndss = [];
                const endss = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getEndss();
                offset = 0;
                for(let i = 0, ii = endss.length; i < ii; ++i){
                    const myEnds = [];
                    offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
                    builderEndss.push(myEnds);
                }
                this.instructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    renderer,
                    (0, $26e6af5078c94bc3$export$915c7058aeb4dfeb)
                ]);
                this.hitDetectionInstructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    hitDetectionRenderer || renderer,
                    (0, $26e6af5078c94bc3$export$915c7058aeb4dfeb)
                ]);
                break;
            case "Polygon":
            case "MultiLineString":
                builderEnds = [];
                flatCoordinates = type == "Polygon" ? /** @type {import("../../geom/Polygon.js").default} */ geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();
                offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ geometry.getEnds(), stride, builderEnds);
                this.instructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    renderer,
                    (0, $26e6af5078c94bc3$export$cbb9596fc0f40db2)
                ]);
                this.hitDetectionInstructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    hitDetectionRenderer || renderer,
                    (0, $26e6af5078c94bc3$export$cbb9596fc0f40db2)
                ]);
                break;
            case "LineString":
            case "Circle":
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
                this.instructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                    (0, $26e6af5078c94bc3$export$9c0934e4e9c3f61e)
                ]);
                this.hitDetectionInstructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    hitDetectionRenderer || renderer,
                    (0, $26e6af5078c94bc3$export$9c0934e4e9c3f61e)
                ]);
                break;
            case "MultiPoint":
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
                if (builderEnd > builderBegin) {
                    this.instructions.push([
                        (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                        builderBegin,
                        builderEnd,
                        geometry,
                        renderer,
                        (0, $26e6af5078c94bc3$export$9c0934e4e9c3f61e)
                    ]);
                    this.hitDetectionInstructions.push([
                        (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                        builderBegin,
                        builderEnd,
                        geometry,
                        hitDetectionRenderer || renderer,
                        (0, $26e6af5078c94bc3$export$9c0934e4e9c3f61e)
                    ]);
                }
                break;
            case "Point":
                flatCoordinates = geometry.getFlatCoordinates();
                this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
                builderEnd = this.coordinates.length;
                this.instructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer
                ]);
                this.hitDetectionInstructions.push([
                    (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    hitDetectionRenderer || renderer
                ]);
                break;
            default:
        }
        this.endGeometry(feature);
    }
    /**
   * @protected
   * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ beginGeometry(geometry, feature) {
        this.beginGeometryInstruction1_ = [
            (0, $3740963e6530651e$export$2e2bcd8739ae039).BEGIN_GEOMETRY,
            feature,
            0,
            geometry
        ];
        this.instructions.push(this.beginGeometryInstruction1_);
        this.beginGeometryInstruction2_ = [
            (0, $3740963e6530651e$export$2e2bcd8739ae039).BEGIN_GEOMETRY,
            feature,
            0,
            geometry
        ];
        this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */ finish() {
        return {
            instructions: this.instructions,
            hitDetectionInstructions: this.hitDetectionInstructions,
            coordinates: this.coordinates
        };
    }
    /**
   * Reverse the hit detection instructions.
   */ reverseHitDetectionInstructions() {
        const hitDetectionInstructions = this.hitDetectionInstructions;
        // step 1 - reverse array
        hitDetectionInstructions.reverse();
        // step 2 - reverse instructions within geometry blocks
        let i;
        const n = hitDetectionInstructions.length;
        let instruction;
        let type;
        let begin = -1;
        for(i = 0; i < n; ++i){
            instruction = hitDetectionInstructions[i];
            type = /** @type {import("./Instruction.js").default} */ instruction[0];
            if (type == (0, $3740963e6530651e$export$2e2bcd8739ae039).END_GEOMETRY) begin = i;
            else if (type == (0, $3740963e6530651e$export$2e2bcd8739ae039).BEGIN_GEOMETRY) {
                instruction[2] = i;
                (0, $69c1cc8ae30f997f$export$292cfa960964f0e0)(this.hitDetectionInstructions, begin, i);
                begin = -1;
            }
        }
    }
    /**
   * @param {import("../../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
   */ setFillStrokeStyle(fillStyle, strokeStyle) {
        const state = this.state;
        if (fillStyle) {
            const fillStyleColor = fillStyle.getColor();
            state.fillStyle = (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(fillStyleColor ? fillStyleColor : (0, $ba06fcc662408736$export$c495d52ee3fd74b2));
        } else state.fillStyle = undefined;
        if (strokeStyle) {
            const strokeStyleColor = strokeStyle.getColor();
            state.strokeStyle = (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(strokeStyleColor ? strokeStyleColor : (0, $ba06fcc662408736$export$1eb2eaecacf2031e));
            const strokeStyleLineCap = strokeStyle.getLineCap();
            state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, $ba06fcc662408736$export$17bd0c38d6ae694e);
            const strokeStyleLineDash = strokeStyle.getLineDash();
            state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : (0, $ba06fcc662408736$export$e21b4112fdc612fc);
            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
            state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, $ba06fcc662408736$export$e06efc2409049f76);
            const strokeStyleLineJoin = strokeStyle.getLineJoin();
            state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, $ba06fcc662408736$export$365eb9648cf19bd0);
            const strokeStyleWidth = strokeStyle.getWidth();
            state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : (0, $ba06fcc662408736$export$79661f132c62010e);
            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
            state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, $ba06fcc662408736$export$80c1c01844597b7b);
            if (state.lineWidth > this.maxLineWidth) {
                this.maxLineWidth = state.lineWidth;
                // invalidate the buffered max extent cache
                this.bufferedMaxExtent_ = null;
            }
        } else {
            state.strokeStyle = undefined;
            state.lineCap = undefined;
            state.lineDash = null;
            state.lineDashOffset = undefined;
            state.lineJoin = undefined;
            state.lineWidth = undefined;
            state.miterLimit = undefined;
        }
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @return {Array<*>} Fill instruction.
   */ createFill(state) {
        const fillStyle = state.fillStyle;
        /** @type {Array<*>} */ const fillInstruction = [
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_FILL_STYLE,
            fillStyle
        ];
        if (typeof fillStyle !== "string") // Fill is a pattern or gradient - align it!
        fillInstruction.push(true);
        return fillInstruction;
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   */ applyStroke(state) {
        this.instructions.push(this.createStroke(state));
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @return {Array<*>} Stroke instruction.
   */ createStroke(state) {
        return [
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth * this.pixelRatio,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            this.applyPixelRatio(state.lineDash),
            state.lineDashOffset * this.pixelRatio
        ];
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
   */ updateFillStyle(state, createFill) {
        const fillStyle = state.fillStyle;
        if (typeof fillStyle !== "string" || state.currentFillStyle != fillStyle) {
            if (fillStyle !== undefined) this.instructions.push(createFill.call(this, state));
            state.currentFillStyle = fillStyle;
        }
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
   */ updateStrokeStyle(state, applyStroke) {
        const strokeStyle = state.strokeStyle;
        const lineCap = state.lineCap;
        const lineDash = state.lineDash;
        const lineDashOffset = state.lineDashOffset;
        const lineJoin = state.lineJoin;
        const lineWidth = state.lineWidth;
        const miterLimit = state.miterLimit;
        if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !(0, $69c1cc8ae30f997f$export$e9bab7fafb253603)(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {
            if (strokeStyle !== undefined) applyStroke.call(this, state);
            state.currentStrokeStyle = strokeStyle;
            state.currentLineCap = lineCap;
            state.currentLineDash = lineDash;
            state.currentLineDashOffset = lineDashOffset;
            state.currentLineJoin = lineJoin;
            state.currentLineWidth = lineWidth;
            state.currentMiterLimit = miterLimit;
        }
    }
    /**
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ endGeometry(feature) {
        this.beginGeometryInstruction1_[2] = this.instructions.length;
        this.beginGeometryInstruction1_ = null;
        this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
        this.beginGeometryInstruction2_ = null;
        const endGeometryInstruction = [
            (0, $3740963e6530651e$export$2e2bcd8739ae039).END_GEOMETRY,
            feature
        ];
        this.instructions.push(endGeometryInstruction);
        this.hitDetectionInstructions.push(endGeometryInstruction);
    }
    /**
   * Get the buffered rendering extent.  Rendering will be clipped to the extent
   * provided to the constructor.  To account for symbolizers that may intersect
   * this extent, we calculate a buffered extent (e.g. based on stroke width).
   * @return {import("../../extent.js").Extent} The buffered rendering extent.
   * @protected
   */ getBufferedMaxExtent() {
        if (!this.bufferedMaxExtent_) {
            this.bufferedMaxExtent_ = (0, $84be800ca44e672c$export$9cd59f9826255e47)(this.maxExtent);
            if (this.maxLineWidth > 0) {
                const width = this.resolution * (this.maxLineWidth + 1) / 2;
                (0, $84be800ca44e672c$export$ab1029bcae9ddb4a)(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
            }
        }
        return this.bufferedMaxExtent_;
    }
}
var $4a55c8b0b7396ae3$export$2e2bcd8739ae039 = $4a55c8b0b7396ae3$var$CanvasBuilder;


/**
 * @module ol/render/canvas/ImageBuilder
 */ 

class $a65436dbf9f74536$var$CanvasImageBuilder extends (0, $4a55c8b0b7396ae3$export$2e2bcd8739ae039) {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
        /**
     * @private
     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
     */ this.hitDetectionImage_ = null;
        /**
     * @private
     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
     */ this.image_ = null;
        /**
     * @private
     * @type {number|undefined}
     */ this.imagePixelRatio_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.anchorX_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.anchorY_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.height_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.opacity_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.originX_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.originY_ = undefined;
        /**
     * @private
     * @type {boolean|undefined}
     */ this.rotateWithView_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.rotation_ = undefined;
        /**
     * @private
     * @type {import("../../size.js").Size|undefined}
     */ this.scale_ = undefined;
        /**
     * @private
     * @type {number|undefined}
     */ this.width_ = undefined;
        /**
     * @private
     * @type {"declutter"|"obstacle"|"none"|undefined}
     */ this.declutterMode_ = undefined;
        /**
     * Data shared with a text builder for combined decluttering.
     * @private
     * @type {import("../canvas.js").DeclutterImageWithText}
     */ this.declutterImageWithText_ = undefined;
    }
    /**
   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ drawPoint(pointGeometry, feature) {
        if (!this.image_) return;
        this.beginGeometry(pointGeometry, feature);
        const flatCoordinates = pointGeometry.getFlatCoordinates();
        const stride = pointGeometry.getStride();
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
        this.instructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.image_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_ * this.imagePixelRatio_,
            this.anchorY_ * this.imagePixelRatio_,
            Math.ceil(this.height_ * this.imagePixelRatio_),
            this.opacity_,
            this.originX_ * this.imagePixelRatio_,
            this.originY_ * this.imagePixelRatio_,
            this.rotateWithView_,
            this.rotation_,
            [
                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_
            ],
            Math.ceil(this.width_ * this.imagePixelRatio_),
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.hitDetectionImage_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_,
            this.anchorY_,
            this.height_,
            1,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            this.scale_,
            this.width_,
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ drawMultiPoint(multiPointGeometry, feature) {
        if (!this.image_) return;
        this.beginGeometry(multiPointGeometry, feature);
        const flatCoordinates = multiPointGeometry.getFlatCoordinates();
        const stride = multiPointGeometry.getStride();
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
        this.instructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.image_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_ * this.imagePixelRatio_,
            this.anchorY_ * this.imagePixelRatio_,
            Math.ceil(this.height_ * this.imagePixelRatio_),
            this.opacity_,
            this.originX_ * this.imagePixelRatio_,
            this.originY_ * this.imagePixelRatio_,
            this.rotateWithView_,
            this.rotation_,
            [
                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_
            ],
            Math.ceil(this.width_ * this.imagePixelRatio_),
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.hitDetectionImage_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_,
            this.anchorY_,
            this.height_,
            1,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            this.scale_,
            this.width_,
            this.declutterMode_,
            this.declutterImageWithText_
        ]);
        this.endGeometry(feature);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */ finish() {
        this.reverseHitDetectionInstructions();
        // FIXME this doesn't really protect us against further calls to draw*Geometry
        this.anchorX_ = undefined;
        this.anchorY_ = undefined;
        this.hitDetectionImage_ = null;
        this.image_ = null;
        this.imagePixelRatio_ = undefined;
        this.height_ = undefined;
        this.scale_ = undefined;
        this.opacity_ = undefined;
        this.originX_ = undefined;
        this.originY_ = undefined;
        this.rotateWithView_ = undefined;
        this.rotation_ = undefined;
        this.width_ = undefined;
        return super.finish();
    }
    /**
   * @param {import("../../style/Image.js").default} imageStyle Image style.
   * @param {Object} [sharedData] Shared data.
   */ setImageStyle(imageStyle, sharedData) {
        const anchor = imageStyle.getAnchor();
        const size = imageStyle.getSize();
        const origin = imageStyle.getOrigin();
        this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);
        this.anchorX_ = anchor[0];
        this.anchorY_ = anchor[1];
        this.hitDetectionImage_ = imageStyle.getHitDetectionImage();
        this.image_ = imageStyle.getImage(this.pixelRatio);
        this.height_ = size[1];
        this.opacity_ = imageStyle.getOpacity();
        this.originX_ = origin[0];
        this.originY_ = origin[1];
        this.rotateWithView_ = imageStyle.getRotateWithView();
        this.rotation_ = imageStyle.getRotation();
        this.scale_ = imageStyle.getScaleArray();
        this.width_ = size[0];
        this.declutterMode_ = imageStyle.getDeclutterMode();
        this.declutterImageWithText_ = sharedData;
    }
}
var $a65436dbf9f74536$export$2e2bcd8739ae039 = $a65436dbf9f74536$var$CanvasImageBuilder;


/**
 * @module ol/render/canvas/LineStringBuilder
 */ 


class $4422479217846b91$var$CanvasLineStringBuilder extends (0, $4a55c8b0b7396ae3$export$2e2bcd8739ae039) {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   * @return {number} end.
   */ drawFlatCoordinates_(flatCoordinates, offset, end, stride) {
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
        const moveToLineToInstruction = [
            (0, $3740963e6530651e$export$2e2bcd8739ae039).MOVE_TO_LINE_TO,
            myBegin,
            myEnd
        ];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        return end;
    }
    /**
   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ drawLineString(lineStringGeometry, feature) {
        const state = this.state;
        const strokeStyle = state.strokeStyle;
        const lineWidth = state.lineWidth;
        if (strokeStyle === undefined || lineWidth === undefined) return;
        this.updateStrokeStyle(state, this.applyStroke);
        this.beginGeometry(lineStringGeometry, feature);
        this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            (0, $ba06fcc662408736$export$e21b4112fdc612fc),
            (0, $ba06fcc662408736$export$e06efc2409049f76)
        ], (0, $3740963e6530651e$export$9f746cc58a899a00));
        const flatCoordinates = lineStringGeometry.getFlatCoordinates();
        const stride = lineStringGeometry.getStride();
        this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
        this.hitDetectionInstructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ drawMultiLineString(multiLineStringGeometry, feature) {
        const state = this.state;
        const strokeStyle = state.strokeStyle;
        const lineWidth = state.lineWidth;
        if (strokeStyle === undefined || lineWidth === undefined) return;
        this.updateStrokeStyle(state, this.applyStroke);
        this.beginGeometry(multiLineStringGeometry, feature);
        this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            (0, $ba06fcc662408736$export$e21b4112fdc612fc),
            (0, $ba06fcc662408736$export$e06efc2409049f76)
        ], (0, $3740963e6530651e$export$9f746cc58a899a00));
        const ends = multiLineStringGeometry.getEnds();
        const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
        const stride = multiLineStringGeometry.getStride();
        let offset = 0;
        for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.drawFlatCoordinates_(flatCoordinates, offset, /** @type {number} */ ends[i], stride);
        this.hitDetectionInstructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
        this.endGeometry(feature);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */ finish() {
        const state = this.state;
        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) this.instructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
        this.reverseHitDetectionInstructions();
        this.state = null;
        return super.finish();
    }
    /**
   * @param {import("../canvas.js").FillStrokeState} state State.
   */ applyStroke(state) {
        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
            this.instructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
            state.lastStroke = this.coordinates.length;
        }
        state.lastStroke = 0;
        super.applyStroke(state);
        this.instructions.push((0, $3740963e6530651e$export$9f746cc58a899a00));
    }
}
var $4422479217846b91$export$2e2bcd8739ae039 = $4422479217846b91$var$CanvasLineStringBuilder;


/**
 * @module ol/render/canvas/PolygonBuilder
 */ 



class $27e367cd1ce66907$var$CanvasPolygonBuilder extends (0, $4a55c8b0b7396ae3$export$2e2bcd8739ae039) {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @private
   * @return {number} End.
   */ drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {
        const state = this.state;
        const fill = state.fillStyle !== undefined;
        const stroke = state.strokeStyle !== undefined;
        const numEnds = ends.length;
        this.instructions.push((0, $3740963e6530651e$export$9f746cc58a899a00));
        this.hitDetectionInstructions.push((0, $3740963e6530651e$export$9f746cc58a899a00));
        for(let i = 0; i < numEnds; ++i){
            const end = ends[i];
            const myBegin = this.coordinates.length;
            const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
            const moveToLineToInstruction = [
                (0, $3740963e6530651e$export$2e2bcd8739ae039).MOVE_TO_LINE_TO,
                myBegin,
                myEnd
            ];
            this.instructions.push(moveToLineToInstruction);
            this.hitDetectionInstructions.push(moveToLineToInstruction);
            if (stroke) {
                // Performance optimization: only call closePath() when we have a stroke.
                // Otherwise the ring is closed already (see appendFlatLineCoordinates above).
                this.instructions.push((0, $3740963e6530651e$export$89b10f327e413e71));
                this.hitDetectionInstructions.push((0, $3740963e6530651e$export$89b10f327e413e71));
            }
            offset = end;
        }
        if (fill) {
            this.instructions.push((0, $3740963e6530651e$export$f21891651e408226));
            this.hitDetectionInstructions.push((0, $3740963e6530651e$export$f21891651e408226));
        }
        if (stroke) {
            this.instructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
            this.hitDetectionInstructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
        }
        return offset;
    }
    /**
   * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../../Feature.js").default} feature Feature.
   */ drawCircle(circleGeometry, feature) {
        const state = this.state;
        const fillStyle = state.fillStyle;
        const strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) return;
        this.setFillStrokeStyles_();
        this.beginGeometry(circleGeometry, feature);
        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_FILL_STYLE,
            (0, $ba06fcc662408736$export$c495d52ee3fd74b2)
        ]);
        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            (0, $ba06fcc662408736$export$e21b4112fdc612fc),
            (0, $ba06fcc662408736$export$e06efc2409049f76)
        ]);
        const flatCoordinates = circleGeometry.getFlatCoordinates();
        const stride = circleGeometry.getStride();
        const myBegin = this.coordinates.length;
        this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
        const circleInstruction = [
            (0, $3740963e6530651e$export$2e2bcd8739ae039).CIRCLE,
            myBegin
        ];
        this.instructions.push((0, $3740963e6530651e$export$9f746cc58a899a00), circleInstruction);
        this.hitDetectionInstructions.push((0, $3740963e6530651e$export$9f746cc58a899a00), circleInstruction);
        if (state.fillStyle !== undefined) {
            this.instructions.push((0, $3740963e6530651e$export$f21891651e408226));
            this.hitDetectionInstructions.push((0, $3740963e6530651e$export$f21891651e408226));
        }
        if (state.strokeStyle !== undefined) {
            this.instructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
            this.hitDetectionInstructions.push((0, $3740963e6530651e$export$7a98aa5364d62ba8));
        }
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ drawPolygon(polygonGeometry, feature) {
        const state = this.state;
        const fillStyle = state.fillStyle;
        const strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) return;
        this.setFillStrokeStyles_();
        this.beginGeometry(polygonGeometry, feature);
        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_FILL_STYLE,
            (0, $ba06fcc662408736$export$c495d52ee3fd74b2)
        ]);
        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            (0, $ba06fcc662408736$export$e21b4112fdc612fc),
            (0, $ba06fcc662408736$export$e06efc2409049f76)
        ]);
        const ends = polygonGeometry.getEnds();
        const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
        const stride = polygonGeometry.getStride();
        this.drawFlatCoordinatess_(flatCoordinates, 0, /** @type {Array<number>} */ ends, stride);
        this.endGeometry(feature);
    }
    /**
   * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ drawMultiPolygon(multiPolygonGeometry, feature) {
        const state = this.state;
        const fillStyle = state.fillStyle;
        const strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) return;
        this.setFillStrokeStyles_();
        this.beginGeometry(multiPolygonGeometry, feature);
        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_FILL_STYLE,
            (0, $ba06fcc662408736$export$c495d52ee3fd74b2)
        ]);
        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            (0, $ba06fcc662408736$export$e21b4112fdc612fc),
            (0, $ba06fcc662408736$export$e06efc2409049f76)
        ]);
        const endss = multiPolygonGeometry.getEndss();
        const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
        const stride = multiPolygonGeometry.getStride();
        let offset = 0;
        for(let i = 0, ii = endss.length; i < ii; ++i)offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
        this.endGeometry(feature);
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */ finish() {
        this.reverseHitDetectionInstructions();
        this.state = null;
        // We want to preserve topology when drawing polygons.  Polygons are
        // simplified using quantization and point elimination. However, we might
        // have received a mix of quantized and non-quantized geometries, so ensure
        // that all are quantized by quantizing all coordinates in the batch.
        const tolerance = this.tolerance;
        if (tolerance !== 0) {
            const coordinates = this.coordinates;
            for(let i = 0, ii = coordinates.length; i < ii; ++i)coordinates[i] = (0, $116cc918e3d500bf$export$51a0620f7a28532b)(coordinates[i], tolerance);
        }
        return super.finish();
    }
    /**
   * @private
   */ setFillStrokeStyles_() {
        const state = this.state;
        const fillStyle = state.fillStyle;
        if (fillStyle !== undefined) this.updateFillStyle(state, this.createFill);
        if (state.strokeStyle !== undefined) this.updateStrokeStyle(state, this.applyStroke);
    }
}
var $27e367cd1ce66907$export$2e2bcd8739ae039 = $27e367cd1ce66907$var$CanvasPolygonBuilder;


/**
 * @module ol/render/canvas/TextBuilder
 */ 






function $d571e35aa85e575b$export$f08272c6ff321e57(chunkLength, flatCoordinates, offset, end, stride) {
    const chunks = [];
    let cursor = offset;
    let chunkM = 0;
    let currentChunk = flatCoordinates.slice(offset, 2);
    while(chunkM < chunkLength && cursor + stride < end){
        const [x1, y1] = currentChunk.slice(-2);
        const x2 = flatCoordinates[cursor + stride];
        const y2 = flatCoordinates[cursor + stride + 1];
        const segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        chunkM += segmentLength;
        if (chunkM >= chunkLength) {
            const m = (chunkLength - chunkM + segmentLength) / segmentLength;
            const x = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(x1, x2, m);
            const y = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(y1, y2, m);
            currentChunk.push(x, y);
            chunks.push(currentChunk);
            currentChunk = [
                x,
                y
            ];
            if (chunkM == chunkLength) cursor += stride;
            chunkM = 0;
        } else if (chunkM < chunkLength) {
            currentChunk.push(flatCoordinates[cursor + stride], flatCoordinates[cursor + stride + 1]);
            cursor += stride;
        } else {
            const missing = segmentLength - chunkM;
            const x = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(x1, x2, missing / segmentLength);
            const y = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(y1, y2, missing / segmentLength);
            currentChunk.push(x, y);
            chunks.push(currentChunk);
            currentChunk = [
                x,
                y
            ];
            chunkM = 0;
            cursor += stride;
        }
    }
    if (chunkM > 0) chunks.push(currentChunk);
    return chunks;
}


/**
 * @module ol/geom/flat/straightchunk
 */ /**
 * @param {number} maxAngle Maximum acceptable angle delta between segments.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {Array<number>} Start and end of the first suitable chunk of the
 * given `flatCoordinates`.
 */ function $c436695d76065293$export$ed6c897eea07a254(maxAngle, flatCoordinates, offset, end, stride) {
    let chunkStart = offset;
    let chunkEnd = offset;
    let chunkM = 0;
    let m = 0;
    let start = offset;
    let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
    for(i = offset; i < end; i += stride){
        const x2 = flatCoordinates[i];
        const y2 = flatCoordinates[i + 1];
        if (x1 !== undefined) {
            x23 = x2 - x1;
            y23 = y2 - y1;
            m23 = Math.sqrt(x23 * x23 + y23 * y23);
            if (x12 !== undefined) {
                m += m12;
                acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
                if (acos > maxAngle) {
                    if (m > chunkM) {
                        chunkM = m;
                        chunkStart = start;
                        chunkEnd = i;
                    }
                    m = 0;
                    start = i - stride;
                }
            }
            m12 = m23;
            x12 = x23;
            y12 = y23;
        }
        x1 = x2;
        y1 = y2;
    }
    m += m23;
    return m > chunkM ? [
        start,
        i
    ] : [
        chunkStart,
        chunkEnd
    ];
}


const $72bb44c946c0e2ac$export$91a016276e4aee96 = {
    "left": 0,
    "center": 0.5,
    "right": 1,
    "top": 0,
    "middle": 0.5,
    "hanging": 0.2,
    "alphabetic": 0.8,
    "ideographic": 0.8,
    "bottom": 1
};
class $72bb44c946c0e2ac$var$CanvasTextBuilder extends (0, $4a55c8b0b7396ae3$export$2e2bcd8739ae039) {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        super(tolerance, maxExtent, resolution, pixelRatio);
        /**
     * @private
     * @type {Array<HTMLCanvasElement>}
     */ this.labels_ = null;
        /**
     * @private
     * @type {string|Array<string>}
     */ this.text_ = "";
        /**
     * @private
     * @type {number}
     */ this.textOffsetX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.textOffsetY_ = 0;
        /**
     * @private
     * @type {boolean|undefined}
     */ this.textRotateWithView_ = undefined;
        /**
     * @private
     * @type {number}
     */ this.textRotation_ = 0;
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.textFillState_ = null;
        /**
     * @type {!Object<string, import("../canvas.js").FillState>}
     */ this.fillStates = {};
        this.fillStates[0, $ba06fcc662408736$export$c495d52ee3fd74b2] = {
            fillStyle: (0, $ba06fcc662408736$export$c495d52ee3fd74b2)
        };
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.textStrokeState_ = null;
        /**
     * @type {!Object<string, import("../canvas.js").StrokeState>}
     */ this.strokeStates = {};
        /**
     * @private
     * @type {import("../canvas.js").TextState}
     */ this.textState_ = /** @type {import("../canvas.js").TextState} */ {};
        /**
     * @type {!Object<string, import("../canvas.js").TextState>}
     */ this.textStates = {};
        /**
     * @private
     * @type {string}
     */ this.textKey_ = "";
        /**
     * @private
     * @type {string}
     */ this.fillKey_ = "";
        /**
     * @private
     * @type {string}
     */ this.strokeKey_ = "";
        /**
     * Data shared with an image builder for combined decluttering.
     * @private
     * @type {import("../canvas.js").DeclutterImageWithText}
     */ this.declutterImageWithText_ = undefined;
    }
    /**
   * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
   */ finish() {
        const instructions = super.finish();
        instructions.textStates = this.textStates;
        instructions.fillStates = this.fillStates;
        instructions.strokeStates = this.strokeStates;
        return instructions;
    }
    /**
   * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   */ drawText(geometry, feature) {
        const fillState = this.textFillState_;
        const strokeState = this.textStrokeState_;
        const textState = this.textState_;
        if (this.text_ === "" || !textState || !fillState && !strokeState) return;
        const coordinates = this.coordinates;
        let begin = coordinates.length;
        const geometryType = geometry.getType();
        let flatCoordinates = null;
        let stride = geometry.getStride();
        if (textState.placement === "line" && (geometryType == "LineString" || geometryType == "MultiLineString" || geometryType == "Polygon" || geometryType == "MultiPolygon")) {
            if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(this.getBufferedMaxExtent(), geometry.getExtent())) return;
            let ends;
            flatCoordinates = geometry.getFlatCoordinates();
            if (geometryType == "LineString") ends = [
                flatCoordinates.length
            ];
            else if (geometryType == "MultiLineString") ends = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.getEnds();
            else if (geometryType == "Polygon") ends = /** @type {import("../../geom/Polygon.js").default} */ geometry.getEnds().slice(0, 1);
            else if (geometryType == "MultiPolygon") {
                const endss = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getEndss();
                ends = [];
                for(let i = 0, ii = endss.length; i < ii; ++i)ends.push(endss[i][0]);
            }
            this.beginGeometry(geometry, feature);
            const repeat = textState.repeat;
            const textAlign = repeat ? undefined : textState.textAlign;
            // No `justify` support for line placement.
            let flatOffset = 0;
            for(let o = 0, oo = ends.length; o < oo; ++o){
                let chunks;
                if (repeat) chunks = (0, $d571e35aa85e575b$export$f08272c6ff321e57)(repeat * this.resolution, flatCoordinates, flatOffset, ends[o], stride);
                else chunks = [
                    flatCoordinates.slice(flatOffset, ends[o])
                ];
                for(let c = 0, cc = chunks.length; c < cc; ++c){
                    const chunk = chunks[c];
                    let chunkBegin = 0;
                    let chunkEnd = chunk.length;
                    if (textAlign == undefined) {
                        const range = (0, $c436695d76065293$export$ed6c897eea07a254)(textState.maxAngle, chunk, 0, chunk.length, 2);
                        chunkBegin = range[0];
                        chunkEnd = range[1];
                    }
                    for(let i = chunkBegin; i < chunkEnd; i += stride)coordinates.push(chunk[i], chunk[i + 1]);
                    const end = coordinates.length;
                    flatOffset = ends[o];
                    this.drawChars_(begin, end);
                    begin = end;
                }
            }
            this.endGeometry(feature);
        } else {
            let geometryWidths = textState.overflow ? null : [];
            switch(geometryType){
                case "Point":
                case "MultiPoint":
                    flatCoordinates = /** @type {import("../../geom/MultiPoint.js").default} */ geometry.getFlatCoordinates();
                    break;
                case "LineString":
                    flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ geometry.getFlatMidpoint();
                    break;
                case "Circle":
                    flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ geometry.getCenter();
                    break;
                case "MultiLineString":
                    flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.getFlatMidpoints();
                    stride = 2;
                    break;
                case "Polygon":
                    flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ geometry.getFlatInteriorPoint();
                    if (!textState.overflow) geometryWidths.push(flatCoordinates[2] / this.resolution);
                    stride = 3;
                    break;
                case "MultiPolygon":
                    const interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getFlatInteriorPoints();
                    flatCoordinates = [];
                    for(let i = 0, ii = interiorPoints.length; i < ii; i += 3){
                        if (!textState.overflow) geometryWidths.push(interiorPoints[i + 2] / this.resolution);
                        flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
                    }
                    if (flatCoordinates.length === 0) return;
                    stride = 2;
                    break;
                default:
            }
            const end = this.appendFlatPointCoordinates(flatCoordinates, stride);
            if (end === begin) return;
            if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {
                let beg = begin / 2;
                geometryWidths = geometryWidths.filter((w, i)=>{
                    const keep = coordinates[(beg + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];
                    if (!keep) --beg;
                    return keep;
                });
            }
            this.saveTextStates_();
            if (textState.backgroundFill || textState.backgroundStroke) {
                this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
                if (textState.backgroundFill) this.updateFillStyle(this.state, this.createFill);
                if (textState.backgroundStroke) {
                    this.updateStrokeStyle(this.state, this.applyStroke);
                    this.hitDetectionInstructions.push(this.createStroke(this.state));
                }
            }
            this.beginGeometry(geometry, feature);
            // adjust padding for negative scale
            let padding = textState.padding;
            if (padding != (0, $ba06fcc662408736$export$40a9eeef55665a40) && (textState.scale[0] < 0 || textState.scale[1] < 0)) {
                let p0 = textState.padding[0];
                let p1 = textState.padding[1];
                let p2 = textState.padding[2];
                let p3 = textState.padding[3];
                if (textState.scale[0] < 0) {
                    p1 = -p1;
                    p3 = -p3;
                }
                if (textState.scale[1] < 0) {
                    p0 = -p0;
                    p2 = -p2;
                }
                padding = [
                    p0,
                    p1,
                    p2,
                    p3
                ];
            }
            // The image is unknown at this stage so we pass null; it will be computed at render time.
            // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
            // render time.
            const pixelRatio = this.pixelRatio;
            this.instructions.push([
                (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_IMAGE,
                begin,
                end,
                null,
                NaN,
                NaN,
                NaN,
                1,
                0,
                0,
                this.textRotateWithView_,
                this.textRotation_,
                [
                    1,
                    1
                ],
                NaN,
                undefined,
                this.declutterImageWithText_,
                padding == (0, $ba06fcc662408736$export$40a9eeef55665a40) ? (0, $ba06fcc662408736$export$40a9eeef55665a40) : padding.map(function(p) {
                    return p * pixelRatio;
                }),
                !!textState.backgroundFill,
                !!textState.backgroundStroke,
                this.text_,
                this.textKey_,
                this.strokeKey_,
                this.fillKey_,
                this.textOffsetX_,
                this.textOffsetY_,
                geometryWidths
            ]);
            const scale = 1 / pixelRatio;
            // Set default fill for hit detection background
            const currentFillStyle = this.state.fillStyle;
            if (textState.backgroundFill) {
                this.state.fillStyle = (0, $ba06fcc662408736$export$c495d52ee3fd74b2);
                this.hitDetectionInstructions.push(this.createFill(this.state));
            }
            this.hitDetectionInstructions.push([
                (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_IMAGE,
                begin,
                end,
                null,
                NaN,
                NaN,
                NaN,
                1,
                0,
                0,
                this.textRotateWithView_,
                this.textRotation_,
                [
                    scale,
                    scale
                ],
                NaN,
                undefined,
                this.declutterImageWithText_,
                padding,
                !!textState.backgroundFill,
                !!textState.backgroundStroke,
                this.text_,
                this.textKey_,
                this.strokeKey_,
                this.fillKey_ ? (0, $ba06fcc662408736$export$c495d52ee3fd74b2) : this.fillKey_,
                this.textOffsetX_,
                this.textOffsetY_,
                geometryWidths
            ]);
            // Reset previous fill
            if (textState.backgroundFill) {
                this.state.fillStyle = currentFillStyle;
                this.hitDetectionInstructions.push(this.createFill(this.state));
            }
            this.endGeometry(feature);
        }
    }
    /**
   * @private
   */ saveTextStates_() {
        const strokeState = this.textStrokeState_;
        const textState = this.textState_;
        const fillState = this.textFillState_;
        const strokeKey = this.strokeKey_;
        if (strokeState) {
            if (!(strokeKey in this.strokeStates)) this.strokeStates[strokeKey] = {
                strokeStyle: strokeState.strokeStyle,
                lineCap: strokeState.lineCap,
                lineDashOffset: strokeState.lineDashOffset,
                lineWidth: strokeState.lineWidth,
                lineJoin: strokeState.lineJoin,
                miterLimit: strokeState.miterLimit,
                lineDash: strokeState.lineDash
            };
        }
        const textKey = this.textKey_;
        if (!(textKey in this.textStates)) this.textStates[textKey] = {
            font: textState.font,
            textAlign: textState.textAlign || (0, $ba06fcc662408736$export$94d53b95641b5766),
            justify: textState.justify,
            textBaseline: textState.textBaseline || (0, $ba06fcc662408736$export$cf2279a1bff62eb),
            scale: textState.scale
        };
        const fillKey = this.fillKey_;
        if (fillState) {
            if (!(fillKey in this.fillStates)) this.fillStates[fillKey] = {
                fillStyle: fillState.fillStyle
            };
        }
    }
    /**
   * @private
   * @param {number} begin Begin.
   * @param {number} end End.
   */ drawChars_(begin, end) {
        const strokeState = this.textStrokeState_;
        const textState = this.textState_;
        const strokeKey = this.strokeKey_;
        const textKey = this.textKey_;
        const fillKey = this.fillKey_;
        this.saveTextStates_();
        const pixelRatio = this.pixelRatio;
        const baseline = $72bb44c946c0e2ac$export$91a016276e4aee96[textState.textBaseline];
        const offsetY = this.textOffsetY_ * pixelRatio;
        const text = this.text_;
        const strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;
        this.instructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_CHARS,
            begin,
            end,
            baseline,
            textState.overflow,
            fillKey,
            textState.maxAngle,
            pixelRatio,
            offsetY,
            strokeKey,
            strokeWidth * pixelRatio,
            text,
            textKey,
            1
        ]);
        this.hitDetectionInstructions.push([
            (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_CHARS,
            begin,
            end,
            baseline,
            textState.overflow,
            fillKey ? (0, $ba06fcc662408736$export$c495d52ee3fd74b2) : fillKey,
            textState.maxAngle,
            1,
            offsetY,
            strokeKey,
            strokeWidth,
            text,
            textKey,
            1 / pixelRatio
        ]);
    }
    /**
   * @param {import("../../style/Text.js").default} textStyle Text style.
   * @param {Object} [sharedData] Shared data.
   */ setTextStyle(textStyle, sharedData) {
        let textState, fillState, strokeState;
        if (!textStyle) this.text_ = "";
        else {
            const textFillStyle = textStyle.getFill();
            if (!textFillStyle) {
                fillState = null;
                this.textFillState_ = fillState;
            } else {
                fillState = this.textFillState_;
                if (!fillState) {
                    fillState = /** @type {import("../canvas.js").FillState} */ {};
                    this.textFillState_ = fillState;
                }
                fillState.fillStyle = (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(textFillStyle.getColor() || (0, $ba06fcc662408736$export$c495d52ee3fd74b2));
            }
            const textStrokeStyle = textStyle.getStroke();
            if (!textStrokeStyle) {
                strokeState = null;
                this.textStrokeState_ = strokeState;
            } else {
                strokeState = this.textStrokeState_;
                if (!strokeState) {
                    strokeState = /** @type {import("../canvas.js").StrokeState} */ {};
                    this.textStrokeState_ = strokeState;
                }
                const lineDash = textStrokeStyle.getLineDash();
                const lineDashOffset = textStrokeStyle.getLineDashOffset();
                const lineWidth = textStrokeStyle.getWidth();
                const miterLimit = textStrokeStyle.getMiterLimit();
                strokeState.lineCap = textStrokeStyle.getLineCap() || (0, $ba06fcc662408736$export$17bd0c38d6ae694e);
                strokeState.lineDash = lineDash ? lineDash.slice() : (0, $ba06fcc662408736$export$e21b4112fdc612fc);
                strokeState.lineDashOffset = lineDashOffset === undefined ? (0, $ba06fcc662408736$export$e06efc2409049f76) : lineDashOffset;
                strokeState.lineJoin = textStrokeStyle.getLineJoin() || (0, $ba06fcc662408736$export$365eb9648cf19bd0);
                strokeState.lineWidth = lineWidth === undefined ? (0, $ba06fcc662408736$export$79661f132c62010e) : lineWidth;
                strokeState.miterLimit = miterLimit === undefined ? (0, $ba06fcc662408736$export$80c1c01844597b7b) : miterLimit;
                strokeState.strokeStyle = (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(textStrokeStyle.getColor() || (0, $ba06fcc662408736$export$1eb2eaecacf2031e));
            }
            textState = this.textState_;
            const font = textStyle.getFont() || (0, $ba06fcc662408736$export$3847dfea4f8d4dfa);
            (0, $ba06fcc662408736$export$a534074a28fa87ff)(font);
            const textScale = textStyle.getScaleArray();
            textState.overflow = textStyle.getOverflow();
            textState.font = font;
            textState.maxAngle = textStyle.getMaxAngle();
            textState.placement = textStyle.getPlacement();
            textState.textAlign = textStyle.getTextAlign();
            textState.repeat = textStyle.getRepeat();
            textState.justify = textStyle.getJustify();
            textState.textBaseline = textStyle.getTextBaseline() || (0, $ba06fcc662408736$export$cf2279a1bff62eb);
            textState.backgroundFill = textStyle.getBackgroundFill();
            textState.backgroundStroke = textStyle.getBackgroundStroke();
            textState.padding = textStyle.getPadding() || (0, $ba06fcc662408736$export$40a9eeef55665a40);
            textState.scale = textScale === undefined ? [
                1,
                1
            ] : textScale;
            const textOffsetX = textStyle.getOffsetX();
            const textOffsetY = textStyle.getOffsetY();
            const textRotateWithView = textStyle.getRotateWithView();
            const textRotation = textStyle.getRotation();
            this.text_ = textStyle.getText() || "";
            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
            this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
            this.textRotation_ = textRotation === undefined ? 0 : textRotation;
            this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == "string" ? strokeState.strokeStyle : (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + "|" + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + "[" + strokeState.lineDash.join() + "]" : "";
            this.textKey_ = textState.font + textState.scale + (textState.textAlign || "?") + (textState.repeat || "?") + (textState.justify || "?") + (textState.textBaseline || "?");
            this.fillKey_ = fillState ? typeof fillState.fillStyle == "string" ? fillState.fillStyle : "|" + (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(fillState.fillStyle) : "";
        }
        this.declutterImageWithText_ = sharedData;
    }
}
var $72bb44c946c0e2ac$export$2e2bcd8739ae039 = $72bb44c946c0e2ac$var$CanvasTextBuilder;


/**
 * @type {Object<import("../canvas.js").BuilderType, typeof Builder>}
 */ const $0b299ddc8624c50d$var$BATCH_CONSTRUCTORS = {
    "Circle": (0, $27e367cd1ce66907$export$2e2bcd8739ae039),
    "Default": (0, $4a55c8b0b7396ae3$export$2e2bcd8739ae039),
    "Image": (0, $a65436dbf9f74536$export$2e2bcd8739ae039),
    "LineString": (0, $4422479217846b91$export$2e2bcd8739ae039),
    "Polygon": (0, $27e367cd1ce66907$export$2e2bcd8739ae039),
    "Text": (0, $72bb44c946c0e2ac$export$2e2bcd8739ae039)
};
class $0b299ddc8624c50d$var$BuilderGroup {
    /**
   * @param {number} tolerance Tolerance.
   * @param {import("../../extent.js").Extent} maxExtent Max extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   */ constructor(tolerance, maxExtent, resolution, pixelRatio){
        /**
     * @private
     * @type {number}
     */ this.tolerance_ = tolerance;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.maxExtent_ = maxExtent;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @private
     * @type {number}
     */ this.resolution_ = resolution;
        /**
     * @private
     * @type {!Object<string, !Object<import("../canvas.js").BuilderType, Builder>>}
     */ this.buildersByZIndex_ = {};
    }
    /**
   * @return {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Builder.js").SerializableInstructions>>} The serializable instructions
   */ finish() {
        const builderInstructions = {};
        for(const zKey in this.buildersByZIndex_){
            builderInstructions[zKey] = builderInstructions[zKey] || {};
            const builders = this.buildersByZIndex_[zKey];
            for(const builderKey in builders){
                const builderInstruction = builders[builderKey].finish();
                builderInstructions[zKey][builderKey] = builderInstruction;
            }
        }
        return builderInstructions;
    }
    /**
   * @param {number|undefined} zIndex Z index.
   * @param {import("../canvas.js").BuilderType} builderType Replay type.
   * @return {import("../VectorContext.js").default} Replay.
   */ getBuilder(zIndex, builderType) {
        const zIndexKey = zIndex !== undefined ? zIndex.toString() : "0";
        let replays = this.buildersByZIndex_[zIndexKey];
        if (replays === undefined) {
            replays = {};
            this.buildersByZIndex_[zIndexKey] = replays;
        }
        let replay = replays[builderType];
        if (replay === undefined) {
            const Constructor = $0b299ddc8624c50d$var$BATCH_CONSTRUCTORS[builderType];
            replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);
            replays[builderType] = replay;
        }
        return replay;
    }
}
var $0b299ddc8624c50d$export$2e2bcd8739ae039 = $0b299ddc8624c50d$var$BuilderGroup;



/**
 * @module ol/render/canvas/ExecutorGroup
 */ /**
 * @module ol/render/canvas/Executor
 */ 




/**
 * @module ol/geom/flat/textpath
 */ 

function $6a798d3c1cf17469$export$153a9a17ab3e949f(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache, rotation) {
    let x2 = flatCoordinates[offset];
    let y2 = flatCoordinates[offset + 1];
    let x1 = 0;
    let y1 = 0;
    let segmentLength = 0;
    let segmentM = 0;
    function advance() {
        x1 = x2;
        y1 = y2;
        offset += stride;
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        segmentM += segmentLength;
        segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    }
    do advance();
    while (offset < end - stride && segmentM + segmentLength < startM);
    let interpolate = segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;
    const beginX = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);
    const beginY = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);
    const startOffset = offset - stride;
    const startLength = segmentM;
    const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);
    while(offset < end - stride && segmentM + segmentLength < endM)advance();
    interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;
    const endX = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);
    const endY = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);
    // Keep text upright
    let reverse;
    if (rotation) {
        const flat = [
            beginX,
            beginY,
            endX,
            endY
        ];
        (0, $9a4105a6a338adf4$export$bb628a54ab399bc9)(flat, 0, 4, 2, rotation, flat, flat);
        reverse = flat[0] > flat[2];
    } else reverse = beginX > endX;
    const PI = Math.PI;
    const result = [];
    const singleSegment = startOffset + stride === offset;
    offset = startOffset;
    segmentLength = 0;
    segmentM = startLength;
    x2 = flatCoordinates[offset];
    y2 = flatCoordinates[offset + 1];
    let previousAngle;
    // All on the same segment
    if (singleSegment) {
        advance();
        previousAngle = Math.atan2(y2 - y1, x2 - x1);
        if (reverse) previousAngle += previousAngle > 0 ? -PI : PI;
        const x = (endX + beginX) / 2;
        const y = (endY + beginY) / 2;
        result[0] = [
            x,
            y,
            (endM - startM) / 2,
            previousAngle,
            text
        ];
        return result;
    }
    // rendering across line segments
    text = text.replace(/\n/g, " "); // ensure rendering in single-line as all calculations below don't handle multi-lines
    for(let i = 0, ii = text.length; i < ii;){
        advance();
        let angle = Math.atan2(y2 - y1, x2 - x1);
        if (reverse) angle += angle > 0 ? -PI : PI;
        if (previousAngle !== undefined) {
            let delta = angle - previousAngle;
            delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;
            if (Math.abs(delta) > maxAngle) return null;
        }
        previousAngle = angle;
        const iStart = i;
        let charLength = 0;
        for(; i < ii; ++i){
            const index = reverse ? ii - i - 1 : i;
            const len = scale * measureAndCacheTextWidth(font, text[index], cache);
            if (offset + stride < end && segmentM + segmentLength < startM + charLength + len / 2) break;
            charLength += len;
        }
        if (i === iStart) continue;
        const chars = reverse ? text.substring(ii - iStart, ii - i) : text.substring(iStart, i);
        interpolate = segmentLength === 0 ? 0 : (startM + charLength / 2 - segmentM) / segmentLength;
        const x = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);
        const y = (0, $57ec69d152197e1d$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);
        result.push([
            x,
            y,
            charLength / 2,
            angle,
            chars
        ]);
        startM += charLength;
    }
    return result;
}



/**
 * @module ol/geom/flat/length
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Length.
 */ function $9d37b56b1e11868f$export$153f8c6b4d8caebc(flatCoordinates, offset, end, stride) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    let length = 0;
    for(let i = offset + stride; i < end; i += stride){
        const x2 = flatCoordinates[i];
        const y2 = flatCoordinates[i + 1];
        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        x1 = x2;
        y1 = y2;
    }
    return length;
}
function $9d37b56b1e11868f$export$2bbb4f6f727a75c2(flatCoordinates, offset, end, stride) {
    let perimeter = $9d37b56b1e11868f$export$153f8c6b4d8caebc(flatCoordinates, offset, end, stride);
    const dx = flatCoordinates[end - stride] - flatCoordinates[offset];
    const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];
    perimeter += Math.sqrt(dx * dx + dy * dy);
    return perimeter;
}



/**
 * @typedef {Object} BBox
 * @property {number} minX Minimal x.
 * @property {number} minY Minimal y.
 * @property {number} maxX Maximal x.
 * @property {number} maxY Maximal y
 * @property {*} value Value.
 */ /**
 * @typedef {Object} ImageOrLabelDimensions
 * @property {number} drawImageX DrawImageX.
 * @property {number} drawImageY DrawImageY.
 * @property {number} drawImageW DrawImageW.
 * @property {number} drawImageH DrawImageH.
 * @property {number} originX OriginX.
 * @property {number} originY OriginY.
 * @property {Array<number>} scale Scale.
 * @property {BBox} declutterBox DeclutterBox.
 * @property {import("../../transform.js").Transform} canvasTransform CanvasTransform.
 */ /**
 * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs
 */ /**
 * @template T
 * @typedef {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default): T} FeatureCallback
 */ /**
 * @type {import("../../extent.js").Extent}
 */ const $ea2d067b3235e95b$var$tmpExtent = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
/** @type {import("../../coordinate.js").Coordinate} */ const $ea2d067b3235e95b$var$p1 = [];
/** @type {import("../../coordinate.js").Coordinate} */ const $ea2d067b3235e95b$var$p2 = [];
/** @type {import("../../coordinate.js").Coordinate} */ const $ea2d067b3235e95b$var$p3 = [];
/** @type {import("../../coordinate.js").Coordinate} */ const $ea2d067b3235e95b$var$p4 = [];
/**
 * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel
 * @return {BBox} Declutter bbox.
 */ function $ea2d067b3235e95b$var$getDeclutterBox(replayImageOrLabelArgs) {
    return replayImageOrLabelArgs[3].declutterBox;
}
const $ea2d067b3235e95b$var$rtlRegEx = new RegExp(/* eslint-disable prettier/prettier */ "[" + String.fromCharCode(0x00591) + "-" + String.fromCharCode(0x008ff) + String.fromCharCode(0x0fb1d) + "-" + String.fromCharCode(0x0fdff) + String.fromCharCode(0x0fe70) + "-" + String.fromCharCode(0x0fefc) + String.fromCharCode(0x10800) + "-" + String.fromCharCode(0x10fff) + String.fromCharCode(0x1e800) + "-" + String.fromCharCode(0x1efff) + "]");
/**
 * @param {string} text Text.
 * @param {CanvasTextAlign} align Alignment.
 * @return {number} Text alignment.
 */ function $ea2d067b3235e95b$var$horizontalTextAlign(text, align) {
    if (align === "start") align = $ea2d067b3235e95b$var$rtlRegEx.test(text) ? "right" : "left";
    else if (align === "end") align = $ea2d067b3235e95b$var$rtlRegEx.test(text) ? "left" : "right";
    return (0, $72bb44c946c0e2ac$export$91a016276e4aee96)[align];
}
/**
 * @param {Array<string>} acc Accumulator.
 * @param {string} line Line of text.
 * @param {number} i Index
 * @return {Array<string>} Accumulator.
 */ function $ea2d067b3235e95b$var$createTextChunks(acc, line, i) {
    if (i > 0) acc.push("\n", "");
    acc.push(line, "");
    return acc;
}
class $ea2d067b3235e95b$var$Executor {
    /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {boolean} overlaps The replay can have overlapping geometries.
   * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions
   */ constructor(resolution, pixelRatio, overlaps, instructions){
        /**
     * @protected
     * @type {boolean}
     */ this.overlaps = overlaps;
        /**
     * @protected
     * @type {number}
     */ this.pixelRatio = pixelRatio;
        /**
     * @protected
     * @const
     * @type {number}
     */ this.resolution = resolution;
        /**
     * @private
     * @type {boolean}
     */ this.alignFill_;
        /**
     * @protected
     * @type {Array<*>}
     */ this.instructions = instructions.instructions;
        /**
     * @protected
     * @type {Array<number>}
     */ this.coordinates = instructions.coordinates;
        /**
     * @private
     * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
     */ this.coordinateCache_ = {};
        /**
     * @private
     * @type {!import("../../transform.js").Transform}
     */ this.renderedTransform_ = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
        /**
     * @protected
     * @type {Array<*>}
     */ this.hitDetectionInstructions = instructions.hitDetectionInstructions;
        /**
     * @private
     * @type {Array<number>}
     */ this.pixelCoordinates_ = null;
        /**
     * @private
     * @type {number}
     */ this.viewRotation_ = 0;
        /**
     * @type {!Object<string, import("../canvas.js").FillState>}
     */ this.fillStates = instructions.fillStates || {};
        /**
     * @type {!Object<string, import("../canvas.js").StrokeState>}
     */ this.strokeStates = instructions.strokeStates || {};
        /**
     * @type {!Object<string, import("../canvas.js").TextState>}
     */ this.textStates = instructions.textStates || {};
        /**
     * @private
     * @type {Object<string, Object<string, number>>}
     */ this.widths_ = {};
        /**
     * @private
     * @type {Object<string, import("../canvas.js").Label>}
     */ this.labels_ = {};
    }
    /**
   * @param {string|Array<string>} text Text.
   * @param {string} textKey Text style key.
   * @param {string} fillKey Fill style key.
   * @param {string} strokeKey Stroke style key.
   * @return {import("../canvas.js").Label} Label.
   */ createLabel(text, textKey, fillKey, strokeKey) {
        const key = text + textKey + fillKey + strokeKey;
        if (this.labels_[key]) return this.labels_[key];
        const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
        const fillState = fillKey ? this.fillStates[fillKey] : null;
        const textState = this.textStates[textKey];
        const pixelRatio = this.pixelRatio;
        const scale = [
            textState.scale[0] * pixelRatio,
            textState.scale[1] * pixelRatio
        ];
        const textIsArray = Array.isArray(text);
        const align = textState.justify ? (0, $72bb44c946c0e2ac$export$91a016276e4aee96)[textState.justify] : $ea2d067b3235e95b$var$horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || (0, $ba06fcc662408736$export$94d53b95641b5766));
        const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
        const chunks = textIsArray ? text : text.split("\n").reduce($ea2d067b3235e95b$var$createTextChunks, []);
        const { width: width, height: height, widths: widths, heights: heights, lineWidths: lineWidths } = (0, $ba06fcc662408736$export$7d7c13020df1e791)(textState, chunks);
        const renderWidth = width + strokeWidth;
        const contextInstructions = [];
        // make canvas 2 pixels wider to account for italic text width measurement errors
        const w = (renderWidth + 2) * scale[0];
        const h = (height + strokeWidth) * scale[1];
        /** @type {import("../canvas.js").Label} */ const label = {
            width: w < 0 ? Math.floor(w) : Math.ceil(w),
            height: h < 0 ? Math.floor(h) : Math.ceil(h),
            contextInstructions: contextInstructions
        };
        if (scale[0] != 1 || scale[1] != 1) contextInstructions.push("scale", scale);
        if (strokeKey) {
            contextInstructions.push("strokeStyle", strokeState.strokeStyle);
            contextInstructions.push("lineWidth", strokeWidth);
            contextInstructions.push("lineCap", strokeState.lineCap);
            contextInstructions.push("lineJoin", strokeState.lineJoin);
            contextInstructions.push("miterLimit", strokeState.miterLimit);
            contextInstructions.push("setLineDash", [
                strokeState.lineDash
            ]);
            contextInstructions.push("lineDashOffset", strokeState.lineDashOffset);
        }
        if (fillKey) contextInstructions.push("fillStyle", fillState.fillStyle);
        contextInstructions.push("textBaseline", "middle");
        contextInstructions.push("textAlign", "center");
        const leftRight = 0.5 - align;
        let x = align * renderWidth + leftRight * strokeWidth;
        const strokeInstructions = [];
        const fillInstructions = [];
        let lineHeight = 0;
        let lineOffset = 0;
        let widthHeightIndex = 0;
        let lineWidthIndex = 0;
        let previousFont;
        for(let i = 0, ii = chunks.length; i < ii; i += 2){
            const text = chunks[i];
            if (text === "\n") {
                lineOffset += lineHeight;
                lineHeight = 0;
                x = align * renderWidth + leftRight * strokeWidth;
                ++lineWidthIndex;
                continue;
            }
            const font = chunks[i + 1] || textState.font;
            if (font !== previousFont) {
                if (strokeKey) strokeInstructions.push("font", font);
                if (fillKey) fillInstructions.push("font", font);
                previousFont = font;
            }
            lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);
            const fillStrokeArgs = [
                text,
                x + leftRight * widths[widthHeightIndex] + align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),
                0.5 * (strokeWidth + lineHeight) + lineOffset
            ];
            x += widths[widthHeightIndex];
            if (strokeKey) strokeInstructions.push("strokeText", fillStrokeArgs);
            if (fillKey) fillInstructions.push("fillText", fillStrokeArgs);
            ++widthHeightIndex;
        }
        Array.prototype.push.apply(contextInstructions, strokeInstructions);
        Array.prototype.push.apply(contextInstructions, fillInstructions);
        this.labels_[key] = label;
        return label;
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
   * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
   * @param {Array<*>} fillInstruction Fill instruction.
   * @param {Array<*>} strokeInstruction Stroke instruction.
   */ replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {
        context.beginPath();
        context.moveTo.apply(context, p1);
        context.lineTo.apply(context, p2);
        context.lineTo.apply(context, p3);
        context.lineTo.apply(context, p4);
        context.lineTo.apply(context, p1);
        if (fillInstruction) {
            this.alignFill_ = /** @type {boolean} */ fillInstruction[2];
            this.fill_(context);
        }
        if (strokeInstruction) {
            this.setStrokeStyle_(context, /** @type {Array<*>} */ strokeInstruction);
            context.stroke();
        }
    }
    /**
   * @private
   * @param {number} sheetWidth Width of the sprite sheet.
   * @param {number} sheetHeight Height of the sprite sheet.
   * @param {number} centerX X.
   * @param {number} centerY Y.
   * @param {number} width Width.
   * @param {number} height Height.
   * @param {number} anchorX Anchor X.
   * @param {number} anchorY Anchor Y.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} rotation Rotation.
   * @param {import("../../size.js").Size} scale Scale.
   * @param {boolean} snapToPixel Snap to pixel.
   * @param {Array<number>} padding Padding.
   * @param {boolean} fillStroke Background fill or stroke.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
   */ calculateImageOrLabelDimensions_(sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {
        anchorX *= scale[0];
        anchorY *= scale[1];
        let x = centerX - anchorX;
        let y = centerY - anchorY;
        const w = width + originX > sheetWidth ? sheetWidth - originX : width;
        const h = height + originY > sheetHeight ? sheetHeight - originY : height;
        const boxW = padding[3] + w * scale[0] + padding[1];
        const boxH = padding[0] + h * scale[1] + padding[2];
        const boxX = x - padding[3];
        const boxY = y - padding[0];
        if (fillStroke || rotation !== 0) {
            $ea2d067b3235e95b$var$p1[0] = boxX;
            $ea2d067b3235e95b$var$p4[0] = boxX;
            $ea2d067b3235e95b$var$p1[1] = boxY;
            $ea2d067b3235e95b$var$p2[1] = boxY;
            $ea2d067b3235e95b$var$p2[0] = boxX + boxW;
            $ea2d067b3235e95b$var$p3[0] = $ea2d067b3235e95b$var$p2[0];
            $ea2d067b3235e95b$var$p3[1] = boxY + boxH;
            $ea2d067b3235e95b$var$p4[1] = $ea2d067b3235e95b$var$p3[1];
        }
        let transform;
        if (rotation !== 0) {
            transform = (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)((0, $d59a735b25ae191a$export$185802fd694ee1f5)(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);
            (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(transform, $ea2d067b3235e95b$var$p1);
            (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(transform, $ea2d067b3235e95b$var$p2);
            (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(transform, $ea2d067b3235e95b$var$p3);
            (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(transform, $ea2d067b3235e95b$var$p4);
            (0, $84be800ca44e672c$export$958e3e1a02eac4b6)(Math.min($ea2d067b3235e95b$var$p1[0], $ea2d067b3235e95b$var$p2[0], $ea2d067b3235e95b$var$p3[0], $ea2d067b3235e95b$var$p4[0]), Math.min($ea2d067b3235e95b$var$p1[1], $ea2d067b3235e95b$var$p2[1], $ea2d067b3235e95b$var$p3[1], $ea2d067b3235e95b$var$p4[1]), Math.max($ea2d067b3235e95b$var$p1[0], $ea2d067b3235e95b$var$p2[0], $ea2d067b3235e95b$var$p3[0], $ea2d067b3235e95b$var$p4[0]), Math.max($ea2d067b3235e95b$var$p1[1], $ea2d067b3235e95b$var$p2[1], $ea2d067b3235e95b$var$p3[1], $ea2d067b3235e95b$var$p4[1]), $ea2d067b3235e95b$var$tmpExtent);
        } else (0, $84be800ca44e672c$export$958e3e1a02eac4b6)(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), $ea2d067b3235e95b$var$tmpExtent);
        if (snapToPixel) {
            x = Math.round(x);
            y = Math.round(y);
        }
        return {
            drawImageX: x,
            drawImageY: y,
            drawImageW: w,
            drawImageH: h,
            originX: originX,
            originY: originY,
            declutterBox: {
                minX: $ea2d067b3235e95b$var$tmpExtent[0],
                minY: $ea2d067b3235e95b$var$tmpExtent[1],
                maxX: $ea2d067b3235e95b$var$tmpExtent[2],
                maxY: $ea2d067b3235e95b$var$tmpExtent[3],
                value: feature
            },
            canvasTransform: transform,
            scale: scale
        };
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
   * @param {ImageOrLabelDimensions} dimensions Dimensions.
   * @param {number} opacity Opacity.
   * @param {Array<*>} fillInstruction Fill instruction.
   * @param {Array<*>} strokeInstruction Stroke instruction.
   * @return {boolean} The image or label was rendered.
   */ replayImageOrLabel_(context, contextScale, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {
        const fillStroke = !!(fillInstruction || strokeInstruction);
        const box = dimensions.declutterBox;
        const canvas = context.canvas;
        const strokePadding = strokeInstruction ? strokeInstruction[2] * dimensions.scale[0] / 2 : 0;
        const intersects = box.minX - strokePadding <= canvas.width / contextScale && box.maxX + strokePadding >= 0 && box.minY - strokePadding <= canvas.height / contextScale && box.maxY + strokePadding >= 0;
        if (intersects) {
            if (fillStroke) this.replayTextBackground_(context, $ea2d067b3235e95b$var$p1, $ea2d067b3235e95b$var$p2, $ea2d067b3235e95b$var$p3, $ea2d067b3235e95b$var$p4, /** @type {Array<*>} */ fillInstruction, /** @type {Array<*>} */ strokeInstruction);
            (0, $ba06fcc662408736$export$3cb6f3a6e49cc0ee)(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);
        }
        return true;
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   */ fill_(context) {
        if (this.alignFill_) {
            const origin = (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(this.renderedTransform_, [
                0,
                0
            ]);
            const repeatSize = 512 * this.pixelRatio;
            context.save();
            context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
            context.rotate(this.viewRotation_);
        }
        context.fill();
        if (this.alignFill_) context.restore();
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {Array<*>} instruction Instruction.
   */ setStrokeStyle_(context, instruction) {
        context["strokeStyle"] = /** @type {import("../../colorlike.js").ColorLike} */ instruction[1];
        context.lineWidth = /** @type {number} */ instruction[2];
        context.lineCap = /** @type {CanvasLineCap} */ instruction[3];
        context.lineJoin = /** @type {CanvasLineJoin} */ instruction[4];
        context.miterLimit = /** @type {number} */ instruction[5];
        context.lineDashOffset = /** @type {number} */ instruction[7];
        context.setLineDash(/** @type {Array<number>} */ instruction[6]);
    }
    /**
   * @private
   * @param {string|Array<string>} text The text to draw.
   * @param {string} textKey The key of the text state.
   * @param {string} strokeKey The key for the stroke state.
   * @param {string} fillKey The key for the fill state.
   * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
   */ drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {
        const textState = this.textStates[textKey];
        const label = this.createLabel(text, textKey, fillKey, strokeKey);
        const strokeState = this.strokeStates[strokeKey];
        const pixelRatio = this.pixelRatio;
        const align = $ea2d067b3235e95b$var$horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || (0, $ba06fcc662408736$export$94d53b95641b5766));
        const baseline = (0, $72bb44c946c0e2ac$export$91a016276e4aee96)[textState.textBaseline || (0, $ba06fcc662408736$export$cf2279a1bff62eb)];
        const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;
        // Remove the 2 pixels we added in createLabel() for the anchor
        const width = label.width / pixelRatio - 2 * textState.scale[0];
        const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
        const anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
        return {
            label: label,
            anchorX: anchorX,
            anchorY: anchorY
        };
    }
    /**
   * @private
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<*>} instructions Instructions array.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {FeatureCallback<T>} [featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [hitExtent] Only check
   *     features that intersect this extent.
   * @param {import("rbush").default} [declutterTree] Declutter tree.
   * @return {T|undefined} Callback result.
   * @template T
   */ execute_(context, contextScale, transform, instructions, snapToPixel, featureCallback, hitExtent, declutterTree) {
        /** @type {Array<number>} */ let pixelCoordinates;
        if (this.pixelCoordinates_ && (0, $69c1cc8ae30f997f$export$e9bab7fafb253603)(transform, this.renderedTransform_)) pixelCoordinates = this.pixelCoordinates_;
        else {
            if (!this.pixelCoordinates_) this.pixelCoordinates_ = [];
            pixelCoordinates = (0, $9a4105a6a338adf4$export$b92b2dedcfff79de)(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
            (0, $d59a735b25ae191a$export$42b4187a82d80ed0)(this.renderedTransform_, transform);
        }
        let i = 0; // instruction index
        const ii = instructions.length; // end of instructions
        let d = 0; // data index
        let dd; // end of per-instruction data
        let anchorX, anchorY, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;
        let pendingFill = 0;
        let pendingStroke = 0;
        let lastFillInstruction = null;
        let lastStrokeInstruction = null;
        const coordinateCache = this.coordinateCache_;
        const viewRotation = this.viewRotation_;
        const viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;
        const state = /** @type {import("../../render.js").State} */ {
            context: context,
            pixelRatio: this.pixelRatio,
            resolution: this.resolution,
            rotation: viewRotation
        };
        // When the batch size gets too big, performance decreases. 200 is a good
        // balance between batch size and number of fill/stroke instructions.
        const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
        let /** @type {import("../../Feature.js").FeatureLike} */ feature;
        let x, y, currentGeometry;
        while(i < ii){
            const instruction = instructions[i];
            const type = /** @type {import("./Instruction.js").default} */ instruction[0];
            switch(type){
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).BEGIN_GEOMETRY:
                    feature = /** @type {import("../../Feature.js").FeatureLike} */ instruction[1];
                    currentGeometry = instruction[3];
                    if (!feature.getGeometry()) i = /** @type {number} */ instruction[2];
                    else if (hitExtent !== undefined && !(0, $84be800ca44e672c$export$7b0a31e10bbff018)(hitExtent, currentGeometry.getExtent())) i = /** @type {number} */ instruction[2] + 1;
                    else ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).BEGIN_PATH:
                    if (pendingFill > batchSize) {
                        this.fill_(context);
                        pendingFill = 0;
                    }
                    if (pendingStroke > batchSize) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    if (!pendingFill && !pendingStroke) {
                        context.beginPath();
                        prevX = NaN;
                        prevY = NaN;
                    }
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).CIRCLE:
                    d = /** @type {number} */ instruction[1];
                    const x1 = pixelCoordinates[d];
                    const y1 = pixelCoordinates[d + 1];
                    const x2 = pixelCoordinates[d + 2];
                    const y2 = pixelCoordinates[d + 3];
                    const dx = x2 - x1;
                    const dy = y2 - y1;
                    const r = Math.sqrt(dx * dx + dy * dy);
                    context.moveTo(x1 + r, y1);
                    context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).CLOSE_PATH:
                    context.closePath();
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).CUSTOM:
                    d = /** @type {number} */ instruction[1];
                    dd = instruction[2];
                    const geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ instruction[3];
                    const renderer = instruction[4];
                    const fn = instruction.length == 6 ? instruction[5] : undefined;
                    state.geometry = geometry;
                    state.feature = feature;
                    if (!(i in coordinateCache)) coordinateCache[i] = [];
                    const coords = coordinateCache[i];
                    if (fn) fn(pixelCoordinates, d, dd, 2, coords);
                    else {
                        coords[0] = pixelCoordinates[d];
                        coords[1] = pixelCoordinates[d + 1];
                        coords.length = 2;
                    }
                    renderer(coords, state);
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_IMAGE:
                    d = /** @type {number} */ instruction[1];
                    dd = /** @type {number} */ instruction[2];
                    image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ instruction[3];
                    // Remaining arguments in DRAW_IMAGE are in alphabetical order
                    anchorX = /** @type {number} */ instruction[4];
                    anchorY = /** @type {number} */ instruction[5];
                    let height = /** @type {number} */ instruction[6];
                    const opacity = /** @type {number} */ instruction[7];
                    const originX = /** @type {number} */ instruction[8];
                    const originY = /** @type {number} */ instruction[9];
                    const rotateWithView = /** @type {boolean} */ instruction[10];
                    let rotation = /** @type {number} */ instruction[11];
                    const scale = /** @type {import("../../size.js").Size} */ instruction[12];
                    let width = /** @type {number} */ instruction[13];
                    const declutterMode = /** @type {"declutter"|"obstacle"|"none"|undefined} */ instruction[14];
                    const declutterImageWithText = /** @type {import("../canvas.js").DeclutterImageWithText} */ instruction[15];
                    if (!image && instruction.length >= 20) {
                        // create label images
                        text = /** @type {string} */ instruction[19];
                        textKey = /** @type {string} */ instruction[20];
                        strokeKey = /** @type {string} */ instruction[21];
                        fillKey = /** @type {string} */ instruction[22];
                        const labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);
                        image = labelWithAnchor.label;
                        instruction[3] = image;
                        const textOffsetX = /** @type {number} */ instruction[23];
                        anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
                        instruction[4] = anchorX;
                        const textOffsetY = /** @type {number} */ instruction[24];
                        anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
                        instruction[5] = anchorY;
                        height = image.height;
                        instruction[6] = height;
                        width = image.width;
                        instruction[13] = width;
                    }
                    let geometryWidths;
                    if (instruction.length > 25) geometryWidths = /** @type {number} */ instruction[25];
                    let padding, backgroundFill, backgroundStroke;
                    if (instruction.length > 17) {
                        padding = /** @type {Array<number>} */ instruction[16];
                        backgroundFill = /** @type {boolean} */ instruction[17];
                        backgroundStroke = /** @type {boolean} */ instruction[18];
                    } else {
                        padding = (0, $ba06fcc662408736$export$40a9eeef55665a40);
                        backgroundFill = false;
                        backgroundStroke = false;
                    }
                    if (rotateWithView && viewRotationFromTransform) // Canvas is expected to be rotated to reverse view rotation.
                    rotation += viewRotation;
                    else if (!rotateWithView && !viewRotationFromTransform) // Canvas is not rotated, images need to be rotated back to be north-up.
                    rotation -= viewRotation;
                    let widthIndex = 0;
                    for(; d < dd; d += 2){
                        if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) continue;
                        const dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, backgroundFill || backgroundStroke, feature);
                        /** @type {ReplayImageOrLabelArgs} */ const args = [
                            context,
                            contextScale,
                            image,
                            dimensions,
                            opacity,
                            backgroundFill ? /** @type {Array<*>} */ lastFillInstruction : null,
                            backgroundStroke ? /** @type {Array<*>} */ lastStrokeInstruction : null
                        ];
                        if (declutterTree) {
                            if (declutterMode === "none") continue;
                            else if (declutterMode === "obstacle") {
                                // will always be drawn, thus no collision detection, but insert as obstacle
                                declutterTree.insert(dimensions.declutterBox);
                                continue;
                            } else {
                                let imageArgs;
                                let imageDeclutterBox;
                                if (declutterImageWithText) {
                                    const index = dd - d;
                                    if (!declutterImageWithText[index]) {
                                        // We now have the image for an image+text combination.
                                        declutterImageWithText[index] = args;
                                        continue;
                                    }
                                    imageArgs = declutterImageWithText[index];
                                    delete declutterImageWithText[index];
                                    imageDeclutterBox = $ea2d067b3235e95b$var$getDeclutterBox(imageArgs);
                                    if (declutterTree.collides(imageDeclutterBox)) continue;
                                }
                                if (declutterTree.collides(dimensions.declutterBox)) continue;
                                if (imageArgs) {
                                    // We now have image and text for an image+text combination.
                                    declutterTree.insert(imageDeclutterBox);
                                    // Render the image before we render the text.
                                    this.replayImageOrLabel_.apply(this, imageArgs);
                                }
                                declutterTree.insert(dimensions.declutterBox);
                            }
                        }
                        this.replayImageOrLabel_.apply(this, args);
                    }
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).DRAW_CHARS:
                    const begin = /** @type {number} */ instruction[1];
                    const end = /** @type {number} */ instruction[2];
                    const baseline = /** @type {number} */ instruction[3];
                    const overflow = /** @type {number} */ instruction[4];
                    fillKey = /** @type {string} */ instruction[5];
                    const maxAngle = /** @type {number} */ instruction[6];
                    const measurePixelRatio = /** @type {number} */ instruction[7];
                    const offsetY = /** @type {number} */ instruction[8];
                    strokeKey = /** @type {string} */ instruction[9];
                    const strokeWidth = /** @type {number} */ instruction[10];
                    text = /** @type {string} */ instruction[11];
                    textKey = /** @type {string} */ instruction[12];
                    const pixelRatioScale = [
                        /** @type {number} */ instruction[13],
                        /** @type {number} */ instruction[13]
                    ];
                    const textState = this.textStates[textKey];
                    const font = textState.font;
                    const textScale = [
                        textState.scale[0] * measurePixelRatio,
                        textState.scale[1] * measurePixelRatio
                    ];
                    let cachedWidths;
                    if (font in this.widths_) cachedWidths = this.widths_[font];
                    else {
                        cachedWidths = {};
                        this.widths_[font] = cachedWidths;
                    }
                    const pathLength = (0, $9d37b56b1e11868f$export$153f8c6b4d8caebc)(pixelCoordinates, begin, end, 2);
                    const textLength = Math.abs(textScale[0]) * (0, $ba06fcc662408736$export$915c7ba51467308f)(font, text, cachedWidths);
                    if (overflow || textLength <= pathLength) {
                        const textAlign = this.textStates[textKey].textAlign;
                        const startM = (pathLength - textLength) * $ea2d067b3235e95b$var$horizontalTextAlign(text, textAlign);
                        const parts = (0, $6a798d3c1cf17469$export$153a9a17ab3e949f)(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), (0, $ba06fcc662408736$export$915c7ba51467308f), font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_);
                        drawChars: if (parts) {
                            /** @type {Array<ReplayImageOrLabelArgs>} */ const replayImageOrLabelArgs = [];
                            let c, cc, chars, label, part;
                            if (strokeKey) for(c = 0, cc = parts.length; c < cc; ++c){
                                part = parts[c]; // x, y, anchorX, rotation, chunk
                                chars = /** @type {string} */ part[4];
                                label = this.createLabel(chars, textKey, "", strokeKey);
                                anchorX = /** @type {number} */ part[2] + (textScale[0] < 0 ? -strokeWidth : strokeWidth);
                                anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth * textScale[1] / textScale[0] - offsetY;
                                const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, $ba06fcc662408736$export$40a9eeef55665a40), false, feature);
                                if (declutterTree && declutterTree.collides(dimensions.declutterBox)) break drawChars;
                                replayImageOrLabelArgs.push([
                                    context,
                                    contextScale,
                                    label,
                                    dimensions,
                                    1,
                                    null,
                                    null
                                ]);
                            }
                            if (fillKey) for(c = 0, cc = parts.length; c < cc; ++c){
                                part = parts[c]; // x, y, anchorX, rotation, chunk
                                chars = /** @type {string} */ part[4];
                                label = this.createLabel(chars, textKey, fillKey, "");
                                anchorX = /** @type {number} */ part[2];
                                anchorY = baseline * label.height - offsetY;
                                const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, $ba06fcc662408736$export$40a9eeef55665a40), false, feature);
                                if (declutterTree && declutterTree.collides(dimensions.declutterBox)) break drawChars;
                                replayImageOrLabelArgs.push([
                                    context,
                                    contextScale,
                                    label,
                                    dimensions,
                                    1,
                                    null,
                                    null
                                ]);
                            }
                            if (declutterTree) declutterTree.load(replayImageOrLabelArgs.map($ea2d067b3235e95b$var$getDeclutterBox));
                            for(let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i)this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);
                        }
                    }
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).END_GEOMETRY:
                    if (featureCallback !== undefined) {
                        feature = /** @type {import("../../Feature.js").FeatureLike} */ instruction[1];
                        const result = featureCallback(feature, currentGeometry);
                        if (result) return result;
                    }
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).FILL:
                    if (batchSize) pendingFill++;
                    else this.fill_(context);
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).MOVE_TO_LINE_TO:
                    d = /** @type {number} */ instruction[1];
                    dd = /** @type {number} */ instruction[2];
                    x = pixelCoordinates[d];
                    y = pixelCoordinates[d + 1];
                    roundX = x + 0.5 | 0;
                    roundY = y + 0.5 | 0;
                    if (roundX !== prevX || roundY !== prevY) {
                        context.moveTo(x, y);
                        prevX = roundX;
                        prevY = roundY;
                    }
                    for(d += 2; d < dd; d += 2){
                        x = pixelCoordinates[d];
                        y = pixelCoordinates[d + 1];
                        roundX = x + 0.5 | 0;
                        roundY = y + 0.5 | 0;
                        if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                            context.lineTo(x, y);
                            prevX = roundX;
                            prevY = roundY;
                        }
                    }
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_FILL_STYLE:
                    lastFillInstruction = instruction;
                    this.alignFill_ = instruction[2];
                    if (pendingFill) {
                        this.fill_(context);
                        pendingFill = 0;
                        if (pendingStroke) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                    }
                    context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ instruction[1];
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).SET_STROKE_STYLE:
                    lastStrokeInstruction = instruction;
                    if (pendingStroke) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    this.setStrokeStyle_(context, /** @type {Array<*>} */ instruction);
                    ++i;
                    break;
                case (0, $3740963e6530651e$export$2e2bcd8739ae039).STROKE:
                    if (batchSize) pendingStroke++;
                    else context.stroke();
                    ++i;
                    break;
                default:
                    ++i;
                    break;
            }
        }
        if (pendingFill) this.fill_(context);
        if (pendingStroke) context.stroke();
        return undefined;
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {import("rbush").default} [declutterTree] Declutter tree.
   */ execute(context, contextScale, transform, viewRotation, snapToPixel, declutterTree) {
        this.viewRotation_ = viewRotation;
        this.execute_(context, contextScale, transform, this.instructions, snapToPixel, undefined, undefined, declutterTree);
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {FeatureCallback<T>} [featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [hitExtent] Only check
   *     features that intersect this extent.
   * @return {T|undefined} Callback result.
   * @template T
   */ executeHitDetection(context, transform, viewRotation, featureCallback, hitExtent) {
        this.viewRotation_ = viewRotation;
        return this.execute_(context, 1, transform, this.hitDetectionInstructions, true, featureCallback, hitExtent);
    }
}
var $ea2d067b3235e95b$export$2e2bcd8739ae039 = $ea2d067b3235e95b$var$Executor;








/**
 * @const
 * @type {Array<import("../canvas.js").BuilderType>}
 */ const $9ab3bb4278f389ba$var$ORDER = [
    "Polygon",
    "Circle",
    "LineString",
    "Image",
    "Text",
    "Default"
];
class $9ab3bb4278f389ba$var$ExecutorGroup {
    /**
   * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`
   * should be set here, unless the target context does not exceed that extent (which
   * can be the case when rendering to tiles).
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {boolean} overlaps The executor group can have overlapping geometries.
   * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions
   * The serializable instructions.
   * @param {number} [renderBuffer] Optional rendering buffer.
   */ constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, renderBuffer){
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.maxExtent_ = maxExtent;
        /**
     * @private
     * @type {boolean}
     */ this.overlaps_ = overlaps;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @private
     * @type {number}
     */ this.resolution_ = resolution;
        /**
     * @private
     * @type {number|undefined}
     */ this.renderBuffer_ = renderBuffer;
        /**
     * @private
     * @type {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Executor").default>>}
     */ this.executorsByZIndex_ = {};
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.hitDetectionContext_ = null;
        /**
     * @private
     * @type {import("../../transform.js").Transform}
     */ this.hitDetectionTransform_ = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
        this.createExecutors_(allInstructions);
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../../transform.js").Transform} transform Transform.
   */ clip(context, transform) {
        const flatClipCoords = this.getClipCoords(transform);
        context.beginPath();
        context.moveTo(flatClipCoords[0], flatClipCoords[1]);
        context.lineTo(flatClipCoords[2], flatClipCoords[3]);
        context.lineTo(flatClipCoords[4], flatClipCoords[5]);
        context.lineTo(flatClipCoords[6], flatClipCoords[7]);
        context.clip();
    }
    /**
   * Create executors and populate them using the provided instructions.
   * @private
   * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions
   */ createExecutors_(allInstructions) {
        for(const zIndex in allInstructions){
            let executors = this.executorsByZIndex_[zIndex];
            if (executors === undefined) {
                executors = {};
                this.executorsByZIndex_[zIndex] = executors;
            }
            const instructionByZindex = allInstructions[zIndex];
            for(const builderType in instructionByZindex){
                const instructions = instructionByZindex[builderType];
                executors[builderType] = new (0, $ea2d067b3235e95b$export$2e2bcd8739ae039)(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);
            }
        }
    }
    /**
   * @param {Array<import("../canvas.js").BuilderType>} executors Executors.
   * @return {boolean} Has executors of the provided types.
   */ hasExecutors(executors) {
        for(const zIndex in this.executorsByZIndex_){
            const candidates = this.executorsByZIndex_[zIndex];
            for(let i = 0, ii = executors.length; i < ii; ++i){
                if (executors[i] in candidates) return true;
            }
        }
        return false;
    }
    /**
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.
   * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
   * @return {T|undefined} Callback result.
   * @template T
   */ forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {
        hitTolerance = Math.round(hitTolerance);
        const contextSize = hitTolerance * 2 + 1;
        const transform = (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
        const newContext = !this.hitDetectionContext_;
        if (newContext) this.hitDetectionContext_ = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(contextSize, contextSize, undefined, {
            willReadFrequently: true
        });
        const context = this.hitDetectionContext_;
        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
            context.canvas.width = contextSize;
            context.canvas.height = contextSize;
        } else if (!newContext) context.clearRect(0, 0, contextSize, contextSize);
        /**
     * @type {import("../../extent.js").Extent}
     */ let hitExtent;
        if (this.renderBuffer_ !== undefined) {
            hitExtent = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
            (0, $84be800ca44e672c$export$1f820e3920fa5715)(hitExtent, coordinate);
            (0, $84be800ca44e672c$export$ab1029bcae9ddb4a)(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
        }
        const indexes = $9ab3bb4278f389ba$export$96fc84ea21b8269f(hitTolerance);
        let builderType;
        /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
     * @return {T|undefined} Callback result.
     */ function featureCallback(feature, geometry) {
            const imageData = context.getImageData(0, 0, contextSize, contextSize).data;
            for(let i = 0, ii = indexes.length; i < ii; i++)if (imageData[indexes[i]] > 0) {
                if (!declutteredFeatures || builderType !== "Image" && builderType !== "Text" || declutteredFeatures.includes(feature)) {
                    const idx = (indexes[i] - 3) / 4;
                    const x = hitTolerance - idx % contextSize;
                    const y = hitTolerance - (idx / contextSize | 0);
                    const result = callback(feature, geometry, x * x + y * y);
                    if (result) return result;
                }
                context.clearRect(0, 0, contextSize, contextSize);
                break;
            }
            return undefined;
        }
        /** @type {Array<number>} */ const zs = Object.keys(this.executorsByZIndex_).map(Number);
        zs.sort((0, $69c1cc8ae30f997f$export$fcb633242ef15540));
        let i, j, executors, executor, result;
        for(i = zs.length - 1; i >= 0; --i){
            const zIndexKey = zs[i].toString();
            executors = this.executorsByZIndex_[zIndexKey];
            for(j = $9ab3bb4278f389ba$var$ORDER.length - 1; j >= 0; --j){
                builderType = $9ab3bb4278f389ba$var$ORDER[j];
                executor = executors[builderType];
                if (executor !== undefined) {
                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);
                    if (result) return result;
                }
            }
        }
        return undefined;
    }
    /**
   * @param {import("../../transform.js").Transform} transform Transform.
   * @return {Array<number>|null} Clip coordinates.
   */ getClipCoords(transform) {
        const maxExtent = this.maxExtent_;
        if (!maxExtent) return null;
        const minX = maxExtent[0];
        const minY = maxExtent[1];
        const maxX = maxExtent[2];
        const maxY = maxExtent[3];
        const flatClipCoords = [
            minX,
            minY,
            minX,
            maxY,
            maxX,
            maxY,
            maxX,
            minY
        ];
        (0, $9a4105a6a338adf4$export$b92b2dedcfff79de)(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
        return flatClipCoords;
    }
    /**
   * @return {boolean} Is empty.
   */ isEmpty() {
        return (0, $e2dfef87a88758ed$export$dd1bc94b04021eeb)(this.executorsByZIndex_);
    }
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
   * @param {Array<import("../canvas.js").BuilderType>} [builderTypes] Ordered replay types to replay.
   *     Default is {@link module:ol/render/replay~ORDER}
   * @param {import("rbush").default} [declutterTree] Declutter tree.
   */ execute(context, contextScale, transform, viewRotation, snapToPixel, builderTypes, declutterTree) {
        /** @type {Array<number>} */ const zs = Object.keys(this.executorsByZIndex_).map(Number);
        zs.sort((0, $69c1cc8ae30f997f$export$fcb633242ef15540));
        // setup clipping so that the parts of over-simplified geometries are not
        // visible outside the current extent when panning
        if (this.maxExtent_) {
            context.save();
            this.clip(context, transform);
        }
        builderTypes = builderTypes ? builderTypes : $9ab3bb4278f389ba$var$ORDER;
        let i, ii, j, jj, replays, replay;
        if (declutterTree) zs.reverse();
        for(i = 0, ii = zs.length; i < ii; ++i){
            const zIndexKey = zs[i].toString();
            replays = this.executorsByZIndex_[zIndexKey];
            for(j = 0, jj = builderTypes.length; j < jj; ++j){
                const builderType = builderTypes[j];
                replay = replays[builderType];
                if (replay !== undefined) replay.execute(context, contextScale, transform, viewRotation, snapToPixel, declutterTree);
            }
        }
        if (this.maxExtent_) context.restore();
    }
}
/**
 * This cache is used to store arrays of indexes for calculated pixel circles
 * to increase performance.
 * It is a static property to allow each Replaygroup to access it.
 * @type {Object<number, Array<number>>}
 */ const $9ab3bb4278f389ba$var$circlePixelIndexArrayCache = {};
function $9ab3bb4278f389ba$export$96fc84ea21b8269f(radius) {
    if ($9ab3bb4278f389ba$var$circlePixelIndexArrayCache[radius] !== undefined) return $9ab3bb4278f389ba$var$circlePixelIndexArrayCache[radius];
    const size = radius * 2 + 1;
    const maxDistanceSq = radius * radius;
    const distances = new Array(maxDistanceSq + 1);
    for(let i = 0; i <= radius; ++i)for(let j = 0; j <= radius; ++j){
        const distanceSq = i * i + j * j;
        if (distanceSq > maxDistanceSq) break;
        let distance = distances[distanceSq];
        if (!distance) {
            distance = [];
            distances[distanceSq] = distance;
        }
        distance.push(((radius + i) * size + (radius + j)) * 4 + 3);
        if (i > 0) distance.push(((radius - i) * size + (radius + j)) * 4 + 3);
        if (j > 0) {
            distance.push(((radius + i) * size + (radius - j)) * 4 + 3);
            if (i > 0) distance.push(((radius - i) * size + (radius - j)) * 4 + 3);
        }
    }
    const pixelIndex = [];
    for(let i = 0, ii = distances.length; i < ii; ++i)if (distances[i]) pixelIndex.push(...distances[i]);
    $9ab3bb4278f389ba$var$circlePixelIndexArrayCache[radius] = pixelIndex;
    return pixelIndex;
}
var $9ab3bb4278f389ba$export$2e2bcd8739ae039 = $9ab3bb4278f389ba$var$ExecutorGroup;




/**
 * @module ol/render/canvas/hitdetect
 */ /**
 * @module ol/render/canvas/Immediate
 */ // FIXME test, especially polygons with holes and multipolygons
// FIXME need to handle large thick features (where pixel size matters)
// FIXME add offset and end to ol/geom/flat/transform~transform2D?









/**
 * @classdesc
 * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements
 * direct rendering of features and geometries to an HTML5 Canvas context.
 * Instances of this class are created internally by the library and
 * provided to application code as vectorContext member of the
 * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
 * render events emitted by layers and maps.
 */ class $213b0117674a3f96$var$CanvasImmediateRenderer extends (0, $f58af45c89f48916$export$2e2bcd8739ae039) {
    /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.
   * @param {import("../../proj.js").TransformFunction} [userTransform] Transform from user to view projection.
   */ constructor(context, pixelRatio, extent, transform, viewRotation, squaredTolerance, userTransform){
        super();
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.context_ = context;
        /**
     * @private
     * @type {number}
     */ this.pixelRatio_ = pixelRatio;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.extent_ = extent;
        /**
     * @private
     * @type {import("../../transform.js").Transform}
     */ this.transform_ = transform;
        /**
     * @private
     * @type {number}
     */ this.transformRotation_ = transform ? (0, $57ec69d152197e1d$export$a81f732198733497)(Math.atan2(transform[1], transform[0]), 10) : 0;
        /**
     * @private
     * @type {number}
     */ this.viewRotation_ = viewRotation;
        /**
     * @private
     * @type {number}
     */ this.squaredTolerance_ = squaredTolerance;
        /**
     * @private
     * @type {import("../../proj.js").TransformFunction}
     */ this.userTransform_ = userTransform;
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.contextFillState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.contextStrokeState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").TextState}
     */ this.contextTextState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.fillState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.strokeState_ = null;
        /**
     * @private
     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
     */ this.image_ = null;
        /**
     * @private
     * @type {number}
     */ this.imageAnchorX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageAnchorY_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageHeight_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageOpacity_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageOriginX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.imageOriginY_ = 0;
        /**
     * @private
     * @type {boolean}
     */ this.imageRotateWithView_ = false;
        /**
     * @private
     * @type {number}
     */ this.imageRotation_ = 0;
        /**
     * @private
     * @type {import("../../size.js").Size}
     */ this.imageScale_ = [
            0,
            0
        ];
        /**
     * @private
     * @type {number}
     */ this.imageWidth_ = 0;
        /**
     * @private
     * @type {string}
     */ this.text_ = "";
        /**
     * @private
     * @type {number}
     */ this.textOffsetX_ = 0;
        /**
     * @private
     * @type {number}
     */ this.textOffsetY_ = 0;
        /**
     * @private
     * @type {boolean}
     */ this.textRotateWithView_ = false;
        /**
     * @private
     * @type {number}
     */ this.textRotation_ = 0;
        /**
     * @private
     * @type {import("../../size.js").Size}
     */ this.textScale_ = [
            0,
            0
        ];
        /**
     * @private
     * @type {?import("../canvas.js").FillState}
     */ this.textFillState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").StrokeState}
     */ this.textStrokeState_ = null;
        /**
     * @private
     * @type {?import("../canvas.js").TextState}
     */ this.textState_ = null;
        /**
     * @private
     * @type {Array<number>}
     */ this.pixelCoordinates_ = [];
        /**
     * @private
     * @type {import("../../transform.js").Transform}
     */ this.tmpLocalTransform_ = (0, $d59a735b25ae191a$export$185802fd694ee1f5)();
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   */ drawImages_(flatCoordinates, offset, end, stride) {
        if (!this.image_) return;
        const pixelCoordinates = (0, $9a4105a6a338adf4$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        const context = this.context_;
        const localTransform = this.tmpLocalTransform_;
        const alpha = context.globalAlpha;
        if (this.imageOpacity_ != 1) context.globalAlpha = alpha * this.imageOpacity_;
        let rotation = this.imageRotation_;
        if (this.transformRotation_ === 0) rotation -= this.viewRotation_;
        if (this.imageRotateWithView_) rotation += this.viewRotation_;
        for(let i = 0, ii = pixelCoordinates.length; i < ii; i += 2){
            const x = pixelCoordinates[i] - this.imageAnchorX_;
            const y = pixelCoordinates[i + 1] - this.imageAnchorY_;
            if (rotation !== 0 || this.imageScale_[0] != 1 || this.imageScale_[1] != 1) {
                const centerX = x + this.imageAnchorX_;
                const centerY = y + this.imageAnchorY_;
                (0, $d59a735b25ae191a$export$f672e0b6f7222cd7)(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
                context.setTransform.apply(context, localTransform);
                context.translate(centerX, centerY);
                context.scale(this.imageScale_[0], this.imageScale_[1]);
                context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);
                context.setTransform(1, 0, 0, 1, 0, 0);
            } else context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);
        }
        if (this.imageOpacity_ != 1) context.globalAlpha = alpha;
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @private
   */ drawText_(flatCoordinates, offset, end, stride) {
        if (!this.textState_ || this.text_ === "") return;
        if (this.textFillState_) this.setContextFillState_(this.textFillState_);
        if (this.textStrokeState_) this.setContextStrokeState_(this.textStrokeState_);
        this.setContextTextState_(this.textState_);
        const pixelCoordinates = (0, $9a4105a6a338adf4$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        const context = this.context_;
        let rotation = this.textRotation_;
        if (this.transformRotation_ === 0) rotation -= this.viewRotation_;
        if (this.textRotateWithView_) rotation += this.viewRotation_;
        for(; offset < end; offset += stride){
            const x = pixelCoordinates[offset] + this.textOffsetX_;
            const y = pixelCoordinates[offset + 1] + this.textOffsetY_;
            if (rotation !== 0 || this.textScale_[0] != 1 || this.textScale_[1] != 1) {
                context.translate(x - this.textOffsetX_, y - this.textOffsetY_);
                context.rotate(rotation);
                context.translate(this.textOffsetX_, this.textOffsetY_);
                context.scale(this.textScale_[0], this.textScale_[1]);
                if (this.textStrokeState_) context.strokeText(this.text_, 0, 0);
                if (this.textFillState_) context.fillText(this.text_, 0, 0);
                context.setTransform(1, 0, 0, 1, 0, 0);
            } else {
                if (this.textStrokeState_) context.strokeText(this.text_, x, y);
                if (this.textFillState_) context.fillText(this.text_, x, y);
            }
        }
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {boolean} close Close.
   * @private
   * @return {number} end End.
   */ moveToLineTo_(flatCoordinates, offset, end, stride, close) {
        const context = this.context_;
        const pixelCoordinates = (0, $9a4105a6a338adf4$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
        let length = pixelCoordinates.length;
        if (close) length -= 2;
        for(let i = 2; i < length; i += 2)context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
        if (close) context.closePath();
        return end;
    }
    /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @private
   * @return {number} End.
   */ drawRings_(flatCoordinates, offset, ends, stride) {
        for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
        return offset;
    }
    /**
   * Render a circle geometry into the canvas.  Rendering is immediate and uses
   * the current fill and stroke styles.
   *
   * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
   * @api
   */ drawCircle(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/Circle.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;
        if (this.fillState_ || this.strokeState_) {
            if (this.fillState_) this.setContextFillState_(this.fillState_);
            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);
            const pixelCoordinates = (0, $ecdcc798f2987118$export$a3767472617c7861)(geometry, this.transform_, this.pixelCoordinates_);
            const dx = pixelCoordinates[2] - pixelCoordinates[0];
            const dy = pixelCoordinates[3] - pixelCoordinates[1];
            const radius = Math.sqrt(dx * dx + dy * dy);
            const context = this.context_;
            context.beginPath();
            context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
            if (this.fillState_) context.fill();
            if (this.strokeState_) context.stroke();
        }
        if (this.text_ !== "") this.drawText_(geometry.getCenter(), 0, 2, 2);
    }
    /**
   * Set the rendering style.  Note that since this is an immediate rendering API,
   * any `zIndex` on the provided style will be ignored.
   *
   * @param {import("../../style/Style.js").default} style The rendering style.
   * @api
   */ setStyle(style) {
        this.setFillStrokeStyle(style.getFill(), style.getStroke());
        this.setImageStyle(style.getImage());
        this.setTextStyle(style.getText());
    }
    /**
   * @param {import("../../transform.js").Transform} transform Transform.
   */ setTransform(transform) {
        this.transform_ = transform;
    }
    /**
   * Render a geometry into the canvas.  Call
   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.
   *
   * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
   * @api
   */ drawGeometry(geometry) {
        const type = geometry.getType();
        switch(type){
            case "Point":
                this.drawPoint(/** @type {import("../../geom/Point.js").default} */ geometry);
                break;
            case "LineString":
                this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ geometry);
                break;
            case "Polygon":
                this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ geometry);
                break;
            case "MultiPoint":
                this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ geometry);
                break;
            case "MultiLineString":
                this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ geometry);
                break;
            case "MultiPolygon":
                this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ geometry);
                break;
            case "GeometryCollection":
                this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ geometry);
                break;
            case "Circle":
                this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ geometry);
                break;
            default:
        }
    }
    /**
   * Render a feature into the canvas.  Note that any `zIndex` on the provided
   * style will be ignored - features are rendered immediately in the order that
   * this method is called.  If you need `zIndex` support, you should be using an
   * {@link module:ol/layer/Vector~VectorLayer} instead.
   *
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {import("../../style/Style.js").default} style Style.
   * @api
   */ drawFeature(feature, style) {
        const geometry = style.getGeometryFunction()(feature);
        if (!geometry) return;
        this.setStyle(style);
        this.drawGeometry(geometry);
    }
    /**
   * Render a GeometryCollection to the canvas.  Rendering is immediate and
   * uses the current styles appropriate for each geometry in the collection.
   *
   * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
   */ drawGeometryCollection(geometry) {
        const geometries = geometry.getGeometriesArray();
        for(let i = 0, ii = geometries.length; i < ii; ++i)this.drawGeometry(geometries[i]);
    }
    /**
   * Render a Point geometry into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
   */ drawPoint(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/Point.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        const flatCoordinates = geometry.getFlatCoordinates();
        const stride = geometry.getStride();
        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
        if (this.text_ !== "") this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
    }
    /**
   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
   * uses the current style.
   *
   * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
   */ drawMultiPoint(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/MultiPoint.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        const flatCoordinates = geometry.getFlatCoordinates();
        const stride = geometry.getStride();
        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
        if (this.text_ !== "") this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
    }
    /**
   * Render a LineString into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
   */ drawLineString(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/LineString.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;
        if (this.strokeState_) {
            this.setContextStrokeState_(this.strokeState_);
            const context = this.context_;
            const flatCoordinates = geometry.getFlatCoordinates();
            context.beginPath();
            this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);
            context.stroke();
        }
        if (this.text_ !== "") {
            const flatMidpoint = geometry.getFlatMidpoint();
            this.drawText_(flatMidpoint, 0, 2, 2);
        }
    }
    /**
   * Render a MultiLineString geometry into the canvas.  Rendering is immediate
   * and uses the current style.
   *
   * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
   */ drawMultiLineString(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        const geometryExtent = geometry.getExtent();
        if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(this.extent_, geometryExtent)) return;
        if (this.strokeState_) {
            this.setContextStrokeState_(this.strokeState_);
            const context = this.context_;
            const flatCoordinates = geometry.getFlatCoordinates();
            let offset = 0;
            const ends = /** @type {Array<number>} */ geometry.getEnds();
            const stride = geometry.getStride();
            context.beginPath();
            for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
            context.stroke();
        }
        if (this.text_ !== "") {
            const flatMidpoints = geometry.getFlatMidpoints();
            this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
        }
    }
    /**
   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
   * the current style.
   *
   * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
   */ drawPolygon(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/Polygon.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;
        if (this.strokeState_ || this.fillState_) {
            if (this.fillState_) this.setContextFillState_(this.fillState_);
            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);
            const context = this.context_;
            context.beginPath();
            this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, /** @type {Array<number>} */ geometry.getEnds(), geometry.getStride());
            if (this.fillState_) context.fill();
            if (this.strokeState_) context.stroke();
        }
        if (this.text_ !== "") {
            const flatInteriorPoint = geometry.getFlatInteriorPoint();
            this.drawText_(flatInteriorPoint, 0, 2, 2);
        }
    }
    /**
   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
   * uses the current style.
   * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
   */ drawMultiPolygon(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        if (!(0, $84be800ca44e672c$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;
        if (this.strokeState_ || this.fillState_) {
            if (this.fillState_) this.setContextFillState_(this.fillState_);
            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);
            const context = this.context_;
            const flatCoordinates = geometry.getOrientedFlatCoordinates();
            let offset = 0;
            const endss = geometry.getEndss();
            const stride = geometry.getStride();
            context.beginPath();
            for(let i = 0, ii = endss.length; i < ii; ++i){
                const ends = endss[i];
                offset = this.drawRings_(flatCoordinates, offset, ends, stride);
            }
            if (this.fillState_) context.fill();
            if (this.strokeState_) context.stroke();
        }
        if (this.text_ !== "") {
            const flatInteriorPoints = geometry.getFlatInteriorPoints();
            this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
        }
    }
    /**
   * @param {import("../canvas.js").FillState} fillState Fill state.
   * @private
   */ setContextFillState_(fillState) {
        const context = this.context_;
        const contextFillState = this.contextFillState_;
        if (!contextFillState) {
            context.fillStyle = fillState.fillStyle;
            this.contextFillState_ = {
                fillStyle: fillState.fillStyle
            };
        } else if (contextFillState.fillStyle != fillState.fillStyle) {
            contextFillState.fillStyle = fillState.fillStyle;
            context.fillStyle = fillState.fillStyle;
        }
    }
    /**
   * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
   * @private
   */ setContextStrokeState_(strokeState) {
        const context = this.context_;
        const contextStrokeState = this.contextStrokeState_;
        if (!contextStrokeState) {
            context.lineCap = strokeState.lineCap;
            context.setLineDash(strokeState.lineDash);
            context.lineDashOffset = strokeState.lineDashOffset;
            context.lineJoin = strokeState.lineJoin;
            context.lineWidth = strokeState.lineWidth;
            context.miterLimit = strokeState.miterLimit;
            context.strokeStyle = strokeState.strokeStyle;
            this.contextStrokeState_ = {
                lineCap: strokeState.lineCap,
                lineDash: strokeState.lineDash,
                lineDashOffset: strokeState.lineDashOffset,
                lineJoin: strokeState.lineJoin,
                lineWidth: strokeState.lineWidth,
                miterLimit: strokeState.miterLimit,
                strokeStyle: strokeState.strokeStyle
            };
        } else {
            if (contextStrokeState.lineCap != strokeState.lineCap) {
                contextStrokeState.lineCap = strokeState.lineCap;
                context.lineCap = strokeState.lineCap;
            }
            if (!(0, $69c1cc8ae30f997f$export$e9bab7fafb253603)(contextStrokeState.lineDash, strokeState.lineDash)) context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
            if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
                contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
                context.lineDashOffset = strokeState.lineDashOffset;
            }
            if (contextStrokeState.lineJoin != strokeState.lineJoin) {
                contextStrokeState.lineJoin = strokeState.lineJoin;
                context.lineJoin = strokeState.lineJoin;
            }
            if (contextStrokeState.lineWidth != strokeState.lineWidth) {
                contextStrokeState.lineWidth = strokeState.lineWidth;
                context.lineWidth = strokeState.lineWidth;
            }
            if (contextStrokeState.miterLimit != strokeState.miterLimit) {
                contextStrokeState.miterLimit = strokeState.miterLimit;
                context.miterLimit = strokeState.miterLimit;
            }
            if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
                contextStrokeState.strokeStyle = strokeState.strokeStyle;
                context.strokeStyle = strokeState.strokeStyle;
            }
        }
    }
    /**
   * @param {import("../canvas.js").TextState} textState Text state.
   * @private
   */ setContextTextState_(textState) {
        const context = this.context_;
        const contextTextState = this.contextTextState_;
        const textAlign = textState.textAlign ? textState.textAlign : (0, $ba06fcc662408736$export$94d53b95641b5766);
        if (!contextTextState) {
            context.font = textState.font;
            context.textAlign = textAlign;
            context.textBaseline = textState.textBaseline;
            this.contextTextState_ = {
                font: textState.font,
                textAlign: textAlign,
                textBaseline: textState.textBaseline
            };
        } else {
            if (contextTextState.font != textState.font) {
                contextTextState.font = textState.font;
                context.font = textState.font;
            }
            if (contextTextState.textAlign != textAlign) {
                contextTextState.textAlign = textAlign;
                context.textAlign = textAlign;
            }
            if (contextTextState.textBaseline != textState.textBaseline) {
                contextTextState.textBaseline = textState.textBaseline;
                context.textBaseline = textState.textBaseline;
            }
        }
    }
    /**
   * Set the fill and stroke style for subsequent draw operations.  To clear
   * either fill or stroke styles, pass null for the appropriate parameter.
   *
   * @param {import("../../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
   */ setFillStrokeStyle(fillStyle, strokeStyle) {
        if (!fillStyle) this.fillState_ = null;
        else {
            const fillStyleColor = fillStyle.getColor();
            this.fillState_ = {
                fillStyle: (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(fillStyleColor ? fillStyleColor : (0, $ba06fcc662408736$export$c495d52ee3fd74b2))
            };
        }
        if (!strokeStyle) this.strokeState_ = null;
        else {
            const strokeStyleColor = strokeStyle.getColor();
            const strokeStyleLineCap = strokeStyle.getLineCap();
            const strokeStyleLineDash = strokeStyle.getLineDash();
            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
            const strokeStyleLineJoin = strokeStyle.getLineJoin();
            const strokeStyleWidth = strokeStyle.getWidth();
            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
            const lineDash = strokeStyleLineDash ? strokeStyleLineDash : (0, $ba06fcc662408736$export$e21b4112fdc612fc);
            this.strokeState_ = {
                lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, $ba06fcc662408736$export$17bd0c38d6ae694e),
                lineDash: this.pixelRatio_ === 1 ? lineDash : lineDash.map((n)=>n * this.pixelRatio_),
                lineDashOffset: (strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, $ba06fcc662408736$export$e06efc2409049f76)) * this.pixelRatio_,
                lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, $ba06fcc662408736$export$365eb9648cf19bd0),
                lineWidth: (strokeStyleWidth !== undefined ? strokeStyleWidth : (0, $ba06fcc662408736$export$79661f132c62010e)) * this.pixelRatio_,
                miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, $ba06fcc662408736$export$80c1c01844597b7b),
                strokeStyle: (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(strokeStyleColor ? strokeStyleColor : (0, $ba06fcc662408736$export$1eb2eaecacf2031e))
            };
        }
    }
    /**
   * Set the image style for subsequent draw operations.  Pass null to remove
   * the image style.
   *
   * @param {import("../../style/Image.js").default} imageStyle Image style.
   */ setImageStyle(imageStyle) {
        let imageSize;
        if (!imageStyle || !(imageSize = imageStyle.getSize())) {
            this.image_ = null;
            return;
        }
        const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);
        const imageAnchor = imageStyle.getAnchor();
        const imageOrigin = imageStyle.getOrigin();
        this.image_ = imageStyle.getImage(this.pixelRatio_);
        this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;
        this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;
        this.imageHeight_ = imageSize[1] * imagePixelRatio;
        this.imageOpacity_ = imageStyle.getOpacity();
        this.imageOriginX_ = imageOrigin[0];
        this.imageOriginY_ = imageOrigin[1];
        this.imageRotateWithView_ = imageStyle.getRotateWithView();
        this.imageRotation_ = imageStyle.getRotation();
        const imageScale = imageStyle.getScaleArray();
        this.imageScale_ = [
            imageScale[0] * this.pixelRatio_ / imagePixelRatio,
            imageScale[1] * this.pixelRatio_ / imagePixelRatio
        ];
        this.imageWidth_ = imageSize[0] * imagePixelRatio;
    }
    /**
   * Set the text style for subsequent draw operations.  Pass null to
   * remove the text style.
   *
   * @param {import("../../style/Text.js").default} textStyle Text style.
   */ setTextStyle(textStyle) {
        if (!textStyle) this.text_ = "";
        else {
            const textFillStyle = textStyle.getFill();
            if (!textFillStyle) this.textFillState_ = null;
            else {
                const textFillStyleColor = textFillStyle.getColor();
                this.textFillState_ = {
                    fillStyle: (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(textFillStyleColor ? textFillStyleColor : (0, $ba06fcc662408736$export$c495d52ee3fd74b2))
                };
            }
            const textStrokeStyle = textStyle.getStroke();
            if (!textStrokeStyle) this.textStrokeState_ = null;
            else {
                const textStrokeStyleColor = textStrokeStyle.getColor();
                const textStrokeStyleLineCap = textStrokeStyle.getLineCap();
                const textStrokeStyleLineDash = textStrokeStyle.getLineDash();
                const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
                const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
                const textStrokeStyleWidth = textStrokeStyle.getWidth();
                const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
                this.textStrokeState_ = {
                    lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : (0, $ba06fcc662408736$export$17bd0c38d6ae694e),
                    lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : (0, $ba06fcc662408736$export$e21b4112fdc612fc),
                    lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : (0, $ba06fcc662408736$export$e06efc2409049f76),
                    lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : (0, $ba06fcc662408736$export$365eb9648cf19bd0),
                    lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : (0, $ba06fcc662408736$export$79661f132c62010e),
                    miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : (0, $ba06fcc662408736$export$80c1c01844597b7b),
                    strokeStyle: (0, $172307d3521121a6$export$dc5b1400ac3a10a8)(textStrokeStyleColor ? textStrokeStyleColor : (0, $ba06fcc662408736$export$1eb2eaecacf2031e))
                };
            }
            const textFont = textStyle.getFont();
            const textOffsetX = textStyle.getOffsetX();
            const textOffsetY = textStyle.getOffsetY();
            const textRotateWithView = textStyle.getRotateWithView();
            const textRotation = textStyle.getRotation();
            const textScale = textStyle.getScaleArray();
            const textText = textStyle.getText();
            const textTextAlign = textStyle.getTextAlign();
            const textTextBaseline = textStyle.getTextBaseline();
            this.textState_ = {
                font: textFont !== undefined ? textFont : (0, $ba06fcc662408736$export$3847dfea4f8d4dfa),
                textAlign: textTextAlign !== undefined ? textTextAlign : (0, $ba06fcc662408736$export$94d53b95641b5766),
                textBaseline: textTextBaseline !== undefined ? textTextBaseline : (0, $ba06fcc662408736$export$cf2279a1bff62eb)
            };
            this.text_ = textText !== undefined ? Array.isArray(textText) ? textText.reduce((acc, t, i)=>acc += i % 2 ? " " : t, "") : textText : "";
            this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;
            this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;
            this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
            this.textRotation_ = textRotation !== undefined ? textRotation : 0;
            this.textScale_ = [
                this.pixelRatio_ * textScale[0],
                this.pixelRatio_ * textScale[1]
            ];
        }
    }
}
var $213b0117674a3f96$export$2e2bcd8739ae039 = $213b0117674a3f96$var$CanvasImmediateRenderer;







const $027b7b106c5e63cc$export$ab51038298418f25 = 0.5;
function $027b7b106c5e63cc$export$bd05e394339d469(size, transforms, features, styleFunction, extent, resolution, rotation) {
    const width = size[0] * $027b7b106c5e63cc$export$ab51038298418f25;
    const height = size[1] * $027b7b106c5e63cc$export$ab51038298418f25;
    const context = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(width, height);
    context.imageSmoothingEnabled = false;
    const canvas = context.canvas;
    const renderer = new (0, $213b0117674a3f96$export$2e2bcd8739ae039)(context, $027b7b106c5e63cc$export$ab51038298418f25, extent, null, rotation);
    const featureCount = features.length;
    // Stretch hit detection index to use the whole available color range
    const indexFactor = Math.floor(16777215 / featureCount);
    const featuresByZIndex = {};
    for(let i = 1; i <= featureCount; ++i){
        const feature = features[i - 1];
        const featureStyleFunction = feature.getStyleFunction() || styleFunction;
        if (!featureStyleFunction) continue;
        let styles = featureStyleFunction(feature, resolution);
        if (!styles) continue;
        if (!Array.isArray(styles)) styles = [
            styles
        ];
        const index = i * indexFactor;
        const color = index.toString(16).padStart(7, "#00000");
        for(let j = 0, jj = styles.length; j < jj; ++j){
            const originalStyle = styles[j];
            const geometry = originalStyle.getGeometryFunction()(feature);
            if (!geometry || !(0, $84be800ca44e672c$export$7b0a31e10bbff018)(extent, geometry.getExtent())) continue;
            const style = originalStyle.clone();
            const fill = style.getFill();
            if (fill) fill.setColor(color);
            const stroke = style.getStroke();
            if (stroke) {
                stroke.setColor(color);
                stroke.setLineDash(null);
            }
            style.setText(undefined);
            const image = originalStyle.getImage();
            if (image) {
                const imgSize = image.getImageSize();
                if (!imgSize) continue;
                const imgContext = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(imgSize[0], imgSize[1], undefined, {
                    alpha: false
                });
                const img = imgContext.canvas;
                imgContext.fillStyle = color;
                imgContext.fillRect(0, 0, img.width, img.height);
                style.setImage(new (0, $4dd3b6f7e2acb5b2$export$2e2bcd8739ae039)({
                    img: img,
                    imgSize: imgSize,
                    anchor: image.getAnchor(),
                    anchorXUnits: "pixels",
                    anchorYUnits: "pixels",
                    offset: image.getOrigin(),
                    opacity: 1,
                    size: image.getSize(),
                    scale: image.getScale(),
                    rotation: image.getRotation(),
                    rotateWithView: image.getRotateWithView()
                }));
            }
            const zIndex = style.getZIndex() || 0;
            let byGeometryType = featuresByZIndex[zIndex];
            if (!byGeometryType) {
                byGeometryType = {};
                featuresByZIndex[zIndex] = byGeometryType;
                byGeometryType["Polygon"] = [];
                byGeometryType["Circle"] = [];
                byGeometryType["LineString"] = [];
                byGeometryType["Point"] = [];
            }
            const type = geometry.getType();
            if (type === "GeometryCollection") {
                const geometries = /** @type {import("../../geom/GeometryCollection.js").default} */ geometry.getGeometriesArrayRecursive();
                for(let i = 0, ii = geometries.length; i < ii; ++i){
                    const geometry = geometries[i];
                    byGeometryType[geometry.getType().replace("Multi", "")].push(geometry, style);
                }
            } else byGeometryType[type.replace("Multi", "")].push(geometry, style);
        }
    }
    const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort((0, $69c1cc8ae30f997f$export$fcb633242ef15540));
    for(let i = 0, ii = zIndexKeys.length; i < ii; ++i){
        const byGeometryType = featuresByZIndex[zIndexKeys[i]];
        for(const type in byGeometryType){
            const geomAndStyle = byGeometryType[type];
            for(let j = 0, jj = geomAndStyle.length; j < jj; j += 2){
                renderer.setStyle(geomAndStyle[j + 1]);
                for(let k = 0, kk = transforms.length; k < kk; ++k){
                    renderer.setTransform(transforms[k]);
                    renderer.drawGeometry(geomAndStyle[j]);
                }
            }
        }
    }
    return context.getImageData(0, 0, canvas.width, canvas.height);
}
function $027b7b106c5e63cc$export$6d4d555ddbfffa32(pixel, features, imageData) {
    const resultFeatures = [];
    if (imageData) {
        const x = Math.floor(Math.round(pixel[0]) * $027b7b106c5e63cc$export$ab51038298418f25);
        const y = Math.floor(Math.round(pixel[1]) * $027b7b106c5e63cc$export$ab51038298418f25);
        // The pixel coordinate is clamped down to the hit-detect canvas' size to account
        // for browsers returning coordinates slightly larger than the actual canvas size
        // due to a non-integer pixel ratio.
        const index = ((0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(x, 0, imageData.width - 1) + (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(y, 0, imageData.height - 1) * imageData.width) * 4;
        const r = imageData.data[index];
        const g = imageData.data[index + 1];
        const b = imageData.data[index + 2];
        const i = b + 256 * (g + 256 * r);
        const indexFactor = Math.floor(16777215 / features.length);
        if (i && i % indexFactor === 0) resultFeatures.push(features[i / indexFactor - 1]);
    }
    // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same
    return resultFeatures;
}





/**
 * @module ol/renderer/vector
 */ 

/**
 * Feature callback. The callback will be called with three arguments. The first
 * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}
 * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
 * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features
 * with a GeometryCollection geometry, it will be the first detected geometry from the collection.
 * @template T
 * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>, import("../geom/SimpleGeometry.js").default): T} FeatureCallback
 */ /**
 * Tolerance for geometry simplification in device pixels.
 * @type {number}
 */ const $0441c6c4e8d0ef48$var$SIMPLIFY_TOLERANCE = 0.5;
/**
 * @const
 * @type {Object<import("../geom/Geometry.js").Type,
 *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
 *                         import("../style/Style.js").default, Object): void>}
 */ const $0441c6c4e8d0ef48$var$GEOMETRY_RENDERERS = {
    "Point": $0441c6c4e8d0ef48$var$renderPointGeometry,
    "LineString": $0441c6c4e8d0ef48$var$renderLineStringGeometry,
    "Polygon": $0441c6c4e8d0ef48$var$renderPolygonGeometry,
    "MultiPoint": $0441c6c4e8d0ef48$var$renderMultiPointGeometry,
    "MultiLineString": $0441c6c4e8d0ef48$var$renderMultiLineStringGeometry,
    "MultiPolygon": $0441c6c4e8d0ef48$var$renderMultiPolygonGeometry,
    "GeometryCollection": $0441c6c4e8d0ef48$var$renderGeometryCollectionGeometry,
    "Circle": $0441c6c4e8d0ef48$var$renderCircleGeometry
};
function $0441c6c4e8d0ef48$export$531ddd8416d52dfc(feature1, feature2) {
    return parseInt((0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature1), 10) - parseInt((0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature2), 10);
}
function $0441c6c4e8d0ef48$export$75084a70d324c1e6(resolution, pixelRatio) {
    const tolerance = $0441c6c4e8d0ef48$export$bdacc5b475012edb(resolution, pixelRatio);
    return tolerance * tolerance;
}
function $0441c6c4e8d0ef48$export$bdacc5b475012edb(resolution, pixelRatio) {
    return $0441c6c4e8d0ef48$var$SIMPLIFY_TOLERANCE * resolution / pixelRatio;
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
 * @param {import("../geom/Circle.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderCircleGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
        const circleReplay = builderGroup.getBuilder(style.getZIndex(), "Circle");
        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        circleReplay.drawCircle(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), "Text");
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
function $0441c6c4e8d0ef48$export$36f470a33a42f413(replayGroup, feature, style, squaredTolerance, listener, transform, declutterBuilderGroup) {
    let loading = false;
    const imageStyle = style.getImage();
    if (imageStyle) {
        const imageState = imageStyle.getImageState();
        if (imageState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED || imageState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR) imageStyle.unlistenImageChange(listener);
        else {
            if (imageState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE) imageStyle.load();
            imageStyle.listenImageChange(listener);
            loading = true;
        }
    }
    $0441c6c4e8d0ef48$var$renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutterBuilderGroup);
    return loading;
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../style/Style.js").default} style Style.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutterBuilderGroup) {
    const geometry = style.getGeometryFunction()(feature);
    if (!geometry) return;
    const simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, transform);
    const renderer = style.getRenderer();
    if (renderer) $0441c6c4e8d0ef48$var$renderGeometry(replayGroup, simplifiedGeometry, style, feature);
    else {
        const geometryRenderer = $0441c6c4e8d0ef48$var$GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, declutterBuilderGroup);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 */ function $0441c6c4e8d0ef48$var$renderGeometry(replayGroup, geometry, style, feature) {
    if (geometry.getType() == "GeometryCollection") {
        const geometries = /** @type {import("../geom/GeometryCollection.js").default} */ geometry.getGeometries();
        for(let i = 0, ii = geometries.length; i < ii; ++i)$0441c6c4e8d0ef48$var$renderGeometry(replayGroup, geometries[i], style, feature);
        return;
    }
    const replay = replayGroup.getBuilder(style.getZIndex(), "Default");
    replay.drawCustom(/** @type {import("../geom/SimpleGeometry.js").default} */ geometry, feature, style.getRenderer(), style.getHitDetectionRenderer());
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, declutterBuilderGroup) {
    const geometries = geometry.getGeometriesArray();
    let i, ii;
    for(i = 0, ii = geometries.length; i < ii; ++i){
        const geometryRenderer = $0441c6c4e8d0ef48$var$GEOMETRY_RENDERERS[geometries[i].getType()];
        geometryRenderer(replayGroup, geometries[i], style, feature, declutterBuilderGroup);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderLineStringGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), "LineString");
        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
        lineStringReplay.drawLineString(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), "Text");
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderMultiLineStringGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), "LineString");
        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
        lineStringReplay.drawMultiLineString(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), "Text");
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderMultiPolygonGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), "Polygon");
        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        polygonReplay.drawMultiPolygon(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), "Text");
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderPointGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {
    const imageStyle = style.getImage();
    const textStyle = style.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */ let declutterImageWithText;
    if (imageStyle) {
        if (imageStyle.getImageState() != (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) return;
        let imageBuilderGroup = builderGroup;
        if (declutterBuilderGroup) {
            const declutterMode = imageStyle.getDeclutterMode();
            if (declutterMode !== "none") {
                imageBuilderGroup = declutterBuilderGroup;
                if (declutterMode === "obstacle") {
                    // draw in non-declutter group:
                    const imageReplay = builderGroup.getBuilder(style.getZIndex(), "Image");
                    imageReplay.setImageStyle(imageStyle, declutterImageWithText);
                    imageReplay.drawPoint(geometry, feature);
                } else if (textStyle && textStyle.getText()) declutterImageWithText = {};
            }
        }
        const imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), "Image");
        imageReplay.setImageStyle(imageStyle, declutterImageWithText);
        imageReplay.drawPoint(geometry, feature);
    }
    if (textStyle && textStyle.getText()) {
        let textBuilderGroup = builderGroup;
        if (declutterBuilderGroup) textBuilderGroup = declutterBuilderGroup;
        const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), "Text");
        textReplay.setTextStyle(textStyle, declutterImageWithText);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderMultiPointGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {
    const imageStyle = style.getImage();
    const textStyle = style.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */ let declutterImageWithText;
    if (imageStyle) {
        if (imageStyle.getImageState() != (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) return;
        let imageBuilderGroup = builderGroup;
        if (declutterBuilderGroup) {
            const declutterMode = imageStyle.getDeclutterMode();
            if (declutterMode !== "none") {
                imageBuilderGroup = declutterBuilderGroup;
                if (declutterMode === "obstacle") {
                    // draw in non-declutter group:
                    const imageReplay = builderGroup.getBuilder(style.getZIndex(), "Image");
                    imageReplay.setImageStyle(imageStyle, declutterImageWithText);
                    imageReplay.drawMultiPoint(geometry, feature);
                } else if (textStyle && textStyle.getText()) declutterImageWithText = {};
            }
        }
        const imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), "Image");
        imageReplay.setImageStyle(imageStyle, declutterImageWithText);
        imageReplay.drawMultiPoint(geometry, feature);
    }
    if (textStyle && textStyle.getText()) {
        let textBuilderGroup = builderGroup;
        if (declutterBuilderGroup) textBuilderGroup = declutterBuilderGroup;
        const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), "Text");
        textReplay.setTextStyle(textStyle, declutterImageWithText);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
 */ function $0441c6c4e8d0ef48$var$renderPolygonGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), "Polygon");
        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        polygonReplay.drawPolygon(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), "Text");
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}






/**
 * @classdesc
 * Canvas renderer for vector layers.
 * @api
 */ class $75d0d33f029e4c07$var$CanvasVectorLayerRenderer extends (0, $df04b1ef9f892809$export$2e2bcd8739ae039) {
    /**
   * @param {import("../../layer/BaseVector.js").default} vectorLayer Vector layer.
   */ constructor(vectorLayer){
        super(vectorLayer);
        /** @private */ this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);
        /**
     * @type {boolean}
     */ this.animatingOrInteracting_;
        /**
     * @type {ImageData|null}
     */ this.hitDetectionImageData_ = null;
        /**
     * @type {Array<import("../../Feature.js").default>}
     */ this.renderedFeatures_ = null;
        /**
     * @private
     * @type {number}
     */ this.renderedRevision_ = -1;
        /**
     * @private
     * @type {number}
     */ this.renderedResolution_ = NaN;
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.renderedExtent_ = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
        /**
     * @private
     * @type {import("../../extent.js").Extent}
     */ this.wrappedRenderedExtent_ = (0, $84be800ca44e672c$export$fe201bb3bbe031e9)();
        /**
     * @private
     * @type {number}
     */ this.renderedRotation_;
        /**
     * @private
     * @type {import("../../coordinate").Coordinate}
     */ this.renderedCenter_ = null;
        /**
     * @private
     * @type {import("../../proj/Projection").default}
     */ this.renderedProjection_ = null;
        /**
     * @private
     * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
     */ this.renderedRenderOrder_ = null;
        /**
     * @private
     * @type {import("../../render/canvas/ExecutorGroup").default}
     */ this.replayGroup_ = null;
        /**
     * A new replay group had to be created by `prepareFrame()`
     * @type {boolean}
     */ this.replayGroupChanged = true;
        /**
     * @type {import("../../render/canvas/ExecutorGroup").default}
     */ this.declutterExecutorGroup = null;
        /**
     * Clipping to be performed by `renderFrame()`
     * @type {boolean}
     */ this.clipping = true;
        /**
     * @private
     * @type {CanvasRenderingContext2D}
     */ this.compositionContext_ = null;
        /**
     * @private
     * @type {number}
     */ this.opacity_ = 1;
    }
    /**
   * @param {ExecutorGroup} executorGroup Executor group.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("rbush").default} [declutterTree] Declutter tree.
   */ renderWorlds(executorGroup, frameState, declutterTree) {
        const extent = frameState.extent;
        const viewState = frameState.viewState;
        const center = viewState.center;
        const resolution = viewState.resolution;
        const projection = viewState.projection;
        const rotation = viewState.rotation;
        const projectionExtent = projection.getExtent();
        const vectorSource = this.getLayer().getSource();
        const pixelRatio = frameState.pixelRatio;
        const viewHints = frameState.viewHints;
        const snapToPixel = !(viewHints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING] || viewHints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING]);
        const context = this.compositionContext_;
        const width = Math.round(frameState.size[0] * pixelRatio);
        const height = Math.round(frameState.size[1] * pixelRatio);
        const multiWorld = vectorSource.getWrapX() && projection.canWrapX();
        const worldWidth = multiWorld ? (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projectionExtent) : null;
        const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;
        let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;
        do {
            const transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);
            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterTree);
        }while (++world < endWorld);
    }
    setupCompositionContext_() {
        if (this.opacity_ !== 1) {
            const compositionContext = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(this.context.canvas.width, this.context.canvas.height, (0, $df04b1ef9f892809$export$a166f0857c555517));
            this.compositionContext_ = compositionContext;
        } else this.compositionContext_ = this.context;
    }
    releaseCompositionContext_() {
        if (this.opacity_ !== 1) {
            const alpha = this.context.globalAlpha;
            this.context.globalAlpha = this.opacity_;
            this.context.drawImage(this.compositionContext_.canvas, 0, 0);
            this.context.globalAlpha = alpha;
            (0, $1d92219e1eaa7bd2$export$e918ac6a1026a12a)(this.compositionContext_);
            (0, $df04b1ef9f892809$export$a166f0857c555517).push(this.compositionContext_.canvas);
            this.compositionContext_ = null;
        }
    }
    /**
   * Render declutter items for this layer
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   */ renderDeclutter(frameState) {
        if (this.declutterExecutorGroup) {
            this.setupCompositionContext_();
            this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);
            this.releaseCompositionContext_();
        }
    }
    /**
   * Render the layer.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {HTMLElement|null} target Target that may be used to render content to.
   * @return {HTMLElement|null} The rendered element.
   */ renderFrame(frameState, target) {
        const pixelRatio = frameState.pixelRatio;
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        // set forward and inverse pixel transforms
        (0, $d59a735b25ae191a$export$3e4e33ea14aeb531)(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
        (0, $d59a735b25ae191a$export$bd70ea2a93c0fa4)(this.inversePixelTransform, this.pixelTransform);
        const canvasTransform = (0, $d59a735b25ae191a$export$f84e8e69fd4488a5)(this.pixelTransform);
        this.useContainer(target, canvasTransform, this.getBackground(frameState));
        const context = this.context;
        const canvas = context.canvas;
        const replayGroup = this.replayGroup_;
        const declutterExecutorGroup = this.declutterExecutorGroup;
        let render = replayGroup && !replayGroup.isEmpty() || declutterExecutorGroup && !declutterExecutorGroup.isEmpty();
        if (!render) {
            const hasRenderListeners = this.getLayer().hasListener((0, $4585eb82aab12670$export$2e2bcd8739ae039).PRERENDER) || this.getLayer().hasListener((0, $4585eb82aab12670$export$2e2bcd8739ae039).POSTRENDER);
            if (!hasRenderListeners) return null;
        }
        // resize and clear
        const width = Math.round(frameState.size[0] * pixelRatio);
        const height = Math.round(frameState.size[1] * pixelRatio);
        if (canvas.width != width || canvas.height != height) {
            canvas.width = width;
            canvas.height = height;
            if (canvas.style.transform !== canvasTransform) canvas.style.transform = canvasTransform;
        } else if (!this.containerReused) context.clearRect(0, 0, width, height);
        this.preRender(context, frameState);
        const viewState = frameState.viewState;
        const projection = viewState.projection;
        this.opacity_ = layerState.opacity;
        this.setupCompositionContext_();
        // clipped rendering if layer extent is set
        let clipped = false;
        if (render && layerState.extent && this.clipping) {
            const layerExtent = (0, $983289ae1d13cd2a$export$494be3a3a25689ca)(layerState.extent, projection);
            render = (0, $84be800ca44e672c$export$7b0a31e10bbff018)(layerExtent, frameState.extent);
            clipped = render && !(0, $84be800ca44e672c$export$be866b1e0809b17e)(layerExtent, frameState.extent);
            if (clipped) this.clipUnrotated(this.compositionContext_, frameState, layerExtent);
        }
        if (render) this.renderWorlds(replayGroup, frameState);
        if (clipped) this.compositionContext_.restore();
        this.releaseCompositionContext_();
        this.postRender(context, frameState);
        if (this.renderedRotation_ !== viewState.rotation) {
            this.renderedRotation_ = viewState.rotation;
            this.hitDetectionImageData_ = null;
        }
        return this.container;
    }
    /**
   * Asynchronous layer level hit detection.
   * @param {import("../../pixel.js").Pixel} pixel Pixel.
   * @return {Promise<Array<import("../../Feature").default>>} Promise
   * that resolves with an array of features.
   */ getFeatures(pixel) {
        return new Promise((resolve)=>{
            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
                const size = [
                    this.context.canvas.width,
                    this.context.canvas.height
                ];
                (0, $d59a735b25ae191a$export$5635d7ef4b8fee1c)(this.pixelTransform, size);
                const center = this.renderedCenter_;
                const resolution = this.renderedResolution_;
                const rotation = this.renderedRotation_;
                const projection = this.renderedProjection_;
                const extent = this.wrappedRenderedExtent_;
                const layer = this.getLayer();
                const transforms = [];
                const width = size[0] * (0, $027b7b106c5e63cc$export$ab51038298418f25);
                const height = size[1] * (0, $027b7b106c5e63cc$export$ab51038298418f25);
                transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $027b7b106c5e63cc$export$ab51038298418f25), width, height, 0).slice());
                const source = layer.getSource();
                const projectionExtent = projection.getExtent();
                if (source.getWrapX() && projection.canWrapX() && !(0, $84be800ca44e672c$export$be866b1e0809b17e)(projectionExtent, extent)) {
                    let startX = extent[0];
                    const worldWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projectionExtent);
                    let world = 0;
                    let offsetX;
                    while(startX < projectionExtent[0]){
                        --world;
                        offsetX = worldWidth * world;
                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $027b7b106c5e63cc$export$ab51038298418f25), width, height, offsetX).slice());
                        startX += worldWidth;
                    }
                    world = 0;
                    startX = extent[2];
                    while(startX > projectionExtent[2]){
                        ++world;
                        offsetX = worldWidth * world;
                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $027b7b106c5e63cc$export$ab51038298418f25), width, height, offsetX).slice());
                        startX -= worldWidth;
                    }
                }
                this.hitDetectionImageData_ = (0, $027b7b106c5e63cc$export$bd05e394339d469)(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);
            }
            resolve((0, $027b7b106c5e63cc$export$6d4d555ddbfffa32)(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
        });
    }
    /**
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {number} hitTolerance Hit tolerance in pixels.
   * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
   * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
   * @return {T|undefined} Callback result.
   * @template T
   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {
        if (!this.replayGroup_) return undefined;
        const resolution = frameState.viewState.resolution;
        const rotation = frameState.viewState.rotation;
        const layer = this.getLayer();
        /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */ const features = {};
        /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} distanceSq The squared distance to the click position
     * @return {T|undefined} Callback result.
     */ const featureCallback = function(feature, geometry, distanceSq) {
            const key = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature);
            const match = features[key];
            if (!match) {
                if (distanceSq === 0) {
                    features[key] = true;
                    return callback(feature, layer, geometry);
                }
                matches.push(features[key] = {
                    feature: feature,
                    layer: layer,
                    geometry: geometry,
                    distanceSq: distanceSq,
                    callback: callback
                });
            } else if (match !== true && distanceSq < match.distanceSq) {
                if (distanceSq === 0) {
                    features[key] = true;
                    matches.splice(matches.lastIndexOf(match), 1);
                    return callback(feature, layer, geometry);
                }
                match.geometry = geometry;
                match.distanceSq = distanceSq;
            }
            return undefined;
        };
        let result;
        const executorGroups = [
            this.replayGroup_
        ];
        if (this.declutterExecutorGroup) executorGroups.push(this.declutterExecutorGroup);
        executorGroups.some((executorGroup)=>{
            return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === this.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map((item)=>item.value) : null);
        });
        return result;
    }
    /**
   * Perform action necessary to get the layer rendered after new fonts have loaded
   */ handleFontsChanged() {
        const layer = this.getLayer();
        if (layer.getVisible() && this.replayGroup_) layer.changed();
    }
    /**
   * Handle changes in image style state.
   * @param {import("../../events/Event.js").default} event Image style change event.
   * @private
   */ handleStyleImageChange_(event) {
        this.renderIfReadyAndVisible();
    }
    /**
   * Determine whether render should be called.
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @return {boolean} Layer is ready to be rendered.
   */ prepareFrame(frameState) {
        const vectorLayer = this.getLayer();
        const vectorSource = vectorLayer.getSource();
        if (!vectorSource) return false;
        const animating = frameState.viewHints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).ANIMATING];
        const interacting = frameState.viewHints[(0, $da1f857e3747bc07$export$2e2bcd8739ae039).INTERACTING];
        const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
        const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();
        if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {
            this.animatingOrInteracting_ = true;
            return true;
        }
        this.animatingOrInteracting_ = false;
        const frameStateExtent = frameState.extent;
        const viewState = frameState.viewState;
        const projection = viewState.projection;
        const resolution = viewState.resolution;
        const pixelRatio = frameState.pixelRatio;
        const vectorLayerRevision = vectorLayer.getRevision();
        const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
        let vectorLayerRenderOrder = vectorLayer.getRenderOrder();
        if (vectorLayerRenderOrder === undefined) vectorLayerRenderOrder = (0, $0441c6c4e8d0ef48$export$531ddd8416d52dfc);
        const center = viewState.center.slice();
        const extent = (0, $84be800ca44e672c$export$ab1029bcae9ddb4a)(frameStateExtent, vectorLayerRenderBuffer * resolution);
        const renderedExtent = extent.slice();
        const loadExtents = [
            extent.slice()
        ];
        const projectionExtent = projection.getExtent();
        if (vectorSource.getWrapX() && projection.canWrapX() && !(0, $84be800ca44e672c$export$be866b1e0809b17e)(projectionExtent, frameState.extent)) {
            // For the replay group, we need an extent that intersects the real world
            // (-180° to +180°). To support geometries in a coordinate range from -540°
            // to +540°, we add at least 1 world width on each side of the projection
            // extent. If the viewport is wider than the world, we need to add half of
            // the viewport width to make sure we cover the whole viewport.
            const worldWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projectionExtent);
            const gutter = Math.max((0, $84be800ca44e672c$export$3c49c185de0c2bfc)(extent) / 2, worldWidth);
            extent[0] = projectionExtent[0] - gutter;
            extent[2] = projectionExtent[2] + gutter;
            (0, $c65bc16e55ef0e33$export$39a9ce3624977b84)(center, projection);
            const loadExtent = (0, $84be800ca44e672c$export$39a9ce3624977b84)(loadExtents[0], projection);
            // If the extent crosses the date line, we load data for both edges of the worlds
            if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) loadExtents.push([
                loadExtent[0] + worldWidth,
                loadExtent[1],
                loadExtent[2] + worldWidth,
                loadExtent[3]
            ]);
            else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) loadExtents.push([
                loadExtent[0] - worldWidth,
                loadExtent[1],
                loadExtent[2] - worldWidth,
                loadExtent[3]
            ]);
        }
        if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && (0, $84be800ca44e672c$export$be866b1e0809b17e)(this.wrappedRenderedExtent_, extent)) {
            if (!(0, $69c1cc8ae30f997f$export$e9bab7fafb253603)(this.renderedExtent_, renderedExtent)) {
                this.hitDetectionImageData_ = null;
                this.renderedExtent_ = renderedExtent;
            }
            this.renderedCenter_ = center;
            this.replayGroupChanged = false;
            return true;
        }
        this.replayGroup_ = null;
        const replayGroup = new (0, $0b299ddc8624c50d$export$2e2bcd8739ae039)((0, $0441c6c4e8d0ef48$export$bdacc5b475012edb)(resolution, pixelRatio), extent, resolution, pixelRatio);
        let declutterBuilderGroup;
        if (this.getLayer().getDeclutter()) declutterBuilderGroup = new (0, $0b299ddc8624c50d$export$2e2bcd8739ae039)((0, $0441c6c4e8d0ef48$export$bdacc5b475012edb)(resolution, pixelRatio), extent, resolution, pixelRatio);
        const userProjection = (0, $983289ae1d13cd2a$export$3973b77d5f6f2790)();
        let userTransform;
        if (userProjection) {
            for(let i = 0, ii = loadExtents.length; i < ii; ++i){
                const extent = loadExtents[i];
                const userExtent = (0, $983289ae1d13cd2a$export$96bfd09e2cffb006)(extent, projection);
                vectorSource.loadFeatures(userExtent, (0, $983289ae1d13cd2a$export$b56bb8ad8b3a00e9)(resolution, projection), userProjection);
            }
            userTransform = (0, $983289ae1d13cd2a$export$e3c4995a701c26a3)(userProjection, projection);
        } else for(let i = 0, ii = loadExtents.length; i < ii; ++i)vectorSource.loadFeatures(loadExtents[i], resolution, projection);
        const squaredTolerance = (0, $0441c6c4e8d0ef48$export$75084a70d324c1e6)(resolution, pixelRatio);
        let ready = true;
        const render = /**
       * @param {import("../../Feature.js").default} feature Feature.
       */ (feature)=>{
            let styles;
            const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
            if (styleFunction) styles = styleFunction(feature, resolution);
            if (styles) {
                const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);
                ready = ready && !dirty;
            }
        };
        const userExtent = (0, $983289ae1d13cd2a$export$96bfd09e2cffb006)(extent, projection);
        /** @type {Array<import("../../Feature.js").default>} */ const features = vectorSource.getFeaturesInExtent(userExtent);
        if (vectorLayerRenderOrder) features.sort(vectorLayerRenderOrder);
        for(let i = 0, ii = features.length; i < ii; ++i)render(features[i]);
        this.renderedFeatures_ = features;
        this.ready = ready;
        const replayGroupInstructions = replayGroup.finish();
        const executorGroup = new (0, $9ab3bb4278f389ba$export$2e2bcd8739ae039)(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());
        if (declutterBuilderGroup) this.declutterExecutorGroup = new (0, $9ab3bb4278f389ba$export$2e2bcd8739ae039)(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());
        this.renderedResolution_ = resolution;
        this.renderedRevision_ = vectorLayerRevision;
        this.renderedRenderOrder_ = vectorLayerRenderOrder;
        this.renderedExtent_ = renderedExtent;
        this.wrappedRenderedExtent_ = extent;
        this.renderedCenter_ = center;
        this.renderedProjection_ = projection;
        this.replayGroup_ = executorGroup;
        this.hitDetectionImageData_ = null;
        this.replayGroupChanged = true;
        return true;
    }
    /**
   * @param {import("../../Feature.js").default} feature Feature.
   * @param {number} squaredTolerance Squared render tolerance.
   * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
   * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
   * @param {import("../../proj.js").TransformFunction} [transform] Transform from user to view projection.
   * @param {import("../../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   * @return {boolean} `true` if an image is loading.
   */ renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutterBuilderGroup) {
        if (!styles) return false;
        let loading = false;
        if (Array.isArray(styles)) for(let i = 0, ii = styles.length; i < ii; ++i)loading = (0, $0441c6c4e8d0ef48$export$36f470a33a42f413)(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup) || loading;
        else loading = (0, $0441c6c4e8d0ef48$export$36f470a33a42f413)(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup);
        return loading;
    }
}
var $75d0d33f029e4c07$export$2e2bcd8739ae039 = $75d0d33f029e4c07$var$CanvasVectorLayerRenderer;


/**
 * @classdesc
 * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering
 * even during animations. Points and labels stay upright on rotated views. For very large
 * amounts of vector data, performance may suffer during pan and zoom animations. In this case,
 * try {@link module:ol/layer/VectorImage~VectorImageLayer}.
 *
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Vector.js").default} VectorSourceType
 * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorLayerRenderer>}
 * @api
 */ class $fef14e10fb9831ec$var$VectorLayer extends (0, $d0e9dd5889579bca$export$2e2bcd8739ae039) {
    /**
   * @param {import("./BaseVector.js").Options<VectorSourceType>} [options] Options.
   */ constructor(options){
        super(options);
    }
    createRenderer() {
        return new (0, $75d0d33f029e4c07$export$2e2bcd8739ae039)(this);
    }
}
var $fef14e10fb9831ec$export$2e2bcd8739ae039 = $fef14e10fb9831ec$var$VectorLayer;



/**
 * @module ol/proj/proj4
 */ 


/**
 * @type {import("proj4")|null}
 */ let $6012a9789a43a621$var$registered = null;
function $6012a9789a43a621$export$bd9a8eae248cc953() {
    return !!$6012a9789a43a621$var$registered;
}
function $6012a9789a43a621$export$d07f55d4c15c0440() {
    $6012a9789a43a621$var$registered = null;
}
function $6012a9789a43a621$export$6503ec6e8aabbaf(proj4) {
    $6012a9789a43a621$var$registered = proj4;
    const projCodes = Object.keys(proj4.defs);
    const len = projCodes.length;
    let i, j;
    for(i = 0; i < len; ++i){
        const code = projCodes[i];
        if (!(0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(code)) {
            const def = proj4.defs(code);
            let units = /** @type {import("./Units.js").Units} */ def.units;
            if (!units && def.projName === "longlat") units = "degrees";
            (0, $983289ae1d13cd2a$export$59ae956cd3e343f7)(new (0, $dedce5f77fa1cc84$export$2e2bcd8739ae039)({
                code: code,
                axisOrientation: def.axis,
                metersPerUnit: def.to_meter,
                units: units
            }));
        }
    }
    for(i = 0; i < len; ++i){
        const code1 = projCodes[i];
        const proj1 = (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(code1);
        for(j = 0; j < len; ++j){
            const code2 = projCodes[j];
            const proj2 = (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(code2);
            if (!(0, $00727a2fe5eeabf8$export$3988ae62b71be9a3)(code1, code2)) {
                if (proj4.defs[code1] === proj4.defs[code2]) (0, $983289ae1d13cd2a$export$eeb8392580a05a37)([
                    proj1,
                    proj2
                ]);
                else {
                    const transform = proj4(code1, code2);
                    (0, $983289ae1d13cd2a$export$6b1c2e6623f4f49d)(proj1, proj2, (0, $983289ae1d13cd2a$export$1873f9cfeb8bd1d6)(proj1, proj2, transform.forward), (0, $983289ae1d13cd2a$export$1873f9cfeb8bd1d6)(proj2, proj1, transform.inverse));
                }
            }
        }
    }
}
/**
 * @param {number} code The EPSG code.
 * @return {Promise<string>} The proj4 definition.
 */ let $6012a9789a43a621$var$epsgLookup = async function(code) {
    const response = await fetch(`https://epsg.io/${code}.proj4`);
    if (!response.ok) throw new Error(`Unexpected response from epsg.io: ${response.status}`);
    return response.text();
};
function $6012a9789a43a621$export$a2ab1dacaf978878(func) {
    $6012a9789a43a621$var$epsgLookup = func;
}
function $6012a9789a43a621$export$740126bd4cc01b24() {
    return $6012a9789a43a621$var$epsgLookup;
}
async function $6012a9789a43a621$export$8d835cefe312e037(code) {
    if (typeof code === "string") code = parseInt(code.split(":").pop(), 10);
    const proj4 = $6012a9789a43a621$var$registered;
    if (!proj4) throw new Error("Proj4 must be registered first with register(proj4)");
    const epsgCode = "EPSG:" + code;
    if (proj4.defs(epsgCode)) return (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(epsgCode);
    proj4.defs(epsgCode, await $6012a9789a43a621$var$epsgLookup(code));
    $6012a9789a43a621$export$6503ec6e8aabbaf(proj4);
    return (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(epsgCode);
}
function $6012a9789a43a621$export$71e713433eeb8730(key) {
    return async function(code) {
        const response = await fetch(`https://api.maptiler.com/coordinates/search/code:${code}.json?transformations=true&exports=true&key=${key}`);
        if (!response.ok) throw new Error(`Unexpected response from maptiler.com: ${response.status}`);
        return response.json().then((json)=>{
            const results = json["results"];
            if (results?.length > 0) {
                const result = results.filter((r)=>r["id"]?.["authority"] === "EPSG" && r["id"]?.["code"] === code)[0];
                if (result) {
                    const transforms = result["transformations"];
                    if (transforms?.length > 0) {
                        // use default transform if it does not require grids
                        const defaultTransform = result["default_transformation"];
                        if (transforms.filter((t)=>t["id"]?.["authority"] === defaultTransform?.["authority"] && t["id"]?.["code"] === defaultTransform?.["code"] && t["grids"]?.length === 0).length > 0) return result["exports"]?.["proj4"];
                        // otherwise use most accurate alternative without grids
                        const transform = transforms.filter((t)=>t["grids"]?.length === 0 && t["target_crs"]?.["authority"] === "EPSG" && t["target_crs"]?.["code"] === 4326 && t["deprecated"] === false && t["usable"] === true).sort((t1, t2)=>t1["accuracy"] - t2["accuracy"])[0]?.["exports"]?.["proj4"];
                        if (transform) return transform;
                    }
                    // fallback to default
                    return result["exports"]?.["proj4"];
                }
            }
        });
    };
}


/**
 * @module ol/source/ImageStatic
 */ 
/**
 * @module ol/source/Image
 */ 

/**
 * @module ol/reproj/Image
 */ 







/**
 * @typedef {function(import("../extent.js").Extent, number, number) : import("../ImageBase.js").default} FunctionType
 */ /**
 * @classdesc
 * Class encapsulating single reprojected image.
 * See {@link module:ol/source/Image~ImageSource}.
 */ class $e423f2cb84577a8a$var$ReprojImage extends (0, $bfae3f7ef12e7a3a$export$2e2bcd8739ae039) {
    /**
   * @param {import("../proj/Projection.js").default} sourceProj Source projection (of the data).
   * @param {import("../proj/Projection.js").default} targetProj Target projection.
   * @param {import("../extent.js").Extent} targetExtent Target extent.
   * @param {number} targetResolution Target resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {FunctionType} getImageFunction
   *     Function returning source images (extent, resolution, pixelRatio).
   * @param {boolean} interpolate Use linear interpolation when resampling.
   */ constructor(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction, interpolate){
        let maxSourceExtent = sourceProj.getExtent();
        if (maxSourceExtent && sourceProj.canWrapX()) {
            maxSourceExtent = maxSourceExtent.slice();
            maxSourceExtent[0] = -Infinity;
            maxSourceExtent[2] = Infinity;
        }
        let maxTargetExtent = targetProj.getExtent();
        if (maxTargetExtent && targetProj.canWrapX()) {
            maxTargetExtent = maxTargetExtent.slice();
            maxTargetExtent[0] = -Infinity;
            maxTargetExtent[2] = Infinity;
        }
        const limitedTargetExtent = maxTargetExtent ? (0, $84be800ca44e672c$export$72209efa88586d42)(targetExtent, maxTargetExtent) : targetExtent;
        const targetCenter = (0, $84be800ca44e672c$export$c91255cadecfe081)(limitedTargetExtent);
        const sourceResolution = (0, $6f210e8a8cb248a3$export$5fbb958059b7e71f)(sourceProj, targetProj, targetCenter, targetResolution);
        const errorThresholdInPixels = (0, $f18ab1cde9e52029$export$3ecb4bcfa5aae855);
        const triangulation = new (0, $686d602ee344b3e4$export$2e2bcd8739ae039)(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
        const sourceExtent = triangulation.calculateSourceExtent();
        const sourceImage = (0, $84be800ca44e672c$export$dd1bc94b04021eeb)(sourceExtent) ? null : getImageFunction(sourceExtent, sourceResolution, pixelRatio);
        const state = sourceImage ? (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE : (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).EMPTY;
        const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;
        super(targetExtent, targetResolution, sourcePixelRatio, state);
        /**
     * @private
     * @type {import("../proj/Projection.js").default}
     */ this.targetProj_ = targetProj;
        /**
     * @private
     * @type {import("../extent.js").Extent}
     */ this.maxSourceExtent_ = maxSourceExtent;
        /**
     * @private
     * @type {!import("./Triangulation.js").default}
     */ this.triangulation_ = triangulation;
        /**
     * @private
     * @type {number}
     */ this.targetResolution_ = targetResolution;
        /**
     * @private
     * @type {import("../extent.js").Extent}
     */ this.targetExtent_ = targetExtent;
        /**
     * @private
     * @type {import("../ImageBase.js").default}
     */ this.sourceImage_ = sourceImage;
        /**
     * @private
     * @type {number}
     */ this.sourcePixelRatio_ = sourcePixelRatio;
        /**
     * @private
     * @type {boolean}
     */ this.interpolate_ = interpolate;
        /**
     * @private
     * @type {HTMLCanvasElement}
     */ this.canvas_ = null;
        /**
     * @private
     * @type {?import("../events.js").EventsKey}
     */ this.sourceListenerKey_ = null;
    }
    /**
   * Clean up.
   */ disposeInternal() {
        if (this.state == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADING) this.unlistenSource_();
        super.disposeInternal();
    }
    /**
   * @return {HTMLCanvasElement} Image.
   */ getImage() {
        return this.canvas_;
    }
    /**
   * @return {import("../proj/Projection.js").default} Projection.
   */ getProjection() {
        return this.targetProj_;
    }
    /**
   * @private
   */ reproject_() {
        const sourceState = this.sourceImage_.getState();
        if (sourceState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) {
            const width = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(this.targetExtent_) / this.targetResolution_;
            const height = (0, $84be800ca44e672c$export$c08559766941f856)(this.targetExtent_) / this.targetResolution_;
            this.canvas_ = (0, $6f210e8a8cb248a3$export$b3890eb0ae9dca99)(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [
                {
                    extent: this.sourceImage_.getExtent(),
                    image: this.sourceImage_.getImage()
                }
            ], 0, undefined, this.interpolate_);
        }
        this.state = sourceState;
        this.changed();
    }
    /**
   * Load not yet loaded URI.
   */ load() {
        if (this.state == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).IDLE) {
            this.state = (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADING;
            this.changed();
            const sourceState = this.sourceImage_.getState();
            if (sourceState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED || sourceState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR) this.reproject_();
            else {
                this.sourceListenerKey_ = (0, $776f68d2a754760b$export$63174c828edd6ff8)(this.sourceImage_, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, function(e) {
                    const sourceState = this.sourceImage_.getState();
                    if (sourceState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED || sourceState == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR) {
                        this.unlistenSource_();
                        this.reproject_();
                    }
                }, this);
                this.sourceImage_.load();
            }
        }
    }
    /**
   * @private
   */ unlistenSource_() {
        (0, $776f68d2a754760b$export$b0a21c8b3c1c921)(/** @type {!import("../events.js").EventsKey} */ this.sourceListenerKey_);
        this.sourceListenerKey_ = null;
    }
}
var $e423f2cb84577a8a$export$2e2bcd8739ae039 = $e423f2cb84577a8a$var$ReprojImage;


/**
 * @module ol/source/Source
 */ 

/**
 * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State
 * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
 */ /**
 * A function that takes a {@link import("../View.js").ViewStateLayerStateExtent} and returns a string or
 * an array of strings representing source attributions.
 *
 * @typedef {function(import("../View.js").ViewStateLayerStateExtent): (string|Array<string>)} Attribution
 */ /**
 * A type that can be used to provide attribution information for data sources.
 *
 * It represents either
 * * a simple string (e.g. `'© Acme Inc.'`)
 * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
 * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
 *
 * @typedef {string|Array<string>|Attribution} AttributionLike
 */ /**
 * @typedef {Object} Options
 * @property {AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
 * @property {import("./Source.js").State} [state='ready'] State.
 * @property {boolean} [wrapX=false] WrapX.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for {@link module:ol/layer/Layer~Layer} sources.
 *
 * A generic `change` event is triggered when the state of the source changes.
 * @abstract
 * @api
 */ class $3a045db4be96b02c$var$Source extends (0, $d6cd7f1b627d5e92$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options Source options.
   */ constructor(options){
        super();
        /**
     * @protected
     * @type {import("../proj/Projection.js").default|null}
     */ this.projection = (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(options.projection);
        /**
     * @private
     * @type {?Attribution}
     */ this.attributions_ = $3a045db4be96b02c$var$adaptAttributions(options.attributions);
        /**
     * @private
     * @type {boolean}
     */ this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;
        /**
     * This source is currently loading data. Sources that defer loading to the
     * map's tile queue never set this to `true`.
     * @type {boolean}
     */ this.loading = false;
        /**
     * @private
     * @type {import("./Source.js").State}
     */ this.state_ = options.state !== undefined ? options.state : "ready";
        /**
     * @private
     * @type {boolean}
     */ this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;
        /**
     * @private
     * @type {boolean}
     */ this.interpolate_ = !!options.interpolate;
        /**
     * @protected
     * @type {function(import("../View.js").ViewOptions):void}
     */ this.viewResolver = null;
        /**
     * @protected
     * @type {function(Error):void}
     */ this.viewRejector = null;
        const self = this;
        /**
     * @private
     * @type {Promise<import("../View.js").ViewOptions>}
     */ this.viewPromise_ = new Promise(function(resolve, reject) {
            self.viewResolver = resolve;
            self.viewRejector = reject;
        });
    }
    /**
   * Get the attribution function for the source.
   * @return {?Attribution} Attribution function.
   * @api
   */ getAttributions() {
        return this.attributions_;
    }
    /**
   * @return {boolean} Attributions are collapsible.
   * @api
   */ getAttributionsCollapsible() {
        return this.attributionsCollapsible_;
    }
    /**
   * Get the projection of the source.
   * @return {import("../proj/Projection.js").default|null} Projection.
   * @api
   */ getProjection() {
        return this.projection;
    }
    /**
   * @param {import("../proj/Projection").default} [projection] Projection.
   * @return {Array<number>|null} Resolutions.
   */ getResolutions(projection) {
        return null;
    }
    /**
   * @return {Promise<import("../View.js").ViewOptions>} A promise for view-related properties.
   */ getView() {
        return this.viewPromise_;
    }
    /**
   * Get the state of the source, see {@link import("./Source.js").State} for possible states.
   * @return {import("./Source.js").State} State.
   * @api
   */ getState() {
        return this.state_;
    }
    /**
   * @return {boolean|undefined} Wrap X.
   */ getWrapX() {
        return this.wrapX_;
    }
    /**
   * @return {boolean} Use linear interpolation when resampling.
   */ getInterpolate() {
        return this.interpolate_;
    }
    /**
   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
   * @api
   */ refresh() {
        this.changed();
    }
    /**
   * Set the attributions of the source.
   * @param {AttributionLike|undefined} attributions Attributions.
   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
   *     or `undefined`.
   * @api
   */ setAttributions(attributions) {
        this.attributions_ = $3a045db4be96b02c$var$adaptAttributions(attributions);
        this.changed();
    }
    /**
   * Set the state of the source.
   * @param {import("./Source.js").State} state State.
   */ setState(state) {
        this.state_ = state;
        this.changed();
    }
}
/**
 * Turns the attributions option into an attributions function.
 * @param {AttributionLike|undefined} attributionLike The attribution option.
 * @return {Attribution|null} An attribution function (or null).
 */ function $3a045db4be96b02c$var$adaptAttributions(attributionLike) {
    if (!attributionLike) return null;
    if (Array.isArray(attributionLike)) return function(frameState) {
        return attributionLike;
    };
    if (typeof attributionLike === "function") return attributionLike;
    return function(frameState) {
        return [
            attributionLike
        ];
    };
}
var $3a045db4be96b02c$export$2e2bcd8739ae039 = $3a045db4be96b02c$var$Source;






const $00813c292f54e75d$export$4e0f6da20e5dcc4f = {
    /**
   * Triggered when an image starts loading.
   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart
   * @api
   */ IMAGELOADSTART: "imageloadstart",
    /**
   * Triggered when an image finishes loading.
   * @event module:ol/source/Image.ImageSourceEvent#imageloadend
   * @api
   */ IMAGELOADEND: "imageloadend",
    /**
   * Triggered if image loading results in an error.
   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror
   * @api
   */ IMAGELOADERROR: "imageloaderror"
};
class $00813c292f54e75d$export$58d3276cd83daede extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {string} type Type.
   * @param {import("../Image.js").default} image The image.
   */ constructor(type, image){
        super(type);
        /**
     * The image related to the event.
     * @type {import("../Image.js").default}
     * @api
     */ this.image = image;
    }
}
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types
 *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection.
 * @property {Array<number>} [resolutions] Resolutions.
 * @property {import("./Source.js").State} [state] State.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for sources providing a single image.
 * @abstract
 * @fires module:ol/source/Image.ImageSourceEvent
 * @api
 */ class $00813c292f54e75d$var$ImageSource extends (0, $3a045db4be96b02c$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options Single image source options.
   */ constructor(options){
        super({
            attributions: options.attributions,
            projection: options.projection,
            state: options.state,
            interpolate: options.interpolate !== undefined ? options.interpolate : true
        });
        /***
     * @type {ImageSourceOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {ImageSourceOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {ImageSourceOnSignature<void>}
     */ this.un;
        /**
     * @private
     * @type {Array<number>|null}
     */ this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;
        /**
     * @private
     * @type {import("../reproj/Image.js").default}
     */ this.reprojectedImage_ = null;
        /**
     * @private
     * @type {number}
     */ this.reprojectedRevision_ = 0;
    }
    /**
   * @return {Array<number>|null} Resolutions.
   */ getResolutions() {
        return this.resolutions_;
    }
    /**
   * @param {Array<number>|null} resolutions Resolutions.
   */ setResolutions(resolutions) {
        this.resolutions_ = resolutions;
    }
    /**
   * @protected
   * @param {number} resolution Resolution.
   * @return {number} Resolution.
   */ findNearestResolution(resolution) {
        const resolutions = this.getResolutions();
        if (resolutions) {
            const idx = (0, $69c1cc8ae30f997f$export$8a3786cc03fdb777)(resolutions, resolution, 0);
            resolution = resolutions[idx];
        }
        return resolution;
    }
    /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../ImageBase.js").default} Single image.
   */ getImage(extent, resolution, pixelRatio, projection) {
        const sourceProjection = this.getProjection();
        if (!sourceProjection || !projection || (0, $983289ae1d13cd2a$export$fe091d73a555748b)(sourceProjection, projection)) {
            if (sourceProjection) projection = sourceProjection;
            return this.getImageInternal(extent, resolution, pixelRatio, projection);
        }
        if (this.reprojectedImage_) {
            if (this.reprojectedRevision_ == this.getRevision() && (0, $983289ae1d13cd2a$export$fe091d73a555748b)(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && (0, $84be800ca44e672c$export$e9bab7fafb253603)(this.reprojectedImage_.getExtent(), extent)) return this.reprojectedImage_;
            this.reprojectedImage_.dispose();
            this.reprojectedImage_ = null;
        }
        this.reprojectedImage_ = new (0, $e423f2cb84577a8a$export$2e2bcd8739ae039)(sourceProjection, projection, extent, resolution, pixelRatio, (extent, resolution, pixelRatio)=>this.getImageInternal(extent, resolution, pixelRatio, sourceProjection), this.getInterpolate());
        this.reprojectedRevision_ = this.getRevision();
        return this.reprojectedImage_;
    }
    /**
   * @abstract
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../ImageBase.js").default} Single image.
   * @protected
   */ getImageInternal(extent, resolution, pixelRatio, projection) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Handle image change events.
   * @param {import("../events/Event.js").default} event Event.
   * @protected
   */ handleImageChange(event) {
        const image = /** @type {import("../Image.js").default} */ event.target;
        let type;
        switch(image.getState()){
            case (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADING:
                this.loading = true;
                type = $00813c292f54e75d$export$4e0f6da20e5dcc4f.IMAGELOADSTART;
                break;
            case (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED:
                this.loading = false;
                type = $00813c292f54e75d$export$4e0f6da20e5dcc4f.IMAGELOADEND;
                break;
            case (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).ERROR:
                this.loading = false;
                type = $00813c292f54e75d$export$4e0f6da20e5dcc4f.IMAGELOADERROR;
                break;
            default:
                return;
        }
        if (this.hasListener(type)) this.dispatchEvent(new $00813c292f54e75d$export$58d3276cd83daede(type, image));
    }
}
function $00813c292f54e75d$export$584f102f75ff44b3(image, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ image.getImage().src = src;
}
var $00813c292f54e75d$export$2e2bcd8739ae039 = $00813c292f54e75d$var$ImageSource;







/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {import("../extent.js").Extent} [imageExtent] Extent of the image in map coordinates.
 * This is the [left, bottom, right, top] map coordinates of your image.
 * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
 * @property {import("../size.js").Size} [imageSize] Size of the image in pixels. Usually the image size is auto-detected, so this
 * only needs to be set if auto-detection fails for some reason.
 * @property {string} url Image URL.
 */ /**
 * @classdesc
 * A layer source for displaying a single, static image.
 * @api
 */ class $07c09f4f67d0a817$var$Static extends (0, $00813c292f54e75d$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options ImageStatic options.
   */ constructor(options){
        const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;
        const /** @type {import("../Image.js").LoadFunction} */ imageLoadFunction = options.imageLoadFunction !== undefined ? options.imageLoadFunction : (0, $00813c292f54e75d$export$584f102f75ff44b3);
        super({
            attributions: options.attributions,
            interpolate: options.interpolate,
            projection: (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(options.projection)
        });
        /**
     * @private
     * @type {string}
     */ this.url_ = options.url;
        /**
     * @private
     * @type {import("../extent.js").Extent}
     */ this.imageExtent_ = options.imageExtent;
        /**
     * @private
     * @type {import("../Image.js").default}
     */ this.image_ = new (0, $752084c7f6d5daf1$export$2e2bcd8739ae039)(this.imageExtent_, undefined, 1, this.url_, crossOrigin, imageLoadFunction, (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(1, 1));
        /**
     * @private
     * @type {import("../size.js").Size|null}
     */ this.imageSize_ = options.imageSize ? options.imageSize : null;
        this.image_.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.handleImageChange.bind(this));
    }
    /**
   * Returns the image extent
   * @return {import("../extent.js").Extent} image extent.
   * @api
   */ getImageExtent() {
        return this.imageExtent_;
    }
    /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../Image.js").default} Single image.
   */ getImageInternal(extent, resolution, pixelRatio, projection) {
        if ((0, $84be800ca44e672c$export$7b0a31e10bbff018)(extent, this.image_.getExtent())) return this.image_;
        return null;
    }
    /**
   * Return the URL used for this image source.
   * @return {string} URL.
   * @api
   */ getUrl() {
        return this.url_;
    }
    /**
   * @param {import("../events/Event.js").default} evt Event.
   */ handleImageChange(evt) {
        if (this.image_.getState() == (0, $d5d27ccbbbef5bf5$export$2e2bcd8739ae039).LOADED) {
            const imageExtent = this.image_.getExtent();
            const image = this.image_.getImage();
            let imageWidth, imageHeight;
            if (this.imageSize_) {
                imageWidth = this.imageSize_[0];
                imageHeight = this.imageSize_[1];
            } else {
                imageWidth = image.width;
                imageHeight = image.height;
            }
            const extentWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(imageExtent);
            const extentHeight = (0, $84be800ca44e672c$export$c08559766941f856)(imageExtent);
            const xResolution = extentWidth / imageWidth;
            const yResolution = extentHeight / imageHeight;
            let targetWidth = imageWidth;
            let targetHeight = imageHeight;
            if (xResolution > yResolution) targetWidth = Math.round(extentWidth / yResolution);
            else targetHeight = Math.round(extentHeight / xResolution);
            if (targetWidth !== imageWidth || targetHeight !== imageHeight) {
                const context = (0, $1d92219e1eaa7bd2$export$9e05d10eae75c464)(targetWidth, targetHeight);
                if (!this.getInterpolate()) context.imageSmoothingEnabled = false;
                const canvas = context.canvas;
                context.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, canvas.width, canvas.height);
                this.image_.setImage(canvas);
            }
        }
        super.handleImageChange(evt);
    }
}
var $07c09f4f67d0a817$export$2e2bcd8739ae039 = $07c09f4f67d0a817$var$Static;

/**
 * @module ol/source/OSM
 */ /**
 * @module ol/source/XYZ
 */ /**
 * @module ol/source/TileImage
 */ 


/**
 * @module ol/TileCache
 */ /**
 * @module ol/structs/LRUCache
 */ 
/**
 * @typedef {Object} Entry
 * @property {string} key_ Key.
 * @property {Object} newer Newer.
 * @property {Object} older Older.
 * @property {*} value_ Value.
 */ /**
 * @classdesc
 * Implements a Least-Recently-Used cache where the keys do not conflict with
 * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
 * items from the cache is the responsibility of the user.
 *
 * @fires import("../events/Event.js").default
 * @template T
 */ class $c64d0b2511f865d8$var$LRUCache {
    /**
   * @param {number} [highWaterMark] High water mark.
   */ constructor(highWaterMark){
        /**
     * Desired max cache size after expireCache(). If set to 0, no cache entries
     * will be pruned at all.
     * @type {number}
     */ this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;
        /**
     * @private
     * @type {number}
     */ this.count_ = 0;
        /**
     * @private
     * @type {!Object<string, Entry>}
     */ this.entries_ = {};
        /**
     * @private
     * @type {?Entry}
     */ this.oldest_ = null;
        /**
     * @private
     * @type {?Entry}
     */ this.newest_ = null;
    }
    /**
   * @return {boolean} Can expire cache.
   */ canExpireCache() {
        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
    }
    /**
   * Expire the cache.
   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.
   */ expireCache(keep) {
        while(this.canExpireCache())this.pop();
    }
    /**
   * FIXME empty description for jsdoc
   */ clear() {
        this.count_ = 0;
        this.entries_ = {};
        this.oldest_ = null;
        this.newest_ = null;
    }
    /**
   * @param {string} key Key.
   * @return {boolean} Contains key.
   */ containsKey(key) {
        return this.entries_.hasOwnProperty(key);
    }
    /**
   * @param {function(T, string, LRUCache<T>): ?} f The function
   *     to call for every entry from the oldest to the newer. This function takes
   *     3 arguments (the entry value, the entry key and the LRUCache object).
   *     The return value is ignored.
   */ forEach(f) {
        let entry = this.oldest_;
        while(entry){
            f(entry.value_, entry.key_, this);
            entry = entry.newer;
        }
    }
    /**
   * @param {string} key Key.
   * @param {*} [options] Options (reserved for subclasses).
   * @return {T} Value.
   */ get(key, options) {
        const entry = this.entries_[key];
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
        if (entry === this.newest_) return entry.value_;
        if (entry === this.oldest_) {
            this.oldest_ = /** @type {Entry} */ this.oldest_.newer;
            this.oldest_.older = null;
        } else {
            entry.newer.older = entry.older;
            entry.older.newer = entry.newer;
        }
        entry.newer = null;
        entry.older = this.newest_;
        this.newest_.newer = entry;
        this.newest_ = entry;
        return entry.value_;
    }
    /**
   * Remove an entry from the cache.
   * @param {string} key The entry key.
   * @return {T} The removed entry.
   */ remove(key) {
        const entry = this.entries_[key];
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
        if (entry === this.newest_) {
            this.newest_ = /** @type {Entry} */ entry.older;
            if (this.newest_) this.newest_.newer = null;
        } else if (entry === this.oldest_) {
            this.oldest_ = /** @type {Entry} */ entry.newer;
            if (this.oldest_) this.oldest_.older = null;
        } else {
            entry.newer.older = entry.older;
            entry.older.newer = entry.newer;
        }
        delete this.entries_[key];
        --this.count_;
        return entry.value_;
    }
    /**
   * @return {number} Count.
   */ getCount() {
        return this.count_;
    }
    /**
   * @return {Array<string>} Keys.
   */ getKeys() {
        const keys = new Array(this.count_);
        let i = 0;
        let entry;
        for(entry = this.newest_; entry; entry = entry.older)keys[i++] = entry.key_;
        return keys;
    }
    /**
   * @return {Array<T>} Values.
   */ getValues() {
        const values = new Array(this.count_);
        let i = 0;
        let entry;
        for(entry = this.newest_; entry; entry = entry.older)values[i++] = entry.value_;
        return values;
    }
    /**
   * @return {T} Last value.
   */ peekLast() {
        return this.oldest_.value_;
    }
    /**
   * @return {string} Last key.
   */ peekLastKey() {
        return this.oldest_.key_;
    }
    /**
   * Get the key of the newest item in the cache.  Throws if the cache is empty.
   * @return {string} The newest key.
   */ peekFirstKey() {
        return this.newest_.key_;
    }
    /**
   * Return an entry without updating least recently used time.
   * @param {string} key Key.
   * @return {T} Value.
   */ peek(key) {
        if (!this.containsKey(key)) return undefined;
        return this.entries_[key].value_;
    }
    /**
   * @return {T} value Value.
   */ pop() {
        const entry = this.oldest_;
        delete this.entries_[entry.key_];
        if (entry.newer) entry.newer.older = null;
        this.oldest_ = /** @type {Entry} */ entry.newer;
        if (!this.oldest_) this.newest_ = null;
        --this.count_;
        return entry.value_;
    }
    /**
   * @param {string} key Key.
   * @param {T} value Value.
   */ replace(key, value) {
        this.get(key); // update `newest_`
        this.entries_[key].value_ = value;
    }
    /**
   * @param {string} key Key.
   * @param {T} value Value.
   */ set(key, value) {
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
        const entry = {
            key_: key,
            newer: null,
            older: this.newest_,
            value_: value
        };
        if (!this.newest_) this.oldest_ = entry;
        else this.newest_.newer = entry;
        this.newest_ = entry;
        this.entries_[key] = entry;
        ++this.count_;
    }
    /**
   * Set a maximum number of entries for the cache.
   * @param {number} size Cache size.
   * @api
   */ setSize(size) {
        this.highWaterMark = size;
    }
}
var $c64d0b2511f865d8$export$2e2bcd8739ae039 = $c64d0b2511f865d8$var$LRUCache;


/**
 * @module ol/tilecoord
 */ /**
 * An array of three numbers representing the location of a tile in a tile
 * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
 * @typedef {Array<number>} TileCoord
 * @api
 */ /**
 * @param {number} z Z.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {TileCoord} [tileCoord] Tile coordinate.
 * @return {TileCoord} Tile coordinate.
 */ function $aaf15fb68ed4bc38$export$958e3e1a02eac4b6(z, x, y, tileCoord) {
    if (tileCoord !== undefined) {
        tileCoord[0] = z;
        tileCoord[1] = x;
        tileCoord[2] = y;
        return tileCoord;
    }
    return [
        z,
        x,
        y
    ];
}
function $aaf15fb68ed4bc38$export$92d0df0f1d25c63c(z, x, y) {
    return z + "/" + x + "/" + y;
}
function $aaf15fb68ed4bc38$export$a47fb462a08de82f(tileCoord) {
    return $aaf15fb68ed4bc38$export$92d0df0f1d25c63c(tileCoord[0], tileCoord[1], tileCoord[2]);
}
function $aaf15fb68ed4bc38$export$7f760414a8e3d2b5(tileKey) {
    const [z, x, y] = tileKey.substring(tileKey.lastIndexOf("/") + 1, tileKey.length).split(",").map(Number);
    return $aaf15fb68ed4bc38$export$92d0df0f1d25c63c(z, x, y);
}
function $aaf15fb68ed4bc38$export$a807b7874eb66454(key) {
    return key.split("/").map(Number);
}
function $aaf15fb68ed4bc38$export$d6af199866bfb566(tileCoord) {
    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
}
function $aaf15fb68ed4bc38$export$60bedf8e3e3c3dbe(tileCoord, tileGrid) {
    const z = tileCoord[0];
    const x = tileCoord[1];
    const y = tileCoord[2];
    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) return false;
    const tileRange = tileGrid.getFullTileRange(z);
    if (!tileRange) return true;
    return tileRange.containsXY(x, y);
}


class $a8929a8ee91614da$var$TileCache extends (0, $c64d0b2511f865d8$export$2e2bcd8739ae039) {
    clear() {
        while(this.getCount() > 0)this.pop().release();
        super.clear();
    }
    /**
   * @param {!Object<string, boolean>} usedTiles Used tiles.
   */ expireCache(usedTiles) {
        while(this.canExpireCache()){
            const tile = this.peekLast();
            if (tile.getKey() in usedTiles) break;
            else this.pop().release();
        }
    }
    /**
   * Prune all tiles from the cache that don't have the same z as the newest tile.
   */ pruneExceptNewestZ() {
        if (this.getCount() === 0) return;
        const key = this.peekFirstKey();
        const tileCoord = (0, $aaf15fb68ed4bc38$export$a807b7874eb66454)(key);
        const z = tileCoord[0];
        this.forEach((tile)=>{
            if (tile.tileCoord[0] !== z) {
                this.remove((0, $aaf15fb68ed4bc38$export$a47fb462a08de82f)(tile.tileCoord));
                tile.release();
            }
        });
    }
}
var $a8929a8ee91614da$export$2e2bcd8739ae039 = $a8929a8ee91614da$var$TileCache;



/**
 * @module ol/source/UrlTile
 */ /**
 * @module ol/source/TileEventType
 */ /**
 * @enum {string}
 */ var $a657cf380ee14294$export$2e2bcd8739ae039 /**
 * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes
 */  = {
    /**
   * Triggered when a tile starts loading.
   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
   * @api
   */ TILELOADSTART: "tileloadstart",
    /**
   * Triggered when a tile finishes loading, either when its data is loaded,
   * or when loading was aborted because the tile is no longer needed.
   * @event module:ol/source/Tile.TileSourceEvent#tileloadend
   * @api
   */ TILELOADEND: "tileloadend",
    /**
   * Triggered if tile loading results in an error. Note that this is not the
   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}
   * for details.
   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
   * @api
   */ TILELOADERROR: "tileloaderror"
};


/**
 * @module ol/source/Tile
 */ 







/**
 * @module ol/tilegrid
 */ /**
 * @module ol/tilegrid/TileGrid
 */ 








/**
 * @private
 * @type {import("../tilecoord.js").TileCoord}
 */ const $4c1b5c80c3c7e528$var$tmpTileCoord = [
    0,
    0,
    0
];
/**
 * Number of decimal digits to consider in integer values when rounding.
 * @type {number}
 */ const $4c1b5c80c3c7e528$var$DECIMALS = 5;
/**
 * @typedef {Object} Options
 * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
 * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or
 * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
 * @property {number} [minZoom=0] Minimum zoom.
 * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
 * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
 * specified, `extent` or `origins` must be provided.
 * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
 * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
 * should match the length of the `resolutions` array, i.e. each resolution can have a different
 * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
 * `origin` must be provided.
 * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
 * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
 * array will have a length of `maxZoom + 1`.
 * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
 * of the grid for each zoom level. If specified the values
 * define each zoom level's extent together with the `origin` or `origins`.
 * A grid `extent` can be configured in addition, and will further limit the extent
 * for which tile requests are made by sources. If the bottom-left corner of
 * an extent is used as `origin` or `origins`, then the `y` value must be
 * negative because OpenLayers tile coordinates use the top left as the origin.
 * @property {number|import("../size.js").Size} [tileSize] Tile size.
 * Default is `[256, 256]`.
 * @property {Array<number|import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
 * should match the length of the `resolutions` array, i.e. each resolution can have a different
 * tile size.
 */ /**
 * @classdesc
 * Base class for setting the grid pattern for sources accessing tiled-image
 * servers.
 * @api
 */ class $4c1b5c80c3c7e528$var$TileGrid {
    /**
   * @param {Options} options Tile grid options.
   */ constructor(options){
        /**
     * @protected
     * @type {number}
     */ this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;
        /**
     * @private
     * @type {!Array<number>}
     */ this.resolutions_ = options.resolutions;
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)((0, $69c1cc8ae30f997f$export$efa610630f9e181)(this.resolutions_, function(a, b) {
            return b - a;
        }, true), 17); // `resolutions` must be sorted in descending order
        // check if we've got a consistent zoom factor and origin
        let zoomFactor;
        if (!options.origins) for(let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i){
            if (!zoomFactor) zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
            else if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
                zoomFactor = undefined;
                break;
            }
        }
        /**
     * @private
     * @type {number|undefined}
     */ this.zoomFactor_ = zoomFactor;
        /**
     * @protected
     * @type {number}
     */ this.maxZoom = this.resolutions_.length - 1;
        /**
     * @private
     * @type {import("../coordinate.js").Coordinate|null}
     */ this.origin_ = options.origin !== undefined ? options.origin : null;
        /**
     * @private
     * @type {Array<import("../coordinate.js").Coordinate>}
     */ this.origins_ = null;
        if (options.origins !== undefined) {
            this.origins_ = options.origins;
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
        }
        const extent = options.extent;
        if (extent !== undefined && !this.origin_ && !this.origins_) this.origin_ = (0, $84be800ca44e672c$export$cb1538b07e6964ff)(extent);
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both
        /**
     * @private
     * @type {Array<number|import("../size.js").Size>}
     */ this.tileSizes_ = null;
        if (options.tileSizes !== undefined) {
            this.tileSizes_ = options.tileSizes;
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
        }
        /**
     * @private
     * @type {number|import("../size.js").Size}
     */ this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? (0, $a96901ad7de10b0c$export$6b8cb5cd370bd90c) : null;
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both
        /**
     * @private
     * @type {import("../extent.js").Extent}
     */ this.extent_ = extent !== undefined ? extent : null;
        /**
     * @private
     * @type {Array<import("../TileRange.js").default>}
     */ this.fullTileRanges_ = null;
        /**
     * @private
     * @type {import("../size.js").Size}
     */ this.tmpSize_ = [
            0,
            0
        ];
        /**
     * @private
     * @type {import("../extent.js").Extent}
     */ this.tmpExtent_ = [
            0,
            0,
            0,
            0
        ];
        if (options.sizes !== undefined) this.fullTileRanges_ = options.sizes.map(function(size, z) {
            const tileRange = new (0, $35236bccfd8a82eb$export$2e2bcd8739ae039)(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));
            if (extent) {
                const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);
                tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);
                tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);
                tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);
                tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);
            }
            return tileRange;
        }, this);
        else if (extent) this.calculateTileRanges_(extent);
    }
    /**
   * Call a function with each tile coordinate for a given extent and zoom level.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} zoom Integer zoom level.
   * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
   * @api
   */ forEachTileCoord(extent, zoom, callback) {
        const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
        for(let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i)for(let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j)callback([
            zoom,
            i,
            j
        ]);
    }
    /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
   * @return {boolean} Callback succeeded.
   */ forEachTileCoordParentTileRange(tileCoord, callback, tempTileRange, tempExtent) {
        let tileRange, x, y;
        let tileCoordExtent = null;
        let z = tileCoord[0] - 1;
        if (this.zoomFactor_ === 2) {
            x = tileCoord[1];
            y = tileCoord[2];
        } else tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);
        while(z >= this.minZoom){
            if (this.zoomFactor_ === 2) {
                x = Math.floor(x / 2);
                y = Math.floor(y / 2);
                tileRange = (0, $35236bccfd8a82eb$export$958e3e1a02eac4b6)(x, x, y, y, tempTileRange);
            } else tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);
            if (callback(z, tileRange)) return true;
            --z;
        }
        return false;
    }
    /**
   * Get the extent for this tile grid, if it was configured.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */ getExtent() {
        return this.extent_;
    }
    /**
   * Get the maximum zoom level for the grid.
   * @return {number} Max zoom.
   * @api
   */ getMaxZoom() {
        return this.maxZoom;
    }
    /**
   * Get the minimum zoom level for the grid.
   * @return {number} Min zoom.
   * @api
   */ getMinZoom() {
        return this.minZoom;
    }
    /**
   * Get the origin for the grid at the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {import("../coordinate.js").Coordinate} Origin.
   * @api
   */ getOrigin(z) {
        if (this.origin_) return this.origin_;
        return this.origins_[z];
    }
    /**
   * Get the resolution for the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {number} Resolution.
   * @api
   */ getResolution(z) {
        return this.resolutions_[z];
    }
    /**
   * Get the list of resolutions for the tile grid.
   * @return {Array<number>} Resolutions.
   * @api
   */ getResolutions() {
        return this.resolutions_;
    }
    /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
   * @return {import("../TileRange.js").default|null} Tile range.
   */ getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {
        if (tileCoord[0] < this.maxZoom) {
            if (this.zoomFactor_ === 2) {
                const minX = tileCoord[1] * 2;
                const minY = tileCoord[2] * 2;
                return (0, $35236bccfd8a82eb$export$958e3e1a02eac4b6)(minX, minX + 1, minY, minY + 1, tempTileRange);
            }
            const tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent || this.tmpExtent_);
            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, tempTileRange);
        }
        return null;
    }
    /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
   * @return {import("../TileRange.js").default|null} Tile range.
   */ getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {
        if (z > this.maxZoom || z < this.minZoom) return null;
        const tileCoordZ = tileCoord[0];
        const tileCoordX = tileCoord[1];
        const tileCoordY = tileCoord[2];
        if (z === tileCoordZ) return (0, $35236bccfd8a82eb$export$958e3e1a02eac4b6)(tileCoordX, tileCoordY, tileCoordX, tileCoordY, tempTileRange);
        if (this.zoomFactor_) {
            const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);
            const minX = Math.floor(tileCoordX * factor);
            const minY = Math.floor(tileCoordY * factor);
            if (z < tileCoordZ) return (0, $35236bccfd8a82eb$export$958e3e1a02eac4b6)(minX, minX, minY, minY, tempTileRange);
            const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;
            const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;
            return (0, $35236bccfd8a82eb$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);
        }
        const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);
        return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);
    }
    /**
   * Get a tile range for the given extent and integer zoom level.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default} [tempTileRange] Temporary tile range object.
   * @return {import("../TileRange.js").default} Tile range.
   */ getTileRangeForExtentAndZ(extent, z, tempTileRange) {
        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, $4c1b5c80c3c7e528$var$tmpTileCoord);
        const minX = $4c1b5c80c3c7e528$var$tmpTileCoord[1];
        const minY = $4c1b5c80c3c7e528$var$tmpTileCoord[2];
        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, $4c1b5c80c3c7e528$var$tmpTileCoord);
        const maxX = $4c1b5c80c3c7e528$var$tmpTileCoord[1];
        const maxY = $4c1b5c80c3c7e528$var$tmpTileCoord[2];
        return (0, $35236bccfd8a82eb$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);
    }
    /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {import("../coordinate.js").Coordinate} Tile center.
   */ getTileCoordCenter(tileCoord) {
        const origin = this.getOrigin(tileCoord[0]);
        const resolution = this.getResolution(tileCoord[0]);
        const tileSize = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);
        return [
            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution
        ];
    }
    /**
   * Get the extent of a tile coordinate.
   *
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../extent.js").Extent} [tempExtent] Temporary extent object.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */ getTileCoordExtent(tileCoord, tempExtent) {
        const origin = this.getOrigin(tileCoord[0]);
        const resolution = this.getResolution(tileCoord[0]);
        const tileSize = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);
        const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
        const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
        const maxX = minX + tileSize[0] * resolution;
        const maxY = minY + tileSize[1] * resolution;
        return (0, $84be800ca44e672c$export$958e3e1a02eac4b6)(minX, minY, maxX, maxY, tempExtent);
    }
    /**
   * Get the tile coordinate for the given map coordinate and resolution.  This
   * method considers that coordinates that intersect tile boundaries should be
   * assigned the higher tile coordinate.
   *
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} resolution Resolution.
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */ getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {
        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
    }
    /**
   * Note that this method should not be called for resolutions that correspond
   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} resolution Resolution (for a non-integer zoom level).
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *     intersections go to the higher tile coordinate, let edge intersections
   *     go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */ getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
        const z = this.getZForResolution(resolution);
        const scale = resolution / this.getResolution(z);
        const origin = this.getOrigin(z);
        const tileSize = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);
        let tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];
        let tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];
        if (reverseIntersectionPolicy) {
            tileCoordX = (0, $57ec69d152197e1d$export$803ce6b71a0a94b2)(tileCoordX, $4c1b5c80c3c7e528$var$DECIMALS) - 1;
            tileCoordY = (0, $57ec69d152197e1d$export$803ce6b71a0a94b2)(tileCoordY, $4c1b5c80c3c7e528$var$DECIMALS) - 1;
        } else {
            tileCoordX = (0, $57ec69d152197e1d$export$a3fe094919f356fd)(tileCoordX, $4c1b5c80c3c7e528$var$DECIMALS);
            tileCoordY = (0, $57ec69d152197e1d$export$a3fe094919f356fd)(tileCoordY, $4c1b5c80c3c7e528$var$DECIMALS);
        }
        return (0, $aaf15fb68ed4bc38$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);
    }
    /**
   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
   * they should have separate implementations.  This method is for integer zoom
   * levels.  The other method should only be called for resolutions corresponding
   * to non-integer zoom levels.
   * @param {number} x Map x coordinate.
   * @param {number} y Map y coordinate.
   * @param {number} z Integer zoom level.
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *     intersections go to the higher tile coordinate, let edge intersections
   *     go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */ getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
        const origin = this.getOrigin(z);
        const resolution = this.getResolution(z);
        const tileSize = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);
        let tileCoordX = (x - origin[0]) / resolution / tileSize[0];
        let tileCoordY = (origin[1] - y) / resolution / tileSize[1];
        if (reverseIntersectionPolicy) {
            tileCoordX = (0, $57ec69d152197e1d$export$803ce6b71a0a94b2)(tileCoordX, $4c1b5c80c3c7e528$var$DECIMALS) - 1;
            tileCoordY = (0, $57ec69d152197e1d$export$803ce6b71a0a94b2)(tileCoordY, $4c1b5c80c3c7e528$var$DECIMALS) - 1;
        } else {
            tileCoordX = (0, $57ec69d152197e1d$export$a3fe094919f356fd)(tileCoordX, $4c1b5c80c3c7e528$var$DECIMALS);
            tileCoordY = (0, $57ec69d152197e1d$export$a3fe094919f356fd)(tileCoordY, $4c1b5c80c3c7e528$var$DECIMALS);
        }
        return (0, $aaf15fb68ed4bc38$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);
    }
    /**
   * Get a tile coordinate given a map coordinate and zoom level.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} z Zoom level.
   * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */ getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {
        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);
    }
    /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {number} Tile resolution.
   */ getTileCoordResolution(tileCoord) {
        return this.resolutions_[tileCoord[0]];
    }
    /**
   * Get the tile size for a zoom level. The type of the return value matches the
   * `tileSize` or `tileSizes` that the tile grid was configured with. To always
   * get an {@link import("../size.js").Size}, run the result through {@link module:ol/size.toSize}.
   * @param {number} z Z.
   * @return {number|import("../size.js").Size} Tile size.
   * @api
   */ getTileSize(z) {
        if (this.tileSize_) return this.tileSize_;
        return this.tileSizes_[z];
    }
    /**
   * @param {number} z Zoom level.
   * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
   */ getFullTileRange(z) {
        if (!this.fullTileRanges_) return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;
        return this.fullTileRanges_[z];
    }
    /**
   * @param {number} resolution Resolution.
   * @param {number|import("../array.js").NearestDirectionFunction} [opt_direction]
   *     If 0, the nearest resolution will be used.
   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the
   *     nearest lower resolution (higher Z) will be used. Default is 0.
   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.
   *
   * For example to change tile Z at the midpoint of zoom levels
   * ```js
   * function(value, high, low) {
   *   return value - low * Math.sqrt(high / low);
   * }
   * ```
   * @return {number} Z.
   * @api
   */ getZForResolution(resolution, opt_direction) {
        const z = (0, $69c1cc8ae30f997f$export$8a3786cc03fdb777)(this.resolutions_, resolution, opt_direction || 0);
        return (0, $57ec69d152197e1d$export$7d15b64cf5a3a4c4)(z, this.minZoom, this.maxZoom);
    }
    /**
   * The tile with the provided tile coordinate intersects the given viewport.
   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.
   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.
   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.
   */ tileCoordIntersectsViewport(tileCoord, viewport) {
        return (0, $474e660540ba37db$export$830a0dafbb2ef1c5)(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));
    }
    /**
   * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
   * @private
   */ calculateTileRanges_(extent) {
        const length = this.resolutions_.length;
        const fullTileRanges = new Array(length);
        for(let z = this.minZoom; z < length; ++z)fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
        this.fullTileRanges_ = fullTileRanges;
    }
}
var $4c1b5c80c3c7e528$export$2e2bcd8739ae039 = $4c1b5c80c3c7e528$var$TileGrid;






function $2592d561440d896c$export$1f4812384df8a9c5(projection) {
    let tileGrid = projection.getDefaultTileGrid();
    if (!tileGrid) {
        tileGrid = $2592d561440d896c$export$a251b12f5601c16f(projection);
        projection.setDefaultTileGrid(tileGrid);
    }
    return tileGrid;
}
function $2592d561440d896c$export$39a9ce3624977b84(tileGrid, tileCoord, projection) {
    const z = tileCoord[0];
    const center = tileGrid.getTileCoordCenter(tileCoord);
    const projectionExtent = $2592d561440d896c$export$7b5b6ef8fd55fac4(projection);
    if (!(0, $84be800ca44e672c$export$ac68c24d37ca240f)(projectionExtent, center)) {
        const worldWidth = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(projectionExtent);
        const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
        center[0] += worldWidth * worldsAway;
        return tileGrid.getTileCoordForCoordAndZ(center, z);
    }
    return tileCoord;
}
function $2592d561440d896c$export$ce88871416242df8(extent, maxZoom, tileSize, corner) {
    corner = corner !== undefined ? corner : "top-left";
    const resolutions = $2592d561440d896c$var$resolutionsFromExtent(extent, maxZoom, tileSize);
    return new (0, $4c1b5c80c3c7e528$export$2e2bcd8739ae039)({
        extent: extent,
        origin: (0, $84be800ca44e672c$export$a1cfd206661d0801)(extent, corner),
        resolutions: resolutions,
        tileSize: tileSize
    });
}
function $2592d561440d896c$export$38500bbeccc864ff(options) {
    const xyzOptions = options || {};
    const extent = xyzOptions.extent || (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)("EPSG:3857").getExtent();
    const gridOptions = {
        extent: extent,
        minZoom: xyzOptions.minZoom,
        tileSize: xyzOptions.tileSize,
        resolutions: $2592d561440d896c$var$resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)
    };
    return new (0, $4c1b5c80c3c7e528$export$2e2bcd8739ae039)(gridOptions);
}
/**
 * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
 * @param {import("./extent.js").Extent} extent Extent.
 * @param {number} [maxZoom] Maximum zoom level (default is
 *     DEFAULT_MAX_ZOOM).
 * @param {number|import("./size.js").Size} [tileSize] Tile size (default uses
 *     DEFAULT_TILE_SIZE).
 * @param {number} [maxResolution] Resolution at level zero.
 * @return {!Array<number>} Resolutions array.
 */ function $2592d561440d896c$var$resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {
    maxZoom = maxZoom !== undefined ? maxZoom : (0, $a96901ad7de10b0c$export$e98a216cdcc847dc);
    tileSize = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(tileSize !== undefined ? tileSize : (0, $a96901ad7de10b0c$export$6b8cb5cd370bd90c));
    const height = (0, $84be800ca44e672c$export$c08559766941f856)(extent);
    const width = (0, $84be800ca44e672c$export$3c49c185de0c2bfc)(extent);
    maxResolution = maxResolution > 0 ? maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);
    const length = maxZoom + 1;
    const resolutions = new Array(length);
    for(let z = 0; z < length; ++z)resolutions[z] = maxResolution / Math.pow(2, z);
    return resolutions;
}
function $2592d561440d896c$export$a251b12f5601c16f(projection, maxZoom, tileSize, corner) {
    const extent = $2592d561440d896c$export$7b5b6ef8fd55fac4(projection);
    return $2592d561440d896c$export$ce88871416242df8(extent, maxZoom, tileSize, corner);
}
function $2592d561440d896c$export$7b5b6ef8fd55fac4(projection) {
    projection = (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(projection);
    let extent = projection.getExtent();
    if (!extent) {
        const half = 180 * (0, $6a4fde186e5464e9$export$1482081eec883108).degrees / projection.getMetersPerUnit();
        extent = (0, $84be800ca44e672c$export$958e3e1a02eac4b6)(-half, -half, half, half);
    }
    return extent;
}



/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("./TileEventType").TileSourceEventTypes, TileSourceEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     import("./TileEventType").TileSourceEventTypes, Return>} TileSourceOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] CacheSize.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {number} [tilePixelRatio] TilePixelRatio.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection.
 * @property {import("./Source.js").State} [state] State.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
 * @property {boolean} [wrapX=false] WrapX.
 * @property {number} [transition] Transition.
 * @property {string} [key] Key.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for sources providing images divided into a tile grid.
 * @abstract
 * @api
 */ class $6af8a8c26f5fd516$var$TileSource extends (0, $3a045db4be96b02c$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options SourceTile source options.
   */ constructor(options){
        super({
            attributions: options.attributions,
            attributionsCollapsible: options.attributionsCollapsible,
            projection: options.projection,
            state: options.state,
            wrapX: options.wrapX,
            interpolate: options.interpolate
        });
        /***
     * @type {TileSourceOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {TileSourceOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {TileSourceOnSignature<void>}
     */ this.un;
        /**
     * @private
     * @type {boolean}
     */ this.opaque_ = options.opaque !== undefined ? options.opaque : false;
        /**
     * @private
     * @type {number}
     */ this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;
        /**
     * @type {import("../tilegrid/TileGrid.js").default|null}
     */ this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;
        const tileSize = [
            256,
            256
        ];
        if (this.tileGrid) (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);
        /**
     * @protected
     * @type {import("../TileCache.js").default}
     */ this.tileCache = new (0, $a8929a8ee91614da$export$2e2bcd8739ae039)(options.cacheSize || 0);
        /**
     * @protected
     * @type {import("../size.js").Size}
     */ this.tmpSize = [
            0,
            0
        ];
        /**
     * @private
     * @type {string}
     */ this.key_ = options.key || "";
        /**
     * @protected
     * @type {import("../Tile.js").Options}
     */ this.tileOptions = {
            transition: options.transition,
            interpolate: options.interpolate
        };
        /**
     * zDirection hint, read by the renderer. Indicates which resolution should be used
     * by a renderer if the views resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     * @type {number|import("../array.js").NearestDirectionFunction}
     */ this.zDirection = options.zDirection ? options.zDirection : 0;
    }
    /**
   * @return {boolean} Can expire cache.
   */ canExpireCache() {
        return this.tileCache.canExpireCache();
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {!Object<string, boolean>} usedTiles Used tiles.
   */ expireCache(projection, usedTiles) {
        const tileCache = this.getTileCacheForProjection(projection);
        if (tileCache) tileCache.expireCache(usedTiles);
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {number} z Zoom level.
   * @param {import("../TileRange.js").default} tileRange Tile range.
   * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
   *     loaded tile.  If the callback returns `false`, the tile will not be
   *     considered loaded.
   * @return {boolean} The tile range is fully covered with loaded tiles.
   */ forEachLoadedTile(projection, z, tileRange, callback) {
        const tileCache = this.getTileCacheForProjection(projection);
        if (!tileCache) return false;
        let covered = true;
        let tile, tileCoordKey, loaded;
        for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){
            tileCoordKey = (0, $aaf15fb68ed4bc38$export$92d0df0f1d25c63c)(z, x, y);
            loaded = false;
            if (tileCache.containsKey(tileCoordKey)) {
                tile = /** @type {!import("../Tile.js").default} */ tileCache.get(tileCoordKey);
                loaded = tile.getState() === (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED;
                if (loaded) loaded = callback(tile) !== false;
            }
            if (!loaded) covered = false;
        }
        return covered;
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {number} Gutter.
   */ getGutterForProjection(projection) {
        return 0;
    }
    /**
   * Return the key to be used for all tiles in the source.
   * @return {string} The key for all tiles.
   */ getKey() {
        return this.key_;
    }
    /**
   * Set the value to be used as the key for all tiles in the source.
   * @param {string} key The key for tiles.
   * @protected
   */ setKey(key) {
        if (this.key_ !== key) {
            this.key_ = key;
            this.changed();
        }
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {boolean} Opaque.
   */ getOpaque(projection) {
        return this.opaque_;
    }
    /**
   * @param {import("../proj/Projection").default} [projection] Projection.
   * @return {Array<number>|null} Resolutions.
   */ getResolutions(projection) {
        const tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;
        if (!tileGrid) return null;
        return tileGrid.getResolutions();
    }
    /**
   * @abstract
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!import("../Tile.js").default} Tile.
   */ getTile(z, x, y, pixelRatio, projection) {
        return (0, $ae7eaaa2c9c1e05d$export$817eb92a8194bab0)();
    }
    /**
   * Return the tile grid of the tile source.
   * @return {import("../tilegrid/TileGrid.js").default|null} Tile grid.
   * @api
   */ getTileGrid() {
        return this.tileGrid;
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
   */ getTileGridForProjection(projection) {
        if (!this.tileGrid) return (0, $2592d561440d896c$export$1f4812384df8a9c5)(projection);
        return this.tileGrid;
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../TileCache.js").default} Tile cache.
   * @protected
   */ getTileCacheForProjection(projection) {
        const sourceProjection = this.getProjection();
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(sourceProjection === null || (0, $983289ae1d13cd2a$export$fe091d73a555748b)(sourceProjection, projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.
        );
        return this.tileCache;
    }
    /**
   * Get the tile pixel ratio for this source. Subclasses may override this
   * method, which is meant to return a supported pixel ratio that matches the
   * provided `pixelRatio` as close as possible.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Tile pixel ratio.
   */ getTilePixelRatio(pixelRatio) {
        return this.tilePixelRatio_;
    }
    /**
   * @param {number} z Z.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../size.js").Size} Tile size.
   */ getTilePixelSize(z, pixelRatio, projection) {
        const tileGrid = this.getTileGridForProjection(projection);
        const tilePixelRatio = this.getTilePixelRatio(pixelRatio);
        const tileSize = (0, $3db00eb0a4716cab$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z), this.tmpSize);
        if (tilePixelRatio == 1) return tileSize;
        return (0, $3db00eb0a4716cab$export$dcdf75081b88279d)(tileSize, tilePixelRatio, this.tmpSize);
    }
    /**
   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
   * is outside the resolution and extent range of the tile grid, `null` will be
   * returned.
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../proj/Projection.js").default} [projection] Projection.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
   *     null if no tile URL should be created for the passed `tileCoord`.
   */ getTileCoordForTileUrlFunction(tileCoord, projection) {
        projection = projection !== undefined ? projection : this.getProjection();
        const tileGrid = this.getTileGridForProjection(projection);
        if (this.getWrapX() && projection.isGlobal()) tileCoord = (0, $2592d561440d896c$export$39a9ce3624977b84)(tileGrid, tileCoord, projection);
        return (0, $aaf15fb68ed4bc38$export$60bedf8e3e3c3dbe)(tileCoord, tileGrid) ? tileCoord : null;
    }
    /**
   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
   * @api
   */ clear() {
        this.tileCache.clear();
    }
    refresh() {
        this.clear();
        super.refresh();
    }
    /**
   * Increases the cache size if needed
   * @param {number} tileCount Minimum number of tiles needed.
   * @param {import("../proj/Projection.js").default} projection Projection.
   */ updateCacheSize(tileCount, projection) {
        const tileCache = this.getTileCacheForProjection(projection);
        if (tileCount > tileCache.highWaterMark) tileCache.highWaterMark = tileCount;
    }
    /**
   * Marks a tile coord as being used, without triggering a load.
   * @abstract
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {import("../proj/Projection.js").default} projection Projection.
   */ useTile(z, x, y, projection) {}
}
class $6af8a8c26f5fd516$export$c571855c51e6c4b6 extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {string} type Type.
   * @param {import("../Tile.js").default} tile The tile.
   */ constructor(type, tile){
        super(type);
        /**
     * The tile related to the event.
     * @type {import("../Tile.js").default}
     * @api
     */ this.tile = tile;
    }
}
var $6af8a8c26f5fd516$export$2e2bcd8739ae039 = $6af8a8c26f5fd516$var$TileSource;



/**
 * @module ol/tileurlfunction
 */ 


function $bd26167db2be2a96$export$f0ecb46e90798741(template, tileGrid) {
    const zRegEx = /\{z\}/g;
    const xRegEx = /\{x\}/g;
    const yRegEx = /\{y\}/g;
    const dashYRegEx = /\{-y\}/g;
    return(/**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */ function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) return undefined;
        return template.replace(zRegEx, tileCoord[0].toString()).replace(xRegEx, tileCoord[1].toString()).replace(yRegEx, tileCoord[2].toString()).replace(dashYRegEx, function() {
            const z = tileCoord[0];
            const range = tileGrid.getFullTileRange(z);
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(range, 55); // The {-y} placeholder requires a tile grid with extent
            const y = range.getHeight() - tileCoord[2] - 1;
            return y.toString();
        });
    });
}
function $bd26167db2be2a96$export$436f44dbcc31fea3(templates, tileGrid) {
    const len = templates.length;
    const tileUrlFunctions = new Array(len);
    for(let i = 0; i < len; ++i)tileUrlFunctions[i] = $bd26167db2be2a96$export$f0ecb46e90798741(templates[i], tileGrid);
    return $bd26167db2be2a96$export$4229b1d9af69b3be(tileUrlFunctions);
}
function $bd26167db2be2a96$export$4229b1d9af69b3be(tileUrlFunctions) {
    if (tileUrlFunctions.length === 1) return tileUrlFunctions[0];
    return(/**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */ function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) return undefined;
        const h = (0, $aaf15fb68ed4bc38$export$d6af199866bfb566)(tileCoord);
        const index = (0, $57ec69d152197e1d$export$ba467bec01d66def)(h, tileUrlFunctions.length);
        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
    });
}
function $bd26167db2be2a96$export$fab585f002f634a1(tileCoord, pixelRatio, projection) {
    return undefined;
}
function $bd26167db2be2a96$export$2a1fa079bfd73dde(url) {
    const urls = [];
    let match = /\{([a-z])-([a-z])\}/.exec(url);
    if (match) {
        // char range
        const startCharCode = match[1].charCodeAt(0);
        const stopCharCode = match[2].charCodeAt(0);
        let charCode;
        for(charCode = startCharCode; charCode <= stopCharCode; ++charCode)urls.push(url.replace(match[0], String.fromCharCode(charCode)));
        return urls;
    }
    match = /\{(\d+)-(\d+)\}/.exec(url);
    if (match) {
        // number range
        const stop = parseInt(match[2], 10);
        for(let i = parseInt(match[1], 10); i <= stop; i++)urls.push(url.replace(match[0], i.toString()));
        return urls;
    }
    urls.push(url);
    return urls;
}




/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] Cache size.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection.
 * @property {import("./Source.js").State} [state] State.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
 * @property {import("../Tile.js").LoadFunction} tileLoadFunction TileLoadFunction.
 * @property {number} [tilePixelRatio] TilePixelRatio.
 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] TileUrlFunction.
 * @property {string} [url] Url.
 * @property {Array<string>} [urls] Urls.
 * @property {boolean} [wrapX=true] WrapX.
 * @property {number} [transition] Transition.
 * @property {string} [key] Key.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 */ /**
 * @classdesc
 * Base class for sources providing tiles divided into a tile grid over http.
 *
 * @fires import("./Tile.js").TileSourceEvent
 */ class $3c628e44f46a5070$var$UrlTile extends (0, $6af8a8c26f5fd516$export$2e2bcd8739ae039) {
    /**
   * @param {Options} options Image tile options.
   */ constructor(options){
        super({
            attributions: options.attributions,
            cacheSize: options.cacheSize,
            opaque: options.opaque,
            projection: options.projection,
            state: options.state,
            tileGrid: options.tileGrid,
            tilePixelRatio: options.tilePixelRatio,
            wrapX: options.wrapX,
            transition: options.transition,
            interpolate: options.interpolate,
            key: options.key,
            attributionsCollapsible: options.attributionsCollapsible,
            zDirection: options.zDirection
        });
        /**
     * @private
     * @type {boolean}
     */ this.generateTileUrlFunction_ = this.tileUrlFunction === $3c628e44f46a5070$var$UrlTile.prototype.tileUrlFunction;
        /**
     * @protected
     * @type {import("../Tile.js").LoadFunction}
     */ this.tileLoadFunction = options.tileLoadFunction;
        if (options.tileUrlFunction) this.tileUrlFunction = options.tileUrlFunction;
        /**
     * @protected
     * @type {!Array<string>|null}
     */ this.urls = null;
        if (options.urls) this.setUrls(options.urls);
        else if (options.url) this.setUrl(options.url);
        /**
     * @private
     * @type {!Object<string, boolean>}
     */ this.tileLoadingKeys_ = {};
    }
    /**
   * Return the tile load function of the source.
   * @return {import("../Tile.js").LoadFunction} TileLoadFunction
   * @api
   */ getTileLoadFunction() {
        return this.tileLoadFunction;
    }
    /**
   * Return the tile URL function of the source.
   * @return {import("../Tile.js").UrlFunction} TileUrlFunction
   * @api
   */ getTileUrlFunction() {
        return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;
    }
    /**
   * Return the URLs used for this source.
   * When a tileUrlFunction is used instead of url or urls,
   * null will be returned.
   * @return {!Array<string>|null} URLs.
   * @api
   */ getUrls() {
        return this.urls;
    }
    /**
   * Handle tile change events.
   * @param {import("../events/Event.js").default} event Event.
   * @protected
   */ handleTileChange(event) {
        const tile = /** @type {import("../Tile.js").default} */ event.target;
        const uid = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(tile);
        const tileState = tile.getState();
        let type;
        if (tileState == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADING) {
            this.tileLoadingKeys_[uid] = true;
            type = (0, $a657cf380ee14294$export$2e2bcd8739ae039).TILELOADSTART;
        } else if (uid in this.tileLoadingKeys_) {
            delete this.tileLoadingKeys_[uid];
            type = tileState == (0, $713feb195c3fd859$export$2e2bcd8739ae039).ERROR ? (0, $a657cf380ee14294$export$2e2bcd8739ae039).TILELOADERROR : tileState == (0, $713feb195c3fd859$export$2e2bcd8739ae039).LOADED ? (0, $a657cf380ee14294$export$2e2bcd8739ae039).TILELOADEND : undefined;
        }
        if (type != undefined) this.dispatchEvent(new (0, $6af8a8c26f5fd516$export$c571855c51e6c4b6)(type, tile));
    }
    /**
   * Set the tile load function of the source.
   * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
   * @api
   */ setTileLoadFunction(tileLoadFunction) {
        this.tileCache.clear();
        this.tileLoadFunction = tileLoadFunction;
        this.changed();
    }
    /**
   * Set the tile URL function of the source.
   * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
   * @param {string} [key] Optional new tile key for the source.
   * @api
   */ setTileUrlFunction(tileUrlFunction, key) {
        this.tileUrlFunction = tileUrlFunction;
        this.tileCache.pruneExceptNewestZ();
        if (typeof key !== "undefined") this.setKey(key);
        else this.changed();
    }
    /**
   * Set the URL to use for requests.
   * @param {string} url URL.
   * @api
   */ setUrl(url) {
        const urls = (0, $bd26167db2be2a96$export$2a1fa079bfd73dde)(url);
        this.urls = urls;
        this.setUrls(urls);
    }
    /**
   * Set the URLs to use for requests.
   * @param {Array<string>} urls URLs.
   * @api
   */ setUrls(urls) {
        this.urls = urls;
        const key = urls.join("\n");
        if (this.generateTileUrlFunction_) this.setTileUrlFunction((0, $bd26167db2be2a96$export$436f44dbcc31fea3)(urls, this.tileGrid), key);
        else this.setKey(key);
    }
    /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {string|undefined} Tile URL.
   */ tileUrlFunction(tileCoord, pixelRatio, projection) {
        return undefined;
    }
    /**
   * Marks a tile coord as being used, without triggering a load.
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   */ useTile(z, x, y) {
        const tileCoordKey = (0, $aaf15fb68ed4bc38$export$92d0df0f1d25c63c)(z, x, y);
        if (this.tileCache.containsKey(tileCoordKey)) this.tileCache.get(tileCoordKey);
    }
}
var $3c628e44f46a5070$export$2e2bcd8739ae039 = $3c628e44f46a5070$var$UrlTile;






/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {import("./Source.js").State} [state] Source state.
 * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
 * Default is {@link module:ol/ImageTile~ImageTile}.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
 * service advertizes 256px by 256px tiles but actually sends 512px
 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
 * should be set to `2`.
 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
 * used instead of defining each one separately in the `urls` option.
 * @property {Array<string>} [urls] An array of URL templates.
 * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
 * request out-of-bounds tiles from the server. When set to `false`, only one
 * world will be rendered. When set to `true`, tiles will be requested for one
 * world only, but they will be wrapped horizontally to render multiple worlds.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 * @property {string} [key] Optional tile key for proper cache fetching
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
 * Choose whether to use tiles with a higher or lower zoom level when between integer
 * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
 */ /**
 * @classdesc
 * Base class for sources providing images divided into a tile grid.
 *
 * @fires import("./Tile.js").TileSourceEvent
 * @api
 */ class $03416dad2946ba1d$var$TileImage extends (0, $3c628e44f46a5070$export$2e2bcd8739ae039) {
    /**
   * @param {!Options} options Image tile options.
   */ constructor(options){
        super({
            attributions: options.attributions,
            cacheSize: options.cacheSize,
            opaque: options.opaque,
            projection: options.projection,
            state: options.state,
            tileGrid: options.tileGrid,
            tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : $03416dad2946ba1d$var$defaultTileLoadFunction,
            tilePixelRatio: options.tilePixelRatio,
            tileUrlFunction: options.tileUrlFunction,
            url: options.url,
            urls: options.urls,
            wrapX: options.wrapX,
            transition: options.transition,
            interpolate: options.interpolate !== undefined ? options.interpolate : true,
            key: options.key,
            attributionsCollapsible: options.attributionsCollapsible,
            zDirection: options.zDirection
        });
        /**
     * @protected
     * @type {?string}
     */ this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;
        /**
     * @protected
     * @type {typeof ImageTile}
     */ this.tileClass = options.tileClass !== undefined ? options.tileClass : (0, $0abdbb86e416a014$export$2e2bcd8739ae039);
        /**
     * @protected
     * @type {!Object<string, TileCache>}
     */ this.tileCacheForProjection = {};
        /**
     * @protected
     * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
     */ this.tileGridForProjection = {};
        /**
     * @private
     * @type {number|undefined}
     */ this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;
        /**
     * @private
     * @type {boolean}
     */ this.renderReprojectionEdges_ = false;
    }
    /**
   * @return {boolean} Can expire cache.
   */ canExpireCache() {
        if (this.tileCache.canExpireCache()) return true;
        for(const key in this.tileCacheForProjection){
            if (this.tileCacheForProjection[key].canExpireCache()) return true;
        }
        return false;
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {!Object<string, boolean>} usedTiles Used tiles.
   */ expireCache(projection, usedTiles) {
        const usedTileCache = this.getTileCacheForProjection(projection);
        this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
        for(const id in this.tileCacheForProjection){
            const tileCache = this.tileCacheForProjection[id];
            tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
        }
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {number} Gutter.
   */ getGutterForProjection(projection) {
        if (this.getProjection() && projection && !(0, $983289ae1d13cd2a$export$fe091d73a555748b)(this.getProjection(), projection)) return 0;
        return this.getGutter();
    }
    /**
   * @return {number} Gutter.
   */ getGutter() {
        return 0;
    }
    /**
   * Return the key to be used for all tiles in the source.
   * @return {string} The key for all tiles.
   */ getKey() {
        let key = super.getKey();
        if (!this.getInterpolate()) key += ":disable-interpolation";
        return key;
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {boolean} Opaque.
   */ getOpaque(projection) {
        if (this.getProjection() && projection && !(0, $983289ae1d13cd2a$export$fe091d73a555748b)(this.getProjection(), projection)) return false;
        return super.getOpaque(projection);
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
   */ getTileGridForProjection(projection) {
        const thisProj = this.getProjection();
        if (this.tileGrid && (!thisProj || (0, $983289ae1d13cd2a$export$fe091d73a555748b)(thisProj, projection))) return this.tileGrid;
        const projKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(projection);
        if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = (0, $2592d561440d896c$export$1f4812384df8a9c5)(projection);
        return this.tileGridForProjection[projKey];
    }
    /**
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../TileCache.js").default} Tile cache.
   */ getTileCacheForProjection(projection) {
        const thisProj = this.getProjection();
        if (!thisProj || (0, $983289ae1d13cd2a$export$fe091d73a555748b)(thisProj, projection)) return this.tileCache;
        const projKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(projection);
        if (!(projKey in this.tileCacheForProjection)) this.tileCacheForProjection[projKey] = new (0, $a8929a8ee91614da$export$2e2bcd8739ae039)(this.tileCache.highWaterMark);
        return this.tileCacheForProjection[projKey];
    }
    /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @param {string} key The key set on the tile.
   * @return {!ImageTile} Tile.
   * @private
   */ createTile_(z, x, y, pixelRatio, projection, key) {
        const tileCoord = [
            z,
            x,
            y
        ];
        const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
        const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;
        const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE : (0, $713feb195c3fd859$export$2e2bcd8739ae039).EMPTY, tileUrl !== undefined ? tileUrl : "", this.crossOrigin, this.tileLoadFunction, this.tileOptions);
        tile.key = key;
        tile.addEventListener((0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.handleTileChange.bind(this));
        return tile;
    }
    /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {!(ImageTile|ReprojTile)} Tile.
   */ getTile(z, x, y, pixelRatio, projection) {
        const sourceProjection = this.getProjection();
        if (!sourceProjection || !projection || (0, $983289ae1d13cd2a$export$fe091d73a555748b)(sourceProjection, projection)) return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
        const cache = this.getTileCacheForProjection(projection);
        const tileCoord = [
            z,
            x,
            y
        ];
        let tile;
        const tileCoordKey = (0, $aaf15fb68ed4bc38$export$a47fb462a08de82f)(tileCoord);
        if (cache.containsKey(tileCoordKey)) tile = cache.get(tileCoordKey);
        const key = this.getKey();
        if (tile && tile.key == key) return tile;
        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);
        const targetTileGrid = this.getTileGridForProjection(projection);
        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
        const newTile = new (0, $8caf134bcaf1c970$export$2e2bcd8739ae039)(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), (z, x, y, pixelRatio)=>this.getTileInternal(z, x, y, pixelRatio, sourceProjection), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());
        newTile.key = key;
        if (tile) {
            newTile.interimTile = tile;
            newTile.refreshInterimChain();
            cache.replace(tileCoordKey, newTile);
        } else cache.set(tileCoordKey, newTile);
        return newTile;
    }
    /**
   * @param {number} z Tile coordinate z.
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @param {number} pixelRatio Pixel ratio.
   * @param {!import("../proj/Projection.js").default} projection Projection.
   * @return {!ImageTile} Tile.
   * @protected
   */ getTileInternal(z, x, y, pixelRatio, projection) {
        let tile = null;
        const tileCoordKey = (0, $aaf15fb68ed4bc38$export$92d0df0f1d25c63c)(z, x, y);
        const key = this.getKey();
        if (!this.tileCache.containsKey(tileCoordKey)) {
            tile = this.createTile_(z, x, y, pixelRatio, projection, key);
            this.tileCache.set(tileCoordKey, tile);
        } else {
            tile = this.tileCache.get(tileCoordKey);
            if (tile.key != key) {
                // The source's params changed. If the tile has an interim tile and if we
                // can use it then we use it. Otherwise we create a new tile.  In both
                // cases we attempt to assign an interim tile to the new tile.
                const interimTile = tile;
                tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                //make the new tile the head of the list,
                if (interimTile.getState() == (0, $713feb195c3fd859$export$2e2bcd8739ae039).IDLE) //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
                tile.interimTile = interimTile.interimTile;
                else tile.interimTile = interimTile;
                tile.refreshInterimChain();
                this.tileCache.replace(tileCoordKey, tile);
            }
        }
        return tile;
    }
    /**
   * Sets whether to render reprojection edges or not (usually for debugging).
   * @param {boolean} render Render the edges.
   * @api
   */ setRenderReprojectionEdges(render) {
        if (this.renderReprojectionEdges_ == render) return;
        this.renderReprojectionEdges_ = render;
        for(const id in this.tileCacheForProjection)this.tileCacheForProjection[id].clear();
        this.changed();
    }
    /**
   * Sets the tile grid to use when reprojecting the tiles to the given
   * projection instead of the default tile grid for the projection.
   *
   * This can be useful when the default tile grid cannot be created
   * (e.g. projection has no extent defined) or
   * for optimization reasons (custom tile size, resolutions, ...).
   *
   * @param {import("../proj.js").ProjectionLike} projection Projection.
   * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
   * @api
   */ setTileGridForProjection(projection, tilegrid) {
        const proj = (0, $983289ae1d13cd2a$export$3988ae62b71be9a3)(projection);
        if (proj) {
            const projKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(proj);
            if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = tilegrid;
        }
    }
    clear() {
        super.clear();
        for(const id in this.tileCacheForProjection)this.tileCacheForProjection[id].clear();
    }
}
/**
 * @param {ImageTile} imageTile Image tile.
 * @param {string} src Source.
 */ function $03416dad2946ba1d$var$defaultTileLoadFunction(imageTile, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ imageTile.getImage().src = src;
}
var $03416dad2946ba1d$export$2e2bcd8739ae039 = $03416dad2946ba1d$var$TileImage;



/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
 * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
 * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
 * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
 * should be set to `2`.
 * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
 * Not used if `tileGrid` is provided.
 * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.
 * This allows artifacts of rendering at tile edges to be ignored.
 * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.
 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
 * tile URL given a tile coordinate and the projection.
 * Required if `url` or `urls` are not provided.
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
 * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
 * may be used instead of defining each one separately in the `urls` option.
 * @property {Array<string>} [urls] An array of URL templates.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number} [transition=250] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
 * Choose whether to use tiles with a higher or lower zoom level when between integer
 * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
 */ /**
 * @classdesc
 * Layer source for tile data with URLs in a set XYZ format that are
 * defined in a URL template. By default, this follows the widely-used
 * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
 * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
 * using the `{-y}` placeholder in the URL template, so long as the
 * source does not have a custom tile grid. In this case
 * a `tileUrlFunction` can be used, such as:
 * ```js
 *  tileUrlFunction: function(coordinate) {
 *    return 'http://mapserver.com/' + coordinate[0] + '/' +
 *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';
 *  }
 * ```
 * @api
 */ class $ed20bd1fd59d22cc$var$XYZ extends (0, $03416dad2946ba1d$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] XYZ options.
   */ constructor(options){
        options = options || {};
        const projection = options.projection !== undefined ? options.projection : "EPSG:3857";
        const tileGrid = options.tileGrid !== undefined ? options.tileGrid : (0, $2592d561440d896c$export$38500bbeccc864ff)({
            extent: (0, $2592d561440d896c$export$7b5b6ef8fd55fac4)(projection),
            maxResolution: options.maxResolution,
            maxZoom: options.maxZoom,
            minZoom: options.minZoom,
            tileSize: options.tileSize
        });
        super({
            attributions: options.attributions,
            cacheSize: options.cacheSize,
            crossOrigin: options.crossOrigin,
            interpolate: options.interpolate,
            opaque: options.opaque,
            projection: projection,
            reprojectionErrorThreshold: options.reprojectionErrorThreshold,
            tileGrid: tileGrid,
            tileLoadFunction: options.tileLoadFunction,
            tilePixelRatio: options.tilePixelRatio,
            tileUrlFunction: options.tileUrlFunction,
            url: options.url,
            urls: options.urls,
            wrapX: options.wrapX !== undefined ? options.wrapX : true,
            transition: options.transition,
            attributionsCollapsible: options.attributionsCollapsible,
            zDirection: options.zDirection
        });
        /**
     * @private
     * @type {number}
     */ this.gutter_ = options.gutter !== undefined ? options.gutter : 0;
    }
    /**
   * @return {number} Gutter.
   */ getGutter() {
        return this.gutter_;
    }
}
var $ed20bd1fd59d22cc$export$2e2bcd8739ae039 = $ed20bd1fd59d22cc$var$XYZ;


const $25838c5bce8055ee$export$4de8a5e77eb994ad = '&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.';
/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
 * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {number} [maxZoom=19] Max zoom.
 * @property {boolean} [opaque=true] Whether the layer is opaque.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [transition=250] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
 * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
 * Choose whether to use tiles with a higher or lower zoom level when between integer
 * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
 */ /**
 * @classdesc
 * Layer source for the OpenStreetMap tile server.
 * @api
 */ class $25838c5bce8055ee$var$OSM extends (0, $ed20bd1fd59d22cc$export$2e2bcd8739ae039) {
    /**
   * @param {Options} [options] Open Street Map options.
   */ constructor(options){
        options = options || {};
        let attributions;
        if (options.attributions !== undefined) attributions = options.attributions;
        else attributions = [
            $25838c5bce8055ee$export$4de8a5e77eb994ad
        ];
        const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : "anonymous";
        const url = options.url !== undefined ? options.url : "https://tile.openstreetmap.org/{z}/{x}/{y}.png";
        super({
            attributions: attributions,
            attributionsCollapsible: false,
            cacheSize: options.cacheSize,
            crossOrigin: crossOrigin,
            interpolate: options.interpolate,
            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
            opaque: options.opaque !== undefined ? options.opaque : true,
            reprojectionErrorThreshold: options.reprojectionErrorThreshold,
            tileLoadFunction: options.tileLoadFunction,
            transition: options.transition,
            url: url,
            wrapX: options.wrapX,
            zDirection: options.zDirection
        });
    }
}
var $25838c5bce8055ee$export$2e2bcd8739ae039 = $25838c5bce8055ee$var$OSM;

/**
 * @module ol/source/Vector
 */ 




/**
 * @module ol/structs/RBush
 */ 



/**
 * @typedef {Object} Entry
 * @property {number} minX MinX.
 * @property {number} minY MinY.
 * @property {number} maxX MaxX.
 * @property {number} maxY MaxY.
 * @property {Object} [value] Value.
 */ /**
 * @classdesc
 * Wrapper around the RBush by Vladimir Agafonkin.
 * See https://github.com/mourner/rbush.
 *
 * @template T
 */ class $15b6a1746ef633ad$var$RBush {
    /**
   * @param {number} [maxEntries] Max entries.
   */ constructor(maxEntries){
        /**
     * @private
     */ this.rbush_ = new (0, (/*@__PURE__*/$parcel$interopDefault($878c4f61c06eb00a$exports)))(maxEntries);
        /**
     * A mapping between the objects added to this rbush wrapper
     * and the objects that are actually added to the internal rbush.
     * @private
     * @type {Object<string, Entry>}
     */ this.items_ = {};
    }
    /**
   * Insert a value into the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */ insert(extent, value) {
        /** @type {Entry} */ const item = {
            minX: extent[0],
            minY: extent[1],
            maxX: extent[2],
            maxY: extent[3],
            value: value
        };
        this.rbush_.insert(item);
        this.items_[(0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(value)] = item;
    }
    /**
   * Bulk-insert values into the RBush.
   * @param {Array<import("../extent.js").Extent>} extents Extents.
   * @param {Array<T>} values Values.
   */ load(extents, values) {
        const items = new Array(values.length);
        for(let i = 0, l = values.length; i < l; i++){
            const extent = extents[i];
            const value = values[i];
            /** @type {Entry} */ const item = {
                minX: extent[0],
                minY: extent[1],
                maxX: extent[2],
                maxY: extent[3],
                value: value
            };
            items[i] = item;
            this.items_[(0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(value)] = item;
        }
        this.rbush_.load(items);
    }
    /**
   * Remove a value from the RBush.
   * @param {T} value Value.
   * @return {boolean} Removed.
   */ remove(value) {
        const uid = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(value);
        // get the object in which the value was wrapped when adding to the
        // internal rbush. then use that object to do the removal.
        const item = this.items_[uid];
        delete this.items_[uid];
        return this.rbush_.remove(item) !== null;
    }
    /**
   * Update the extent of a value in the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */ update(extent, value) {
        const item = this.items_[(0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(value)];
        const bbox = [
            item.minX,
            item.minY,
            item.maxX,
            item.maxY
        ];
        if (!(0, $84be800ca44e672c$export$e9bab7fafb253603)(bbox, extent)) {
            this.remove(value);
            this.insert(extent, value);
        }
    }
    /**
   * Return all values in the RBush.
   * @return {Array<T>} All.
   */ getAll() {
        const items = this.rbush_.all();
        return items.map(function(item) {
            return item.value;
        });
    }
    /**
   * Return all values in the given extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {Array<T>} All in extent.
   */ getInExtent(extent) {
        /** @type {Entry} */ const bbox = {
            minX: extent[0],
            minY: extent[1],
            maxX: extent[2],
            maxY: extent[3]
        };
        const items = this.rbush_.search(bbox);
        return items.map(function(item) {
            return item.value;
        });
    }
    /**
   * Calls a callback function with each value in the tree.
   * If the callback returns a truthy value, this value is returned without
   * checking the rest of the tree.
   * @param {function(T): *} callback Callback.
   * @return {*} Callback return value.
   */ forEach(callback) {
        return this.forEach_(this.getAll(), callback);
    }
    /**
   * Calls a callback function with each value in the provided extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(T): *} callback Callback.
   * @return {*} Callback return value.
   */ forEachInExtent(extent, callback) {
        return this.forEach_(this.getInExtent(extent), callback);
    }
    /**
   * @param {Array<T>} values Values.
   * @param {function(T): *} callback Callback.
   * @private
   * @return {*} Callback return value.
   */ forEach_(values, callback) {
        let result;
        for(let i = 0, l = values.length; i < l; i++){
            result = callback(values[i]);
            if (result) return result;
        }
        return result;
    }
    /**
   * @return {boolean} Is empty.
   */ isEmpty() {
        return (0, $e2dfef87a88758ed$export$dd1bc94b04021eeb)(this.items_);
    }
    /**
   * Remove all values from the RBush.
   */ clear() {
        this.rbush_.clear();
        this.items_ = {};
    }
    /**
   * @param {import("../extent.js").Extent} [extent] Extent.
   * @return {import("../extent.js").Extent} Extent.
   */ getExtent(extent) {
        const data = this.rbush_.toJSON();
        return (0, $84be800ca44e672c$export$958e3e1a02eac4b6)(data.minX, data.minY, data.maxX, data.maxY, extent);
    }
    /**
   * @param {RBush} rbush R-Tree.
   */ concat(rbush) {
        this.rbush_.load(rbush.rbush_.all());
        for(const i in rbush.items_)this.items_[i] = rbush.items_[i];
    }
}
var $15b6a1746ef633ad$export$2e2bcd8739ae039 = $15b6a1746ef633ad$var$RBush;



/**
 * @module ol/source/VectorEventType
 */ /**
 * @enum {string}
 */ var $9fd34b6c79aa89b0$export$2e2bcd8739ae039 /**
 * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes
 */  = {
    /**
   * Triggered when a feature is added to the source.
   * @event module:ol/source/Vector.VectorSourceEvent#addfeature
   * @api
   */ ADDFEATURE: "addfeature",
    /**
   * Triggered when a feature is updated.
   * @event module:ol/source/Vector.VectorSourceEvent#changefeature
   * @api
   */ CHANGEFEATURE: "changefeature",
    /**
   * Triggered when the clear method is called on the source.
   * @event module:ol/source/Vector.VectorSourceEvent#clear
   * @api
   */ CLEAR: "clear",
    /**
   * Triggered when a feature is removed from the source.
   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.
   * @event module:ol/source/Vector.VectorSourceEvent#removefeature
   * @api
   */ REMOVEFEATURE: "removefeature",
    /**
   * Triggered when features starts loading.
   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart
   * @api
   */ FEATURESLOADSTART: "featuresloadstart",
    /**
   * Triggered when features finishes loading.
   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend
   * @api
   */ FEATURESLOADEND: "featuresloadend",
    /**
   * Triggered if feature loading results in an error.
   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror
   * @api
   */ FEATURESLOADERROR: "featuresloaderror"
};



/**
 * @module ol/loadingstrategy
 */ 
function $efc4a0254bd212ee$export$84bf76cd7afc7469(extent, resolution) {
    return [
        [
            -Infinity,
            -Infinity,
            Infinity,
            Infinity
        ]
    ];
}
function $efc4a0254bd212ee$export$bf67010aacbe66fa(extent, resolution) {
    return [
        extent
    ];
}
function $efc4a0254bd212ee$export$3c17558da18e4d75(tileGrid) {
    return(/**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("./proj.js").Projection} projection Projection.
     * @return {Array<import("./extent.js").Extent>} Extents.
     */ function(extent, resolution, projection) {
        const z = tileGrid.getZForResolution((0, $983289ae1d13cd2a$export$bd1cd3b88140b906)(resolution, projection));
        const tileRange = tileGrid.getTileRangeForExtentAndZ((0, $983289ae1d13cd2a$export$494be3a3a25689ca)(extent, projection), z);
        /** @type {Array<import("./extent.js").Extent>} */ const extents = [];
        /** @type {import("./tilecoord.js").TileCoord} */ const tileCoord = [
            z,
            0,
            0
        ];
        for(tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1])for(tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2])extents.push((0, $983289ae1d13cd2a$export$96bfd09e2cffb006)(tileGrid.getTileCoordExtent(tileCoord), projection));
        return extents;
    });
}








/**
 * @module ol/featureloader
 */ 
/**
 *
 * @type {boolean}
 * @private
 */ let $8b4a0712f48d5df6$var$withCredentials = false;
function $8b4a0712f48d5df6$export$441d7b57adab24d0(url, format, extent, resolution, projection, success, failure) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", typeof url === "function" ? url(extent, resolution, projection) : url, true);
    if (format.getType() == "arraybuffer") xhr.responseType = "arraybuffer";
    xhr.withCredentials = $8b4a0712f48d5df6$var$withCredentials;
    /**
   * @param {Event} event Event.
   * @private
   */ xhr.onload = function(event) {
        // status will be 0 for file:// urls
        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
            const type = format.getType();
            /** @type {Document|Node|Object|string|undefined} */ let source;
            if (type == "json" || type == "text") source = xhr.responseText;
            else if (type == "xml") {
                source = xhr.responseXML;
                if (!source) source = new DOMParser().parseFromString(xhr.responseText, "application/xml");
            } else if (type == "arraybuffer") source = /** @type {ArrayBuffer} */ xhr.response;
            if (source) success(/** @type {Array<import("./Feature.js").default>} */ format.readFeatures(source, {
                extent: extent,
                featureProjection: projection
            }), format.readProjection(source));
            else failure();
        } else failure();
    };
    /**
   * @private
   */ xhr.onerror = failure;
    xhr.send();
}
function $8b4a0712f48d5df6$export$14cc81df70b6707e(url, format) {
    /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @param {function(Array<import("./Feature.js").default>): void} [success] Success
   *      Function called when loading succeeded.
   * @param {function(): void} [failure] Failure
   *      Function called when loading failed.
   */ return function(extent, resolution, projection, success, failure) {
        const source = /** @type {import("./source/Vector").default} */ this;
        $8b4a0712f48d5df6$export$441d7b57adab24d0(url, format, extent, resolution, projection, /**
       * @param {Array<import("./Feature.js").default>} features The loaded features.
       * @param {import("./proj/Projection.js").default} dataProjection Data
       * projection.
       */ function(features, dataProjection) {
            source.addFeatures(features);
            if (success !== undefined) success(features);
        }, /* FIXME handle error */ failure ? failure : (0, $2c3aa3ce33eccc0f$export$1cd1943b3a73bbe8));
    };
}
function $8b4a0712f48d5df6$export$36fa6977a6d0d8fe(xhrWithCredentials) {
    $8b4a0712f48d5df6$var$withCredentials = xhrWithCredentials;
}


class $3b942f73954bd0a6$export$d402fd02dc2b661c extends (0, $f22c10e3757627da$export$2e2bcd8739ae039) {
    /**
   * @param {string} type Type.
   * @param {import("../Feature.js").default<Geometry>} [feature] Feature.
   * @param {Array<import("../Feature.js").default<Geometry>>} [features] Features.
   */ constructor(type, feature, features){
        super(type);
        /**
     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.
     * @type {import("../Feature.js").default<Geometry>|undefined}
     * @api
     */ this.feature = feature;
        /**
     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.
     * @type {Array<import("../Feature.js").default<Geometry>>|undefined}
     * @api
     */ this.features = features;
    }
}
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("./VectorEventType").VectorSourceEventTypes, VectorSourceEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     import("./VectorEventType").VectorSourceEventTypes, Return>} VectorSourceOnSignature
 */ /**
 * @template {import("../geom/Geometry.js").default} [Geometry=import("../geom/Geometry.js").default]
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {Array<import("../Feature.js").default<Geometry>>|Collection<import("../Feature.js").default<Geometry>>} [features]
 * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source
 * and the collection will stay in sync.
 * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
 * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
 * @property {import("../featureloader.js").FeatureLoader} [loader]
 * The loader function used to load features, from a remote source for example.
 * If this is not set and `url` is set, the source will create and use an XHR
 * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events
 * will only fire if the `success` and `failure` callbacks are used.
 *
 * Example:
 *
 * ```js
 * import Vector from 'ol/source/Vector.js';
 * import GeoJSON from 'ol/format/GeoJSON.js';
 * import {bbox} from 'ol/loadingstrategy.js';
 *
 * const vectorSource = new Vector({
 *   format: new GeoJSON(),
 *   loader: function(extent, resolution, projection, success, failure) {
 *      const proj = projection.getCode();
 *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
 *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
 *          'outputFormat=application/json&srsname=' + proj + '&' +
 *          'bbox=' + extent.join(',') + ',' + proj;
 *      const xhr = new XMLHttpRequest();
 *      xhr.open('GET', url);
 *      const onError = function() {
 *        vectorSource.removeLoadedExtent(extent);
 *        failure();
 *      }
 *      xhr.onerror = onError;
 *      xhr.onload = function() {
 *        if (xhr.status == 200) {
 *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);
 *          vectorSource.addFeatures(features);
 *          success(features);
 *        } else {
 *          onError();
 *        }
 *      }
 *      xhr.send();
 *    },
 *    strategy: bbox,
 *  });
 * ```
 * @property {boolean} [overlaps=true] This source may have overlapping geometries.
 * Setting this to `false` (e.g. for sources with polygons that represent administrative
 * boundaries or TopoJSON sources) allows the renderer to optimise fill and
 * stroke operations.
 * @property {LoadingStrategy} [strategy] The loading strategy to use.
 * By default an {@link module:ol/loadingstrategy.all}
 * strategy is used, a one-off strategy which loads all features at once.
 * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
 * Setting this option instructs the source to load features using an XHR loader
 * (see {@link module:ol/featureloader.xhr}). Use a `string` and an
 * {@link module:ol/loadingstrategy.all} for a one-off download of all features from
 * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
 * other loading strategies.
 * Requires `format` to be set as well.
 * When default XHR feature loader is provided, the features will
 * be transformed from the data projection to the view projection
 * during parsing. If your remote data source does not advertise its projection
 * properly, this transformation will be incorrect. For some formats, the
 * default projection (usually EPSG:4326) can be overridden by setting the
 * dataProjection constructor option on the format.
 * Note that if a source contains non-feature data, such as a GeoJSON geometry
 * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
 * @property {boolean} [useSpatialIndex=true]
 * By default, an RTree is used as spatial index. When features are removed and
 * added frequently, and the total number of features is low, setting this to
 * `false` may improve performance.
 *
 * Note that
 * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
 * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
 * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
 * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
 * through all features.
 *
 * When set to `false`, the features will be maintained in an
 * {@link module:ol/Collection~Collection}, which can be retrieved through
 * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
 * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
 * -180° and 180° meridians to work properly, this should be set to `false`. The
 * resulting geometry coordinates will then exceed the world bounds.
 */ /**
 * @classdesc
 * Provides a source of features for vector layers. Vector features provided
 * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
 * vector data that is optimized for rendering.
 *
 * @fires VectorSourceEvent
 * @api
 * @template {import("../geom/Geometry.js").default} [Geometry=import("../geom/Geometry.js").default]
 */ class $3b942f73954bd0a6$var$VectorSource extends (0, $3a045db4be96b02c$export$2e2bcd8739ae039) {
    /**
   * @param {Options<Geometry>} [options] Vector source options.
   */ constructor(options){
        options = options || {};
        super({
            attributions: options.attributions,
            interpolate: true,
            projection: undefined,
            state: "ready",
            wrapX: options.wrapX !== undefined ? options.wrapX : true
        });
        /***
     * @type {VectorSourceOnSignature<import("../events").EventsKey>}
     */ this.on;
        /***
     * @type {VectorSourceOnSignature<import("../events").EventsKey>}
     */ this.once;
        /***
     * @type {VectorSourceOnSignature<void>}
     */ this.un;
        /**
     * @private
     * @type {import("../featureloader.js").FeatureLoader}
     */ this.loader_ = (0, $2c3aa3ce33eccc0f$export$1cd1943b3a73bbe8);
        /**
     * @private
     * @type {import("../format/Feature.js").default|undefined}
     */ this.format_ = options.format;
        /**
     * @private
     * @type {boolean}
     */ this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;
        /**
     * @private
     * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
     */ this.url_ = options.url;
        if (options.loader !== undefined) this.loader_ = options.loader;
        else if (this.url_ !== undefined) {
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(this.format_, 7); // `format` must be set when `url` is set
            // create a XHR feature loader for "url" and "format"
            this.loader_ = (0, $8b4a0712f48d5df6$export$14cc81df70b6707e)(this.url_, /** @type {import("../format/Feature.js").default} */ this.format_);
        }
        /**
     * @private
     * @type {LoadingStrategy}
     */ this.strategy_ = options.strategy !== undefined ? options.strategy : (0, $efc4a0254bd212ee$export$84bf76cd7afc7469);
        const useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;
        /**
     * @private
     * @type {RBush<import("../Feature.js").default<Geometry>>}
     */ this.featuresRtree_ = useSpatialIndex ? new (0, $15b6a1746ef633ad$export$2e2bcd8739ae039)() : null;
        /**
     * @private
     * @type {RBush<{extent: import("../extent.js").Extent}>}
     */ this.loadedExtentsRtree_ = new (0, $15b6a1746ef633ad$export$2e2bcd8739ae039)();
        /**
     * @type {number}
     * @private
     */ this.loadingExtentsCount_ = 0;
        /**
     * @private
     * @type {!Object<string, import("../Feature.js").default<Geometry>>}
     */ this.nullGeometryFeatures_ = {};
        /**
     * A lookup of features by id (the return from feature.getId()).
     * @private
     * @type {!Object<string, import("../Feature.js").default<Geometry>>}
     */ this.idIndex_ = {};
        /**
     * A lookup of features by uid (using getUid(feature)).
     * @private
     * @type {!Object<string, import("../Feature.js").default<Geometry>>}
     */ this.uidIndex_ = {};
        /**
     * @private
     * @type {Object<string, Array<import("../events.js").EventsKey>>}
     */ this.featureChangeKeys_ = {};
        /**
     * @private
     * @type {Collection<import("../Feature.js").default<Geometry>>|null}
     */ this.featuresCollection_ = null;
        /** @type {Collection<import("../Feature.js").default<Geometry>>} */ let collection;
        /** @type {Array<import("../Feature.js").default<Geometry>>} */ let features;
        if (Array.isArray(options.features)) features = options.features;
        else if (options.features) {
            collection = options.features;
            features = collection.getArray();
        }
        if (!useSpatialIndex && collection === undefined) collection = new (0, $6ba3969272323605$export$2e2bcd8739ae039)(features);
        if (features !== undefined) this.addFeaturesInternal(features);
        if (collection !== undefined) this.bindFeaturesCollection_(collection);
    }
    /**
   * Add a single feature to the source.  If you want to add a batch of features
   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
   * instead. A feature will not be added to the source if feature with
   * the same id is already there. The reason for this behavior is to avoid
   * feature duplication when using bbox or tile loading strategies.
   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,
   * meaning that if a feature with a duplicate id is added in the collection, it will
   * be removed from it right away.
   * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
   * @api
   */ addFeature(feature) {
        this.addFeatureInternal(feature);
        this.changed();
    }
    /**
   * Add a feature without firing a `change` event.
   * @param {import("../Feature.js").default<Geometry>} feature Feature.
   * @protected
   */ addFeatureInternal(feature) {
        const featureKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature);
        if (!this.addToIndex_(featureKey, feature)) {
            if (this.featuresCollection_) this.featuresCollection_.remove(feature);
            return;
        }
        this.setupChangeEvents_(featureKey, feature);
        const geometry = feature.getGeometry();
        if (geometry) {
            const extent = geometry.getExtent();
            if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);
        } else this.nullGeometryFeatures_[featureKey] = feature;
        this.dispatchEvent(new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).ADDFEATURE, feature));
    }
    /**
   * @param {string} featureKey Unique identifier for the feature.
   * @param {import("../Feature.js").default<Geometry>} feature The feature.
   * @private
   */ setupChangeEvents_(featureKey, feature) {
        this.featureChangeKeys_[featureKey] = [
            (0, $776f68d2a754760b$export$63174c828edd6ff8)(feature, (0, $f13d17e3c190470c$export$2e2bcd8739ae039).CHANGE, this.handleFeatureChange_, this),
            (0, $776f68d2a754760b$export$63174c828edd6ff8)(feature, (0, $a6660a6615220f8c$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleFeatureChange_, this)
        ];
    }
    /**
   * @param {string} featureKey Unique identifier for the feature.
   * @param {import("../Feature.js").default<Geometry>} feature The feature.
   * @return {boolean} The feature is "valid", in the sense that it is also a
   *     candidate for insertion into the Rtree.
   * @private
   */ addToIndex_(featureKey, feature) {
        let valid = true;
        const id = feature.getId();
        if (id !== undefined) {
            if (!(id.toString() in this.idIndex_)) this.idIndex_[id.toString()] = feature;
            else valid = false;
        }
        if (valid) {
            (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source
            this.uidIndex_[featureKey] = feature;
        }
        return valid;
    }
    /**
   * Add a batch of features to the source.
   * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
   * @api
   */ addFeatures(features) {
        this.addFeaturesInternal(features);
        this.changed();
    }
    /**
   * Add features without firing a `change` event.
   * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
   * @protected
   */ addFeaturesInternal(features) {
        const extents = [];
        const newFeatures = [];
        const geometryFeatures = [];
        for(let i = 0, length = features.length; i < length; i++){
            const feature = features[i];
            const featureKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature);
            if (this.addToIndex_(featureKey, feature)) newFeatures.push(feature);
        }
        for(let i = 0, length = newFeatures.length; i < length; i++){
            const feature = newFeatures[i];
            const featureKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature);
            this.setupChangeEvents_(featureKey, feature);
            const geometry = feature.getGeometry();
            if (geometry) {
                const extent = geometry.getExtent();
                extents.push(extent);
                geometryFeatures.push(feature);
            } else this.nullGeometryFeatures_[featureKey] = feature;
        }
        if (this.featuresRtree_) this.featuresRtree_.load(extents, geometryFeatures);
        if (this.hasListener((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).ADDFEATURE)) for(let i = 0, length = newFeatures.length; i < length; i++)this.dispatchEvent(new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).ADDFEATURE, newFeatures[i]));
    }
    /**
   * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
   * @private
   */ bindFeaturesCollection_(collection) {
        let modifyingCollection = false;
        this.addEventListener((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).ADDFEATURE, /**
       * @param {VectorSourceEvent<Geometry>} evt The vector source event
       */ function(evt) {
            if (!modifyingCollection) {
                modifyingCollection = true;
                collection.push(evt.feature);
                modifyingCollection = false;
            }
        });
        this.addEventListener((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).REMOVEFEATURE, /**
       * @param {VectorSourceEvent<Geometry>} evt The vector source event
       */ function(evt) {
            if (!modifyingCollection) {
                modifyingCollection = true;
                collection.remove(evt.feature);
                modifyingCollection = false;
            }
        });
        collection.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).ADD, /**
       * @param {import("../Collection.js").CollectionEvent<import("../Feature.js").default<Geometry>>} evt The collection event
       */ (evt)=>{
            if (!modifyingCollection) {
                modifyingCollection = true;
                this.addFeature(evt.element);
                modifyingCollection = false;
            }
        });
        collection.addEventListener((0, $df86962829eabf3c$export$2e2bcd8739ae039).REMOVE, /**
       * @param {import("../Collection.js").CollectionEvent<import("../Feature.js").default<Geometry>>} evt The collection event
       */ (evt)=>{
            if (!modifyingCollection) {
                modifyingCollection = true;
                this.removeFeature(evt.element);
                modifyingCollection = false;
            }
        });
        this.featuresCollection_ = collection;
    }
    /**
   * Remove all features from the source.
   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.
   * @api
   */ clear(fast) {
        if (fast) {
            for(const featureId in this.featureChangeKeys_){
                const keys = this.featureChangeKeys_[featureId];
                keys.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
            }
            if (!this.featuresCollection_) {
                this.featureChangeKeys_ = {};
                this.idIndex_ = {};
                this.uidIndex_ = {};
            }
        } else if (this.featuresRtree_) {
            const removeAndIgnoreReturn = (feature)=>{
                this.removeFeatureInternal(feature);
            };
            this.featuresRtree_.forEach(removeAndIgnoreReturn);
            for(const id in this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
        }
        if (this.featuresCollection_) this.featuresCollection_.clear();
        if (this.featuresRtree_) this.featuresRtree_.clear();
        this.nullGeometryFeatures_ = {};
        const clearEvent = new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).CLEAR);
        this.dispatchEvent(clearEvent);
        this.changed();
    }
    /**
   * Iterate through all features on the source, calling the provided callback
   * with each one.  If the callback returns any "truthy" value, iteration will
   * stop and the function will return the same value.
   * Note: this function only iterate through the feature that have a defined geometry.
   *
   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
   *     on the source.  Return a truthy value to stop iteration.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   * @api
   */ forEachFeature(callback) {
        if (this.featuresRtree_) return this.featuresRtree_.forEach(callback);
        if (this.featuresCollection_) this.featuresCollection_.forEach(callback);
    }
    /**
   * Iterate through all features whose geometries contain the provided
   * coordinate, calling the callback with each feature.  If the callback returns
   * a "truthy" value, iteration will stop and the function will return the same
   * value.
   *
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
   *     whose goemetry contains the provided coordinate.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   */ forEachFeatureAtCoordinateDirect(coordinate, callback) {
        const extent = [
            coordinate[0],
            coordinate[1],
            coordinate[0],
            coordinate[1]
        ];
        return this.forEachFeatureInExtent(extent, function(feature) {
            const geometry = feature.getGeometry();
            if (geometry.intersectsCoordinate(coordinate)) return callback(feature);
            return undefined;
        });
    }
    /**
   * Iterate through all features whose bounding box intersects the provided
   * extent (note that the feature's geometry may not intersect the extent),
   * calling the callback with each feature.  If the callback returns a "truthy"
   * value, iteration will stop and the function will return the same value.
   *
   * If you are interested in features whose geometry intersects an extent, call
   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
   *
   * When `useSpatialIndex` is set to false, this method will loop through all
   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
   *     whose bounding box intersects the provided extent.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   * @api
   */ forEachFeatureInExtent(extent, callback) {
        if (this.featuresRtree_) return this.featuresRtree_.forEachInExtent(extent, callback);
        if (this.featuresCollection_) this.featuresCollection_.forEach(callback);
    }
    /**
   * Iterate through all features whose geometry intersects the provided extent,
   * calling the callback with each feature.  If the callback returns a "truthy"
   * value, iteration will stop and the function will return the same value.
   *
   * If you only want to test for bounding box intersection, call the
   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
   *     whose geometry intersects the provided extent.
   * @return {T|undefined} The return value from the last call to the callback.
   * @template T
   * @api
   */ forEachFeatureIntersectingExtent(extent, callback) {
        return this.forEachFeatureInExtent(extent, /**
       * @param {import("../Feature.js").default<Geometry>} feature Feature.
       * @return {T|undefined} The return value from the last call to the callback.
       */ function(feature) {
            const geometry = feature.getGeometry();
            if (geometry.intersectsExtent(extent)) {
                const result = callback(feature);
                if (result) return result;
            }
        });
    }
    /**
   * Get the features collection associated with this source. Will be `null`
   * unless the source was configured with `useSpatialIndex` set to `false`, or
   * with an {@link module:ol/Collection~Collection} as `features`.
   * @return {Collection<import("../Feature.js").default<Geometry>>|null} The collection of features.
   * @api
   */ getFeaturesCollection() {
        return this.featuresCollection_;
    }
    /**
   * Get a snapshot of the features currently on the source in random order. The returned array
   * is a copy, the features are references to the features in the source.
   * @return {Array<import("../Feature.js").default<Geometry>>} Features.
   * @api
   */ getFeatures() {
        let features;
        if (this.featuresCollection_) features = this.featuresCollection_.getArray().slice(0);
        else if (this.featuresRtree_) {
            features = this.featuresRtree_.getAll();
            if (!(0, $e2dfef87a88758ed$export$dd1bc94b04021eeb)(this.nullGeometryFeatures_)) (0, $69c1cc8ae30f997f$export$8b58be045bf06082)(features, Object.values(this.nullGeometryFeatures_));
        }
        return /** @type {Array<import("../Feature.js").default<Geometry>>} */ features;
    }
    /**
   * Get all features whose geometry intersects the provided coordinate.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @return {Array<import("../Feature.js").default<Geometry>>} Features.
   * @api
   */ getFeaturesAtCoordinate(coordinate) {
        const features = [];
        this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {
            features.push(feature);
        });
        return features;
    }
    /**
   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
   * all features intersecting the given extent in random order (so it may include
   * features whose geometries do not intersect the extent).
   *
   * When `useSpatialIndex` is set to false, this method will return all
   * features.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {import("../proj/Projection.js").default} [projection] Include features
   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.
   * @return {Array<import("../Feature.js").default<Geometry>>} Features.
   * @api
   */ getFeaturesInExtent(extent, projection) {
        if (this.featuresRtree_) {
            const multiWorld = projection && projection.canWrapX() && this.getWrapX();
            if (!multiWorld) return this.featuresRtree_.getInExtent(extent);
            const extents = (0, $84be800ca44e672c$export$9031237f01de0947)(extent, projection);
            return [].concat(...extents.map((anExtent)=>this.featuresRtree_.getInExtent(anExtent)));
        }
        if (this.featuresCollection_) return this.featuresCollection_.getArray().slice(0);
        return [];
    }
    /**
   * Get the closest feature to the provided coordinate.
   *
   * This method is not available when the source is configured with
   * `useSpatialIndex` set to `false`.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {function(import("../Feature.js").default<Geometry>):boolean} [filter] Feature filter function.
   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}
   *     and it should return a boolean value. By default, no filtering is made.
   * @return {import("../Feature.js").default<Geometry>} Closest feature.
   * @api
   */ getClosestFeatureToCoordinate(coordinate, filter) {
        // Find the closest feature using branch and bound.  We start searching an
        // infinite extent, and find the distance from the first feature found.  This
        // becomes the closest feature.  We then compute a smaller extent which any
        // closer feature must intersect.  We continue searching with this smaller
        // extent, trying to find a closer feature.  Every time we find a closer
        // feature, we update the extent being searched so that any even closer
        // feature must intersect it.  We continue until we run out of features.
        const x = coordinate[0];
        const y = coordinate[1];
        let closestFeature = null;
        const closestPoint = [
            NaN,
            NaN
        ];
        let minSquaredDistance = Infinity;
        const extent = [
            -Infinity,
            -Infinity,
            Infinity,
            Infinity
        ];
        filter = filter ? filter : (0, $2c3aa3ce33eccc0f$export$22e23a2304399231);
        this.featuresRtree_.forEachInExtent(extent, /**
       * @param {import("../Feature.js").default<Geometry>} feature Feature.
       */ function(feature) {
            if (filter(feature)) {
                const geometry = feature.getGeometry();
                const previousMinSquaredDistance = minSquaredDistance;
                minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
                if (minSquaredDistance < previousMinSquaredDistance) {
                    closestFeature = feature;
                    // This is sneaky.  Reduce the extent that it is currently being
                    // searched while the R-Tree traversal using this same extent object
                    // is still in progress.  This is safe because the new extent is
                    // strictly contained by the old extent.
                    const minDistance = Math.sqrt(minSquaredDistance);
                    extent[0] = x - minDistance;
                    extent[1] = y - minDistance;
                    extent[2] = x + minDistance;
                    extent[3] = y + minDistance;
                }
            }
        });
        return closestFeature;
    }
    /**
   * Get the extent of the features currently in the source.
   *
   * This method is not available when the source is configured with
   * `useSpatialIndex` set to `false`.
   * @param {import("../extent.js").Extent} [extent] Destination extent. If provided, no new extent
   *     will be created. Instead, that extent's coordinates will be overwritten.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */ getExtent(extent) {
        return this.featuresRtree_.getExtent(extent);
    }
    /**
   * Get a feature by its identifier (the value returned by feature.getId()).
   * Note that the index treats string and numeric identifiers as the same.  So
   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
   *
   * @param {string|number} id Feature identifier.
   * @return {import("../Feature.js").default<Geometry>|null} The feature (or `null` if not found).
   * @api
   */ getFeatureById(id) {
        const feature = this.idIndex_[id.toString()];
        return feature !== undefined ? feature : null;
    }
    /**
   * Get a feature by its internal unique identifier (using `getUid`).
   *
   * @param {string} uid Feature identifier.
   * @return {import("../Feature.js").default<Geometry>|null} The feature (or `null` if not found).
   */ getFeatureByUid(uid) {
        const feature = this.uidIndex_[uid];
        return feature !== undefined ? feature : null;
    }
    /**
   * Get the format associated with this source.
   *
   * @return {import("../format/Feature.js").default|undefined} The feature format.
   * @api
   */ getFormat() {
        return this.format_;
    }
    /**
   * @return {boolean} The source can have overlapping geometries.
   */ getOverlaps() {
        return this.overlaps_;
    }
    /**
   * Get the url associated with this source.
   *
   * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
   * @api
   */ getUrl() {
        return this.url_;
    }
    /**
   * @param {Event} event Event.
   * @private
   */ handleFeatureChange_(event) {
        const feature = /** @type {import("../Feature.js").default<Geometry>} */ event.target;
        const featureKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature);
        const geometry = feature.getGeometry();
        if (!geometry) {
            if (!(featureKey in this.nullGeometryFeatures_)) {
                if (this.featuresRtree_) this.featuresRtree_.remove(feature);
                this.nullGeometryFeatures_[featureKey] = feature;
            }
        } else {
            const extent = geometry.getExtent();
            if (featureKey in this.nullGeometryFeatures_) {
                delete this.nullGeometryFeatures_[featureKey];
                if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);
            } else if (this.featuresRtree_) this.featuresRtree_.update(extent, feature);
        }
        const id = feature.getId();
        if (id !== undefined) {
            const sid = id.toString();
            if (this.idIndex_[sid] !== feature) {
                this.removeFromIdIndex_(feature);
                this.idIndex_[sid] = feature;
            }
        } else {
            this.removeFromIdIndex_(feature);
            this.uidIndex_[featureKey] = feature;
        }
        this.changed();
        this.dispatchEvent(new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).CHANGEFEATURE, feature));
    }
    /**
   * Returns true if the feature is contained within the source.
   * @param {import("../Feature.js").default<Geometry>} feature Feature.
   * @return {boolean} Has feature.
   * @api
   */ hasFeature(feature) {
        const id = feature.getId();
        if (id !== undefined) return id in this.idIndex_;
        return (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature) in this.uidIndex_;
    }
    /**
   * @return {boolean} Is empty.
   */ isEmpty() {
        if (this.featuresRtree_) return this.featuresRtree_.isEmpty() && (0, $e2dfef87a88758ed$export$dd1bc94b04021eeb)(this.nullGeometryFeatures_);
        if (this.featuresCollection_) return this.featuresCollection_.getLength() === 0;
        return true;
    }
    /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {import("../proj/Projection.js").default} projection Projection.
   */ loadFeatures(extent, resolution, projection) {
        const loadedExtentsRtree = this.loadedExtentsRtree_;
        const extentsToLoad = this.strategy_(extent, resolution, projection);
        for(let i = 0, ii = extentsToLoad.length; i < ii; ++i){
            const extentToLoad = extentsToLoad[i];
            const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, /**
         * @param {{extent: import("../extent.js").Extent}} object Object.
         * @return {boolean} Contains.
         */ function(object) {
                return (0, $84be800ca44e672c$export$be866b1e0809b17e)(object.extent, extentToLoad);
            });
            if (!alreadyLoaded) {
                ++this.loadingExtentsCount_;
                this.dispatchEvent(new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).FEATURESLOADSTART));
                this.loader_.call(this, extentToLoad, resolution, projection, (features)=>{
                    --this.loadingExtentsCount_;
                    this.dispatchEvent(new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).FEATURESLOADEND, undefined, features));
                }, ()=>{
                    --this.loadingExtentsCount_;
                    this.dispatchEvent(new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).FEATURESLOADERROR));
                });
                loadedExtentsRtree.insert(extentToLoad, {
                    extent: extentToLoad.slice()
                });
            }
        }
        this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;
    }
    refresh() {
        this.clear(true);
        this.loadedExtentsRtree_.clear();
        super.refresh();
    }
    /**
   * Remove an extent from the list of loaded extents.
   * @param {import("../extent.js").Extent} extent Extent.
   * @api
   */ removeLoadedExtent(extent) {
        const loadedExtentsRtree = this.loadedExtentsRtree_;
        let obj;
        loadedExtentsRtree.forEachInExtent(extent, function(object) {
            if ((0, $84be800ca44e672c$export$e9bab7fafb253603)(object.extent, extent)) {
                obj = object;
                return true;
            }
        });
        if (obj) loadedExtentsRtree.remove(obj);
    }
    /**
   * Remove a single feature from the source.  If you want to remove all features
   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
   * instead.
   * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
   * @api
   */ removeFeature(feature) {
        if (!feature) return;
        const featureKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature);
        if (featureKey in this.nullGeometryFeatures_) delete this.nullGeometryFeatures_[featureKey];
        else if (this.featuresRtree_) this.featuresRtree_.remove(feature);
        const result = this.removeFeatureInternal(feature);
        if (result) this.changed();
    }
    /**
   * Remove feature without firing a `change` event.
   * @param {import("../Feature.js").default<Geometry>} feature Feature.
   * @return {import("../Feature.js").default<Geometry>|undefined} The removed feature
   *     (or undefined if the feature was not found).
   * @protected
   */ removeFeatureInternal(feature) {
        const featureKey = (0, $ae7eaaa2c9c1e05d$export$5e82334337e0f204)(feature);
        const featureChangeKeys = this.featureChangeKeys_[featureKey];
        if (!featureChangeKeys) return;
        featureChangeKeys.forEach((0, $776f68d2a754760b$export$b0a21c8b3c1c921));
        delete this.featureChangeKeys_[featureKey];
        const id = feature.getId();
        if (id !== undefined) delete this.idIndex_[id.toString()];
        delete this.uidIndex_[featureKey];
        this.dispatchEvent(new $3b942f73954bd0a6$export$d402fd02dc2b661c((0, $9fd34b6c79aa89b0$export$2e2bcd8739ae039).REMOVEFEATURE, feature));
        return feature;
    }
    /**
   * Remove a feature from the id index.  Called internally when the feature id
   * may have changed.
   * @param {import("../Feature.js").default<Geometry>} feature The feature.
   * @return {boolean} Removed the feature from the index.
   * @private
   */ removeFromIdIndex_(feature) {
        let removed = false;
        for(const id in this.idIndex_)if (this.idIndex_[id] === feature) {
            delete this.idIndex_[id];
            removed = true;
            break;
        }
        return removed;
    }
    /**
   * Set the new loader of the source. The next render cycle will use the
   * new loader.
   * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
   * @api
   */ setLoader(loader) {
        this.loader_ = loader;
    }
    /**
   * Points the source to a new url. The next render cycle will use the new url.
   * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
   * @api
   */ setUrl(url) {
        (0, $1e19c69d18d8b77c$export$a7a9523472993e97)(this.format_, 7); // `format` must be set when `url` is set
        this.url_ = url;
        this.setLoader((0, $8b4a0712f48d5df6$export$14cc81df70b6707e)(url, this.format_));
    }
}
var $3b942f73954bd0a6$export$2e2bcd8739ae039 = $3b942f73954bd0a6$var$VectorSource;



/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */ // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
/* eslint-disable space-unary-ops */ /* Public constants ==========================================================*/ /* ===========================================================================*/ //const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const $b0e71325728b7a56$var$Z_FIXED$1 = 4;
//const Z_DEFAULT_STRATEGY  = 0;
/* Possible values of the data_type field (though see inflate()) */ const $b0e71325728b7a56$var$Z_BINARY = 0;
const $b0e71325728b7a56$var$Z_TEXT = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const $b0e71325728b7a56$var$Z_UNKNOWN$1 = 2;
/*============================================================================*/ function $b0e71325728b7a56$var$zero$1(buf) {
    let len = buf.length;
    while(--len >= 0)buf[len] = 0;
}
// From zutil.h
const $b0e71325728b7a56$var$STORED_BLOCK = 0;
const $b0e71325728b7a56$var$STATIC_TREES = 1;
const $b0e71325728b7a56$var$DYN_TREES = 2;
/* The three kinds of block type */ const $b0e71325728b7a56$var$MIN_MATCH$1 = 3;
const $b0e71325728b7a56$var$MAX_MATCH$1 = 258;
/* The minimum and maximum match lengths */ // From deflate.h
/* ===========================================================================
 * Internal compression state.
 */ const $b0e71325728b7a56$var$LENGTH_CODES$1 = 29;
/* number of length codes, not counting the special END_BLOCK code */ const $b0e71325728b7a56$var$LITERALS$1 = 256;
/* number of literal bytes 0..255 */ const $b0e71325728b7a56$var$L_CODES$1 = $b0e71325728b7a56$var$LITERALS$1 + 1 + $b0e71325728b7a56$var$LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */ const $b0e71325728b7a56$var$D_CODES$1 = 30;
/* number of distance codes */ const $b0e71325728b7a56$var$BL_CODES$1 = 19;
/* number of codes used to transfer the bit lengths */ const $b0e71325728b7a56$var$HEAP_SIZE$1 = 2 * $b0e71325728b7a56$var$L_CODES$1 + 1;
/* maximum heap size */ const $b0e71325728b7a56$var$MAX_BITS$1 = 15;
/* All codes must not exceed MAX_BITS bits */ const $b0e71325728b7a56$var$Buf_size = 16;
/* size of bit buffer in bi_buf */ /* ===========================================================================
 * Constants
 */ const $b0e71325728b7a56$var$MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */ const $b0e71325728b7a56$var$END_BLOCK = 256;
/* end of block literal code */ const $b0e71325728b7a56$var$REP_3_6 = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */ const $b0e71325728b7a56$var$REPZ_3_10 = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */ const $b0e71325728b7a56$var$REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */ const $b0e71325728b7a56$var$extra_lbits = /* extra bits for each length code */ new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0
]);
const $b0e71325728b7a56$var$extra_dbits = /* extra bits for each distance code */ new Uint8Array([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
]);
const $b0e71325728b7a56$var$extra_blbits = /* extra bits for each bit length code */ new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    3,
    7
]);
const $b0e71325728b7a56$var$bl_order = new Uint8Array([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */ /* ===========================================================================
 * Local data. These are initialized only once.
 */ // We pre-fill arrays with 0 to avoid uninitialized gaps
const $b0e71325728b7a56$var$DIST_CODE_LEN = 512; /* see definition of array dist_code below */ 
// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const $b0e71325728b7a56$var$static_ltree = new Array(($b0e71325728b7a56$var$L_CODES$1 + 2) * 2);
$b0e71325728b7a56$var$zero$1($b0e71325728b7a56$var$static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */ const $b0e71325728b7a56$var$static_dtree = new Array($b0e71325728b7a56$var$D_CODES$1 * 2);
$b0e71325728b7a56$var$zero$1($b0e71325728b7a56$var$static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */ const $b0e71325728b7a56$var$_dist_code = new Array($b0e71325728b7a56$var$DIST_CODE_LEN);
$b0e71325728b7a56$var$zero$1($b0e71325728b7a56$var$_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */ const $b0e71325728b7a56$var$_length_code = new Array($b0e71325728b7a56$var$MAX_MATCH$1 - $b0e71325728b7a56$var$MIN_MATCH$1 + 1);
$b0e71325728b7a56$var$zero$1($b0e71325728b7a56$var$_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */ const $b0e71325728b7a56$var$base_length = new Array($b0e71325728b7a56$var$LENGTH_CODES$1);
$b0e71325728b7a56$var$zero$1($b0e71325728b7a56$var$base_length);
/* First normalized length for each code (0 = MIN_MATCH) */ const $b0e71325728b7a56$var$base_dist = new Array($b0e71325728b7a56$var$D_CODES$1);
$b0e71325728b7a56$var$zero$1($b0e71325728b7a56$var$base_dist);
/* First normalized distance for each code (0 = distance of 1) */ function $b0e71325728b7a56$var$StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
    this.static_tree = static_tree; /* static tree or NULL */ 
    this.extra_bits = extra_bits; /* extra bits for each code or NULL */ 
    this.extra_base = extra_base; /* base index for extra_bits */ 
    this.elems = elems; /* max number of elements in the tree */ 
    this.max_length = max_length; /* max bit length for the codes */ 
    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree = static_tree && static_tree.length;
}
let $b0e71325728b7a56$var$static_l_desc;
let $b0e71325728b7a56$var$static_d_desc;
let $b0e71325728b7a56$var$static_bl_desc;
function $b0e71325728b7a56$var$TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree; /* the dynamic tree */ 
    this.max_code = 0; /* largest code with non zero frequency */ 
    this.stat_desc = stat_desc; /* the corresponding static tree */ 
}
const $b0e71325728b7a56$var$d_code = (dist)=>{
    return dist < 256 ? $b0e71325728b7a56$var$_dist_code[dist] : $b0e71325728b7a56$var$_dist_code[256 + (dist >>> 7)];
};
/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */ const $b0e71325728b7a56$var$put_short = (s, w)=>{
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = w & 0xff;
    s.pending_buf[s.pending++] = w >>> 8 & 0xff;
};
/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */ const $b0e71325728b7a56$var$send_bits = (s, value, length)=>{
    if (s.bi_valid > $b0e71325728b7a56$var$Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 0xffff;
        $b0e71325728b7a56$var$put_short(s, s.bi_buf);
        s.bi_buf = value >> $b0e71325728b7a56$var$Buf_size - s.bi_valid;
        s.bi_valid += length - $b0e71325728b7a56$var$Buf_size;
    } else {
        s.bi_buf |= value << s.bi_valid & 0xffff;
        s.bi_valid += length;
    }
};
const $b0e71325728b7a56$var$send_code = (s, c, tree)=>{
    $b0e71325728b7a56$var$send_bits(s, tree[c * 2], tree[c * 2 + 1]);
};
/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */ const $b0e71325728b7a56$var$bi_reverse = (code, len)=>{
    let res = 0;
    do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
    }while (--len > 0);
    return res >>> 1;
};
/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */ const $b0e71325728b7a56$var$bi_flush = (s)=>{
    if (s.bi_valid === 16) {
        $b0e71325728b7a56$var$put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
    } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
    }
};
/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */ const $b0e71325728b7a56$var$gen_bitlen = (s, desc)=>{
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    const tree = desc.dyn_tree;
    const max_code = desc.max_code;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const extra = desc.stat_desc.extra_bits;
    const base = desc.stat_desc.extra_base;
    const max_length = desc.stat_desc.max_length;
    let h; /* heap index */ 
    let n, m; /* iterate over the tree elements */ 
    let bits; /* bit length */ 
    let xbits; /* extra bits */ 
    let f; /* frequency */ 
    let overflow = 0; /* number of elements with bit length too large */ 
    for(bits = 0; bits <= $b0e71325728b7a56$var$MAX_BITS$1; bits++)s.bl_count[bits] = 0;
    /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */ tree[s.heap[s.heap_max] * 2 + 1] = 0; /* root of the heap */ 
    for(h = s.heap_max + 1; h < $b0e71325728b7a56$var$HEAP_SIZE$1; h++){
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
        if (bits > max_length) {
            bits = max_length;
            overflow++;
        }
        tree[n * 2 + 1] = bits;
        /* We overwrite tree[n].Dad which is no longer needed */ if (n > max_code) continue;
         /* not a leaf node */ 
        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) xbits = extra[n - base];
        f = tree[n * 2] /*.Freq*/ ;
        s.opt_len += f * (bits + xbits);
        if (has_stree) s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
    if (overflow === 0) return;
    // Tracev((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */ do {
        bits = max_length - 1;
        while(s.bl_count[bits] === 0)bits--;
        s.bl_count[bits]--; /* move one leaf down the tree */ 
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */ 
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */ overflow -= 2;
    }while (overflow > 0);
    /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */ for(bits = max_length; bits !== 0; bits--){
        n = s.bl_count[bits];
        while(n !== 0){
            m = s.heap[--h];
            if (m > max_code) continue;
            if (tree[m * 2 + 1] !== bits) {
                // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2] /*.Freq*/ ;
                tree[m * 2 + 1] = bits;
            }
            n--;
        }
    }
};
/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */ const $b0e71325728b7a56$var$gen_codes = (tree, max_code, bl_count)=>{
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    const next_code = new Array($b0e71325728b7a56$var$MAX_BITS$1 + 1); /* next code value for each bit length */ 
    let code = 0; /* running code value */ 
    let bits; /* bit index */ 
    let n; /* code index */ 
    /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */ for(bits = 1; bits <= $b0e71325728b7a56$var$MAX_BITS$1; bits++){
        code = code + bl_count[bits - 1] << 1;
        next_code[bits] = code;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
    for(n = 0; n <= max_code; n++){
        let len = tree[n * 2 + 1] /*.Len*/ ;
        if (len === 0) continue;
        /* Now reverse the bits */ tree[n * 2] = $b0e71325728b7a56$var$bi_reverse(next_code[len]++, len);
    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
};
/* ===========================================================================
 * Initialize the various 'constant' tables.
 */ const $b0e71325728b7a56$var$tr_static_init = ()=>{
    let n; /* iterates over tree elements */ 
    let bits; /* bit counter */ 
    let length; /* length value */ 
    let code; /* code value */ 
    let dist; /* distance index */ 
    const bl_count = new Array($b0e71325728b7a56$var$MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()
    //if (static_init_done) return;
    /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */ length = 0;
    for(code = 0; code < $b0e71325728b7a56$var$LENGTH_CODES$1 - 1; code++){
        $b0e71325728b7a56$var$base_length[code] = length;
        for(n = 0; n < 1 << $b0e71325728b7a56$var$extra_lbits[code]; n++)$b0e71325728b7a56$var$_length_code[length++] = code;
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */ $b0e71325728b7a56$var$_length_code[length - 1] = code;
    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */ dist = 0;
    for(code = 0; code < 16; code++){
        $b0e71325728b7a56$var$base_dist[code] = dist;
        for(n = 0; n < 1 << $b0e71325728b7a56$var$extra_dbits[code]; n++)$b0e71325728b7a56$var$_dist_code[dist++] = code;
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */ 
    for(; code < $b0e71325728b7a56$var$D_CODES$1; code++){
        $b0e71325728b7a56$var$base_dist[code] = dist << 7;
        for(n = 0; n < 1 << $b0e71325728b7a56$var$extra_dbits[code] - 7; n++)$b0e71325728b7a56$var$_dist_code[256 + dist++] = code;
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");
    /* Construct the codes of the static literal tree */ for(bits = 0; bits <= $b0e71325728b7a56$var$MAX_BITS$1; bits++)bl_count[bits] = 0;
    n = 0;
    while(n <= 143){
        $b0e71325728b7a56$var$static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
    }
    while(n <= 255){
        $b0e71325728b7a56$var$static_ltree[n * 2 + 1] = 9;
        n++;
        bl_count[9]++;
    }
    while(n <= 279){
        $b0e71325728b7a56$var$static_ltree[n * 2 + 1] = 7;
        n++;
        bl_count[7]++;
    }
    while(n <= 287){
        $b0e71325728b7a56$var$static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */ $b0e71325728b7a56$var$gen_codes($b0e71325728b7a56$var$static_ltree, $b0e71325728b7a56$var$L_CODES$1 + 1, bl_count);
    /* The static distance tree is trivial: */ for(n = 0; n < $b0e71325728b7a56$var$D_CODES$1; n++){
        $b0e71325728b7a56$var$static_dtree[n * 2 + 1] = 5;
        $b0e71325728b7a56$var$static_dtree[n * 2] = $b0e71325728b7a56$var$bi_reverse(n, 5);
    }
    // Now data ready and we can init static trees
    $b0e71325728b7a56$var$static_l_desc = new $b0e71325728b7a56$var$StaticTreeDesc($b0e71325728b7a56$var$static_ltree, $b0e71325728b7a56$var$extra_lbits, $b0e71325728b7a56$var$LITERALS$1 + 1, $b0e71325728b7a56$var$L_CODES$1, $b0e71325728b7a56$var$MAX_BITS$1);
    $b0e71325728b7a56$var$static_d_desc = new $b0e71325728b7a56$var$StaticTreeDesc($b0e71325728b7a56$var$static_dtree, $b0e71325728b7a56$var$extra_dbits, 0, $b0e71325728b7a56$var$D_CODES$1, $b0e71325728b7a56$var$MAX_BITS$1);
    $b0e71325728b7a56$var$static_bl_desc = new $b0e71325728b7a56$var$StaticTreeDesc(new Array(0), $b0e71325728b7a56$var$extra_blbits, 0, $b0e71325728b7a56$var$BL_CODES$1, $b0e71325728b7a56$var$MAX_BL_BITS);
//static_init_done = true;
};
/* ===========================================================================
 * Initialize a new block.
 */ const $b0e71325728b7a56$var$init_block = (s)=>{
    let n; /* iterates over tree elements */ 
    /* Initialize the trees. */ for(n = 0; n < $b0e71325728b7a56$var$L_CODES$1; n++)s.dyn_ltree[n * 2] = 0;
    for(n = 0; n < $b0e71325728b7a56$var$D_CODES$1; n++)s.dyn_dtree[n * 2] = 0;
    for(n = 0; n < $b0e71325728b7a56$var$BL_CODES$1; n++)s.bl_tree[n * 2] = 0;
    s.dyn_ltree[$b0e71325728b7a56$var$END_BLOCK * 2] = 1;
    s.opt_len = s.static_len = 0;
    s.sym_next = s.matches = 0;
};
/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */ const $b0e71325728b7a56$var$bi_windup = (s)=>{
    if (s.bi_valid > 8) $b0e71325728b7a56$var$put_short(s, s.bi_buf);
    else if (s.bi_valid > 0) //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
    s.bi_buf = 0;
    s.bi_valid = 0;
};
/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */ const $b0e71325728b7a56$var$smaller = (tree, n, m, depth)=>{
    const _n2 = n * 2;
    const _m2 = m * 2;
    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
};
/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */ const $b0e71325728b7a56$var$pqdownheap = (s, tree, k)=>{
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    const v = s.heap[k];
    let j = k << 1; /* left son of k */ 
    while(j <= s.heap_len){
        /* Set j to the smallest of the two sons: */ if (j < s.heap_len && $b0e71325728b7a56$var$smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) j++;
        /* Exit if v is smaller than both sons */ if ($b0e71325728b7a56$var$smaller(tree, v, s.heap[j], s.depth)) break;
        /* Exchange v with the smallest son */ s.heap[k] = s.heap[j];
        k = j;
        /* And continue down the tree, setting j to the left son of k */ j <<= 1;
    }
    s.heap[k] = v;
};
// inlined manually
// const SMALLEST = 1;
/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */ const $b0e71325728b7a56$var$compress_block = (s, ltree, dtree)=>{
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    let dist; /* distance of matched string */ 
    let lc; /* match length or unmatched char (if dist == 0) */ 
    let sx = 0; /* running index in sym_buf */ 
    let code; /* the code to send */ 
    let extra; /* number of extra bits to send */ 
    if (s.sym_next !== 0) do {
        dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
        dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
        lc = s.pending_buf[s.sym_buf + sx++];
        if (dist === 0) $b0e71325728b7a56$var$send_code(s, lc, ltree); /* send a literal byte */ 
        else {
            /* Here, lc is the match length - MIN_MATCH */ code = $b0e71325728b7a56$var$_length_code[lc];
            $b0e71325728b7a56$var$send_code(s, code + $b0e71325728b7a56$var$LITERALS$1 + 1, ltree); /* send the length code */ 
            extra = $b0e71325728b7a56$var$extra_lbits[code];
            if (extra !== 0) {
                lc -= $b0e71325728b7a56$var$base_length[code];
                $b0e71325728b7a56$var$send_bits(s, lc, extra); /* send the extra length bits */ 
            }
            dist--; /* dist is now the match distance - 1 */ 
            code = $b0e71325728b7a56$var$d_code(dist);
            //Assert (code < D_CODES, "bad d_code");
            $b0e71325728b7a56$var$send_code(s, code, dtree); /* send the distance code */ 
            extra = $b0e71325728b7a56$var$extra_dbits[code];
            if (extra !== 0) {
                dist -= $b0e71325728b7a56$var$base_dist[code];
                $b0e71325728b7a56$var$send_bits(s, dist, extra); /* send the extra distance bits */ 
            }
        } /* literal or match pair ? */ 
    /* Check that the overlay between pending_buf and sym_buf is ok: */ //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");
    }while (sx < s.sym_next);
    $b0e71325728b7a56$var$send_code(s, $b0e71325728b7a56$var$END_BLOCK, ltree);
};
/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */ const $b0e71325728b7a56$var$build_tree = (s, desc)=>{
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    const tree = desc.dyn_tree;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const elems = desc.stat_desc.elems;
    let n, m; /* iterate over heap elements */ 
    let max_code = -1; /* largest code with non zero frequency */ 
    let node; /* new node being created */ 
    /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */ s.heap_len = 0;
    s.heap_max = $b0e71325728b7a56$var$HEAP_SIZE$1;
    for(n = 0; n < elems; n++)if (tree[n * 2] !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
    } else tree[n * 2 + 1] = 0;
    /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */ while(s.heap_len < 2){
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (has_stree) s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
    /* node is 0 or 1 so it does not have extra bits */ }
    desc.max_code = max_code;
    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */ for(n = s.heap_len >> 1 /*int /2*/ ; n >= 1; n--)$b0e71325728b7a56$var$pqdownheap(s, tree, n);
    /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */ node = elems; /* next internal node of the tree */ 
    do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/ n = s.heap[1 /*SMALLEST*/ ];
        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
        $b0e71325728b7a56$var$pqdownheap(s, tree, 1 /*SMALLEST*/ );
        /***/ m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */ 
        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */ 
        s.heap[--s.heap_max] = m;
        /* Create a new node father of n and m */ tree[node * 2] = tree[n * 2] + tree[m * 2] /*.Freq*/ ;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node;
        /* and insert the new node in the heap */ s.heap[1 /*SMALLEST*/ ] = node++;
        $b0e71325728b7a56$var$pqdownheap(s, tree, 1 /*SMALLEST*/ );
    }while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];
    /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */ $b0e71325728b7a56$var$gen_bitlen(s, desc);
    /* The field len is now set, we can generate the bit codes */ $b0e71325728b7a56$var$gen_codes(tree, max_code, s.bl_count);
};
/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */ const $b0e71325728b7a56$var$scan_tree = (s, tree, max_code)=>{
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    let n; /* iterates over all tree elements */ 
    let prevlen = -1; /* last emitted length */ 
    let curlen; /* length of current code */ 
    let nextlen = tree[1] /*.Len*/ ; /* length of next code */ 
    let count = 0; /* repeat count of the current code */ 
    let max_count = 7; /* max repeat count */ 
    let min_count = 4; /* min repeat count */ 
    if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] = 0xffff; /* guard */ 
    for(n = 0; n <= max_code; n++){
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;
        if (++count < max_count && curlen === nextlen) continue;
        else if (count < min_count) s.bl_tree[curlen * 2] += count;
        else if (curlen !== 0) {
            if (curlen !== prevlen) s.bl_tree[curlen * 2]++;
            s.bl_tree[$b0e71325728b7a56$var$REP_3_6 * 2]++;
        } else if (count <= 10) s.bl_tree[$b0e71325728b7a56$var$REPZ_3_10 * 2]++;
        else s.bl_tree[$b0e71325728b7a56$var$REPZ_11_138 * 2]++;
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
};
/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */ const $b0e71325728b7a56$var$send_tree = (s, tree, max_code)=>{
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    let n; /* iterates over all tree elements */ 
    let prevlen = -1; /* last emitted length */ 
    let curlen; /* length of current code */ 
    let nextlen = tree[1] /*.Len*/ ; /* length of next code */ 
    let count = 0; /* repeat count of the current code */ 
    let max_count = 7; /* max repeat count */ 
    let min_count = 4; /* min repeat count */ 
    /* tree[max_code+1].Len = -1; */ /* guard already set */ if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
    }
    for(n = 0; n <= max_code; n++){
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;
        if (++count < max_count && curlen === nextlen) continue;
        else if (count < min_count) do $b0e71325728b7a56$var$send_code(s, curlen, s.bl_tree);
        while (--count !== 0);
        else if (curlen !== 0) {
            if (curlen !== prevlen) {
                $b0e71325728b7a56$var$send_code(s, curlen, s.bl_tree);
                count--;
            }
            //Assert(count >= 3 && count <= 6, " 3_6?");
            $b0e71325728b7a56$var$send_code(s, $b0e71325728b7a56$var$REP_3_6, s.bl_tree);
            $b0e71325728b7a56$var$send_bits(s, count - 3, 2);
        } else if (count <= 10) {
            $b0e71325728b7a56$var$send_code(s, $b0e71325728b7a56$var$REPZ_3_10, s.bl_tree);
            $b0e71325728b7a56$var$send_bits(s, count - 3, 3);
        } else {
            $b0e71325728b7a56$var$send_code(s, $b0e71325728b7a56$var$REPZ_11_138, s.bl_tree);
            $b0e71325728b7a56$var$send_bits(s, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
};
/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */ const $b0e71325728b7a56$var$build_bl_tree = (s)=>{
    let max_blindex; /* index of last bit length code of non zero freq */ 
    /* Determine the bit length frequencies for literal and distance trees */ $b0e71325728b7a56$var$scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    $b0e71325728b7a56$var$scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    /* Build the bit length tree: */ $b0e71325728b7a56$var$build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */ /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */ for(max_blindex = $b0e71325728b7a56$var$BL_CODES$1 - 1; max_blindex >= 3; max_blindex--){
        if (s.bl_tree[$b0e71325728b7a56$var$bl_order[max_blindex] * 2 + 1] !== 0) break;
    }
    /* Update opt_len to include the bit length tree and counts */ s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));
    return max_blindex;
};
/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */ const $b0e71325728b7a56$var$send_all_trees = (s, lcodes, dcodes, blcodes)=>{
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    let rank; /* index in bl_order */ 
    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    $b0e71325728b7a56$var$send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */ 
    $b0e71325728b7a56$var$send_bits(s, dcodes - 1, 5);
    $b0e71325728b7a56$var$send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */ 
    for(rank = 0; rank < blcodes; rank++)//Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    $b0e71325728b7a56$var$send_bits(s, s.bl_tree[$b0e71325728b7a56$var$bl_order[rank] * 2 + 1], 3);
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
    $b0e71325728b7a56$var$send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ 
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
    $b0e71325728b7a56$var$send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ 
//Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};
/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */ const $b0e71325728b7a56$var$detect_data_type = (s)=>{
    /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */ let block_mask = 0xf3ffc07f;
    let n;
    /* Check for non-textual ("block-listed") bytes. */ for(n = 0; n <= 31; n++, block_mask >>>= 1){
        if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) return $b0e71325728b7a56$var$Z_BINARY;
    }
    /* Check for textual ("allow-listed") bytes. */ if (s.dyn_ltree[18] !== 0 || s.dyn_ltree[20] !== 0 || s.dyn_ltree[26] !== 0) return $b0e71325728b7a56$var$Z_TEXT;
    for(n = 32; n < $b0e71325728b7a56$var$LITERALS$1; n++){
        if (s.dyn_ltree[n * 2] !== 0) return $b0e71325728b7a56$var$Z_TEXT;
    }
    /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */ return $b0e71325728b7a56$var$Z_BINARY;
};
let $b0e71325728b7a56$var$static_init_done = false;
/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */ const $b0e71325728b7a56$var$_tr_init$1 = (s)=>{
    if (!$b0e71325728b7a56$var$static_init_done) {
        $b0e71325728b7a56$var$tr_static_init();
        $b0e71325728b7a56$var$static_init_done = true;
    }
    s.l_desc = new $b0e71325728b7a56$var$TreeDesc(s.dyn_ltree, $b0e71325728b7a56$var$static_l_desc);
    s.d_desc = new $b0e71325728b7a56$var$TreeDesc(s.dyn_dtree, $b0e71325728b7a56$var$static_d_desc);
    s.bl_desc = new $b0e71325728b7a56$var$TreeDesc(s.bl_tree, $b0e71325728b7a56$var$static_bl_desc);
    s.bi_buf = 0;
    s.bi_valid = 0;
    /* Initialize the first block of the first file: */ $b0e71325728b7a56$var$init_block(s);
};
/* ===========================================================================
 * Send a stored block
 */ const $b0e71325728b7a56$var$_tr_stored_block$1 = (s, buf, stored_len, last)=>{
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    $b0e71325728b7a56$var$send_bits(s, ($b0e71325728b7a56$var$STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */ 
    $b0e71325728b7a56$var$bi_windup(s); /* align on byte boundary */ 
    $b0e71325728b7a56$var$put_short(s, stored_len);
    $b0e71325728b7a56$var$put_short(s, ~stored_len);
    if (stored_len) s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
    s.pending += stored_len;
};
/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */ const $b0e71325728b7a56$var$_tr_align$1 = (s)=>{
    $b0e71325728b7a56$var$send_bits(s, $b0e71325728b7a56$var$STATIC_TREES << 1, 3);
    $b0e71325728b7a56$var$send_code(s, $b0e71325728b7a56$var$END_BLOCK, $b0e71325728b7a56$var$static_ltree);
    $b0e71325728b7a56$var$bi_flush(s);
};
/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */ const $b0e71325728b7a56$var$_tr_flush_block$1 = (s, buf, stored_len, last)=>{
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    let opt_lenb, static_lenb; /* opt_len and static_len in bytes */ 
    let max_blindex = 0; /* index of last bit length code of non zero freq */ 
    /* Build the Huffman trees unless a stored block is forced */ if (s.level > 0) {
        /* Check if the file is binary or text */ if (s.strm.data_type === $b0e71325728b7a56$var$Z_UNKNOWN$1) s.strm.data_type = $b0e71325728b7a56$var$detect_data_type(s);
        /* Construct the literal and distance trees */ $b0e71325728b7a56$var$build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        $b0e71325728b7a56$var$build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */ /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */ max_blindex = $b0e71325728b7a56$var$build_bl_tree(s);
        /* Determine the best encoding. Compute the block lengths in bytes. */ opt_lenb = s.opt_len + 3 + 7 >>> 3;
        static_lenb = s.static_len + 3 + 7 >>> 3;
        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->sym_next / 3));
        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
    } else // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */ 
    if (stored_len + 4 <= opt_lenb && buf !== -1) /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */ $b0e71325728b7a56$var$_tr_stored_block$1(s, buf, stored_len, last);
    else if (s.strategy === $b0e71325728b7a56$var$Z_FIXED$1 || static_lenb === opt_lenb) {
        $b0e71325728b7a56$var$send_bits(s, ($b0e71325728b7a56$var$STATIC_TREES << 1) + (last ? 1 : 0), 3);
        $b0e71325728b7a56$var$compress_block(s, $b0e71325728b7a56$var$static_ltree, $b0e71325728b7a56$var$static_dtree);
    } else {
        $b0e71325728b7a56$var$send_bits(s, ($b0e71325728b7a56$var$DYN_TREES << 1) + (last ? 1 : 0), 3);
        $b0e71325728b7a56$var$send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        $b0e71325728b7a56$var$compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */ $b0e71325728b7a56$var$init_block(s);
    if (last) $b0e71325728b7a56$var$bi_windup(s);
// Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
//       s->compressed_len-7*last));
};
/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */ const $b0e71325728b7a56$var$_tr_tally$1 = (s, dist, lc)=>{
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    s.pending_buf[s.sym_buf + s.sym_next++] = dist;
    s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
    s.pending_buf[s.sym_buf + s.sym_next++] = lc;
    if (dist === 0) /* lc is the unmatched char */ s.dyn_ltree[lc * 2]++;
    else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */ dist--; /* dist = match distance - 1 */ 
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
        s.dyn_ltree[($b0e71325728b7a56$var$_length_code[lc] + $b0e71325728b7a56$var$LITERALS$1 + 1) * 2]++;
        s.dyn_dtree[$b0e71325728b7a56$var$d_code(dist) * 2]++;
    }
    return s.sym_next === s.sym_end;
};
var $b0e71325728b7a56$var$_tr_init_1 = $b0e71325728b7a56$var$_tr_init$1;
var $b0e71325728b7a56$var$_tr_stored_block_1 = $b0e71325728b7a56$var$_tr_stored_block$1;
var $b0e71325728b7a56$var$_tr_flush_block_1 = $b0e71325728b7a56$var$_tr_flush_block$1;
var $b0e71325728b7a56$var$_tr_tally_1 = $b0e71325728b7a56$var$_tr_tally$1;
var $b0e71325728b7a56$var$_tr_align_1 = $b0e71325728b7a56$var$_tr_align$1;
var $b0e71325728b7a56$var$trees = {
    _tr_init: $b0e71325728b7a56$var$_tr_init_1,
    _tr_stored_block: $b0e71325728b7a56$var$_tr_stored_block_1,
    _tr_flush_block: $b0e71325728b7a56$var$_tr_flush_block_1,
    _tr_tally: $b0e71325728b7a56$var$_tr_tally_1,
    _tr_align: $b0e71325728b7a56$var$_tr_align_1
};
// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const $b0e71325728b7a56$var$adler32 = (adler, buf, len, pos)=>{
    let s1 = adler & 0xffff | 0, s2 = adler >>> 16 & 0xffff | 0, n = 0;
    while(len !== 0){
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;
        do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
        }while (--n);
        s1 %= 65521;
        s2 %= 65521;
    }
    return s1 | s2 << 16 | 0;
};
var $b0e71325728b7a56$var$adler32_1 = $b0e71325728b7a56$var$adler32;
// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// Use ordinary array, since untyped makes no boost here
const $b0e71325728b7a56$var$makeTable = ()=>{
    let c, table = [];
    for(var n = 0; n < 256; n++){
        c = n;
        for(var k = 0; k < 8; k++)c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
        table[n] = c;
    }
    return table;
};
// Create table on load. Just 255 signed longs. Not a problem.
const $b0e71325728b7a56$var$crcTable = new Uint32Array($b0e71325728b7a56$var$makeTable());
const $b0e71325728b7a56$var$crc32 = (crc, buf, len, pos)=>{
    const t = $b0e71325728b7a56$var$crcTable;
    const end = pos + len;
    crc ^= -1;
    for(let i = pos; i < end; i++)crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
    return crc ^ -1; // >>> 0;
};
var $b0e71325728b7a56$var$crc32_1 = $b0e71325728b7a56$var$crc32;
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var $b0e71325728b7a56$var$messages = {
    2: "need dictionary",
    /* Z_NEED_DICT       2  */ 1: "stream end",
    /* Z_STREAM_END      1  */ 0: "",
    /* Z_OK              0  */ "-1": "file error",
    /* Z_ERRNO         (-1) */ "-2": "stream error",
    /* Z_STREAM_ERROR  (-2) */ "-3": "data error",
    /* Z_DATA_ERROR    (-3) */ "-4": "insufficient memory",
    /* Z_MEM_ERROR     (-4) */ "-5": "buffer error",
    /* Z_BUF_ERROR     (-5) */ "-6": "incompatible version" /* Z_VERSION_ERROR (-6) */ 
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var $b0e71325728b7a56$var$constants$2 = {
    /* Allowed flush values; see deflate() and inflate() below for details */ Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_TREES: 6,
    /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */ Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    Z_MEM_ERROR: -4,
    Z_BUF_ERROR: -5,
    //Z_VERSION_ERROR: -6,
    /* compression levels */ Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    /* Possible values of the data_type field (though see inflate()) */ Z_BINARY: 0,
    Z_TEXT: 1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN: 2,
    /* The deflate compression method */ Z_DEFLATED: 8
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const { _tr_init: $b0e71325728b7a56$var$_tr_init, _tr_stored_block: $b0e71325728b7a56$var$_tr_stored_block, _tr_flush_block: $b0e71325728b7a56$var$_tr_flush_block, _tr_tally: $b0e71325728b7a56$var$_tr_tally, _tr_align: $b0e71325728b7a56$var$_tr_align } = $b0e71325728b7a56$var$trees;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: $b0e71325728b7a56$var$Z_NO_FLUSH$2, Z_PARTIAL_FLUSH: $b0e71325728b7a56$var$Z_PARTIAL_FLUSH, Z_FULL_FLUSH: $b0e71325728b7a56$var$Z_FULL_FLUSH$1, Z_FINISH: $b0e71325728b7a56$var$Z_FINISH$3, Z_BLOCK: $b0e71325728b7a56$var$Z_BLOCK$1, Z_OK: $b0e71325728b7a56$var$Z_OK$3, Z_STREAM_END: $b0e71325728b7a56$var$Z_STREAM_END$3, Z_STREAM_ERROR: $b0e71325728b7a56$var$Z_STREAM_ERROR$2, Z_DATA_ERROR: $b0e71325728b7a56$var$Z_DATA_ERROR$2, Z_BUF_ERROR: $b0e71325728b7a56$var$Z_BUF_ERROR$1, Z_DEFAULT_COMPRESSION: $b0e71325728b7a56$var$Z_DEFAULT_COMPRESSION$1, Z_FILTERED: $b0e71325728b7a56$var$Z_FILTERED, Z_HUFFMAN_ONLY: $b0e71325728b7a56$var$Z_HUFFMAN_ONLY, Z_RLE: $b0e71325728b7a56$var$Z_RLE, Z_FIXED: $b0e71325728b7a56$var$Z_FIXED, Z_DEFAULT_STRATEGY: $b0e71325728b7a56$var$Z_DEFAULT_STRATEGY$1, Z_UNKNOWN: $b0e71325728b7a56$var$Z_UNKNOWN, Z_DEFLATED: $b0e71325728b7a56$var$Z_DEFLATED$2 } = $b0e71325728b7a56$var$constants$2;
/*============================================================================*/ const $b0e71325728b7a56$var$MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */ const $b0e71325728b7a56$var$MAX_WBITS$1 = 15;
/* 32K LZ77 window */ const $b0e71325728b7a56$var$DEF_MEM_LEVEL = 8;
const $b0e71325728b7a56$var$LENGTH_CODES = 29;
/* number of length codes, not counting the special END_BLOCK code */ const $b0e71325728b7a56$var$LITERALS = 256;
/* number of literal bytes 0..255 */ const $b0e71325728b7a56$var$L_CODES = $b0e71325728b7a56$var$LITERALS + 1 + $b0e71325728b7a56$var$LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */ const $b0e71325728b7a56$var$D_CODES = 30;
/* number of distance codes */ const $b0e71325728b7a56$var$BL_CODES = 19;
/* number of codes used to transfer the bit lengths */ const $b0e71325728b7a56$var$HEAP_SIZE = 2 * $b0e71325728b7a56$var$L_CODES + 1;
/* maximum heap size */ const $b0e71325728b7a56$var$MAX_BITS = 15;
/* All codes must not exceed MAX_BITS bits */ const $b0e71325728b7a56$var$MIN_MATCH = 3;
const $b0e71325728b7a56$var$MAX_MATCH = 258;
const $b0e71325728b7a56$var$MIN_LOOKAHEAD = $b0e71325728b7a56$var$MAX_MATCH + $b0e71325728b7a56$var$MIN_MATCH + 1;
const $b0e71325728b7a56$var$PRESET_DICT = 0x20;
const $b0e71325728b7a56$var$INIT_STATE = 42; /* zlib header -> BUSY_STATE */ 
//#ifdef GZIP
const $b0e71325728b7a56$var$GZIP_STATE = 57; /* gzip header -> BUSY_STATE | EXTRA_STATE */ 
//#endif
const $b0e71325728b7a56$var$EXTRA_STATE = 69; /* gzip extra block -> NAME_STATE */ 
const $b0e71325728b7a56$var$NAME_STATE = 73; /* gzip file name -> COMMENT_STATE */ 
const $b0e71325728b7a56$var$COMMENT_STATE = 91; /* gzip comment -> HCRC_STATE */ 
const $b0e71325728b7a56$var$HCRC_STATE = 103; /* gzip header CRC -> BUSY_STATE */ 
const $b0e71325728b7a56$var$BUSY_STATE = 113; /* deflate -> FINISH_STATE */ 
const $b0e71325728b7a56$var$FINISH_STATE = 666; /* stream complete */ 
const $b0e71325728b7a56$var$BS_NEED_MORE = 1; /* block not completed, need more input or more output */ 
const $b0e71325728b7a56$var$BS_BLOCK_DONE = 2; /* block flush performed */ 
const $b0e71325728b7a56$var$BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */ 
const $b0e71325728b7a56$var$BS_FINISH_DONE = 4; /* finish done, accept no more input or output */ 
const $b0e71325728b7a56$var$OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
const $b0e71325728b7a56$var$err = (strm, errorCode)=>{
    strm.msg = $b0e71325728b7a56$var$messages[errorCode];
    return errorCode;
};
const $b0e71325728b7a56$var$rank = (f)=>{
    return f * 2 - (f > 4 ? 9 : 0);
};
const $b0e71325728b7a56$var$zero = (buf)=>{
    let len = buf.length;
    while(--len >= 0)buf[len] = 0;
};
/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */ const $b0e71325728b7a56$var$slide_hash = (s)=>{
    let n, m;
    let p;
    let wsize = s.w_size;
    n = s.hash_size;
    p = n;
    do {
        m = s.head[--p];
        s.head[p] = m >= wsize ? m - wsize : 0;
    }while (--n);
    n = wsize;
    //#ifndef FASTEST
    p = n;
    do {
        m = s.prev[--p];
        s.prev[p] = m >= wsize ? m - wsize : 0;
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */ }while (--n);
//#endif
};
/* eslint-disable new-cap */ let $b0e71325728b7a56$var$HASH_ZLIB = (s, prev, data)=>(prev << s.hash_shift ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let $b0e71325728b7a56$var$HASH = $b0e71325728b7a56$var$HASH_ZLIB;
/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */ const $b0e71325728b7a56$var$flush_pending = (strm)=>{
    const s = strm.state;
    //_tr_flush_bits(s);
    let len = s.pending;
    if (len > strm.avail_out) len = strm.avail_out;
    if (len === 0) return;
    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) s.pending_out = 0;
};
const $b0e71325728b7a56$var$flush_block_only = (s, last)=>{
    $b0e71325728b7a56$var$_tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    $b0e71325728b7a56$var$flush_pending(s.strm);
};
const $b0e71325728b7a56$var$put_byte = (s, b)=>{
    s.pending_buf[s.pending++] = b;
};
/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */ const $b0e71325728b7a56$var$putShortMSB = (s, b)=>{
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = b >>> 8 & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
};
/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */ const $b0e71325728b7a56$var$read_buf = (strm, buf, start, size)=>{
    let len = strm.avail_in;
    if (len > size) len = size;
    if (len === 0) return 0;
    strm.avail_in -= len;
    // zmemcpy(buf, strm->next_in, len);
    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
    if (strm.state.wrap === 1) strm.adler = $b0e71325728b7a56$var$adler32_1(strm.adler, buf, len, start);
    else if (strm.state.wrap === 2) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, buf, len, start);
    strm.next_in += len;
    strm.total_in += len;
    return len;
};
/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */ const $b0e71325728b7a56$var$longest_match = (s, cur_match)=>{
    let chain_length = s.max_chain_length; /* max hash chain length */ 
    let scan = s.strstart; /* current string */ 
    let match; /* matched string */ 
    let len; /* length of current match */ 
    let best_len = s.prev_length; /* best match length so far */ 
    let nice_match = s.nice_match; /* stop if match long enough */ 
    const limit = s.strstart > s.w_size - $b0e71325728b7a56$var$MIN_LOOKAHEAD ? s.strstart - (s.w_size - $b0e71325728b7a56$var$MIN_LOOKAHEAD) : 0 /*NIL*/ ;
    const _win = s.window; // shortcut
    const wmask = s.w_mask;
    const prev = s.prev;
    /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */ const strend = s.strstart + $b0e71325728b7a56$var$MAX_MATCH;
    let scan_end1 = _win[scan + best_len - 1];
    let scan_end = _win[scan + best_len];
    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
    /* Do not waste too much time if we already have a good match: */ if (s.prev_length >= s.good_match) chain_length >>= 2;
    /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */ if (nice_match > s.lookahead) nice_match = s.lookahead;
    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
    do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;
        /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */ if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) continue;
        /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */ scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");
        /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */ do ;
        while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
        len = $b0e71325728b7a56$var$MAX_MATCH - (strend - scan);
        scan = strend - $b0e71325728b7a56$var$MAX_MATCH;
        if (len > best_len) {
            s.match_start = cur_match;
            best_len = len;
            if (len >= nice_match) break;
            scan_end1 = _win[scan + best_len - 1];
            scan_end = _win[scan + best_len];
        }
    }while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
    if (best_len <= s.lookahead) return best_len;
    return s.lookahead;
};
/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */ const $b0e71325728b7a56$var$fill_window = (s)=>{
    const _w_size = s.w_size;
    let n, more, str;
    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
    do {
        more = s.window_size - s.lookahead - s.strstart;
        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}
        /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */ if (s.strstart >= _w_size + (_w_size - $b0e71325728b7a56$var$MIN_LOOKAHEAD)) {
            s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
            s.match_start -= _w_size;
            s.strstart -= _w_size;
            /* we now have strstart >= MAX_DIST */ s.block_start -= _w_size;
            if (s.insert > s.strstart) s.insert = s.strstart;
            $b0e71325728b7a56$var$slide_hash(s);
            more += _w_size;
        }
        if (s.strm.avail_in === 0) break;
        /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */ //Assert(more >= 2, "more < 2");
        n = $b0e71325728b7a56$var$read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
        /* Initialize the hash value now that we have some input: */ if (s.lookahead + s.insert >= $b0e71325728b7a56$var$MIN_MATCH) {
            str = s.strstart - s.insert;
            s.ins_h = s.window[str];
            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[str + 1]);
            //#if MIN_MATCH != 3
            //        Call update_hash() MIN_MATCH-3 more times
            //#endif
            while(s.insert){
                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[str + $b0e71325728b7a56$var$MIN_MATCH - 1]);
                s.prev[str & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = str;
                str++;
                s.insert--;
                if (s.lookahead + s.insert < $b0e71325728b7a56$var$MIN_MATCH) break;
            }
        }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */ }while (s.lookahead < $b0e71325728b7a56$var$MIN_LOOKAHEAD && s.strm.avail_in !== 0);
/* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */ //  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};
/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */ const $b0e71325728b7a56$var$deflate_stored = (s, flush)=>{
    /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */ let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
    /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */ let len, left, have, last = 0;
    let used = s.strm.avail_in;
    do {
        /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */ len = 65535 /* MAX_STORED */ ; /* maximum deflate stored block length */ 
        have = s.bi_valid + 42 >> 3; /* number of header bytes */ 
        if (s.strm.avail_out < have) break;
        /* maximum stored block length that will fit in avail_out: */ have = s.strm.avail_out - have;
        left = s.strstart - s.block_start; /* bytes left in window */ 
        if (len > left + s.strm.avail_in) len = left + s.strm.avail_in; /* limit len to the input */ 
        if (len > have) len = have; /* limit len to the output */ 
        /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */ if (len < min_block && (len === 0 && flush !== $b0e71325728b7a56$var$Z_FINISH$3 || flush === $b0e71325728b7a56$var$Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) break;
        /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */ last = flush === $b0e71325728b7a56$var$Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
        $b0e71325728b7a56$var$_tr_stored_block(s, 0, 0, last);
        /* Replace the lengths in the dummy stored block with len. */ s.pending_buf[s.pending - 4] = len;
        s.pending_buf[s.pending - 3] = len >> 8;
        s.pending_buf[s.pending - 2] = ~len;
        s.pending_buf[s.pending - 1] = ~len >> 8;
        /* Write the stored block header bytes. */ $b0e71325728b7a56$var$flush_pending(s.strm);
        //#ifdef ZLIB_DEBUG
        //    /* Update debugging counts for the data about to be copied. */
        //    s->compressed_len += len << 3;
        //    s->bits_sent += len << 3;
        //#endif
        /* Copy uncompressed bytes from the window to next_out. */ if (left) {
            if (left > len) left = len;
            //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
            s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
            s.strm.next_out += left;
            s.strm.avail_out -= left;
            s.strm.total_out += left;
            s.block_start += left;
            len -= left;
        }
        /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */ if (len) {
            $b0e71325728b7a56$var$read_buf(s.strm, s.strm.output, s.strm.next_out, len);
            s.strm.next_out += len;
            s.strm.avail_out -= len;
            s.strm.total_out += len;
        }
    }while (last === 0);
    /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */ used -= s.strm.avail_in; /* number of input bytes directly copied */ 
    if (used) {
        /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */ if (used >= s.w_size) {
            s.matches = 2; /* clear hash */ 
            //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
            s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
            s.strstart = s.w_size;
            s.insert = s.strstart;
        } else {
            if (s.window_size - s.strstart <= used) {
                /* Slide the window down. */ s.strstart -= s.w_size;
                //zmemcpy(s->window, s->window + s->w_size, s->strstart);
                s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
                if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ 
                if (s.insert > s.strstart) s.insert = s.strstart;
            }
            //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
            s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
            s.strstart += used;
            s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
        }
        s.block_start = s.strstart;
    }
    if (s.high_water < s.strstart) s.high_water = s.strstart;
    /* If the last block was written to next_out, then done. */ if (last) return $b0e71325728b7a56$var$BS_FINISH_DONE;
    /* If flushing and all input has been consumed, then done. */ if (flush !== $b0e71325728b7a56$var$Z_NO_FLUSH$2 && flush !== $b0e71325728b7a56$var$Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) return $b0e71325728b7a56$var$BS_BLOCK_DONE;
    /* Fill the window with any remaining input. */ have = s.window_size - s.strstart;
    if (s.strm.avail_in > have && s.block_start >= s.w_size) {
        /* Slide the window down. */ s.block_start -= s.w_size;
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ 
        have += s.w_size; /* more space now */ 
        if (s.insert > s.strstart) s.insert = s.strstart;
    }
    if (have > s.strm.avail_in) have = s.strm.avail_in;
    if (have) {
        $b0e71325728b7a56$var$read_buf(s.strm, s.window, s.strstart, have);
        s.strstart += have;
        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
    }
    if (s.high_water < s.strstart) s.high_water = s.strstart;
    /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */ have = s.bi_valid + 42 >> 3; /* number of header bytes */ 
    /* maximum stored block length that will fit in pending: */ have = s.pending_buf_size - have > 65535 /* MAX_STORED */  ? 65535 /* MAX_STORED */  : s.pending_buf_size - have;
    min_block = have > s.w_size ? s.w_size : have;
    left = s.strstart - s.block_start;
    if (left >= min_block || (left || flush === $b0e71325728b7a56$var$Z_FINISH$3) && flush !== $b0e71325728b7a56$var$Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {
        len = left > have ? have : left;
        last = flush === $b0e71325728b7a56$var$Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;
        $b0e71325728b7a56$var$_tr_stored_block(s, s.block_start, len, last);
        s.block_start += len;
        $b0e71325728b7a56$var$flush_pending(s.strm);
    }
    /* We've done all we can with the available input and output. */ return last ? $b0e71325728b7a56$var$BS_FINISH_STARTED : $b0e71325728b7a56$var$BS_NEED_MORE;
};
/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */ const $b0e71325728b7a56$var$deflate_fast = (s, flush)=>{
    let hash_head; /* head of the hash chain */ 
    let bflush; /* set if current block must be flushed */ 
    for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */ if (s.lookahead < $b0e71325728b7a56$var$MIN_LOOKAHEAD) {
            $b0e71325728b7a56$var$fill_window(s);
            if (s.lookahead < $b0e71325728b7a56$var$MIN_LOOKAHEAD && flush === $b0e71325728b7a56$var$Z_NO_FLUSH$2) return $b0e71325728b7a56$var$BS_NEED_MORE;
            if (s.lookahead === 0) break; /* flush the current block */ 
        }
        /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */ hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= $b0e71325728b7a56$var$MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[s.strstart + $b0e71325728b7a56$var$MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
        /***/ }
        /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */ if (hash_head !== 0 /*NIL*/  && s.strstart - hash_head <= s.w_size - $b0e71325728b7a56$var$MIN_LOOKAHEAD) /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */ s.match_length = $b0e71325728b7a56$var$longest_match(s, hash_head);
        if (s.match_length >= $b0e71325728b7a56$var$MIN_MATCH) {
            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
            /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, s.strstart - s.match_start, s.match_length - $b0e71325728b7a56$var$MIN_MATCH);
            s.lookahead -= s.match_length;
            /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */ if (s.match_length <= s.max_lazy_match /*max_insert_length*/  && s.lookahead >= $b0e71325728b7a56$var$MIN_MATCH) {
                s.match_length--; /* string at strstart already in table */ 
                do {
                    s.strstart++;
                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[s.strstart + $b0e71325728b7a56$var$MIN_MATCH - 1]);
                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = s.strstart;
                /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */ }while (--s.match_length !== 0);
                s.strstart++;
            } else {
                s.strstart += s.match_length;
                s.match_length = 0;
                s.ins_h = s.window[s.strstart];
                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[s.strstart + 1]);
            //#if MIN_MATCH != 3
            //                Call UPDATE_HASH() MIN_MATCH-3 more times
            //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */ }
        } else {
            /* No match, output a literal byte */ //Tracevv((stderr,"%c", s.window[s.strstart]));
            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
        }
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
            if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
        /***/ }
    }
    s.insert = s.strstart < $b0e71325728b7a56$var$MIN_MATCH - 1 ? s.strstart : $b0e71325728b7a56$var$MIN_MATCH - 1;
    if (flush === $b0e71325728b7a56$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $b0e71325728b7a56$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_FINISH_STARTED;
        /***/ return $b0e71325728b7a56$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
    /***/ }
    return $b0e71325728b7a56$var$BS_BLOCK_DONE;
};
/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */ const $b0e71325728b7a56$var$deflate_slow = (s, flush)=>{
    let hash_head; /* head of hash chain */ 
    let bflush; /* set if current block must be flushed */ 
    let max_insert;
    /* Process the input block. */ for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */ if (s.lookahead < $b0e71325728b7a56$var$MIN_LOOKAHEAD) {
            $b0e71325728b7a56$var$fill_window(s);
            if (s.lookahead < $b0e71325728b7a56$var$MIN_LOOKAHEAD && flush === $b0e71325728b7a56$var$Z_NO_FLUSH$2) return $b0e71325728b7a56$var$BS_NEED_MORE;
            if (s.lookahead === 0) break;
             /* flush the current block */ 
        }
        /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */ hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= $b0e71325728b7a56$var$MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[s.strstart + $b0e71325728b7a56$var$MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
        /***/ }
        /* Find the longest match, discarding those <= prev_length.
     */ s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = $b0e71325728b7a56$var$MIN_MATCH - 1;
        if (hash_head !== 0 /*NIL*/  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - $b0e71325728b7a56$var$MIN_LOOKAHEAD) {
            /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */ s.match_length = $b0e71325728b7a56$var$longest_match(s, hash_head);
            /* longest_match() sets match_start */ if (s.match_length <= 5 && (s.strategy === $b0e71325728b7a56$var$Z_FILTERED || s.match_length === $b0e71325728b7a56$var$MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ )) /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */ s.match_length = $b0e71325728b7a56$var$MIN_MATCH - 1;
        }
        /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */ if (s.prev_length >= $b0e71325728b7a56$var$MIN_MATCH && s.match_length <= s.prev_length) {
            max_insert = s.strstart + s.lookahead - $b0e71325728b7a56$var$MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - $b0e71325728b7a56$var$MIN_MATCH);
            /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */ s.lookahead -= s.prev_length - 1;
            s.prev_length -= 2;
            do if (++s.strstart <= max_insert) {
                /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[s.strstart + $b0e71325728b7a56$var$MIN_MATCH - 1]);
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
            /***/ }
            while (--s.prev_length !== 0);
            s.match_available = 0;
            s.match_length = $b0e71325728b7a56$var$MIN_MATCH - 1;
            s.strstart++;
            if (bflush) {
                /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
                if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
            /***/ }
        } else if (s.match_available) {
            /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */ //Tracevv((stderr,"%c", s->window[s->strstart-1]));
            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, 0, s.window[s.strstart - 1]);
            if (bflush) /*** FLUSH_BLOCK_ONLY(s, 0) ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
            s.strstart++;
            s.lookahead--;
            if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
        } else {
            /* There is no previous match to compare with, wait for
       * the next step to decide.
       */ s.match_available = 1;
            s.strstart++;
            s.lookahead--;
        }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, 0, s.window[s.strstart - 1]);
        s.match_available = 0;
    }
    s.insert = s.strstart < $b0e71325728b7a56$var$MIN_MATCH - 1 ? s.strstart : $b0e71325728b7a56$var$MIN_MATCH - 1;
    if (flush === $b0e71325728b7a56$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $b0e71325728b7a56$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_FINISH_STARTED;
        /***/ return $b0e71325728b7a56$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
    /***/ }
    return $b0e71325728b7a56$var$BS_BLOCK_DONE;
};
/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */ const $b0e71325728b7a56$var$deflate_rle = (s, flush)=>{
    let bflush; /* set if current block must be flushed */ 
    let prev; /* byte at distance one to match */ 
    let scan, strend; /* scan goes up to strend for length of run */ 
    const _win = s.window;
    for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */ if (s.lookahead <= $b0e71325728b7a56$var$MAX_MATCH) {
            $b0e71325728b7a56$var$fill_window(s);
            if (s.lookahead <= $b0e71325728b7a56$var$MAX_MATCH && flush === $b0e71325728b7a56$var$Z_NO_FLUSH$2) return $b0e71325728b7a56$var$BS_NEED_MORE;
            if (s.lookahead === 0) break;
             /* flush the current block */ 
        }
        /* See how many times the previous byte repeats */ s.match_length = 0;
        if (s.lookahead >= $b0e71325728b7a56$var$MIN_MATCH && s.strstart > 0) {
            scan = s.strstart - 1;
            prev = _win[scan];
            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                strend = s.strstart + $b0e71325728b7a56$var$MAX_MATCH;
                do ;
                while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
                s.match_length = $b0e71325728b7a56$var$MAX_MATCH - (strend - scan);
                if (s.match_length > s.lookahead) s.match_length = s.lookahead;
            }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }
        /* Emit match if have run of MIN_MATCH or longer, else emit literal */ if (s.match_length >= $b0e71325728b7a56$var$MIN_MATCH) {
            //check_match(s, s.strstart, s.strstart - 1, s.match_length);
            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, 1, s.match_length - $b0e71325728b7a56$var$MIN_MATCH);
            s.lookahead -= s.match_length;
            s.strstart += s.match_length;
            s.match_length = 0;
        } else {
            /* No match, output a literal byte */ //Tracevv((stderr,"%c", s->window[s->strstart]));
            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
        }
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
            if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
        /***/ }
    }
    s.insert = 0;
    if (flush === $b0e71325728b7a56$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $b0e71325728b7a56$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_FINISH_STARTED;
        /***/ return $b0e71325728b7a56$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
    /***/ }
    return $b0e71325728b7a56$var$BS_BLOCK_DONE;
};
/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */ const $b0e71325728b7a56$var$deflate_huff = (s, flush)=>{
    let bflush; /* set if current block must be flushed */ 
    for(;;){
        /* Make sure that we have a literal to write. */ if (s.lookahead === 0) {
            $b0e71325728b7a56$var$fill_window(s);
            if (s.lookahead === 0) {
                if (flush === $b0e71325728b7a56$var$Z_NO_FLUSH$2) return $b0e71325728b7a56$var$BS_NEED_MORE;
                break; /* flush the current block */ 
            }
        }
        /* Output a literal byte */ s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $b0e71325728b7a56$var$_tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
            if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
        /***/ }
    }
    s.insert = 0;
    if (flush === $b0e71325728b7a56$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $b0e71325728b7a56$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_FINISH_STARTED;
        /***/ return $b0e71325728b7a56$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $b0e71325728b7a56$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $b0e71325728b7a56$var$BS_NEED_MORE;
    /***/ }
    return $b0e71325728b7a56$var$BS_BLOCK_DONE;
};
/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */ function $b0e71325728b7a56$var$Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
}
const $b0e71325728b7a56$var$configuration_table = [
    /*      good lazy nice chain */ new $b0e71325728b7a56$var$Config(0, 0, 0, 0, $b0e71325728b7a56$var$deflate_stored),
    /* 0 store only */ new $b0e71325728b7a56$var$Config(4, 4, 8, 4, $b0e71325728b7a56$var$deflate_fast),
    /* 1 max speed, no lazy matches */ new $b0e71325728b7a56$var$Config(4, 5, 16, 8, $b0e71325728b7a56$var$deflate_fast),
    /* 2 */ new $b0e71325728b7a56$var$Config(4, 6, 32, 32, $b0e71325728b7a56$var$deflate_fast),
    /* 3 */ new $b0e71325728b7a56$var$Config(4, 4, 16, 16, $b0e71325728b7a56$var$deflate_slow),
    /* 4 lazy matches */ new $b0e71325728b7a56$var$Config(8, 16, 32, 32, $b0e71325728b7a56$var$deflate_slow),
    /* 5 */ new $b0e71325728b7a56$var$Config(8, 16, 128, 128, $b0e71325728b7a56$var$deflate_slow),
    /* 6 */ new $b0e71325728b7a56$var$Config(8, 32, 128, 256, $b0e71325728b7a56$var$deflate_slow),
    /* 7 */ new $b0e71325728b7a56$var$Config(32, 128, 258, 1024, $b0e71325728b7a56$var$deflate_slow),
    /* 8 */ new $b0e71325728b7a56$var$Config(32, 258, 258, 4096, $b0e71325728b7a56$var$deflate_slow)
];
/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */ const $b0e71325728b7a56$var$lm_init = (s)=>{
    s.window_size = 2 * s.w_size;
    /*** CLEAR_HASH(s); ***/ $b0e71325728b7a56$var$zero(s.head); // Fill with NIL (= 0);
    /* Set the default configuration parameters:
   */ s.max_lazy_match = $b0e71325728b7a56$var$configuration_table[s.level].max_lazy;
    s.good_match = $b0e71325728b7a56$var$configuration_table[s.level].good_length;
    s.nice_match = $b0e71325728b7a56$var$configuration_table[s.level].nice_length;
    s.max_chain_length = $b0e71325728b7a56$var$configuration_table[s.level].max_chain;
    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = $b0e71325728b7a56$var$MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
};
function $b0e71325728b7a56$var$DeflateState() {
    this.strm = null; /* pointer back to this zlib stream */ 
    this.status = 0; /* as the name implies */ 
    this.pending_buf = null; /* output still pending */ 
    this.pending_buf_size = 0; /* size of pending_buf */ 
    this.pending_out = 0; /* next pending byte to output to the stream */ 
    this.pending = 0; /* nb of bytes in the pending buffer */ 
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ 
    this.gzhead = null; /* gzip header information to write */ 
    this.gzindex = 0; /* where in extra, name, or comment */ 
    this.method = $b0e71325728b7a56$var$Z_DEFLATED$2; /* can only be DEFLATED */ 
    this.last_flush = -1; /* value of flush param for previous deflate call */ 
    this.w_size = 0; /* LZ77 window size (32K by default) */ 
    this.w_bits = 0; /* log2(w_size)  (8..16) */ 
    this.w_mask = 0; /* w_size - 1 */ 
    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */ this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */ this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */ this.head = null; /* Heads of the hash chains or NIL. */ 
    this.ins_h = 0; /* hash index of string to be inserted */ 
    this.hash_size = 0; /* number of elements in hash table */ 
    this.hash_bits = 0; /* log2(hash_size) */ 
    this.hash_mask = 0; /* hash_size-1 */ 
    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */ this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */ this.match_length = 0; /* length of best match */ 
    this.prev_match = 0; /* previous match */ 
    this.match_available = 0; /* set if previous match exists */ 
    this.strstart = 0; /* start of string to insert */ 
    this.match_start = 0; /* start of matching string */ 
    this.lookahead = 0; /* number of valid bytes ahead in window */ 
    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */ this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */ this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */ // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */ this.level = 0; /* compression level (1..9) */ 
    this.strategy = 0; /* favor or force Huffman coding*/ 
    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */ this.nice_match = 0; /* Stop searching when current match exceeds this */ 
    /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree = new Uint16Array($b0e71325728b7a56$var$HEAP_SIZE * 2);
    this.dyn_dtree = new Uint16Array((2 * $b0e71325728b7a56$var$D_CODES + 1) * 2);
    this.bl_tree = new Uint16Array((2 * $b0e71325728b7a56$var$BL_CODES + 1) * 2);
    $b0e71325728b7a56$var$zero(this.dyn_ltree);
    $b0e71325728b7a56$var$zero(this.dyn_dtree);
    $b0e71325728b7a56$var$zero(this.bl_tree);
    this.l_desc = null; /* desc. for literal tree */ 
    this.d_desc = null; /* desc. for distance tree */ 
    this.bl_desc = null; /* desc. for bit length tree */ 
    //ush bl_count[MAX_BITS+1];
    this.bl_count = new Uint16Array($b0e71325728b7a56$var$MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new Uint16Array(2 * $b0e71325728b7a56$var$L_CODES + 1); /* heap used to build the Huffman trees */ 
    $b0e71325728b7a56$var$zero(this.heap);
    this.heap_len = 0; /* number of elements in the heap */ 
    this.heap_max = 0; /* element of largest frequency */ 
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */ this.depth = new Uint16Array(2 * $b0e71325728b7a56$var$L_CODES + 1); //uch depth[2*L_CODES+1];
    $b0e71325728b7a56$var$zero(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
   */ this.sym_buf = 0; /* buffer for distances and literals/lengths */ 
    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */ this.sym_next = 0; /* running index in sym_buf */ 
    this.sym_end = 0; /* symbol table full when sym_next reaches this */ 
    this.opt_len = 0; /* bit length of current block with optimal trees */ 
    this.static_len = 0; /* bit length of current block with static trees */ 
    this.matches = 0; /* number of string matches in current block */ 
    this.insert = 0; /* bytes at end of window left to insert */ 
    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */ this.bi_valid = 0;
/* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */ // Used for window memory init. We safely ignore it for JS. That makes
// sense only for pointers and memory check tools.
//this.high_water = 0;
/* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */ }
/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */ const $b0e71325728b7a56$var$deflateStateCheck = (strm)=>{
    if (!strm) return 1;
    const s = strm.state;
    if (!s || s.strm !== strm || s.status !== $b0e71325728b7a56$var$INIT_STATE && //#ifdef GZIP
    s.status !== $b0e71325728b7a56$var$GZIP_STATE && //#endif
    s.status !== $b0e71325728b7a56$var$EXTRA_STATE && s.status !== $b0e71325728b7a56$var$NAME_STATE && s.status !== $b0e71325728b7a56$var$COMMENT_STATE && s.status !== $b0e71325728b7a56$var$HCRC_STATE && s.status !== $b0e71325728b7a56$var$BUSY_STATE && s.status !== $b0e71325728b7a56$var$FINISH_STATE) return 1;
    return 0;
};
const $b0e71325728b7a56$var$deflateResetKeep = (strm)=>{
    if ($b0e71325728b7a56$var$deflateStateCheck(strm)) return $b0e71325728b7a56$var$err(strm, $b0e71325728b7a56$var$Z_STREAM_ERROR$2);
    strm.total_in = strm.total_out = 0;
    strm.data_type = $b0e71325728b7a56$var$Z_UNKNOWN;
    const s = strm.state;
    s.pending = 0;
    s.pending_out = 0;
    if (s.wrap < 0) s.wrap = -s.wrap;
    s.status = //#ifdef GZIP
    s.wrap === 2 ? $b0e71325728b7a56$var$GZIP_STATE : //#endif
    s.wrap ? $b0e71325728b7a56$var$INIT_STATE : $b0e71325728b7a56$var$BUSY_STATE;
    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
     : 1; // adler32(0, Z_NULL, 0)
    s.last_flush = -2;
    $b0e71325728b7a56$var$_tr_init(s);
    return $b0e71325728b7a56$var$Z_OK$3;
};
const $b0e71325728b7a56$var$deflateReset = (strm)=>{
    const ret = $b0e71325728b7a56$var$deflateResetKeep(strm);
    if (ret === $b0e71325728b7a56$var$Z_OK$3) $b0e71325728b7a56$var$lm_init(strm.state);
    return ret;
};
const $b0e71325728b7a56$var$deflateSetHeader = (strm, head)=>{
    if ($b0e71325728b7a56$var$deflateStateCheck(strm) || strm.state.wrap !== 2) return $b0e71325728b7a56$var$Z_STREAM_ERROR$2;
    strm.state.gzhead = head;
    return $b0e71325728b7a56$var$Z_OK$3;
};
const $b0e71325728b7a56$var$deflateInit2 = (strm, level, method, windowBits, memLevel, strategy)=>{
    if (!strm) return $b0e71325728b7a56$var$Z_STREAM_ERROR$2;
    let wrap = 1;
    if (level === $b0e71325728b7a56$var$Z_DEFAULT_COMPRESSION$1) level = 6;
    if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
    } else if (windowBits > 15) {
        wrap = 2; /* write gzip wrapper instead */ 
        windowBits -= 16;
    }
    if (memLevel < 1 || memLevel > $b0e71325728b7a56$var$MAX_MEM_LEVEL || method !== $b0e71325728b7a56$var$Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > $b0e71325728b7a56$var$Z_FIXED || windowBits === 8 && wrap !== 1) return $b0e71325728b7a56$var$err(strm, $b0e71325728b7a56$var$Z_STREAM_ERROR$2);
    if (windowBits === 8) windowBits = 9;
    /* until 256-byte window bug fixed */ const s = new $b0e71325728b7a56$var$DeflateState();
    strm.state = s;
    s.strm = strm;
    s.status = $b0e71325728b7a56$var$INIT_STATE; /* to pass state test in deflateReset() */ 
    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;
    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + $b0e71325728b7a56$var$MIN_MATCH - 1) / $b0e71325728b7a56$var$MIN_MATCH);
    s.window = new Uint8Array(s.w_size * 2);
    s.head = new Uint16Array(s.hash_size);
    s.prev = new Uint16Array(s.w_size);
    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */
    s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */ 
    /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */ s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new Uint8Array(s.pending_buf_size);
    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->sym_buf = s->pending_buf + s->lit_bufsize;
    s.sym_buf = s.lit_bufsize;
    //s->sym_end = (s->lit_bufsize - 1) * 3;
    s.sym_end = (s.lit_bufsize - 1) * 3;
    /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */ s.level = level;
    s.strategy = strategy;
    s.method = method;
    return $b0e71325728b7a56$var$deflateReset(strm);
};
const $b0e71325728b7a56$var$deflateInit = (strm, level)=>{
    return $b0e71325728b7a56$var$deflateInit2(strm, level, $b0e71325728b7a56$var$Z_DEFLATED$2, $b0e71325728b7a56$var$MAX_WBITS$1, $b0e71325728b7a56$var$DEF_MEM_LEVEL, $b0e71325728b7a56$var$Z_DEFAULT_STRATEGY$1);
};
/* ========================================================================= */ const $b0e71325728b7a56$var$deflate$2 = (strm, flush)=>{
    if ($b0e71325728b7a56$var$deflateStateCheck(strm) || flush > $b0e71325728b7a56$var$Z_BLOCK$1 || flush < 0) return strm ? $b0e71325728b7a56$var$err(strm, $b0e71325728b7a56$var$Z_STREAM_ERROR$2) : $b0e71325728b7a56$var$Z_STREAM_ERROR$2;
    const s = strm.state;
    if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === $b0e71325728b7a56$var$FINISH_STATE && flush !== $b0e71325728b7a56$var$Z_FINISH$3) return $b0e71325728b7a56$var$err(strm, strm.avail_out === 0 ? $b0e71325728b7a56$var$Z_BUF_ERROR$1 : $b0e71325728b7a56$var$Z_STREAM_ERROR$2);
    const old_flush = s.last_flush;
    s.last_flush = flush;
    /* Flush as much pending output as possible */ if (s.pending !== 0) {
        $b0e71325728b7a56$var$flush_pending(strm);
        if (strm.avail_out === 0) {
            /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */ s.last_flush = -1;
            return $b0e71325728b7a56$var$Z_OK$3;
        }
    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */ } else if (strm.avail_in === 0 && $b0e71325728b7a56$var$rank(flush) <= $b0e71325728b7a56$var$rank(old_flush) && flush !== $b0e71325728b7a56$var$Z_FINISH$3) return $b0e71325728b7a56$var$err(strm, $b0e71325728b7a56$var$Z_BUF_ERROR$1);
    /* User must not provide more input after the first FINISH: */ if (s.status === $b0e71325728b7a56$var$FINISH_STATE && strm.avail_in !== 0) return $b0e71325728b7a56$var$err(strm, $b0e71325728b7a56$var$Z_BUF_ERROR$1);
    /* Write the header */ if (s.status === $b0e71325728b7a56$var$INIT_STATE && s.wrap === 0) s.status = $b0e71325728b7a56$var$BUSY_STATE;
    if (s.status === $b0e71325728b7a56$var$INIT_STATE) {
        /* zlib header */ let header = $b0e71325728b7a56$var$Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;
        let level_flags = -1;
        if (s.strategy >= $b0e71325728b7a56$var$Z_HUFFMAN_ONLY || s.level < 2) level_flags = 0;
        else if (s.level < 6) level_flags = 1;
        else if (s.level === 6) level_flags = 2;
        else level_flags = 3;
        header |= level_flags << 6;
        if (s.strstart !== 0) header |= $b0e71325728b7a56$var$PRESET_DICT;
        header += 31 - header % 31;
        $b0e71325728b7a56$var$putShortMSB(s, header);
        /* Save the adler32 of the preset dictionary: */ if (s.strstart !== 0) {
            $b0e71325728b7a56$var$putShortMSB(s, strm.adler >>> 16);
            $b0e71325728b7a56$var$putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
        s.status = $b0e71325728b7a56$var$BUSY_STATE;
        /* Compression must start with an empty pending buffer */ $b0e71325728b7a56$var$flush_pending(strm);
        if (s.pending !== 0) {
            s.last_flush = -1;
            return $b0e71325728b7a56$var$Z_OK$3;
        }
    }
    //#ifdef GZIP
    if (s.status === $b0e71325728b7a56$var$GZIP_STATE) {
        /* gzip header */ strm.adler = 0; //crc32(0L, Z_NULL, 0);
        $b0e71325728b7a56$var$put_byte(s, 31);
        $b0e71325728b7a56$var$put_byte(s, 139);
        $b0e71325728b7a56$var$put_byte(s, 8);
        if (!s.gzhead) {
            $b0e71325728b7a56$var$put_byte(s, 0);
            $b0e71325728b7a56$var$put_byte(s, 0);
            $b0e71325728b7a56$var$put_byte(s, 0);
            $b0e71325728b7a56$var$put_byte(s, 0);
            $b0e71325728b7a56$var$put_byte(s, 0);
            $b0e71325728b7a56$var$put_byte(s, s.level === 9 ? 2 : s.strategy >= $b0e71325728b7a56$var$Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            $b0e71325728b7a56$var$put_byte(s, $b0e71325728b7a56$var$OS_CODE);
            s.status = $b0e71325728b7a56$var$BUSY_STATE;
            /* Compression must start with an empty pending buffer */ $b0e71325728b7a56$var$flush_pending(strm);
            if (s.pending !== 0) {
                s.last_flush = -1;
                return $b0e71325728b7a56$var$Z_OK$3;
            }
        } else {
            $b0e71325728b7a56$var$put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
            $b0e71325728b7a56$var$put_byte(s, s.gzhead.time & 0xff);
            $b0e71325728b7a56$var$put_byte(s, s.gzhead.time >> 8 & 0xff);
            $b0e71325728b7a56$var$put_byte(s, s.gzhead.time >> 16 & 0xff);
            $b0e71325728b7a56$var$put_byte(s, s.gzhead.time >> 24 & 0xff);
            $b0e71325728b7a56$var$put_byte(s, s.level === 9 ? 2 : s.strategy >= $b0e71325728b7a56$var$Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            $b0e71325728b7a56$var$put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
                $b0e71325728b7a56$var$put_byte(s, s.gzhead.extra.length & 0xff);
                $b0e71325728b7a56$var$put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
            }
            if (s.gzhead.hcrc) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, s.pending_buf, s.pending, 0);
            s.gzindex = 0;
            s.status = $b0e71325728b7a56$var$EXTRA_STATE;
        }
    }
    if (s.status === $b0e71325728b7a56$var$EXTRA_STATE) {
        if (s.gzhead.extra /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
            while(s.pending + left > s.pending_buf_size){
                let copy = s.pending_buf_size - s.pending;
                // zmemcpy(s.pending_buf + s.pending,
                //    s.gzhead.extra + s.gzindex, copy);
                s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
                s.pending = s.pending_buf_size;
                //--- HCRC_UPDATE(beg) ---//
                if (s.gzhead.hcrc && s.pending > beg) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                //---//
                s.gzindex += copy;
                $b0e71325728b7a56$var$flush_pending(strm);
                if (s.pending !== 0) {
                    s.last_flush = -1;
                    return $b0e71325728b7a56$var$Z_OK$3;
                }
                beg = 0;
                left -= copy;
            }
            // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
            //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
            let gzhead_extra = new Uint8Array(s.gzhead.extra);
            // zmemcpy(s->pending_buf + s->pending,
            //     s->gzhead->extra + s->gzindex, left);
            s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
            s.pending += left;
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            //---//
            s.gzindex = 0;
        }
        s.status = $b0e71325728b7a56$var$NAME_STATE;
    }
    if (s.status === $b0e71325728b7a56$var$NAME_STATE) {
        if (s.gzhead.name /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let val;
            do {
                if (s.pending === s.pending_buf_size) {
                    //--- HCRC_UPDATE(beg) ---//
                    if (s.gzhead.hcrc && s.pending > beg) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                    //---//
                    $b0e71325728b7a56$var$flush_pending(strm);
                    if (s.pending !== 0) {
                        s.last_flush = -1;
                        return $b0e71325728b7a56$var$Z_OK$3;
                    }
                    beg = 0;
                }
                // JS specific: little magic to add zero terminator to end of string
                if (s.gzindex < s.gzhead.name.length) val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                else val = 0;
                $b0e71325728b7a56$var$put_byte(s, val);
            }while (val !== 0);
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            //---//
            s.gzindex = 0;
        }
        s.status = $b0e71325728b7a56$var$COMMENT_STATE;
    }
    if (s.status === $b0e71325728b7a56$var$COMMENT_STATE) {
        if (s.gzhead.comment /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let val;
            do {
                if (s.pending === s.pending_buf_size) {
                    //--- HCRC_UPDATE(beg) ---//
                    if (s.gzhead.hcrc && s.pending > beg) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                    //---//
                    $b0e71325728b7a56$var$flush_pending(strm);
                    if (s.pending !== 0) {
                        s.last_flush = -1;
                        return $b0e71325728b7a56$var$Z_OK$3;
                    }
                    beg = 0;
                }
                // JS specific: little magic to add zero terminator to end of string
                if (s.gzindex < s.gzhead.comment.length) val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                else val = 0;
                $b0e71325728b7a56$var$put_byte(s, val);
            }while (val !== 0);
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = $b0e71325728b7a56$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        //---//
        }
        s.status = $b0e71325728b7a56$var$HCRC_STATE;
    }
    if (s.status === $b0e71325728b7a56$var$HCRC_STATE) {
        if (s.gzhead.hcrc) {
            if (s.pending + 2 > s.pending_buf_size) {
                $b0e71325728b7a56$var$flush_pending(strm);
                if (s.pending !== 0) {
                    s.last_flush = -1;
                    return $b0e71325728b7a56$var$Z_OK$3;
                }
            }
            $b0e71325728b7a56$var$put_byte(s, strm.adler & 0xff);
            $b0e71325728b7a56$var$put_byte(s, strm.adler >> 8 & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
        }
        s.status = $b0e71325728b7a56$var$BUSY_STATE;
        /* Compression must start with an empty pending buffer */ $b0e71325728b7a56$var$flush_pending(strm);
        if (s.pending !== 0) {
            s.last_flush = -1;
            return $b0e71325728b7a56$var$Z_OK$3;
        }
    }
    //#endif
    /* Start a new block or continue the current one.
   */ if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== $b0e71325728b7a56$var$Z_NO_FLUSH$2 && s.status !== $b0e71325728b7a56$var$FINISH_STATE) {
        let bstate = s.level === 0 ? $b0e71325728b7a56$var$deflate_stored(s, flush) : s.strategy === $b0e71325728b7a56$var$Z_HUFFMAN_ONLY ? $b0e71325728b7a56$var$deflate_huff(s, flush) : s.strategy === $b0e71325728b7a56$var$Z_RLE ? $b0e71325728b7a56$var$deflate_rle(s, flush) : $b0e71325728b7a56$var$configuration_table[s.level].func(s, flush);
        if (bstate === $b0e71325728b7a56$var$BS_FINISH_STARTED || bstate === $b0e71325728b7a56$var$BS_FINISH_DONE) s.status = $b0e71325728b7a56$var$FINISH_STATE;
        if (bstate === $b0e71325728b7a56$var$BS_NEED_MORE || bstate === $b0e71325728b7a56$var$BS_FINISH_STARTED) {
            if (strm.avail_out === 0) s.last_flush = -1;
            return $b0e71325728b7a56$var$Z_OK$3;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */ }
        if (bstate === $b0e71325728b7a56$var$BS_BLOCK_DONE) {
            if (flush === $b0e71325728b7a56$var$Z_PARTIAL_FLUSH) $b0e71325728b7a56$var$_tr_align(s);
            else if (flush !== $b0e71325728b7a56$var$Z_BLOCK$1) {
                $b0e71325728b7a56$var$_tr_stored_block(s, 0, 0, false);
                /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */ if (flush === $b0e71325728b7a56$var$Z_FULL_FLUSH$1) {
                    /*** CLEAR_HASH(s); ***/ /* forget history */ $b0e71325728b7a56$var$zero(s.head); // Fill with NIL (= 0);
                    if (s.lookahead === 0) {
                        s.strstart = 0;
                        s.block_start = 0;
                        s.insert = 0;
                    }
                }
            }
            $b0e71325728b7a56$var$flush_pending(strm);
            if (strm.avail_out === 0) {
                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */ 
                return $b0e71325728b7a56$var$Z_OK$3;
            }
        }
    }
    if (flush !== $b0e71325728b7a56$var$Z_FINISH$3) return $b0e71325728b7a56$var$Z_OK$3;
    if (s.wrap <= 0) return $b0e71325728b7a56$var$Z_STREAM_END$3;
    /* Write the trailer */ if (s.wrap === 2) {
        $b0e71325728b7a56$var$put_byte(s, strm.adler & 0xff);
        $b0e71325728b7a56$var$put_byte(s, strm.adler >> 8 & 0xff);
        $b0e71325728b7a56$var$put_byte(s, strm.adler >> 16 & 0xff);
        $b0e71325728b7a56$var$put_byte(s, strm.adler >> 24 & 0xff);
        $b0e71325728b7a56$var$put_byte(s, strm.total_in & 0xff);
        $b0e71325728b7a56$var$put_byte(s, strm.total_in >> 8 & 0xff);
        $b0e71325728b7a56$var$put_byte(s, strm.total_in >> 16 & 0xff);
        $b0e71325728b7a56$var$put_byte(s, strm.total_in >> 24 & 0xff);
    } else {
        $b0e71325728b7a56$var$putShortMSB(s, strm.adler >>> 16);
        $b0e71325728b7a56$var$putShortMSB(s, strm.adler & 0xffff);
    }
    $b0e71325728b7a56$var$flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */ if (s.wrap > 0) s.wrap = -s.wrap;
    /* write the trailer only once! */ return s.pending !== 0 ? $b0e71325728b7a56$var$Z_OK$3 : $b0e71325728b7a56$var$Z_STREAM_END$3;
};
const $b0e71325728b7a56$var$deflateEnd = (strm)=>{
    if ($b0e71325728b7a56$var$deflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$2;
    const status = strm.state.status;
    strm.state = null;
    return status === $b0e71325728b7a56$var$BUSY_STATE ? $b0e71325728b7a56$var$err(strm, $b0e71325728b7a56$var$Z_DATA_ERROR$2) : $b0e71325728b7a56$var$Z_OK$3;
};
/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */ const $b0e71325728b7a56$var$deflateSetDictionary = (strm, dictionary)=>{
    let dictLength = dictionary.length;
    if ($b0e71325728b7a56$var$deflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$2;
    const s = strm.state;
    const wrap = s.wrap;
    if (wrap === 2 || wrap === 1 && s.status !== $b0e71325728b7a56$var$INIT_STATE || s.lookahead) return $b0e71325728b7a56$var$Z_STREAM_ERROR$2;
    /* when using zlib wrappers, compute Adler-32 for provided dictionary */ if (wrap === 1) /* adler32(strm->adler, dictionary, dictLength); */ strm.adler = $b0e71325728b7a56$var$adler32_1(strm.adler, dictionary, dictLength, 0);
    s.wrap = 0; /* avoid computing Adler-32 in read_buf */ 
    /* if dictionary would fill window, just replace the history */ if (dictLength >= s.w_size) {
        if (wrap === 0) {
            /*** CLEAR_HASH(s); ***/ $b0e71325728b7a56$var$zero(s.head); // Fill with NIL (= 0);
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
        }
        /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
    }
    /* insert dictionary into window and hash */ const avail = strm.avail_in;
    const next = strm.next_in;
    const input = strm.input;
    strm.avail_in = dictLength;
    strm.next_in = 0;
    strm.input = dictionary;
    $b0e71325728b7a56$var$fill_window(s);
    while(s.lookahead >= $b0e71325728b7a56$var$MIN_MATCH){
        let str = s.strstart;
        let n = s.lookahead - ($b0e71325728b7a56$var$MIN_MATCH - 1);
        do {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = $b0e71325728b7a56$var$HASH(s, s.ins_h, s.window[str + $b0e71325728b7a56$var$MIN_MATCH - 1]);
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
        }while (--n);
        s.strstart = str;
        s.lookahead = $b0e71325728b7a56$var$MIN_MATCH - 1;
        $b0e71325728b7a56$var$fill_window(s);
    }
    s.strstart += s.lookahead;
    s.block_start = s.strstart;
    s.insert = s.lookahead;
    s.lookahead = 0;
    s.match_length = s.prev_length = $b0e71325728b7a56$var$MIN_MATCH - 1;
    s.match_available = 0;
    strm.next_in = next;
    strm.input = input;
    strm.avail_in = avail;
    s.wrap = wrap;
    return $b0e71325728b7a56$var$Z_OK$3;
};
var $b0e71325728b7a56$var$deflateInit_1 = $b0e71325728b7a56$var$deflateInit;
var $b0e71325728b7a56$var$deflateInit2_1 = $b0e71325728b7a56$var$deflateInit2;
var $b0e71325728b7a56$var$deflateReset_1 = $b0e71325728b7a56$var$deflateReset;
var $b0e71325728b7a56$var$deflateResetKeep_1 = $b0e71325728b7a56$var$deflateResetKeep;
var $b0e71325728b7a56$var$deflateSetHeader_1 = $b0e71325728b7a56$var$deflateSetHeader;
var $b0e71325728b7a56$var$deflate_2$1 = $b0e71325728b7a56$var$deflate$2;
var $b0e71325728b7a56$var$deflateEnd_1 = $b0e71325728b7a56$var$deflateEnd;
var $b0e71325728b7a56$var$deflateSetDictionary_1 = $b0e71325728b7a56$var$deflateSetDictionary;
var $b0e71325728b7a56$var$deflateInfo = "pako deflate (from Nodeca project)";
/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/ var $b0e71325728b7a56$var$deflate_1$2 = {
    deflateInit: $b0e71325728b7a56$var$deflateInit_1,
    deflateInit2: $b0e71325728b7a56$var$deflateInit2_1,
    deflateReset: $b0e71325728b7a56$var$deflateReset_1,
    deflateResetKeep: $b0e71325728b7a56$var$deflateResetKeep_1,
    deflateSetHeader: $b0e71325728b7a56$var$deflateSetHeader_1,
    deflate: $b0e71325728b7a56$var$deflate_2$1,
    deflateEnd: $b0e71325728b7a56$var$deflateEnd_1,
    deflateSetDictionary: $b0e71325728b7a56$var$deflateSetDictionary_1,
    deflateInfo: $b0e71325728b7a56$var$deflateInfo
};
const $b0e71325728b7a56$var$_has = (obj, key)=>{
    return Object.prototype.hasOwnProperty.call(obj, key);
};
var $b0e71325728b7a56$var$assign = function(obj /*from1, from2, from3, ...*/ ) {
    const sources = Array.prototype.slice.call(arguments, 1);
    while(sources.length){
        const source = sources.shift();
        if (!source) continue;
        if (typeof source !== "object") throw new TypeError(source + "must be non-object");
        for(const p in source)if ($b0e71325728b7a56$var$_has(source, p)) obj[p] = source[p];
    }
    return obj;
};
// Join array of chunks to single array.
var $b0e71325728b7a56$var$flattenChunks = (chunks)=>{
    // calculate data length
    let len = 0;
    for(let i = 0, l = chunks.length; i < l; i++)len += chunks[i].length;
    // join chunks
    const result = new Uint8Array(len);
    for(let i = 0, pos = 0, l = chunks.length; i < l; i++){
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
    }
    return result;
};
var $b0e71325728b7a56$var$common = {
    assign: $b0e71325728b7a56$var$assign,
    flattenChunks: $b0e71325728b7a56$var$flattenChunks
};
// String encode/decode helpers
// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let $b0e71325728b7a56$var$STR_APPLY_UIA_OK = true;
try {
    String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
    $b0e71325728b7a56$var$STR_APPLY_UIA_OK = false;
}
// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const $b0e71325728b7a56$var$_utf8len = new Uint8Array(256);
for(let q = 0; q < 256; q++)$b0e71325728b7a56$var$_utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
$b0e71325728b7a56$var$_utf8len[254] = $b0e71325728b7a56$var$_utf8len[254] = 1; // Invalid sequence start
// convert string to array (typed, when possible)
var $b0e71325728b7a56$var$string2buf = (str)=>{
    if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) return new TextEncoder().encode(str);
    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
    // count binary size
    for(m_pos = 0; m_pos < str_len; m_pos++){
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }
    // allocate buffer
    buf = new Uint8Array(buf_len);
    // convert
    for(i = 0, m_pos = 0; i < buf_len; m_pos++){
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) /* one byte */ buf[i++] = c;
        else if (c < 0x800) {
            /* two bytes */ buf[i++] = 0xC0 | c >>> 6;
            buf[i++] = 0x80 | c & 0x3f;
        } else if (c < 0x10000) {
            /* three bytes */ buf[i++] = 0xE0 | c >>> 12;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
        } else {
            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;
            buf[i++] = 0x80 | c >>> 12 & 0x3f;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
        }
    }
    return buf;
};
// Helper
const $b0e71325728b7a56$var$buf2binstring = (buf, len)=>{
    // On Chrome, the arguments in a function call that are allowed is `65534`.
    // If the length of the buffer is smaller than that, we can use this optimization,
    // otherwise we will take a slower path.
    if (len < 65534) {
        if (buf.subarray && $b0e71325728b7a56$var$STR_APPLY_UIA_OK) return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
    let result = "";
    for(let i = 0; i < len; i++)result += String.fromCharCode(buf[i]);
    return result;
};
// convert array to string
var $b0e71325728b7a56$var$buf2string = (buf, max)=>{
    const len = max || buf.length;
    if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) return new TextDecoder().decode(buf.subarray(0, max));
    let i, out;
    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    const utf16buf = new Array(len * 2);
    for(out = 0, i = 0; i < len;){
        let c = buf[i++];
        // quick process ascii
        if (c < 0x80) {
            utf16buf[out++] = c;
            continue;
        }
        let c_len = $b0e71325728b7a56$var$_utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) {
            utf16buf[out++] = 0xfffd;
            i += c_len - 1;
            continue;
        }
        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while(c_len > 1 && i < len){
            c = c << 6 | buf[i++] & 0x3f;
            c_len--;
        }
        // terminated by end of string?
        if (c_len > 1) {
            utf16buf[out++] = 0xfffd;
            continue;
        }
        if (c < 0x10000) utf16buf[out++] = c;
        else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
            utf16buf[out++] = 0xdc00 | c & 0x3ff;
        }
    }
    return $b0e71325728b7a56$var$buf2binstring(utf16buf, out);
};
// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var $b0e71325728b7a56$var$utf8border = (buf, max)=>{
    max = max || buf.length;
    if (max > buf.length) max = buf.length;
    // go back from last position, until start of sequence found
    let pos = max - 1;
    while(pos >= 0 && (buf[pos] & 0xC0) === 0x80)pos--;
    // Very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) return max;
    // If we came to start of buffer - that means buffer is too small,
    // return max too.
    if (pos === 0) return max;
    return pos + $b0e71325728b7a56$var$_utf8len[buf[pos]] > max ? pos : max;
};
var $b0e71325728b7a56$var$strings = {
    string2buf: $b0e71325728b7a56$var$string2buf,
    buf2string: $b0e71325728b7a56$var$buf2string,
    utf8border: $b0e71325728b7a56$var$utf8border
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function $b0e71325728b7a56$var$ZStream() {
    /* next input byte */ this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */ this.avail_in = 0;
    /* total number of input bytes read so far */ this.total_in = 0;
    /* next output byte should be put there */ this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */ this.avail_out = 0;
    /* total number of bytes output so far */ this.total_out = 0;
    /* last error message, NULL if no error */ this.msg = "" /*Z_NULL*/ ;
    /* not visible by applications */ this.state = null;
    /* best guess about the data type: binary or text */ this.data_type = 2 /*Z_UNKNOWN*/ ;
    /* adler32 value of the uncompressed data */ this.adler = 0;
}
var $b0e71325728b7a56$var$zstream = $b0e71325728b7a56$var$ZStream;
const $b0e71325728b7a56$var$toString$1 = Object.prototype.toString;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: $b0e71325728b7a56$var$Z_NO_FLUSH$1, Z_SYNC_FLUSH: $b0e71325728b7a56$var$Z_SYNC_FLUSH, Z_FULL_FLUSH: $b0e71325728b7a56$var$Z_FULL_FLUSH, Z_FINISH: $b0e71325728b7a56$var$Z_FINISH$2, Z_OK: $b0e71325728b7a56$var$Z_OK$2, Z_STREAM_END: $b0e71325728b7a56$var$Z_STREAM_END$2, Z_DEFAULT_COMPRESSION: $b0e71325728b7a56$var$Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY: $b0e71325728b7a56$var$Z_DEFAULT_STRATEGY, Z_DEFLATED: $b0e71325728b7a56$var$Z_DEFLATED$1 } = $b0e71325728b7a56$var$constants$2;
/* ===========================================================================*/ /**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/ /* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/ /**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/ /**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/ /**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/ function $b0e71325728b7a56$var$Deflate$1(options) {
    this.options = $b0e71325728b7a56$var$common.assign({
        level: $b0e71325728b7a56$var$Z_DEFAULT_COMPRESSION,
        method: $b0e71325728b7a56$var$Z_DEFLATED$1,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: $b0e71325728b7a56$var$Z_DEFAULT_STRATEGY
    }, options || {});
    let opt = this.options;
    if (opt.raw && opt.windowBits > 0) opt.windowBits = -opt.windowBits;
    else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) opt.windowBits += 16;
    this.err = 0; // error code, if happens (0 = Z_OK)
    this.msg = ""; // error message
    this.ended = false; // used to avoid multiple onEnd() calls
    this.chunks = []; // chunks of compressed data
    this.strm = new $b0e71325728b7a56$var$zstream();
    this.strm.avail_out = 0;
    let status = $b0e71325728b7a56$var$deflate_1$2.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
    if (status !== $b0e71325728b7a56$var$Z_OK$2) throw new Error($b0e71325728b7a56$var$messages[status]);
    if (opt.header) $b0e71325728b7a56$var$deflate_1$2.deflateSetHeader(this.strm, opt.header);
    if (opt.dictionary) {
        let dict;
        // Convert data if needed
        if (typeof opt.dictionary === "string") // If we need to compress text, change encoding to utf8.
        dict = $b0e71325728b7a56$var$strings.string2buf(opt.dictionary);
        else if ($b0e71325728b7a56$var$toString$1.call(opt.dictionary) === "[object ArrayBuffer]") dict = new Uint8Array(opt.dictionary);
        else dict = opt.dictionary;
        status = $b0e71325728b7a56$var$deflate_1$2.deflateSetDictionary(this.strm, dict);
        if (status !== $b0e71325728b7a56$var$Z_OK$2) throw new Error($b0e71325728b7a56$var$messages[status]);
        this._dict_set = true;
    }
}
/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/ $b0e71325728b7a56$var$Deflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    let status, _flush_mode;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? $b0e71325728b7a56$var$Z_FINISH$2 : $b0e71325728b7a56$var$Z_NO_FLUSH$1;
    // Convert data if needed
    if (typeof data === "string") // If we need to compress text, change encoding to utf8.
    strm.input = $b0e71325728b7a56$var$strings.string2buf(data);
    else if ($b0e71325728b7a56$var$toString$1.call(data) === "[object ArrayBuffer]") strm.input = new Uint8Array(data);
    else strm.input = data;
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for(;;){
        if (strm.avail_out === 0) {
            strm.output = new Uint8Array(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
        }
        // Make sure avail_out > 6 to avoid repeating markers
        if ((_flush_mode === $b0e71325728b7a56$var$Z_SYNC_FLUSH || _flush_mode === $b0e71325728b7a56$var$Z_FULL_FLUSH) && strm.avail_out <= 6) {
            this.onData(strm.output.subarray(0, strm.next_out));
            strm.avail_out = 0;
            continue;
        }
        status = $b0e71325728b7a56$var$deflate_1$2.deflate(strm, _flush_mode);
        // Ended => flush and finish
        if (status === $b0e71325728b7a56$var$Z_STREAM_END$2) {
            if (strm.next_out > 0) this.onData(strm.output.subarray(0, strm.next_out));
            status = $b0e71325728b7a56$var$deflate_1$2.deflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return status === $b0e71325728b7a56$var$Z_OK$2;
        }
        // Flush if out buffer full
        if (strm.avail_out === 0) {
            this.onData(strm.output);
            continue;
        }
        // Flush if requested and has data
        if (_flush_mode > 0 && strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
            strm.avail_out = 0;
            continue;
        }
        if (strm.avail_in === 0) break;
    }
    return true;
};
/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/ $b0e71325728b7a56$var$Deflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
};
/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/ $b0e71325728b7a56$var$Deflate$1.prototype.onEnd = function(status) {
    // On success - join
    if (status === $b0e71325728b7a56$var$Z_OK$2) this.result = $b0e71325728b7a56$var$common.flattenChunks(this.chunks);
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
};
/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/ function $b0e71325728b7a56$var$deflate$1(input, options) {
    const deflator = new $b0e71325728b7a56$var$Deflate$1(options);
    deflator.push(input, true);
    // That will never happens, if you don't cheat with options :)
    if (deflator.err) throw deflator.msg || $b0e71325728b7a56$var$messages[deflator.err];
    return deflator.result;
}
/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/ function $b0e71325728b7a56$var$deflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return $b0e71325728b7a56$var$deflate$1(input, options);
}
/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/ function $b0e71325728b7a56$var$gzip$1(input, options) {
    options = options || {};
    options.gzip = true;
    return $b0e71325728b7a56$var$deflate$1(input, options);
}
var $b0e71325728b7a56$var$Deflate_1$1 = $b0e71325728b7a56$var$Deflate$1;
var $b0e71325728b7a56$var$deflate_2 = $b0e71325728b7a56$var$deflate$1;
var $b0e71325728b7a56$var$deflateRaw_1$1 = $b0e71325728b7a56$var$deflateRaw$1;
var $b0e71325728b7a56$var$gzip_1$1 = $b0e71325728b7a56$var$gzip$1;
var $b0e71325728b7a56$var$constants$1 = $b0e71325728b7a56$var$constants$2;
var $b0e71325728b7a56$var$deflate_1$1 = {
    Deflate: $b0e71325728b7a56$var$Deflate_1$1,
    deflate: $b0e71325728b7a56$var$deflate_2,
    deflateRaw: $b0e71325728b7a56$var$deflateRaw_1$1,
    gzip: $b0e71325728b7a56$var$gzip_1$1,
    constants: $b0e71325728b7a56$var$constants$1
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// See state defs from inflate.js
const $b0e71325728b7a56$var$BAD$1 = 16209; /* got a data error -- remain here until reset */ 
const $b0e71325728b7a56$var$TYPE$1 = 16191; /* i: waiting for type bits, including last-flag bit */ 
/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */ var $b0e71325728b7a56$var$inffast = function inflate_fast(strm, start) {
    let _in; /* local strm.input */ 
    let last; /* have enough input while in < last */ 
    let _out; /* local strm.output */ 
    let beg; /* inflate()'s initial strm.output */ 
    let end; /* while out < end, enough space available */ 
    //#ifdef INFLATE_STRICT
    let dmax; /* maximum distance from zlib header */ 
    //#endif
    let wsize; /* window size or zero if not using window */ 
    let whave; /* valid bytes in the window */ 
    let wnext; /* window write index */ 
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    let s_window; /* allocated sliding window, if wsize != 0 */ 
    let hold; /* local strm.hold */ 
    let bits; /* local strm.bits */ 
    let lcode; /* local strm.lencode */ 
    let dcode; /* local strm.distcode */ 
    let lmask; /* mask for first level of length codes */ 
    let dmask; /* mask for first level of distance codes */ 
    let here; /* retrieved table entry */ 
    let op; /* code bits, operation, extra bits, or */ 
    /*  window position, window bytes to copy */ let len; /* match length, unused bytes */ 
    let dist; /* match distance */ 
    let from; /* where to copy match from */ 
    let from_source;
    let input, output; // JS specific, because we have no pointers
    /* copy state to local variables */ const state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
    dmax = state.dmax;
    //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;
    /* decode literals and length/distances until end-of-block or not enough
     input data or output space */ top: do {
        if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
        }
        here = lcode[hold & lmask];
        dolen: for(;;){
            op = here >>> 24 /*here.bits*/ ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff /*here.op*/ ;
            if (op === 0) //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff /*here.val*/ ;
            else if (op & 16) {
                len = here & 0xffff /*here.val*/ ;
                op &= 15; /* number of extra bits */ 
                if (op) {
                    if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                    }
                    len += hold & (1 << op) - 1;
                    hold >>>= op;
                    bits -= op;
                }
                //Tracevv((stderr, "inflate:         length %u\n", len));
                if (bits < 15) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    hold += input[_in++] << bits;
                    bits += 8;
                }
                here = dcode[hold & dmask];
                dodist: for(;;){
                    op = here >>> 24 /*here.bits*/ ;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 0xff /*here.op*/ ;
                    if (op & 16) {
                        dist = here & 0xffff /*here.val*/ ;
                        op &= 15; /* number of extra bits */ 
                        if (bits < op) {
                            hold += input[_in++] << bits;
                            bits += 8;
                            if (bits < op) {
                                hold += input[_in++] << bits;
                                bits += 8;
                            }
                        }
                        dist += hold & (1 << op) - 1;
                        //#ifdef INFLATE_STRICT
                        if (dist > dmax) {
                            strm.msg = "invalid distance too far back";
                            state.mode = $b0e71325728b7a56$var$BAD$1;
                            break top;
                        }
                        //#endif
                        hold >>>= op;
                        bits -= op;
                        //Tracevv((stderr, "inflate:         distance %u\n", dist));
                        op = _out - beg; /* max distance in output */ 
                        if (dist > op) {
                            op = dist - op; /* distance back in window */ 
                            if (op > whave) {
                                if (state.sane) {
                                    strm.msg = "invalid distance too far back";
                                    state.mode = $b0e71325728b7a56$var$BAD$1;
                                    break top;
                                }
                            }
                            from = 0; // window index
                            from_source = s_window;
                            if (wnext === 0) {
                                from += wsize - op;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = _out - dist; /* rest from output */ 
                                    from_source = output;
                                }
                            } else if (wnext < op) {
                                from += wsize + wnext - op;
                                op -= wnext;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = 0;
                                    if (wnext < len) {
                                        op = wnext;
                                        len -= op;
                                        do output[_out++] = s_window[from++];
                                        while (--op);
                                        from = _out - dist; /* rest from output */ 
                                        from_source = output;
                                    }
                                }
                            } else {
                                from += wnext - op;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = _out - dist; /* rest from output */ 
                                    from_source = output;
                                }
                            }
                            while(len > 2){
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                len -= 3;
                            }
                            if (len) {
                                output[_out++] = from_source[from++];
                                if (len > 1) output[_out++] = from_source[from++];
                            }
                        } else {
                            from = _out - dist; /* copy direct from output */ 
                            do {
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                len -= 3;
                            }while (len > 2);
                            if (len) {
                                output[_out++] = output[from++];
                                if (len > 1) output[_out++] = output[from++];
                            }
                        }
                    } else if ((op & 64) === 0) {
                        here = dcode[(here & 0xffff) + (hold & (1 << op) - 1)];
                        continue dodist;
                    } else {
                        strm.msg = "invalid distance code";
                        state.mode = $b0e71325728b7a56$var$BAD$1;
                        break top;
                    }
                    break; // need to emulate goto via "continue"
                }
            } else if ((op & 64) === 0) {
                here = lcode[(here & 0xffff) + (hold & (1 << op) - 1)];
                continue dolen;
            } else if (op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.mode = $b0e71325728b7a56$var$TYPE$1;
                break top;
            } else {
                strm.msg = "invalid literal/length code";
                state.mode = $b0e71325728b7a56$var$BAD$1;
                break top;
            }
            break; // need to emulate goto via "continue"
        }
    }while (_in < last && _out < end);
    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */ len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;
    /* update state and return */ strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
    state.hold = hold;
    state.bits = bits;
    return;
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const $b0e71325728b7a56$var$MAXBITS = 15;
const $b0e71325728b7a56$var$ENOUGH_LENS$1 = 852;
const $b0e71325728b7a56$var$ENOUGH_DISTS$1 = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
const $b0e71325728b7a56$var$CODES$1 = 0;
const $b0e71325728b7a56$var$LENS$1 = 1;
const $b0e71325728b7a56$var$DISTS$1 = 2;
const $b0e71325728b7a56$var$lbase = new Uint16Array([
    /* Length codes 257..285 base */ 3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    13,
    15,
    17,
    19,
    23,
    27,
    31,
    35,
    43,
    51,
    59,
    67,
    83,
    99,
    115,
    131,
    163,
    195,
    227,
    258,
    0,
    0
]);
const $b0e71325728b7a56$var$lext = new Uint8Array([
    /* Length codes 257..285 extra */ 16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    16,
    72,
    78
]);
const $b0e71325728b7a56$var$dbase = new Uint16Array([
    /* Distance codes 0..29 base */ 1,
    2,
    3,
    4,
    5,
    7,
    9,
    13,
    17,
    25,
    33,
    49,
    65,
    97,
    129,
    193,
    257,
    385,
    513,
    769,
    1025,
    1537,
    2049,
    3073,
    4097,
    6145,
    8193,
    12289,
    16385,
    24577,
    0,
    0
]);
const $b0e71325728b7a56$var$dext = new Uint8Array([
    /* Distance codes 0..29 extra */ 16,
    16,
    16,
    16,
    17,
    17,
    18,
    18,
    19,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    23,
    23,
    24,
    24,
    25,
    25,
    26,
    26,
    27,
    27,
    28,
    28,
    29,
    29,
    64,
    64
]);
const $b0e71325728b7a56$var$inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts)=>{
    const bits = opts.bits;
    //here = opts.here; /* table entry for duplication */
    let len = 0; /* a code's length in bits */ 
    let sym = 0; /* index of code symbols */ 
    let min = 0, max = 0; /* minimum and maximum code lengths */ 
    let root = 0; /* number of index bits for root table */ 
    let curr = 0; /* number of index bits for current table */ 
    let drop = 0; /* code bits to drop for sub-table */ 
    let left = 0; /* number of prefix codes available */ 
    let used = 0; /* code entries in table used */ 
    let huff = 0; /* Huffman code */ 
    let incr; /* for incrementing code, index */ 
    let fill; /* index for replicating entries */ 
    let low; /* low bits for current root entry */ 
    let mask; /* mask for low root bits */ 
    let next; /* next available space in table */ 
    let base = null; /* base value table to use */ 
    //  let shoextra;    /* extra bits table to use */
    let match; /* use base and extra for symbol >= match */ 
    const count = new Uint16Array($b0e71325728b7a56$var$MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    const offs = new Uint16Array($b0e71325728b7a56$var$MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    let extra = null;
    let here_bits, here_op, here_val;
    /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */ for(len = 0; len <= $b0e71325728b7a56$var$MAXBITS; len++)count[len] = 0;
    for(sym = 0; sym < codes; sym++)count[lens[lens_index + sym]]++;
    /* bound code lengths, force root to be within code lengths */ root = bits;
    for(max = $b0e71325728b7a56$var$MAXBITS; max >= 1; max--){
        if (count[max] !== 0) break;
    }
    if (root > max) root = max;
    if (max === 0) {
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = 20971520;
        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = 20971520;
        opts.bits = 1;
        return 0; /* no symbols, but wait for decoding to report error */ 
    }
    for(min = 1; min < max; min++){
        if (count[min] !== 0) break;
    }
    if (root < min) root = min;
    /* check for an over-subscribed or incomplete set of lengths */ left = 1;
    for(len = 1; len <= $b0e71325728b7a56$var$MAXBITS; len++){
        left <<= 1;
        left -= count[len];
        if (left < 0) return -1;
         /* over-subscribed */ 
    }
    if (left > 0 && (type === $b0e71325728b7a56$var$CODES$1 || max !== 1)) return -1; /* incomplete set */ 
    /* generate offsets into symbol table for each length for sorting */ offs[1] = 0;
    for(len = 1; len < $b0e71325728b7a56$var$MAXBITS; len++)offs[len + 1] = offs[len] + count[len];
    /* sort symbols by length, by symbol order within each length */ for(sym = 0; sym < codes; sym++)if (lens[lens_index + sym] !== 0) work[offs[lens[lens_index + sym]]++] = sym;
    /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === $b0e71325728b7a56$var$CODES$1) {
        base = extra = work; /* dummy value--not used */ 
        match = 20;
    } else if (type === $b0e71325728b7a56$var$LENS$1) {
        base = $b0e71325728b7a56$var$lbase;
        extra = $b0e71325728b7a56$var$lext;
        match = 257;
    } else {
        base = $b0e71325728b7a56$var$dbase;
        extra = $b0e71325728b7a56$var$dext;
        match = 0;
    }
    /* initialize opts for loop */ huff = 0; /* starting code */ 
    sym = 0; /* starting code symbol */ 
    len = min; /* starting code length */ 
    next = table_index; /* current table to fill in */ 
    curr = root; /* current table index bits */ 
    drop = 0; /* current bits to drop from code for index */ 
    low = -1; /* trigger new sub-table when len > root */ 
    used = 1 << root; /* use root table entries */ 
    mask = used - 1; /* mask for comparing low */ 
    /* check available table space */ if (type === $b0e71325728b7a56$var$LENS$1 && used > $b0e71325728b7a56$var$ENOUGH_LENS$1 || type === $b0e71325728b7a56$var$DISTS$1 && used > $b0e71325728b7a56$var$ENOUGH_DISTS$1) return 1;
    /* process all codes and make table entries */ for(;;){
        /* create table entry */ here_bits = len - drop;
        if (work[sym] + 1 < match) {
            here_op = 0;
            here_val = work[sym];
        } else if (work[sym] >= match) {
            here_op = extra[work[sym] - match];
            here_val = base[work[sym] - match];
        } else {
            here_op = 96; /* end of block */ 
            here_val = 0;
        }
        /* replicate for those indices with low len bits equal to huff */ incr = 1 << len - drop;
        fill = 1 << curr;
        min = fill; /* save offset to next table */ 
        do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        }while (fill !== 0);
        /* backwards increment the len-bit code huff */ incr = 1 << len - 1;
        while(huff & incr)incr >>= 1;
        if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
        } else huff = 0;
        /* go to next symbol, update count, len */ sym++;
        if (--count[len] === 0) {
            if (len === max) break;
            len = lens[lens_index + work[sym]];
        }
        /* create new sub-table if needed */ if (len > root && (huff & mask) !== low) {
            /* if first time, transition to sub-tables */ if (drop === 0) drop = root;
            /* increment past last table */ next += min; /* here min is 1 << curr */ 
            /* determine length of next table */ curr = len - drop;
            left = 1 << curr;
            while(curr + drop < max){
                left -= count[curr + drop];
                if (left <= 0) break;
                curr++;
                left <<= 1;
            }
            /* check for enough space */ used += 1 << curr;
            if (type === $b0e71325728b7a56$var$LENS$1 && used > $b0e71325728b7a56$var$ENOUGH_LENS$1 || type === $b0e71325728b7a56$var$DISTS$1 && used > $b0e71325728b7a56$var$ENOUGH_DISTS$1) return 1;
            /* point entry in root table to sub-table */ low = huff & mask;
            /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/ table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
    }
    /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */ if (huff !== 0) //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = len - drop << 24 | 4194304;
    /* set return parameters */ //opts.table_index += used;
    opts.bits = root;
    return 0;
};
var $b0e71325728b7a56$var$inftrees = $b0e71325728b7a56$var$inflate_table;
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const $b0e71325728b7a56$var$CODES = 0;
const $b0e71325728b7a56$var$LENS = 1;
const $b0e71325728b7a56$var$DISTS = 2;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_FINISH: $b0e71325728b7a56$var$Z_FINISH$1, Z_BLOCK: $b0e71325728b7a56$var$Z_BLOCK, Z_TREES: $b0e71325728b7a56$var$Z_TREES, Z_OK: $b0e71325728b7a56$var$Z_OK$1, Z_STREAM_END: $b0e71325728b7a56$var$Z_STREAM_END$1, Z_NEED_DICT: $b0e71325728b7a56$var$Z_NEED_DICT$1, Z_STREAM_ERROR: $b0e71325728b7a56$var$Z_STREAM_ERROR$1, Z_DATA_ERROR: $b0e71325728b7a56$var$Z_DATA_ERROR$1, Z_MEM_ERROR: $b0e71325728b7a56$var$Z_MEM_ERROR$1, Z_BUF_ERROR: $b0e71325728b7a56$var$Z_BUF_ERROR, Z_DEFLATED: $b0e71325728b7a56$var$Z_DEFLATED } = $b0e71325728b7a56$var$constants$2;
/* STATES ====================================================================*/ /* ===========================================================================*/ const $b0e71325728b7a56$var$HEAD = 16180; /* i: waiting for magic header */ 
const $b0e71325728b7a56$var$FLAGS = 16181; /* i: waiting for method and flags (gzip) */ 
const $b0e71325728b7a56$var$TIME = 16182; /* i: waiting for modification time (gzip) */ 
const $b0e71325728b7a56$var$OS = 16183; /* i: waiting for extra flags and operating system (gzip) */ 
const $b0e71325728b7a56$var$EXLEN = 16184; /* i: waiting for extra length (gzip) */ 
const $b0e71325728b7a56$var$EXTRA = 16185; /* i: waiting for extra bytes (gzip) */ 
const $b0e71325728b7a56$var$NAME = 16186; /* i: waiting for end of file name (gzip) */ 
const $b0e71325728b7a56$var$COMMENT = 16187; /* i: waiting for end of comment (gzip) */ 
const $b0e71325728b7a56$var$HCRC = 16188; /* i: waiting for header crc (gzip) */ 
const $b0e71325728b7a56$var$DICTID = 16189; /* i: waiting for dictionary check value */ 
const $b0e71325728b7a56$var$DICT = 16190; /* waiting for inflateSetDictionary() call */ 
const $b0e71325728b7a56$var$TYPE = 16191; /* i: waiting for type bits, including last-flag bit */ 
const $b0e71325728b7a56$var$TYPEDO = 16192; /* i: same, but skip check to exit inflate on new block */ 
const $b0e71325728b7a56$var$STORED = 16193; /* i: waiting for stored size (length and complement) */ 
const $b0e71325728b7a56$var$COPY_ = 16194; /* i/o: same as COPY below, but only first time in */ 
const $b0e71325728b7a56$var$COPY = 16195; /* i/o: waiting for input or output to copy stored block */ 
const $b0e71325728b7a56$var$TABLE = 16196; /* i: waiting for dynamic block table lengths */ 
const $b0e71325728b7a56$var$LENLENS = 16197; /* i: waiting for code length code lengths */ 
const $b0e71325728b7a56$var$CODELENS = 16198; /* i: waiting for length/lit and distance code lengths */ 
const $b0e71325728b7a56$var$LEN_ = 16199; /* i: same as LEN below, but only first time in */ 
const $b0e71325728b7a56$var$LEN = 16200; /* i: waiting for length/lit/eob code */ 
const $b0e71325728b7a56$var$LENEXT = 16201; /* i: waiting for length extra bits */ 
const $b0e71325728b7a56$var$DIST = 16202; /* i: waiting for distance code */ 
const $b0e71325728b7a56$var$DISTEXT = 16203; /* i: waiting for distance extra bits */ 
const $b0e71325728b7a56$var$MATCH = 16204; /* o: waiting for output space to copy string */ 
const $b0e71325728b7a56$var$LIT = 16205; /* o: waiting for output space to write literal */ 
const $b0e71325728b7a56$var$CHECK = 16206; /* i: waiting for 32-bit check value */ 
const $b0e71325728b7a56$var$LENGTH = 16207; /* i: waiting for 32-bit length (gzip) */ 
const $b0e71325728b7a56$var$DONE = 16208; /* finished check, done -- remain here until reset */ 
const $b0e71325728b7a56$var$BAD = 16209; /* got a data error -- remain here until reset */ 
const $b0e71325728b7a56$var$MEM = 16210; /* got an inflate() memory error -- remain here until reset */ 
const $b0e71325728b7a56$var$SYNC = 16211; /* looking for synchronization bytes to restart inflate() */ 
/* ===========================================================================*/ const $b0e71325728b7a56$var$ENOUGH_LENS = 852;
const $b0e71325728b7a56$var$ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
const $b0e71325728b7a56$var$MAX_WBITS = 15;
/* 32K LZ77 window */ const $b0e71325728b7a56$var$DEF_WBITS = $b0e71325728b7a56$var$MAX_WBITS;
const $b0e71325728b7a56$var$zswap32 = (q)=>{
    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
};
function $b0e71325728b7a56$var$InflateState() {
    this.strm = null; /* pointer back to this zlib stream */ 
    this.mode = 0; /* current inflate mode */ 
    this.last = false; /* true if processing last block */ 
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */ 
    this.havedict = false; /* true if dictionary provided */ 
    this.flags = 0; /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */ 
    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */ 
    this.check = 0; /* protected copy of check value */ 
    this.total = 0; /* protected copy of output count */ 
    // TODO: may be {}
    this.head = null; /* where to save gzip header information */ 
    /* sliding window */ this.wbits = 0; /* log base 2 of requested window size */ 
    this.wsize = 0; /* window size or zero if not using window */ 
    this.whave = 0; /* valid bytes in the window */ 
    this.wnext = 0; /* window write index */ 
    this.window = null; /* allocated sliding window, if needed */ 
    /* bit accumulator */ this.hold = 0; /* input bit accumulator */ 
    this.bits = 0; /* number of bits in "in" */ 
    /* for string and stored block copying */ this.length = 0; /* literal or length of data to copy */ 
    this.offset = 0; /* distance back to copy string from */ 
    /* for table and code decoding */ this.extra = 0; /* extra bits needed */ 
    /* fixed and dynamic code tables */ this.lencode = null; /* starting table for length/literal codes */ 
    this.distcode = null; /* starting table for distance codes */ 
    this.lenbits = 0; /* index bits for lencode */ 
    this.distbits = 0; /* index bits for distcode */ 
    /* dynamic table building */ this.ncode = 0; /* number of code length code lengths */ 
    this.nlen = 0; /* number of length code lengths */ 
    this.ndist = 0; /* number of distance code lengths */ 
    this.have = 0; /* number of code lengths in lens[] */ 
    this.next = null; /* next available space in codes[] */ 
    this.lens = new Uint16Array(320); /* temporary storage for code lengths */ 
    this.work = new Uint16Array(288); /* work area for code table building */ 
    /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */ //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */ 
    this.distdyn = null; /* dynamic table for distance codes (JS specific) */ 
    this.sane = 0; /* if false, allow invalid distance too far */ 
    this.back = 0; /* bits back of last unprocessed length/lit */ 
    this.was = 0; /* initial length of match */ 
}
const $b0e71325728b7a56$var$inflateStateCheck = (strm)=>{
    if (!strm) return 1;
    const state = strm.state;
    if (!state || state.strm !== strm || state.mode < $b0e71325728b7a56$var$HEAD || state.mode > $b0e71325728b7a56$var$SYNC) return 1;
    return 0;
};
const $b0e71325728b7a56$var$inflateResetKeep = (strm)=>{
    if ($b0e71325728b7a56$var$inflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ""; /*Z_NULL*/ 
    if (state.wrap) strm.adler = state.wrap & 1;
    state.mode = $b0e71325728b7a56$var$HEAD;
    state.last = 0;
    state.havedict = 0;
    state.flags = -1;
    state.dmax = 32768;
    state.head = null /*Z_NULL*/ ;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Int32Array($b0e71325728b7a56$var$ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array($b0e71325728b7a56$var$ENOUGH_DISTS);
    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return $b0e71325728b7a56$var$Z_OK$1;
};
const $b0e71325728b7a56$var$inflateReset = (strm)=>{
    if ($b0e71325728b7a56$var$inflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return $b0e71325728b7a56$var$inflateResetKeep(strm);
};
const $b0e71325728b7a56$var$inflateReset2 = (strm, windowBits)=>{
    let wrap;
    /* get the state */ if ($b0e71325728b7a56$var$inflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    /* extract wrap request from windowBits parameter */ if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
    } else {
        wrap = (windowBits >> 4) + 5;
        if (windowBits < 48) windowBits &= 15;
    }
    /* set number of window bits, free window if different */ if (windowBits && (windowBits < 8 || windowBits > 15)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    if (state.window !== null && state.wbits !== windowBits) state.window = null;
    /* update state and reset the rest of it */ state.wrap = wrap;
    state.wbits = windowBits;
    return $b0e71325728b7a56$var$inflateReset(strm);
};
const $b0e71325728b7a56$var$inflateInit2 = (strm, windowBits)=>{
    if (!strm) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    //strm.msg = Z_NULL;                 /* in case we return an error */
    const state = new $b0e71325728b7a56$var$InflateState();
    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.strm = strm;
    state.window = null /*Z_NULL*/ ;
    state.mode = $b0e71325728b7a56$var$HEAD; /* to pass state test in inflateReset2() */ 
    const ret = $b0e71325728b7a56$var$inflateReset2(strm, windowBits);
    if (ret !== $b0e71325728b7a56$var$Z_OK$1) strm.state = null /*Z_NULL*/ ;
    return ret;
};
const $b0e71325728b7a56$var$inflateInit = (strm)=>{
    return $b0e71325728b7a56$var$inflateInit2(strm, $b0e71325728b7a56$var$DEF_WBITS);
};
/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */ let $b0e71325728b7a56$var$virgin = true;
let $b0e71325728b7a56$var$lenfix, $b0e71325728b7a56$var$distfix; // We have no pointers in JS, so keep tables separate
const $b0e71325728b7a56$var$fixedtables = (state)=>{
    /* build fixed huffman tables if first call (may not be thread safe) */ if ($b0e71325728b7a56$var$virgin) {
        $b0e71325728b7a56$var$lenfix = new Int32Array(512);
        $b0e71325728b7a56$var$distfix = new Int32Array(32);
        /* literal/length table */ let sym = 0;
        while(sym < 144)state.lens[sym++] = 8;
        while(sym < 256)state.lens[sym++] = 9;
        while(sym < 280)state.lens[sym++] = 7;
        while(sym < 288)state.lens[sym++] = 8;
        $b0e71325728b7a56$var$inftrees($b0e71325728b7a56$var$LENS, state.lens, 0, 288, $b0e71325728b7a56$var$lenfix, 0, state.work, {
            bits: 9
        });
        /* distance table */ sym = 0;
        while(sym < 32)state.lens[sym++] = 5;
        $b0e71325728b7a56$var$inftrees($b0e71325728b7a56$var$DISTS, state.lens, 0, 32, $b0e71325728b7a56$var$distfix, 0, state.work, {
            bits: 5
        });
        /* do this just once */ $b0e71325728b7a56$var$virgin = false;
    }
    state.lencode = $b0e71325728b7a56$var$lenfix;
    state.lenbits = 9;
    state.distcode = $b0e71325728b7a56$var$distfix;
    state.distbits = 5;
};
/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */ const $b0e71325728b7a56$var$updatewindow = (strm, src, end, copy)=>{
    let dist;
    const state = strm.state;
    /* if it hasn't been done already, allocate space for the window */ if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
        state.window = new Uint8Array(state.wsize);
    }
    /* copy state->wsize or less output bytes into the circular window */ if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
    } else {
        dist = state.wsize - state.wnext;
        if (dist > copy) dist = copy;
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
            //zmemcpy(state->window, end - copy, copy);
            state.window.set(src.subarray(end - copy, end), 0);
            state.wnext = copy;
            state.whave = state.wsize;
        } else {
            state.wnext += dist;
            if (state.wnext === state.wsize) state.wnext = 0;
            if (state.whave < state.wsize) state.whave += dist;
        }
    }
    return 0;
};
const $b0e71325728b7a56$var$inflate$2 = (strm, flush)=>{
    let state;
    let input, output; // input/output buffers
    let next; /* next input INDEX */ 
    let put; /* next output INDEX */ 
    let have, left; /* available input and output */ 
    let hold; /* bit buffer */ 
    let bits; /* bits in bit buffer */ 
    let _in, _out; /* save starting available input and output */ 
    let copy; /* number of stored or match bytes to copy */ 
    let from; /* where to copy match bytes from */ 
    let from_source;
    let here = 0; /* current decoding table entry */ 
    let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //let last;                   /* parent table entry */
    let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    let len; /* length to copy for repeats, bits to drop */ 
    let ret; /* return code */ 
    const hbuf = new Uint8Array(4); /* buffer for gzip header crc calculation */ 
    let opts;
    let n; // temporary variable for NEED_BITS
    const order = /* permutation of code lengths */ new Uint8Array([
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
    ]);
    if ($b0e71325728b7a56$var$inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    state = strm.state;
    if (state.mode === $b0e71325728b7a56$var$TYPE) state.mode = $b0e71325728b7a56$var$TYPEDO;
     /* skip check */ 
    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---
    _in = have;
    _out = left;
    ret = $b0e71325728b7a56$var$Z_OK$1;
    inf_leave: for(;;)switch(state.mode){
        case $b0e71325728b7a56$var$HEAD:
            if (state.wrap === 0) {
                state.mode = $b0e71325728b7a56$var$TYPEDO;
                break;
            }
            //=== NEEDBITS(16);
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.wrap & 2 && hold === 0x8b1f) {
                if (state.wbits === 0) state.wbits = 15;
                state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = $b0e71325728b7a56$var$crc32_1(state.check, hbuf, 2, 0);
                //===//
                //=== INITBITS();
                hold = 0;
                bits = 0;
                //===//
                state.mode = $b0e71325728b7a56$var$FLAGS;
                break;
            }
            if (state.head) state.head.done = false;
            if (!(state.wrap & 1) || /* check if zlib header allowed */ (((hold & 0xff) << 8) + (hold >> 8)) % 31) {
                strm.msg = "incorrect header check";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            if ((hold & 0x0f) !== $b0e71325728b7a56$var$Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f) + 8;
            if (state.wbits === 0) state.wbits = len;
            if (len > 15 || len > state.wbits) {
                strm.msg = "invalid window size";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            // !!! pako patch. Force use `options.windowBits` if passed.
            // Required to always use max window size by default.
            state.dmax = 1 << state.wbits;
            //state.dmax = 1 << len;
            state.flags = 0; /* indicate zlib header */ 
            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = hold & 0x200 ? $b0e71325728b7a56$var$DICTID : $b0e71325728b7a56$var$TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            break;
        case $b0e71325728b7a56$var$FLAGS:
            //=== NEEDBITS(16); */
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== $b0e71325728b7a56$var$Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            if (state.flags & 0xe000) {
                strm.msg = "unknown header flags set";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            if (state.head) state.head.text = hold >> 8 & 1;
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = $b0e71325728b7a56$var$crc32_1(state.check, hbuf, 2, 0);
            //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $b0e71325728b7a56$var$TIME;
        /* falls through */ case $b0e71325728b7a56$var$TIME:
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.head) state.head.time = hold;
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC4(state.check, hold)
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                hbuf[2] = hold >>> 16 & 0xff;
                hbuf[3] = hold >>> 24 & 0xff;
                state.check = $b0e71325728b7a56$var$crc32_1(state.check, hbuf, 4, 0);
            //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $b0e71325728b7a56$var$OS;
        /* falls through */ case $b0e71325728b7a56$var$OS:
            //=== NEEDBITS(16); */
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.head) {
                state.head.xflags = hold & 0xff;
                state.head.os = hold >> 8;
            }
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = $b0e71325728b7a56$var$crc32_1(state.check, hbuf, 2, 0);
            //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $b0e71325728b7a56$var$EXLEN;
        /* falls through */ case $b0e71325728b7a56$var$EXLEN:
            if (state.flags & 0x0400) {
                //=== NEEDBITS(16); */
                while(bits < 16){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.length = hold;
                if (state.head) state.head.extra_len = hold;
                if (state.flags & 0x0200 && state.wrap & 4) {
                    //=== CRC2(state.check, hold);
                    hbuf[0] = hold & 0xff;
                    hbuf[1] = hold >>> 8 & 0xff;
                    state.check = $b0e71325728b7a56$var$crc32_1(state.check, hbuf, 2, 0);
                //===//
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            } else if (state.head) state.head.extra = null /*Z_NULL*/ ;
            state.mode = $b0e71325728b7a56$var$EXTRA;
        /* falls through */ case $b0e71325728b7a56$var$EXTRA:
            if (state.flags & 0x0400) {
                copy = state.length;
                if (copy > have) copy = have;
                if (copy) {
                    if (state.head) {
                        len = state.head.extra_len - state.length;
                        if (!state.head.extra) // Use untyped array for more convenient processing later
                        state.head.extra = new Uint8Array(state.head.extra_len);
                        state.head.extra.set(input.subarray(next, // extra field is limited to 65536 bytes
                        // - no need for additional size check
                        next + copy), /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/ len);
                    //zmemcpy(state.head.extra + len, next,
                    //        len + copy > state.head.extra_max ?
                    //        state.head.extra_max - len : copy);
                    }
                    if (state.flags & 0x0200 && state.wrap & 4) state.check = $b0e71325728b7a56$var$crc32_1(state.check, input, copy, next);
                    have -= copy;
                    next += copy;
                    state.length -= copy;
                }
                if (state.length) break inf_leave;
            }
            state.length = 0;
            state.mode = $b0e71325728b7a56$var$NAME;
        /* falls through */ case $b0e71325728b7a56$var$NAME:
            if (state.flags & 0x0800) {
                if (have === 0) break inf_leave;
                copy = 0;
                do {
                    // TODO: 2 or 1 bytes?
                    len = input[next + copy++];
                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.name_max*/ ) state.head.name += String.fromCharCode(len);
                }while (len && copy < have);
                if (state.flags & 0x0200 && state.wrap & 4) state.check = $b0e71325728b7a56$var$crc32_1(state.check, input, copy, next);
                have -= copy;
                next += copy;
                if (len) break inf_leave;
            } else if (state.head) state.head.name = null;
            state.length = 0;
            state.mode = $b0e71325728b7a56$var$COMMENT;
        /* falls through */ case $b0e71325728b7a56$var$COMMENT:
            if (state.flags & 0x1000) {
                if (have === 0) break inf_leave;
                copy = 0;
                do {
                    len = input[next + copy++];
                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.comm_max*/ ) state.head.comment += String.fromCharCode(len);
                }while (len && copy < have);
                if (state.flags & 0x0200 && state.wrap & 4) state.check = $b0e71325728b7a56$var$crc32_1(state.check, input, copy, next);
                have -= copy;
                next += copy;
                if (len) break inf_leave;
            } else if (state.head) state.head.comment = null;
            state.mode = $b0e71325728b7a56$var$HCRC;
        /* falls through */ case $b0e71325728b7a56$var$HCRC:
            if (state.flags & 0x0200) {
                //=== NEEDBITS(16); */
                while(bits < 16){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                if (state.wrap & 4 && hold !== (state.check & 0xffff)) {
                    strm.msg = "header crc mismatch";
                    state.mode = $b0e71325728b7a56$var$BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            }
            if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = $b0e71325728b7a56$var$TYPE;
            break;
        case $b0e71325728b7a56$var$DICTID:
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            strm.adler = state.check = $b0e71325728b7a56$var$zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $b0e71325728b7a56$var$DICT;
        /* falls through */ case $b0e71325728b7a56$var$DICT:
            if (state.havedict === 0) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                //---
                return $b0e71325728b7a56$var$Z_NEED_DICT$1;
            }
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = $b0e71325728b7a56$var$TYPE;
        /* falls through */ case $b0e71325728b7a56$var$TYPE:
            if (flush === $b0e71325728b7a56$var$Z_BLOCK || flush === $b0e71325728b7a56$var$Z_TREES) break inf_leave;
        /* falls through */ case $b0e71325728b7a56$var$TYPEDO:
            if (state.last) {
                //--- BYTEBITS() ---//
                hold >>>= bits & 7;
                bits -= bits & 7;
                //---//
                state.mode = $b0e71325728b7a56$var$CHECK;
                break;
            }
            //=== NEEDBITS(3); */
            while(bits < 3){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.last = hold & 0x01 /*BITS(1)*/ ;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//
            switch(hold & 0x03){
                case 0:
                    /* stored block */ //Tracev((stderr, "inflate:     stored block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = $b0e71325728b7a56$var$STORED;
                    break;
                case 1:
                    /* fixed block */ $b0e71325728b7a56$var$fixedtables(state);
                    //Tracev((stderr, "inflate:     fixed codes block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = $b0e71325728b7a56$var$LEN_; /* decode codes */ 
                    if (flush === $b0e71325728b7a56$var$Z_TREES) {
                        //--- DROPBITS(2) ---//
                        hold >>>= 2;
                        bits -= 2;
                        break inf_leave;
                    }
                    break;
                case 2:
                    /* dynamic block */ //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = $b0e71325728b7a56$var$TABLE;
                    break;
                case 3:
                    strm.msg = "invalid block type";
                    state.mode = $b0e71325728b7a56$var$BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            break;
        case $b0e71325728b7a56$var$STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                strm.msg = "invalid stored block lengths";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $b0e71325728b7a56$var$COPY_;
            if (flush === $b0e71325728b7a56$var$Z_TREES) break inf_leave;
        /* falls through */ case $b0e71325728b7a56$var$COPY_:
            state.mode = $b0e71325728b7a56$var$COPY;
        /* falls through */ case $b0e71325728b7a56$var$COPY:
            copy = state.length;
            if (copy) {
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy === 0) break inf_leave;
                //--- zmemcpy(put, next, copy); ---
                output.set(input.subarray(next, next + copy), put);
                //---//
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = $b0e71325728b7a56$var$TYPE;
            break;
        case $b0e71325728b7a56$var$TABLE:
            //=== NEEDBITS(14); */
            while(bits < 14){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f) + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f) + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f) + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = "too many length or distance symbols";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = $b0e71325728b7a56$var$LENLENS;
        /* falls through */ case $b0e71325728b7a56$var$LENLENS:
            while(state.have < state.ncode){
                //=== NEEDBITS(3);
                while(bits < 3){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
            //---//
            }
            while(state.have < 19)state.lens[order[state.have++]] = 0;
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;
            opts = {
                bits: state.lenbits
            };
            ret = $b0e71325728b7a56$var$inftrees($b0e71325728b7a56$var$CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;
            if (ret) {
                strm.msg = "invalid code lengths set";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = $b0e71325728b7a56$var$CODELENS;
        /* falls through */ case $b0e71325728b7a56$var$CODELENS:
            while(state.have < state.nlen + state.ndist){
                for(;;){
                    here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ 
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                if (here_val < 16) {
                    //--- DROPBITS(here.bits) ---//
                    hold >>>= here_bits;
                    bits -= here_bits;
                    //---//
                    state.lens[state.have++] = here_val;
                } else {
                    if (here_val === 16) {
                        //=== NEEDBITS(here.bits + 2);
                        n = here_bits + 2;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        if (state.have === 0) {
                            strm.msg = "invalid bit length repeat";
                            state.mode = $b0e71325728b7a56$var$BAD;
                            break;
                        }
                        len = state.lens[state.have - 1];
                        copy = 3 + (hold & 0x03); //BITS(2);
                        //--- DROPBITS(2) ---//
                        hold >>>= 2;
                        bits -= 2;
                    //---//
                    } else if (here_val === 17) {
                        //=== NEEDBITS(here.bits + 3);
                        n = here_bits + 3;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        len = 0;
                        copy = 3 + (hold & 0x07); //BITS(3);
                        //--- DROPBITS(3) ---//
                        hold >>>= 3;
                        bits -= 3;
                    //---//
                    } else {
                        //=== NEEDBITS(here.bits + 7);
                        n = here_bits + 7;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        len = 0;
                        copy = 11 + (hold & 0x7f); //BITS(7);
                        //--- DROPBITS(7) ---//
                        hold >>>= 7;
                        bits -= 7;
                    //---//
                    }
                    if (state.have + copy > state.nlen + state.ndist) {
                        strm.msg = "invalid bit length repeat";
                        state.mode = $b0e71325728b7a56$var$BAD;
                        break;
                    }
                    while(copy--)state.lens[state.have++] = len;
                }
            }
            /* handle error breaks in while */ if (state.mode === $b0e71325728b7a56$var$BAD) break;
            /* check for end-of-block code (better have one) */ if (state.lens[256] === 0) {
                strm.msg = "invalid code -- missing end-of-block";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */ state.lenbits = 9;
            opts = {
                bits: state.lenbits
            };
            ret = $b0e71325728b7a56$var$inftrees($b0e71325728b7a56$var$LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;
            if (ret) {
                strm.msg = "invalid literal/lengths set";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = {
                bits: state.distbits
            };
            ret = $b0e71325728b7a56$var$inftrees($b0e71325728b7a56$var$DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;
            if (ret) {
                strm.msg = "invalid distances set";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = $b0e71325728b7a56$var$LEN_;
            if (flush === $b0e71325728b7a56$var$Z_TREES) break inf_leave;
        /* falls through */ case $b0e71325728b7a56$var$LEN_:
            state.mode = $b0e71325728b7a56$var$LEN;
        /* falls through */ case $b0e71325728b7a56$var$LEN:
            if (have >= 6 && left >= 258) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                //---
                $b0e71325728b7a56$var$inffast(strm, _out);
                //--- LOAD() ---
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                //---
                if (state.mode === $b0e71325728b7a56$var$TYPE) state.back = -1;
                break;
            }
            state.back = 0;
            for(;;){
                here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ 
                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;
                if (here_bits <= bits) break;
                //--- PULLBYTE() ---//
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for(;;){
                    here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (last_bits + here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                //--- DROPBITS(last.bits) ---//
                hold >>>= last_bits;
                bits -= last_bits;
                //---//
                state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                //        "inflate:         literal '%c'\n" :
                //        "inflate:         literal 0x%02x\n", here.val));
                state.mode = $b0e71325728b7a56$var$LIT;
                break;
            }
            if (here_op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.back = -1;
                state.mode = $b0e71325728b7a56$var$TYPE;
                break;
            }
            if (here_op & 64) {
                strm.msg = "invalid literal/length code";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            state.extra = here_op & 15;
            state.mode = $b0e71325728b7a56$var$LENEXT;
        /* falls through */ case $b0e71325728b7a56$var$LENEXT:
            if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;
                while(bits < n){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;
                //--- DROPBITS(state.extra) ---//
                hold >>>= state.extra;
                bits -= state.extra;
                //---//
                state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = $b0e71325728b7a56$var$DIST;
        /* falls through */ case $b0e71325728b7a56$var$DIST:
            for(;;){
                here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/ 
                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;
                if (here_bits <= bits) break;
                //--- PULLBYTE() ---//
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            //---//
            }
            if ((here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for(;;){
                    here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (last_bits + here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                //--- DROPBITS(last.bits) ---//
                hold >>>= last_bits;
                bits -= last_bits;
                //---//
                state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
                strm.msg = "invalid distance code";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            state.offset = here_val;
            state.extra = here_op & 15;
            state.mode = $b0e71325728b7a56$var$DISTEXT;
        /* falls through */ case $b0e71325728b7a56$var$DISTEXT:
            if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;
                while(bits < n){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;
                //--- DROPBITS(state.extra) ---//
                hold >>>= state.extra;
                bits -= state.extra;
                //---//
                state.back += state.extra;
            }
            //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
                strm.msg = "invalid distance too far back";
                state.mode = $b0e71325728b7a56$var$BAD;
                break;
            }
            //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = $b0e71325728b7a56$var$MATCH;
        /* falls through */ case $b0e71325728b7a56$var$MATCH:
            if (left === 0) break inf_leave;
            copy = _out - left;
            if (state.offset > copy) {
                copy = state.offset - copy;
                if (copy > state.whave) {
                    if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = $b0e71325728b7a56$var$BAD;
                        break;
                    }
                }
                if (copy > state.wnext) {
                    copy -= state.wnext;
                    from = state.wsize - copy;
                } else from = state.wnext - copy;
                if (copy > state.length) copy = state.length;
                from_source = state.window;
            } else {
                from_source = output;
                from = put - state.offset;
                copy = state.length;
            }
            if (copy > left) copy = left;
            left -= copy;
            state.length -= copy;
            do output[put++] = from_source[from++];
            while (--copy);
            if (state.length === 0) state.mode = $b0e71325728b7a56$var$LEN;
            break;
        case $b0e71325728b7a56$var$LIT:
            if (left === 0) break inf_leave;
            output[put++] = state.length;
            left--;
            state.mode = $b0e71325728b7a56$var$LEN;
            break;
        case $b0e71325728b7a56$var$CHECK:
            if (state.wrap) {
                //=== NEEDBITS(32);
                while(bits < 32){
                    if (have === 0) break inf_leave;
                    have--;
                    // Use '|' instead of '+' to make sure that result is signed
                    hold |= input[next++] << bits;
                    bits += 8;
                }
                //===//
                _out -= left;
                strm.total_out += _out;
                state.total += _out;
                if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/ state.flags ? $b0e71325728b7a56$var$crc32_1(state.check, output, _out, put - _out) : $b0e71325728b7a56$var$adler32_1(state.check, output, _out, put - _out);
                _out = left;
                // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
                if (state.wrap & 4 && (state.flags ? hold : $b0e71325728b7a56$var$zswap32(hold)) !== state.check) {
                    strm.msg = "incorrect data check";
                    state.mode = $b0e71325728b7a56$var$BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = $b0e71325728b7a56$var$LENGTH;
        /* falls through */ case $b0e71325728b7a56$var$LENGTH:
            if (state.wrap && state.flags) {
                //=== NEEDBITS(32);
                while(bits < 32){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                if (state.wrap & 4 && hold !== (state.total & 0xffffffff)) {
                    strm.msg = "incorrect length check";
                    state.mode = $b0e71325728b7a56$var$BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = $b0e71325728b7a56$var$DONE;
        /* falls through */ case $b0e71325728b7a56$var$DONE:
            ret = $b0e71325728b7a56$var$Z_STREAM_END$1;
            break inf_leave;
        case $b0e71325728b7a56$var$BAD:
            ret = $b0e71325728b7a56$var$Z_DATA_ERROR$1;
            break inf_leave;
        case $b0e71325728b7a56$var$MEM:
            return $b0e71325728b7a56$var$Z_MEM_ERROR$1;
        case $b0e71325728b7a56$var$SYNC:
        /* falls through */ default:
            return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    }
    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
    /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */ //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---
    if (state.wsize || _out !== strm.avail_out && state.mode < $b0e71325728b7a56$var$BAD && (state.mode < $b0e71325728b7a56$var$CHECK || flush !== $b0e71325728b7a56$var$Z_FINISH$1)) $b0e71325728b7a56$var$updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out);
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/ state.flags ? $b0e71325728b7a56$var$crc32_1(state.check, output, _out, strm.next_out - _out) : $b0e71325728b7a56$var$adler32_1(state.check, output, _out, strm.next_out - _out);
    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === $b0e71325728b7a56$var$TYPE ? 128 : 0) + (state.mode === $b0e71325728b7a56$var$LEN_ || state.mode === $b0e71325728b7a56$var$COPY_ ? 256 : 0);
    if ((_in === 0 && _out === 0 || flush === $b0e71325728b7a56$var$Z_FINISH$1) && ret === $b0e71325728b7a56$var$Z_OK$1) ret = $b0e71325728b7a56$var$Z_BUF_ERROR;
    return ret;
};
const $b0e71325728b7a56$var$inflateEnd = (strm)=>{
    if ($b0e71325728b7a56$var$inflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    let state = strm.state;
    if (state.window) state.window = null;
    strm.state = null;
    return $b0e71325728b7a56$var$Z_OK$1;
};
const $b0e71325728b7a56$var$inflateGetHeader = (strm, head)=>{
    /* check state */ if ($b0e71325728b7a56$var$inflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    if ((state.wrap & 2) === 0) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    /* save header structure */ state.head = head;
    head.done = false;
    return $b0e71325728b7a56$var$Z_OK$1;
};
const $b0e71325728b7a56$var$inflateSetDictionary = (strm, dictionary)=>{
    const dictLength = dictionary.length;
    let state;
    let dictid;
    let ret;
    /* check state */ if ($b0e71325728b7a56$var$inflateStateCheck(strm)) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    state = strm.state;
    if (state.wrap !== 0 && state.mode !== $b0e71325728b7a56$var$DICT) return $b0e71325728b7a56$var$Z_STREAM_ERROR$1;
    /* check for correct dictionary identifier */ if (state.mode === $b0e71325728b7a56$var$DICT) {
        dictid = 1; /* adler32(0, null, 0)*/ 
        /* dictid = adler32(dictid, dictionary, dictLength); */ dictid = $b0e71325728b7a56$var$adler32_1(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) return $b0e71325728b7a56$var$Z_DATA_ERROR$1;
    }
    /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */ ret = $b0e71325728b7a56$var$updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
        state.mode = $b0e71325728b7a56$var$MEM;
        return $b0e71325728b7a56$var$Z_MEM_ERROR$1;
    }
    state.havedict = 1;
    // Tracev((stderr, "inflate:   dictionary set\n"));
    return $b0e71325728b7a56$var$Z_OK$1;
};
var $b0e71325728b7a56$var$inflateReset_1 = $b0e71325728b7a56$var$inflateReset;
var $b0e71325728b7a56$var$inflateReset2_1 = $b0e71325728b7a56$var$inflateReset2;
var $b0e71325728b7a56$var$inflateResetKeep_1 = $b0e71325728b7a56$var$inflateResetKeep;
var $b0e71325728b7a56$var$inflateInit_1 = $b0e71325728b7a56$var$inflateInit;
var $b0e71325728b7a56$var$inflateInit2_1 = $b0e71325728b7a56$var$inflateInit2;
var $b0e71325728b7a56$var$inflate_2$1 = $b0e71325728b7a56$var$inflate$2;
var $b0e71325728b7a56$var$inflateEnd_1 = $b0e71325728b7a56$var$inflateEnd;
var $b0e71325728b7a56$var$inflateGetHeader_1 = $b0e71325728b7a56$var$inflateGetHeader;
var $b0e71325728b7a56$var$inflateSetDictionary_1 = $b0e71325728b7a56$var$inflateSetDictionary;
var $b0e71325728b7a56$var$inflateInfo = "pako inflate (from Nodeca project)";
/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/ var $b0e71325728b7a56$var$inflate_1$2 = {
    inflateReset: $b0e71325728b7a56$var$inflateReset_1,
    inflateReset2: $b0e71325728b7a56$var$inflateReset2_1,
    inflateResetKeep: $b0e71325728b7a56$var$inflateResetKeep_1,
    inflateInit: $b0e71325728b7a56$var$inflateInit_1,
    inflateInit2: $b0e71325728b7a56$var$inflateInit2_1,
    inflate: $b0e71325728b7a56$var$inflate_2$1,
    inflateEnd: $b0e71325728b7a56$var$inflateEnd_1,
    inflateGetHeader: $b0e71325728b7a56$var$inflateGetHeader_1,
    inflateSetDictionary: $b0e71325728b7a56$var$inflateSetDictionary_1,
    inflateInfo: $b0e71325728b7a56$var$inflateInfo
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function $b0e71325728b7a56$var$GZheader() {
    /* true if compressed data believed to be text */ this.text = 0;
    /* modification time */ this.time = 0;
    /* extra flags (not used when writing a gzip file) */ this.xflags = 0;
    /* operating system */ this.os = 0;
    /* pointer to extra field or Z_NULL if none */ this.extra = null;
    /* extra field length (valid if extra != Z_NULL) */ this.extra_len = 0; // Actually, we don't need it in JS,
    // but leave for few code modifications
    //
    // Setup limits is not necessary because in js we should not preallocate memory
    // for inflate use constant limit in 65536 bytes
    //
    /* space at extra (only when reading header) */ // this.extra_max  = 0;
    /* pointer to zero-terminated file name or Z_NULL */ this.name = "";
    /* space at name (only when reading header) */ // this.name_max   = 0;
    /* pointer to zero-terminated comment or Z_NULL */ this.comment = "";
    /* space at comment (only when reading header) */ // this.comm_max   = 0;
    /* true if there was or will be a header crc */ this.hcrc = 0;
    /* true when done reading gzip header (not used when writing a gzip file) */ this.done = false;
}
var $b0e71325728b7a56$var$gzheader = $b0e71325728b7a56$var$GZheader;
const $b0e71325728b7a56$var$toString = Object.prototype.toString;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: $b0e71325728b7a56$var$Z_NO_FLUSH, Z_FINISH: $b0e71325728b7a56$var$Z_FINISH, Z_OK: $b0e71325728b7a56$var$Z_OK, Z_STREAM_END: $b0e71325728b7a56$var$Z_STREAM_END, Z_NEED_DICT: $b0e71325728b7a56$var$Z_NEED_DICT, Z_STREAM_ERROR: $b0e71325728b7a56$var$Z_STREAM_ERROR, Z_DATA_ERROR: $b0e71325728b7a56$var$Z_DATA_ERROR, Z_MEM_ERROR: $b0e71325728b7a56$var$Z_MEM_ERROR } = $b0e71325728b7a56$var$constants$2;
/* ===========================================================================*/ /**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/ /* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/ /**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/ /**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/ /**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/ function $b0e71325728b7a56$var$Inflate$1(options) {
    this.options = $b0e71325728b7a56$var$common.assign({
        chunkSize: 65536,
        windowBits: 15,
        to: ""
    }, options || {});
    const opt = this.options;
    // Force window size for `raw` data, if not set directly,
    // because we have no header for autodetect.
    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) opt.windowBits = -15;
    }
    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) opt.windowBits += 32;
    // Gzip header has no info about windows size, we can do autodetect only
    // for deflate. So, if window size not set, force it to max when gzip possible
    if (opt.windowBits > 15 && opt.windowBits < 48) // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    {
        if ((opt.windowBits & 15) === 0) opt.windowBits |= 15;
    }
    this.err = 0; // error code, if happens (0 = Z_OK)
    this.msg = ""; // error message
    this.ended = false; // used to avoid multiple onEnd() calls
    this.chunks = []; // chunks of compressed data
    this.strm = new $b0e71325728b7a56$var$zstream();
    this.strm.avail_out = 0;
    let status = $b0e71325728b7a56$var$inflate_1$2.inflateInit2(this.strm, opt.windowBits);
    if (status !== $b0e71325728b7a56$var$Z_OK) throw new Error($b0e71325728b7a56$var$messages[status]);
    this.header = new $b0e71325728b7a56$var$gzheader();
    $b0e71325728b7a56$var$inflate_1$2.inflateGetHeader(this.strm, this.header);
    // Setup dictionary
    if (opt.dictionary) {
        // Convert data if needed
        if (typeof opt.dictionary === "string") opt.dictionary = $b0e71325728b7a56$var$strings.string2buf(opt.dictionary);
        else if ($b0e71325728b7a56$var$toString.call(opt.dictionary) === "[object ArrayBuffer]") opt.dictionary = new Uint8Array(opt.dictionary);
        if (opt.raw) {
            status = $b0e71325728b7a56$var$inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
            if (status !== $b0e71325728b7a56$var$Z_OK) throw new Error($b0e71325728b7a56$var$messages[status]);
        }
    }
}
/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/ $b0e71325728b7a56$var$Inflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    const dictionary = this.options.dictionary;
    let status, _flush_mode, last_avail_out;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? $b0e71325728b7a56$var$Z_FINISH : $b0e71325728b7a56$var$Z_NO_FLUSH;
    // Convert data if needed
    if ($b0e71325728b7a56$var$toString.call(data) === "[object ArrayBuffer]") strm.input = new Uint8Array(data);
    else strm.input = data;
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for(;;){
        if (strm.avail_out === 0) {
            strm.output = new Uint8Array(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
        }
        status = $b0e71325728b7a56$var$inflate_1$2.inflate(strm, _flush_mode);
        if (status === $b0e71325728b7a56$var$Z_NEED_DICT && dictionary) {
            status = $b0e71325728b7a56$var$inflate_1$2.inflateSetDictionary(strm, dictionary);
            if (status === $b0e71325728b7a56$var$Z_OK) status = $b0e71325728b7a56$var$inflate_1$2.inflate(strm, _flush_mode);
            else if (status === $b0e71325728b7a56$var$Z_DATA_ERROR) // Replace code with more verbose
            status = $b0e71325728b7a56$var$Z_NEED_DICT;
        }
        // Skip snyc markers if more data follows and not raw mode
        while(strm.avail_in > 0 && status === $b0e71325728b7a56$var$Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0){
            $b0e71325728b7a56$var$inflate_1$2.inflateReset(strm);
            status = $b0e71325728b7a56$var$inflate_1$2.inflate(strm, _flush_mode);
        }
        switch(status){
            case $b0e71325728b7a56$var$Z_STREAM_ERROR:
            case $b0e71325728b7a56$var$Z_DATA_ERROR:
            case $b0e71325728b7a56$var$Z_NEED_DICT:
            case $b0e71325728b7a56$var$Z_MEM_ERROR:
                this.onEnd(status);
                this.ended = true;
                return false;
        }
        // Remember real `avail_out` value, because we may patch out buffer content
        // to align utf8 strings boundaries.
        last_avail_out = strm.avail_out;
        if (strm.next_out) {
            if (strm.avail_out === 0 || status === $b0e71325728b7a56$var$Z_STREAM_END) {
                if (this.options.to === "string") {
                    let next_out_utf8 = $b0e71325728b7a56$var$strings.utf8border(strm.output, strm.next_out);
                    let tail = strm.next_out - next_out_utf8;
                    let utf8str = $b0e71325728b7a56$var$strings.buf2string(strm.output, next_out_utf8);
                    // move tail & realign counters
                    strm.next_out = tail;
                    strm.avail_out = chunkSize - tail;
                    if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
                    this.onData(utf8str);
                } else this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
        }
        // Must repeat iteration if out buffer is full
        if (status === $b0e71325728b7a56$var$Z_OK && last_avail_out === 0) continue;
        // Finalize if end of stream reached.
        if (status === $b0e71325728b7a56$var$Z_STREAM_END) {
            status = $b0e71325728b7a56$var$inflate_1$2.inflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return true;
        }
        if (strm.avail_in === 0) break;
    }
    return true;
};
/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/ $b0e71325728b7a56$var$Inflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
};
/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/ $b0e71325728b7a56$var$Inflate$1.prototype.onEnd = function(status) {
    // On success - join
    if (status === $b0e71325728b7a56$var$Z_OK) {
        if (this.options.to === "string") this.result = this.chunks.join("");
        else this.result = $b0e71325728b7a56$var$common.flattenChunks(this.chunks);
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
};
/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/ function $b0e71325728b7a56$var$inflate$1(input, options) {
    const inflator = new $b0e71325728b7a56$var$Inflate$1(options);
    inflator.push(input);
    // That will never happens, if you don't cheat with options :)
    if (inflator.err) throw inflator.msg || $b0e71325728b7a56$var$messages[inflator.err];
    return inflator.result;
}
/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/ function $b0e71325728b7a56$var$inflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return $b0e71325728b7a56$var$inflate$1(input, options);
}
/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/ var $b0e71325728b7a56$var$Inflate_1$1 = $b0e71325728b7a56$var$Inflate$1;
var $b0e71325728b7a56$var$inflate_2 = $b0e71325728b7a56$var$inflate$1;
var $b0e71325728b7a56$var$inflateRaw_1$1 = $b0e71325728b7a56$var$inflateRaw$1;
var $b0e71325728b7a56$var$ungzip$1 = $b0e71325728b7a56$var$inflate$1;
var $b0e71325728b7a56$var$constants = $b0e71325728b7a56$var$constants$2;
var $b0e71325728b7a56$var$inflate_1$1 = {
    Inflate: $b0e71325728b7a56$var$Inflate_1$1,
    inflate: $b0e71325728b7a56$var$inflate_2,
    inflateRaw: $b0e71325728b7a56$var$inflateRaw_1$1,
    ungzip: $b0e71325728b7a56$var$ungzip$1,
    constants: $b0e71325728b7a56$var$constants
};
const { Deflate: $b0e71325728b7a56$var$Deflate, deflate: $b0e71325728b7a56$var$deflate, deflateRaw: $b0e71325728b7a56$var$deflateRaw, gzip: $b0e71325728b7a56$var$gzip } = $b0e71325728b7a56$var$deflate_1$1;
const { Inflate: $b0e71325728b7a56$var$Inflate, inflate: $b0e71325728b7a56$var$inflate, inflateRaw: $b0e71325728b7a56$var$inflateRaw, ungzip: $b0e71325728b7a56$var$ungzip } = $b0e71325728b7a56$var$inflate_1$1;
var $b0e71325728b7a56$export$ae157b6234afe138 = $b0e71325728b7a56$var$Deflate;
var $b0e71325728b7a56$export$2316623ecd1285ab = $b0e71325728b7a56$var$deflate;
var $b0e71325728b7a56$export$e95d6a8f69fb340a = $b0e71325728b7a56$var$deflateRaw;
var $b0e71325728b7a56$export$69f0ea7cf3a331a8 = $b0e71325728b7a56$var$gzip;
var $b0e71325728b7a56$export$d1de70a877d6e43c = $b0e71325728b7a56$var$Inflate;
var $b0e71325728b7a56$export$cae1ce83fe4a1782 = $b0e71325728b7a56$var$inflate;
var $b0e71325728b7a56$export$d0f0aa2d05c905c5 = $b0e71325728b7a56$var$inflateRaw;
var $b0e71325728b7a56$export$95adf9d270383091 = $b0e71325728b7a56$var$ungzip;
var $b0e71325728b7a56$export$1a988e7317c65621 = $b0e71325728b7a56$var$constants$2;
var $b0e71325728b7a56$export$2e2bcd8739ae039 = {
    Deflate: $b0e71325728b7a56$export$ae157b6234afe138,
    deflate: $b0e71325728b7a56$export$2316623ecd1285ab,
    deflateRaw: $b0e71325728b7a56$export$e95d6a8f69fb340a,
    gzip: $b0e71325728b7a56$export$69f0ea7cf3a331a8,
    Inflate: $b0e71325728b7a56$export$d1de70a877d6e43c,
    inflate: $b0e71325728b7a56$export$cae1ce83fe4a1782,
    inflateRaw: $b0e71325728b7a56$export$d0f0aa2d05c905c5,
    ungzip: $b0e71325728b7a56$export$95adf9d270383091,
    constants: $b0e71325728b7a56$export$1a988e7317c65621
};


function $960f305f3c6a1403$export$2e2bcd8739ae039(defs) {
    defs("EPSG:4326", "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
    defs("EPSG:4269", "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
    defs("EPSG:3857", "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");
    defs.WGS84 = defs["EPSG:4326"];
    defs["EPSG:3785"] = defs["EPSG:3857"]; // maintain backward compat, official code is 3857
    defs.GOOGLE = defs["EPSG:3857"];
    defs["EPSG:900913"] = defs["EPSG:3857"];
    defs["EPSG:102113"] = defs["EPSG:3857"];
}



var $7B7Eg = parcelRequire("7B7Eg");
var $2603c076096e1383$export$2e2bcd8739ae039 = {};
$2603c076096e1383$export$2e2bcd8739ae039.greenwich = 0.0; //"0dE",
$2603c076096e1383$export$2e2bcd8739ae039.lisbon = -9.131906111111; //"9d07'54.862\"W",
$2603c076096e1383$export$2e2bcd8739ae039.paris = 2.337229166667; //"2d20'14.025\"E",
$2603c076096e1383$export$2e2bcd8739ae039.bogota = -74.080916666667; //"74d04'51.3\"W",
$2603c076096e1383$export$2e2bcd8739ae039.madrid = -3.687938888889; //"3d41'16.58\"W",
$2603c076096e1383$export$2e2bcd8739ae039.rome = 12.452333333333; //"12d27'8.4\"E",
$2603c076096e1383$export$2e2bcd8739ae039.bern = 7.439583333333; //"7d26'22.5\"E",
$2603c076096e1383$export$2e2bcd8739ae039.jakarta = 106.807719444444; //"106d48'27.79\"E",
$2603c076096e1383$export$2e2bcd8739ae039.ferro = -17.666666666667; //"17d40'W",
$2603c076096e1383$export$2e2bcd8739ae039.brussels = 4.367975; //"4d22'4.71\"E",
$2603c076096e1383$export$2e2bcd8739ae039.stockholm = 18.058277777778; //"18d3'29.8\"E",
$2603c076096e1383$export$2e2bcd8739ae039.athens = 23.7163375; //"23d42'58.815\"E",
$2603c076096e1383$export$2e2bcd8739ae039.oslo = 10.722916666667; //"10d43'22.5\"E"


var $bb0ec53ad16732f2$export$2e2bcd8739ae039 = {
    ft: {
        to_meter: 0.3048
    },
    "us-ft": {
        to_meter: 1200 / 3937
    }
};


var $906e57b8f0ea965b$var$ignoredChar = /[\s_\-\/\(\)]/g;
function $906e57b8f0ea965b$export$2e2bcd8739ae039(obj, key) {
    if (obj[key]) return obj[key];
    var keys = Object.keys(obj);
    var lkey = key.toLowerCase().replace($906e57b8f0ea965b$var$ignoredChar, "");
    var i = -1;
    var testkey, processedKey;
    while(++i < keys.length){
        testkey = keys[i];
        processedKey = testkey.toLowerCase().replace($906e57b8f0ea965b$var$ignoredChar, "");
        if (processedKey === lkey) return obj[testkey];
    }
}


function $e8b7e57bb6c0f285$export$2e2bcd8739ae039(defData) {
    var self = {};
    var paramObj = defData.split("+").map(function(v) {
        return v.trim();
    }).filter(function(a) {
        return a;
    }).reduce(function(p, a) {
        var split = a.split("=");
        split.push(true);
        p[split[0].toLowerCase()] = split[1];
        return p;
    }, {});
    var paramName, paramVal, paramOutname;
    var params = {
        proj: "projName",
        datum: "datumCode",
        rf: function(v) {
            self.rf = parseFloat(v);
        },
        lat_0: function(v) {
            self.lat0 = v * (0, $7B7Eg.D2R);
        },
        lat_1: function(v) {
            self.lat1 = v * (0, $7B7Eg.D2R);
        },
        lat_2: function(v) {
            self.lat2 = v * (0, $7B7Eg.D2R);
        },
        lat_ts: function(v) {
            self.lat_ts = v * (0, $7B7Eg.D2R);
        },
        lon_0: function(v) {
            self.long0 = v * (0, $7B7Eg.D2R);
        },
        lon_1: function(v) {
            self.long1 = v * (0, $7B7Eg.D2R);
        },
        lon_2: function(v) {
            self.long2 = v * (0, $7B7Eg.D2R);
        },
        alpha: function(v) {
            self.alpha = parseFloat(v) * (0, $7B7Eg.D2R);
        },
        gamma: function(v) {
            self.rectified_grid_angle = parseFloat(v);
        },
        lonc: function(v) {
            self.longc = v * (0, $7B7Eg.D2R);
        },
        x_0: function(v) {
            self.x0 = parseFloat(v);
        },
        y_0: function(v) {
            self.y0 = parseFloat(v);
        },
        k_0: function(v) {
            self.k0 = parseFloat(v);
        },
        k: function(v) {
            self.k0 = parseFloat(v);
        },
        a: function(v) {
            self.a = parseFloat(v);
        },
        b: function(v) {
            self.b = parseFloat(v);
        },
        r: function(v) {
            self.a = self.b = parseFloat(v);
        },
        r_a: function() {
            self.R_A = true;
        },
        zone: function(v) {
            self.zone = parseInt(v, 10);
        },
        south: function() {
            self.utmSouth = true;
        },
        towgs84: function(v) {
            self.datum_params = v.split(",").map(function(a) {
                return parseFloat(a);
            });
        },
        to_meter: function(v) {
            self.to_meter = parseFloat(v);
        },
        units: function(v) {
            self.units = v;
            var unit = (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)((0, $bb0ec53ad16732f2$export$2e2bcd8739ae039), v);
            if (unit) self.to_meter = unit.to_meter;
        },
        from_greenwich: function(v) {
            self.from_greenwich = v * (0, $7B7Eg.D2R);
        },
        pm: function(v) {
            var pm = (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)((0, $2603c076096e1383$export$2e2bcd8739ae039), v);
            self.from_greenwich = (pm ? pm : parseFloat(v)) * (0, $7B7Eg.D2R);
        },
        nadgrids: function(v) {
            if (v === "@null") self.datumCode = "none";
            else self.nadgrids = v;
        },
        axis: function(v) {
            var legalAxis = "ewnsud";
            if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) self.axis = v;
        },
        approx: function() {
            self.approx = true;
        }
    };
    for(paramName in paramObj){
        paramVal = paramObj[paramName];
        if (paramName in params) {
            paramOutname = params[paramName];
            if (typeof paramOutname === "function") paramOutname(paramVal);
            else self[paramOutname] = paramVal;
        } else self[paramName] = paramVal;
    }
    if (typeof self.datumCode === "string" && self.datumCode !== "WGS84") self.datumCode = self.datumCode.toLowerCase();
    return self;
}


var $81c0a6e96962d9cd$export$2e2bcd8739ae039 = $81c0a6e96962d9cd$var$parseString;
var $81c0a6e96962d9cd$var$NEUTRAL = 1;
var $81c0a6e96962d9cd$var$KEYWORD = 2;
var $81c0a6e96962d9cd$var$NUMBER = 3;
var $81c0a6e96962d9cd$var$QUOTED = 4;
var $81c0a6e96962d9cd$var$AFTERQUOTE = 5;
var $81c0a6e96962d9cd$var$ENDED = -1;
var $81c0a6e96962d9cd$var$whitespace = /\s/;
var $81c0a6e96962d9cd$var$latin = /[A-Za-z]/;
var $81c0a6e96962d9cd$var$keyword = /[A-Za-z84_]/;
var $81c0a6e96962d9cd$var$endThings = /[,\]]/;
var $81c0a6e96962d9cd$var$digets = /[\d\.E\-\+]/;
// const ignoredChar = /[\s_\-\/\(\)]/g;
function $81c0a6e96962d9cd$var$Parser(text) {
    if (typeof text !== "string") throw new Error("not a string");
    this.text = text.trim();
    this.level = 0;
    this.place = 0;
    this.root = null;
    this.stack = [];
    this.currentObject = null;
    this.state = $81c0a6e96962d9cd$var$NEUTRAL;
}
$81c0a6e96962d9cd$var$Parser.prototype.readCharicter = function() {
    var char = this.text[this.place++];
    if (this.state !== $81c0a6e96962d9cd$var$QUOTED) while($81c0a6e96962d9cd$var$whitespace.test(char)){
        if (this.place >= this.text.length) return;
        char = this.text[this.place++];
    }
    switch(this.state){
        case $81c0a6e96962d9cd$var$NEUTRAL:
            return this.neutral(char);
        case $81c0a6e96962d9cd$var$KEYWORD:
            return this.keyword(char);
        case $81c0a6e96962d9cd$var$QUOTED:
            return this.quoted(char);
        case $81c0a6e96962d9cd$var$AFTERQUOTE:
            return this.afterquote(char);
        case $81c0a6e96962d9cd$var$NUMBER:
            return this.number(char);
        case $81c0a6e96962d9cd$var$ENDED:
            return;
    }
};
$81c0a6e96962d9cd$var$Parser.prototype.afterquote = function(char) {
    if (char === '"') {
        this.word += '"';
        this.state = $81c0a6e96962d9cd$var$QUOTED;
        return;
    }
    if ($81c0a6e96962d9cd$var$endThings.test(char)) {
        this.word = this.word.trim();
        this.afterItem(char);
        return;
    }
    throw new Error("havn't handled \"" + char + '" in afterquote yet, index ' + this.place);
};
$81c0a6e96962d9cd$var$Parser.prototype.afterItem = function(char) {
    if (char === ",") {
        if (this.word !== null) this.currentObject.push(this.word);
        this.word = null;
        this.state = $81c0a6e96962d9cd$var$NEUTRAL;
        return;
    }
    if (char === "]") {
        this.level--;
        if (this.word !== null) {
            this.currentObject.push(this.word);
            this.word = null;
        }
        this.state = $81c0a6e96962d9cd$var$NEUTRAL;
        this.currentObject = this.stack.pop();
        if (!this.currentObject) this.state = $81c0a6e96962d9cd$var$ENDED;
        return;
    }
};
$81c0a6e96962d9cd$var$Parser.prototype.number = function(char) {
    if ($81c0a6e96962d9cd$var$digets.test(char)) {
        this.word += char;
        return;
    }
    if ($81c0a6e96962d9cd$var$endThings.test(char)) {
        this.word = parseFloat(this.word);
        this.afterItem(char);
        return;
    }
    throw new Error("havn't handled \"" + char + '" in number yet, index ' + this.place);
};
$81c0a6e96962d9cd$var$Parser.prototype.quoted = function(char) {
    if (char === '"') {
        this.state = $81c0a6e96962d9cd$var$AFTERQUOTE;
        return;
    }
    this.word += char;
    return;
};
$81c0a6e96962d9cd$var$Parser.prototype.keyword = function(char) {
    if ($81c0a6e96962d9cd$var$keyword.test(char)) {
        this.word += char;
        return;
    }
    if (char === "[") {
        var newObjects = [];
        newObjects.push(this.word);
        this.level++;
        if (this.root === null) this.root = newObjects;
        else this.currentObject.push(newObjects);
        this.stack.push(this.currentObject);
        this.currentObject = newObjects;
        this.state = $81c0a6e96962d9cd$var$NEUTRAL;
        return;
    }
    if ($81c0a6e96962d9cd$var$endThings.test(char)) {
        this.afterItem(char);
        return;
    }
    throw new Error("havn't handled \"" + char + '" in keyword yet, index ' + this.place);
};
$81c0a6e96962d9cd$var$Parser.prototype.neutral = function(char) {
    if ($81c0a6e96962d9cd$var$latin.test(char)) {
        this.word = char;
        this.state = $81c0a6e96962d9cd$var$KEYWORD;
        return;
    }
    if (char === '"') {
        this.word = "";
        this.state = $81c0a6e96962d9cd$var$QUOTED;
        return;
    }
    if ($81c0a6e96962d9cd$var$digets.test(char)) {
        this.word = char;
        this.state = $81c0a6e96962d9cd$var$NUMBER;
        return;
    }
    if ($81c0a6e96962d9cd$var$endThings.test(char)) {
        this.afterItem(char);
        return;
    }
    throw new Error("havn't handled \"" + char + '" in neutral yet, index ' + this.place);
};
$81c0a6e96962d9cd$var$Parser.prototype.output = function() {
    while(this.place < this.text.length)this.readCharicter();
    if (this.state === $81c0a6e96962d9cd$var$ENDED) return this.root;
    throw new Error('unable to parse string "' + this.text + '". State is ' + this.state);
};
function $81c0a6e96962d9cd$var$parseString(txt) {
    var parser = new $81c0a6e96962d9cd$var$Parser(txt);
    return parser.output();
}


function $9a69c5588e7a5f95$var$mapit(obj, key, value) {
    if (Array.isArray(key)) {
        value.unshift(key);
        key = null;
    }
    var thing = key ? {} : obj;
    var out = value.reduce(function(newObj, item) {
        $9a69c5588e7a5f95$export$337bc7a3aef1f775(item, newObj);
        return newObj;
    }, thing);
    if (key) obj[key] = out;
}
function $9a69c5588e7a5f95$export$337bc7a3aef1f775(v, obj) {
    if (!Array.isArray(v)) {
        obj[v] = true;
        return;
    }
    var key = v.shift();
    if (key === "PARAMETER") key = v.shift();
    if (v.length === 1) {
        if (Array.isArray(v[0])) {
            obj[key] = {};
            $9a69c5588e7a5f95$export$337bc7a3aef1f775(v[0], obj[key]);
            return;
        }
        obj[key] = v[0];
        return;
    }
    if (!v.length) {
        obj[key] = true;
        return;
    }
    if (key === "TOWGS84") {
        obj[key] = v;
        return;
    }
    if (key === "AXIS") {
        if (!(key in obj)) obj[key] = [];
        obj[key].push(v);
        return;
    }
    if (!Array.isArray(key)) obj[key] = {};
    var i;
    switch(key){
        case "UNIT":
        case "PRIMEM":
        case "VERT_DATUM":
            obj[key] = {
                name: v[0].toLowerCase(),
                convert: v[1]
            };
            if (v.length === 3) $9a69c5588e7a5f95$export$337bc7a3aef1f775(v[2], obj[key]);
            return;
        case "SPHEROID":
        case "ELLIPSOID":
            obj[key] = {
                name: v[0],
                a: v[1],
                rf: v[2]
            };
            if (v.length === 4) $9a69c5588e7a5f95$export$337bc7a3aef1f775(v[3], obj[key]);
            return;
        case "PROJECTEDCRS":
        case "PROJCRS":
        case "GEOGCS":
        case "GEOCCS":
        case "PROJCS":
        case "LOCAL_CS":
        case "GEODCRS":
        case "GEODETICCRS":
        case "GEODETICDATUM":
        case "EDATUM":
        case "ENGINEERINGDATUM":
        case "VERT_CS":
        case "VERTCRS":
        case "VERTICALCRS":
        case "COMPD_CS":
        case "COMPOUNDCRS":
        case "ENGINEERINGCRS":
        case "ENGCRS":
        case "FITTED_CS":
        case "LOCAL_DATUM":
        case "DATUM":
            v[0] = [
                "name",
                v[0]
            ];
            $9a69c5588e7a5f95$var$mapit(obj, key, v);
            return;
        default:
            i = -1;
            while(++i < v.length){
                if (!Array.isArray(v[i])) return $9a69c5588e7a5f95$export$337bc7a3aef1f775(v, obj[key]);
            }
            return $9a69c5588e7a5f95$var$mapit(obj, key, v);
    }
}


var $ed36a1e8f69fe35e$var$D2R = 0.01745329251994329577;
function $ed36a1e8f69fe35e$var$rename(obj, params) {
    var outName = params[0];
    var inName = params[1];
    if (!(outName in obj) && inName in obj) {
        obj[outName] = obj[inName];
        if (params.length === 3) obj[outName] = params[2](obj[outName]);
    }
}
function $ed36a1e8f69fe35e$var$d2r(input) {
    return input * $ed36a1e8f69fe35e$var$D2R;
}
function $ed36a1e8f69fe35e$var$cleanWKT(wkt) {
    if (wkt.type === "GEOGCS") wkt.projName = "longlat";
    else if (wkt.type === "LOCAL_CS") {
        wkt.projName = "identity";
        wkt.local = true;
    } else if (typeof wkt.PROJECTION === "object") wkt.projName = Object.keys(wkt.PROJECTION)[0];
    else wkt.projName = wkt.PROJECTION;
    if (wkt.AXIS) {
        var axisOrder = "";
        for(var i = 0, ii = wkt.AXIS.length; i < ii; ++i){
            var axis = [
                wkt.AXIS[i][0].toLowerCase(),
                wkt.AXIS[i][1].toLowerCase()
            ];
            if (axis[0].indexOf("north") !== -1 || (axis[0] === "y" || axis[0] === "lat") && axis[1] === "north") axisOrder += "n";
            else if (axis[0].indexOf("south") !== -1 || (axis[0] === "y" || axis[0] === "lat") && axis[1] === "south") axisOrder += "s";
            else if (axis[0].indexOf("east") !== -1 || (axis[0] === "x" || axis[0] === "lon") && axis[1] === "east") axisOrder += "e";
            else if (axis[0].indexOf("west") !== -1 || (axis[0] === "x" || axis[0] === "lon") && axis[1] === "west") axisOrder += "w";
        }
        if (axisOrder.length === 2) axisOrder += "u";
        if (axisOrder.length === 3) wkt.axis = axisOrder;
    }
    if (wkt.UNIT) {
        wkt.units = wkt.UNIT.name.toLowerCase();
        if (wkt.units === "metre") wkt.units = "meter";
        if (wkt.UNIT.convert) {
            if (wkt.type === "GEOGCS") {
                if (wkt.DATUM && wkt.DATUM.SPHEROID) wkt.to_meter = wkt.UNIT.convert * wkt.DATUM.SPHEROID.a;
            } else wkt.to_meter = wkt.UNIT.convert;
        }
    }
    var geogcs = wkt.GEOGCS;
    if (wkt.type === "GEOGCS") geogcs = wkt;
    if (geogcs) {
        //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){
        //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;
        //}
        if (geogcs.DATUM) wkt.datumCode = geogcs.DATUM.name.toLowerCase();
        else wkt.datumCode = geogcs.name.toLowerCase();
        if (wkt.datumCode.slice(0, 2) === "d_") wkt.datumCode = wkt.datumCode.slice(2);
        if (wkt.datumCode === "new_zealand_geodetic_datum_1949" || wkt.datumCode === "new_zealand_1949") wkt.datumCode = "nzgd49";
        if (wkt.datumCode === "wgs_1984" || wkt.datumCode === "world_geodetic_system_1984") {
            if (wkt.PROJECTION === "Mercator_Auxiliary_Sphere") wkt.sphere = true;
            wkt.datumCode = "wgs84";
        }
        if (wkt.datumCode.slice(-6) === "_ferro") wkt.datumCode = wkt.datumCode.slice(0, -6);
        if (wkt.datumCode.slice(-8) === "_jakarta") wkt.datumCode = wkt.datumCode.slice(0, -8);
        if (~wkt.datumCode.indexOf("belge")) wkt.datumCode = "rnb72";
        if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
            wkt.ellps = geogcs.DATUM.SPHEROID.name.replace("_19", "").replace(/[Cc]larke\_18/, "clrk");
            if (wkt.ellps.toLowerCase().slice(0, 13) === "international") wkt.ellps = "intl";
            wkt.a = geogcs.DATUM.SPHEROID.a;
            wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
        }
        if (geogcs.DATUM && geogcs.DATUM.TOWGS84) wkt.datum_params = geogcs.DATUM.TOWGS84;
        if (~wkt.datumCode.indexOf("osgb_1936")) wkt.datumCode = "osgb36";
        if (~wkt.datumCode.indexOf("osni_1952")) wkt.datumCode = "osni52";
        if (~wkt.datumCode.indexOf("tm65") || ~wkt.datumCode.indexOf("geodetic_datum_of_1965")) wkt.datumCode = "ire65";
        if (wkt.datumCode === "ch1903+") wkt.datumCode = "ch1903";
        if (~wkt.datumCode.indexOf("israel")) wkt.datumCode = "isr93";
    }
    if (wkt.b && !isFinite(wkt.b)) wkt.b = wkt.a;
    function toMeter(input) {
        var ratio = wkt.to_meter || 1;
        return input * ratio;
    }
    var renamer = function(a) {
        return $ed36a1e8f69fe35e$var$rename(wkt, a);
    };
    var list = [
        [
            "standard_parallel_1",
            "Standard_Parallel_1"
        ],
        [
            "standard_parallel_1",
            "Latitude of 1st standard parallel"
        ],
        [
            "standard_parallel_2",
            "Standard_Parallel_2"
        ],
        [
            "standard_parallel_2",
            "Latitude of 2nd standard parallel"
        ],
        [
            "false_easting",
            "False_Easting"
        ],
        [
            "false_easting",
            "False easting"
        ],
        [
            "false-easting",
            "Easting at false origin"
        ],
        [
            "false_northing",
            "False_Northing"
        ],
        [
            "false_northing",
            "False northing"
        ],
        [
            "false_northing",
            "Northing at false origin"
        ],
        [
            "central_meridian",
            "Central_Meridian"
        ],
        [
            "central_meridian",
            "Longitude of natural origin"
        ],
        [
            "central_meridian",
            "Longitude of false origin"
        ],
        [
            "latitude_of_origin",
            "Latitude_Of_Origin"
        ],
        [
            "latitude_of_origin",
            "Central_Parallel"
        ],
        [
            "latitude_of_origin",
            "Latitude of natural origin"
        ],
        [
            "latitude_of_origin",
            "Latitude of false origin"
        ],
        [
            "scale_factor",
            "Scale_Factor"
        ],
        [
            "k0",
            "scale_factor"
        ],
        [
            "latitude_of_center",
            "Latitude_Of_Center"
        ],
        [
            "latitude_of_center",
            "Latitude_of_center"
        ],
        [
            "lat0",
            "latitude_of_center",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "longitude_of_center",
            "Longitude_Of_Center"
        ],
        [
            "longitude_of_center",
            "Longitude_of_center"
        ],
        [
            "longc",
            "longitude_of_center",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "x0",
            "false_easting",
            toMeter
        ],
        [
            "y0",
            "false_northing",
            toMeter
        ],
        [
            "long0",
            "central_meridian",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "lat0",
            "latitude_of_origin",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "lat0",
            "standard_parallel_1",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "lat1",
            "standard_parallel_1",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "lat2",
            "standard_parallel_2",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "azimuth",
            "Azimuth"
        ],
        [
            "alpha",
            "azimuth",
            $ed36a1e8f69fe35e$var$d2r
        ],
        [
            "srsCode",
            "name"
        ]
    ];
    list.forEach(renamer);
    if (!wkt.long0 && wkt.longc && (wkt.projName === "Albers_Conic_Equal_Area" || wkt.projName === "Lambert_Azimuthal_Equal_Area")) wkt.long0 = wkt.longc;
    if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === "Stereographic_South_Pole" || wkt.projName === "Polar Stereographic (variant B)")) {
        wkt.lat0 = $ed36a1e8f69fe35e$var$d2r(wkt.lat1 > 0 ? 90 : -90);
        wkt.lat_ts = wkt.lat1;
    } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === "Polar_Stereographic") {
        wkt.lat_ts = wkt.lat0;
        wkt.lat0 = $ed36a1e8f69fe35e$var$d2r(wkt.lat0 > 0 ? 90 : -90);
    }
}
function $ed36a1e8f69fe35e$export$2e2bcd8739ae039(wkt) {
    var lisp = (0, $81c0a6e96962d9cd$export$2e2bcd8739ae039)(wkt);
    var type = lisp.shift();
    var name = lisp.shift();
    lisp.unshift([
        "name",
        name
    ]);
    lisp.unshift([
        "type",
        type
    ]);
    var obj = {};
    (0, $9a69c5588e7a5f95$export$337bc7a3aef1f775)(lisp, obj);
    $ed36a1e8f69fe35e$var$cleanWKT(obj);
    return obj;
}


function $426e87aa95b0b211$var$defs(name) {
    /*global console*/ var that = this;
    if (arguments.length === 2) {
        var def = arguments[1];
        if (typeof def === "string") {
            if (def.charAt(0) === "+") $426e87aa95b0b211$var$defs[name] = (0, $e8b7e57bb6c0f285$export$2e2bcd8739ae039)(arguments[1]);
            else $426e87aa95b0b211$var$defs[name] = (0, $ed36a1e8f69fe35e$export$2e2bcd8739ae039)(arguments[1]);
        } else $426e87aa95b0b211$var$defs[name] = def;
    } else if (arguments.length === 1) {
        if (Array.isArray(name)) return name.map(function(v) {
            if (Array.isArray(v)) $426e87aa95b0b211$var$defs.apply(that, v);
            else $426e87aa95b0b211$var$defs(v);
        });
        else if (typeof name === "string") {
            if (name in $426e87aa95b0b211$var$defs) return $426e87aa95b0b211$var$defs[name];
        } else if ("EPSG" in name) $426e87aa95b0b211$var$defs["EPSG:" + name.EPSG] = name;
        else if ("ESRI" in name) $426e87aa95b0b211$var$defs["ESRI:" + name.ESRI] = name;
        else if ("IAU2000" in name) $426e87aa95b0b211$var$defs["IAU2000:" + name.IAU2000] = name;
        else console.log(name);
        return;
    }
}
(0, $960f305f3c6a1403$export$2e2bcd8739ae039)($426e87aa95b0b211$var$defs);
var $426e87aa95b0b211$export$2e2bcd8739ae039 = $426e87aa95b0b211$var$defs;





function $ceec90104c01066b$var$testObj(code) {
    return typeof code === "string";
}
function $ceec90104c01066b$var$testDef(code) {
    return code in (0, $426e87aa95b0b211$export$2e2bcd8739ae039);
}
var $ceec90104c01066b$var$codeWords = [
    "PROJECTEDCRS",
    "PROJCRS",
    "GEOGCS",
    "GEOCCS",
    "PROJCS",
    "LOCAL_CS",
    "GEODCRS",
    "GEODETICCRS",
    "GEODETICDATUM",
    "ENGCRS",
    "ENGINEERINGCRS"
];
function $ceec90104c01066b$var$testWKT(code) {
    return $ceec90104c01066b$var$codeWords.some(function(word) {
        return code.indexOf(word) > -1;
    });
}
var $ceec90104c01066b$var$codes = [
    "3857",
    "900913",
    "3785",
    "102113"
];
function $ceec90104c01066b$var$checkMercator(item) {
    var auth = (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)(item, "authority");
    if (!auth) return;
    var code = (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)(auth, "epsg");
    return code && $ceec90104c01066b$var$codes.indexOf(code) > -1;
}
function $ceec90104c01066b$var$checkProjStr(item) {
    var ext = (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)(item, "extension");
    if (!ext) return;
    return (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)(ext, "proj4");
}
function $ceec90104c01066b$var$testProj(code) {
    return code[0] === "+";
}
function $ceec90104c01066b$var$parse(code) {
    if ($ceec90104c01066b$var$testObj(code)) {
        //check to see if this is a WKT string
        if ($ceec90104c01066b$var$testDef(code)) return (0, $426e87aa95b0b211$export$2e2bcd8739ae039)[code];
        if ($ceec90104c01066b$var$testWKT(code)) {
            var out = (0, $ed36a1e8f69fe35e$export$2e2bcd8739ae039)(code);
            // test of spetial case, due to this being a very common and often malformed
            if ($ceec90104c01066b$var$checkMercator(out)) return (0, $426e87aa95b0b211$export$2e2bcd8739ae039)["EPSG:3857"];
            var maybeProjStr = $ceec90104c01066b$var$checkProjStr(out);
            if (maybeProjStr) return (0, $e8b7e57bb6c0f285$export$2e2bcd8739ae039)(maybeProjStr);
            return out;
        }
        if ($ceec90104c01066b$var$testProj(code)) return (0, $e8b7e57bb6c0f285$export$2e2bcd8739ae039)(code);
    } else return code;
}
var $ceec90104c01066b$export$2e2bcd8739ae039 = $ceec90104c01066b$var$parse;


function $cb046200faa8ce19$export$2e2bcd8739ae039(destination, source) {
    destination = destination || {};
    var value, property;
    if (!source) return destination;
    for(property in source){
        value = source[property];
        if (value !== undefined) destination[property] = value;
    }
    return destination;
}



var $4MKOs = parcelRequire("4MKOs");

var $dbd4D = parcelRequire("dbd4D");

var $biomK = parcelRequire("biomK");

var $i2VbV = parcelRequire("i2VbV");

var $7B7Eg = parcelRequire("7B7Eg");
function $f967e8c85c8c425b$export$2cd8252107eb640b() {
    var con = this.b / this.a;
    this.es = 1 - con * con;
    if (!("x0" in this)) this.x0 = 0;
    if (!("y0" in this)) this.y0 = 0;
    this.e = Math.sqrt(this.es);
    if (this.lat_ts) {
        if (this.sphere) this.k0 = Math.cos(this.lat_ts);
        else this.k0 = (0, $4MKOs.default)(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
    } else if (!this.k0) {
        if (this.k) this.k0 = this.k;
        else this.k0 = 1;
    }
}
function $f967e8c85c8c425b$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    // convert to radians
    if (lat * (0, $7B7Eg.R2D) > 90 && lat * (0, $7B7Eg.R2D) < -90 && lon * (0, $7B7Eg.R2D) > 180 && lon * (0, $7B7Eg.R2D) < -180) return null;
    var x, y;
    if (Math.abs(Math.abs(lat) - (0, $7B7Eg.HALF_PI)) <= (0, $7B7Eg.EPSLN)) return null;
    else {
        if (this.sphere) {
            x = this.x0 + this.a * this.k0 * (0, $dbd4D.default)(lon - this.long0);
            y = this.y0 + this.a * this.k0 * Math.log(Math.tan((0, $7B7Eg.FORTPI) + 0.5 * lat));
        } else {
            var sinphi = Math.sin(lat);
            var ts = (0, $biomK.default)(this.e, lat, sinphi);
            x = this.x0 + this.a * this.k0 * (0, $dbd4D.default)(lon - this.long0);
            y = this.y0 - this.a * this.k0 * Math.log(ts);
        }
        p.x = x;
        p.y = y;
        return p;
    }
}
function $f967e8c85c8c425b$export$70ae2c07e401031b(p) {
    var x = p.x - this.x0;
    var y = p.y - this.y0;
    var lon, lat;
    if (this.sphere) lat = (0, $7B7Eg.HALF_PI) - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
    else {
        var ts = Math.exp(-y / (this.a * this.k0));
        lat = (0, $i2VbV.default)(this.e, ts);
        if (lat === -9999) return null;
    }
    lon = (0, $dbd4D.default)(this.long0 + x / (this.a * this.k0));
    p.x = lon;
    p.y = lat;
    return p;
}
var $f967e8c85c8c425b$export$e4b2ac9215619f8d = [
    "Mercator",
    "Popular Visualisation Pseudo Mercator",
    "Mercator_1SP",
    "Mercator_Auxiliary_Sphere",
    "merc"
];
var $f967e8c85c8c425b$export$2e2bcd8739ae039 = {
    init: $f967e8c85c8c425b$export$2cd8252107eb640b,
    forward: $f967e8c85c8c425b$export$174bb771924e7eb1,
    inverse: $f967e8c85c8c425b$export$70ae2c07e401031b,
    names: $f967e8c85c8c425b$export$e4b2ac9215619f8d
};


function $fa7a8d9fafd312a9$export$2cd8252107eb640b() {
//no-op for longlat
}
function $fa7a8d9fafd312a9$export$174bb771924e7eb1(pt) {
    return pt;
}
var $fa7a8d9fafd312a9$export$e4b2ac9215619f8d = [
    "longlat",
    "identity"
];
var $fa7a8d9fafd312a9$export$2e2bcd8739ae039 = {
    init: $fa7a8d9fafd312a9$export$2cd8252107eb640b,
    forward: $fa7a8d9fafd312a9$export$174bb771924e7eb1,
    inverse: $fa7a8d9fafd312a9$export$174bb771924e7eb1,
    names: $fa7a8d9fafd312a9$export$e4b2ac9215619f8d
};


var $1a58b891b1f8f5fa$var$projs = [
    (0, $f967e8c85c8c425b$export$2e2bcd8739ae039),
    (0, $fa7a8d9fafd312a9$export$2e2bcd8739ae039)
];
var $1a58b891b1f8f5fa$var$names = {};
var $1a58b891b1f8f5fa$var$projStore = [];
function $1a58b891b1f8f5fa$export$e16d8520af44a096(proj, i) {
    var len = $1a58b891b1f8f5fa$var$projStore.length;
    if (!proj.names) {
        console.log(i);
        return true;
    }
    $1a58b891b1f8f5fa$var$projStore[len] = proj;
    proj.names.forEach(function(n) {
        $1a58b891b1f8f5fa$var$names[n.toLowerCase()] = len;
    });
    return this;
}
function $1a58b891b1f8f5fa$export$3988ae62b71be9a3(name) {
    if (!name) return false;
    var n = name.toLowerCase();
    if (typeof $1a58b891b1f8f5fa$var$names[n] !== "undefined" && $1a58b891b1f8f5fa$var$projStore[$1a58b891b1f8f5fa$var$names[n]]) return $1a58b891b1f8f5fa$var$projStore[$1a58b891b1f8f5fa$var$names[n]];
}
function $1a58b891b1f8f5fa$export$b3571188c770cc5a() {
    $1a58b891b1f8f5fa$var$projs.forEach($1a58b891b1f8f5fa$export$e16d8520af44a096);
}
var $1a58b891b1f8f5fa$export$2e2bcd8739ae039 = {
    start: $1a58b891b1f8f5fa$export$b3571188c770cc5a,
    add: $1a58b891b1f8f5fa$export$e16d8520af44a096,
    get: $1a58b891b1f8f5fa$export$3988ae62b71be9a3
};



var $7B7Eg = parcelRequire("7B7Eg");
var $01faeb9b9e548e50$export$2e2bcd8739ae039 = {};
$01faeb9b9e548e50$export$2e2bcd8739ae039.MERIT = {
    a: 6378137.0,
    rf: 298.257,
    ellipseName: "MERIT 1983"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.SGS85 = {
    a: 6378136.0,
    rf: 298.257,
    ellipseName: "Soviet Geodetic System 85"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.GRS80 = {
    a: 6378137.0,
    rf: 298.257222101,
    ellipseName: "GRS 1980(IUGG, 1980)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.IAU76 = {
    a: 6378140.0,
    rf: 298.257,
    ellipseName: "IAU 1976"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.airy = {
    a: 6377563.396,
    b: 6356256.910,
    ellipseName: "Airy 1830"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.APL4 = {
    a: 6378137,
    rf: 298.25,
    ellipseName: "Appl. Physics. 1965"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.NWL9D = {
    a: 6378145.0,
    rf: 298.25,
    ellipseName: "Naval Weapons Lab., 1965"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.mod_airy = {
    a: 6377340.189,
    b: 6356034.446,
    ellipseName: "Modified Airy"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.andrae = {
    a: 6377104.43,
    rf: 300.0,
    ellipseName: "Andrae 1876 (Den., Iclnd.)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.aust_SA = {
    a: 6378160.0,
    rf: 298.25,
    ellipseName: "Australian Natl & S. Amer. 1969"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.GRS67 = {
    a: 6378160.0,
    rf: 298.2471674270,
    ellipseName: "GRS 67(IUGG 1967)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.bessel = {
    a: 6377397.155,
    rf: 299.1528128,
    ellipseName: "Bessel 1841"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.bess_nam = {
    a: 6377483.865,
    rf: 299.1528128,
    ellipseName: "Bessel 1841 (Namibia)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.clrk66 = {
    a: 6378206.4,
    b: 6356583.8,
    ellipseName: "Clarke 1866"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.clrk80 = {
    a: 6378249.145,
    rf: 293.4663,
    ellipseName: "Clarke 1880 mod."
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.clrk80ign = {
    a: 6378249.2,
    b: 6356515,
    rf: 293.4660213,
    ellipseName: "Clarke 1880 (IGN)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.clrk58 = {
    a: 6378293.645208759,
    rf: 294.2606763692654,
    ellipseName: "Clarke 1858"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.CPM = {
    a: 6375738.7,
    rf: 334.29,
    ellipseName: "Comm. des Poids et Mesures 1799"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.delmbr = {
    a: 6376428.0,
    rf: 311.5,
    ellipseName: "Delambre 1810 (Belgium)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.engelis = {
    a: 6378136.05,
    rf: 298.2566,
    ellipseName: "Engelis 1985"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.evrst30 = {
    a: 6377276.345,
    rf: 300.8017,
    ellipseName: "Everest 1830"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.evrst48 = {
    a: 6377304.063,
    rf: 300.8017,
    ellipseName: "Everest 1948"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.evrst56 = {
    a: 6377301.243,
    rf: 300.8017,
    ellipseName: "Everest 1956"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.evrst69 = {
    a: 6377295.664,
    rf: 300.8017,
    ellipseName: "Everest 1969"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.evrstSS = {
    a: 6377298.556,
    rf: 300.8017,
    ellipseName: "Everest (Sabah & Sarawak)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.fschr60 = {
    a: 6378166.0,
    rf: 298.3,
    ellipseName: "Fischer (Mercury Datum) 1960"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.fschr60m = {
    a: 6378155.0,
    rf: 298.3,
    ellipseName: "Fischer 1960"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.fschr68 = {
    a: 6378150.0,
    rf: 298.3,
    ellipseName: "Fischer 1968"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.helmert = {
    a: 6378200.0,
    rf: 298.3,
    ellipseName: "Helmert 1906"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.hough = {
    a: 6378270.0,
    rf: 297.0,
    ellipseName: "Hough"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.intl = {
    a: 6378388.0,
    rf: 297.0,
    ellipseName: "International 1909 (Hayford)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.kaula = {
    a: 6378163.0,
    rf: 298.24,
    ellipseName: "Kaula 1961"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.lerch = {
    a: 6378139.0,
    rf: 298.257,
    ellipseName: "Lerch 1979"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.mprts = {
    a: 6397300.0,
    rf: 191.0,
    ellipseName: "Maupertius 1738"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.new_intl = {
    a: 6378157.5,
    b: 6356772.2,
    ellipseName: "New International 1967"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.plessis = {
    a: 6376523.0,
    rf: 6355863.0,
    ellipseName: "Plessis 1817 (France)"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.krass = {
    a: 6378245.0,
    rf: 298.3,
    ellipseName: "Krassovsky, 1942"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.SEasia = {
    a: 6378155.0,
    b: 6356773.3205,
    ellipseName: "Southeast Asia"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.walbeck = {
    a: 6376896.0,
    b: 6355834.8467,
    ellipseName: "Walbeck"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.WGS60 = {
    a: 6378165.0,
    rf: 298.3,
    ellipseName: "WGS 60"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.WGS66 = {
    a: 6378145.0,
    rf: 298.25,
    ellipseName: "WGS 66"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.WGS7 = {
    a: 6378135.0,
    rf: 298.26,
    ellipseName: "WGS 72"
};
var $01faeb9b9e548e50$export$a1db874f6c0f1ba1 = $01faeb9b9e548e50$export$2e2bcd8739ae039.WGS84 = {
    a: 6378137.0,
    rf: 298.257223563,
    ellipseName: "WGS 84"
};
$01faeb9b9e548e50$export$2e2bcd8739ae039.sphere = {
    a: 6370997.0,
    b: 6370997.0,
    ellipseName: "Normal Sphere (r=6370997)"
};



function $887a004fd69f983c$export$e3d7bf2ed2a7479f(a, b, rf, R_A) {
    var a2 = a * a; // used in geocentric
    var b2 = b * b; // used in geocentric
    var es = (a2 - b2) / a2; // e ^ 2
    var e = 0;
    if (R_A) {
        a *= 1 - es * ((0, $7B7Eg.SIXTH) + es * ((0, $7B7Eg.RA4) + es * (0, $7B7Eg.RA6)));
        a2 = a * a;
        es = 0;
    } else e = Math.sqrt(es); // eccentricity
    var ep2 = (a2 - b2) / b2; // used in geocentric
    return {
        es: es,
        e: e,
        ep2: ep2
    };
}
function $887a004fd69f983c$export$b2690196de52b050(a, b, rf, ellps, sphere) {
    if (!a) {
        var ellipse = (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)((0, $01faeb9b9e548e50$export$2e2bcd8739ae039), ellps);
        if (!ellipse) ellipse = (0, $01faeb9b9e548e50$export$a1db874f6c0f1ba1);
        a = ellipse.a;
        b = ellipse.b;
        rf = ellipse.rf;
    }
    if (rf && !b) b = (1.0 - 1.0 / rf) * a;
    if (rf === 0 || Math.abs(a - b) < (0, $7B7Eg.EPSLN)) {
        sphere = true;
        b = a;
    }
    return {
        a: a,
        b: b,
        rf: rf,
        sphere: sphere
    };
}


var $691fb6ad5e69deed$export$2e2bcd8739ae039 = {};
$691fb6ad5e69deed$export$2e2bcd8739ae039.wgs84 = {
    towgs84: "0,0,0",
    ellipse: "WGS84",
    datumName: "WGS84"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.ch1903 = {
    towgs84: "674.374,15.056,405.346",
    ellipse: "bessel",
    datumName: "swiss"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.ggrs87 = {
    towgs84: "-199.87,74.79,246.62",
    ellipse: "GRS80",
    datumName: "Greek_Geodetic_Reference_System_1987"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.nad83 = {
    towgs84: "0,0,0",
    ellipse: "GRS80",
    datumName: "North_American_Datum_1983"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.nad27 = {
    nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
    ellipse: "clrk66",
    datumName: "North_American_Datum_1927"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.potsdam = {
    towgs84: "598.1,73.7,418.2,0.202,0.045,-2.455,6.7",
    ellipse: "bessel",
    datumName: "Potsdam Rauenberg 1950 DHDN"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.carthage = {
    towgs84: "-263.0,6.0,431.0",
    ellipse: "clark80",
    datumName: "Carthage 1934 Tunisia"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.hermannskogel = {
    towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
    ellipse: "bessel",
    datumName: "Hermannskogel"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.militargeographische_institut = {
    towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
    ellipse: "bessel",
    datumName: "Militar-Geographische Institut"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.osni52 = {
    towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
    ellipse: "airy",
    datumName: "Irish National"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.ire65 = {
    towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
    ellipse: "mod_airy",
    datumName: "Ireland 1965"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.rassadiran = {
    towgs84: "-133.63,-157.5,-158.62",
    ellipse: "intl",
    datumName: "Rassadiran"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.nzgd49 = {
    towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
    ellipse: "intl",
    datumName: "New Zealand Geodetic Datum 1949"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.osgb36 = {
    towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
    ellipse: "airy",
    datumName: "Airy 1830"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.s_jtsk = {
    towgs84: "589,76,480",
    ellipse: "bessel",
    datumName: "S-JTSK (Ferro)"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.beduaram = {
    towgs84: "-106,-87,188",
    ellipse: "clrk80",
    datumName: "Beduaram"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.gunung_segara = {
    towgs84: "-403,684,41",
    ellipse: "bessel",
    datumName: "Gunung Segara Jakarta"
};
$691fb6ad5e69deed$export$2e2bcd8739ae039.rnb72 = {
    towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
    ellipse: "intl",
    datumName: "Reseau National Belge 1972"
};



var $7B7Eg = parcelRequire("7B7Eg");
function $a8dbaa2f69d6c335$var$datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {
    var out = {};
    if (datumCode === undefined || datumCode === "none") out.datum_type = (0, $7B7Eg.PJD_NODATUM);
    else out.datum_type = (0, $7B7Eg.PJD_WGS84);
    if (datum_params) {
        out.datum_params = datum_params.map(parseFloat);
        if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) out.datum_type = (0, $7B7Eg.PJD_3PARAM);
        if (out.datum_params.length > 3) {
            if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
                out.datum_type = (0, $7B7Eg.PJD_7PARAM);
                out.datum_params[3] *= (0, $7B7Eg.SEC_TO_RAD);
                out.datum_params[4] *= (0, $7B7Eg.SEC_TO_RAD);
                out.datum_params[5] *= (0, $7B7Eg.SEC_TO_RAD);
                out.datum_params[6] = out.datum_params[6] / 1000000.0 + 1.0;
            }
        }
    }
    if (nadgrids) {
        out.datum_type = (0, $7B7Eg.PJD_GRIDSHIFT);
        out.grids = nadgrids;
    }
    out.a = a; //datum object also uses these values
    out.b = b;
    out.es = es;
    out.ep2 = ep2;
    return out;
}
var $a8dbaa2f69d6c335$export$2e2bcd8739ae039 = $a8dbaa2f69d6c335$var$datum;



/**
 * Resources for details of NTv2 file formats:
 * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf
 * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm
 */ var $11c5d1275fd03d1e$var$loadedNadgrids = {};
function $11c5d1275fd03d1e$export$2e2bcd8739ae039(key, data) {
    var view = new DataView(data);
    var isLittleEndian = $11c5d1275fd03d1e$var$detectLittleEndian(view);
    var header = $11c5d1275fd03d1e$var$readHeader(view, isLittleEndian);
    var subgrids = $11c5d1275fd03d1e$var$readSubgrids(view, header, isLittleEndian);
    var nadgrid = {
        header: header,
        subgrids: subgrids
    };
    $11c5d1275fd03d1e$var$loadedNadgrids[key] = nadgrid;
    return nadgrid;
}
function $11c5d1275fd03d1e$export$31c4d9288d81329a(nadgrids) {
    // Format details: http://proj.maptools.org/gen_parms.html
    if (nadgrids === undefined) return null;
    var grids = nadgrids.split(",");
    return grids.map($11c5d1275fd03d1e$var$parseNadgridString);
}
function $11c5d1275fd03d1e$var$parseNadgridString(value) {
    if (value.length === 0) return null;
    var optional = value[0] === "@";
    if (optional) value = value.slice(1);
    if (value === "null") return {
        name: "null",
        mandatory: !optional,
        grid: null,
        isNull: true
    };
    return {
        name: value,
        mandatory: !optional,
        grid: $11c5d1275fd03d1e$var$loadedNadgrids[value] || null,
        isNull: false
    };
}
function $11c5d1275fd03d1e$var$secondsToRadians(seconds) {
    return seconds / 3600 * Math.PI / 180;
}
function $11c5d1275fd03d1e$var$detectLittleEndian(view) {
    var nFields = view.getInt32(8, false);
    if (nFields === 11) return false;
    nFields = view.getInt32(8, true);
    if (nFields !== 11) console.warn("Failed to detect nadgrid endian-ness, defaulting to little-endian");
    return true;
}
function $11c5d1275fd03d1e$var$readHeader(view, isLittleEndian) {
    return {
        nFields: view.getInt32(8, isLittleEndian),
        nSubgridFields: view.getInt32(24, isLittleEndian),
        nSubgrids: view.getInt32(40, isLittleEndian),
        shiftType: $11c5d1275fd03d1e$var$decodeString(view, 56, 64).trim(),
        fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),
        fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),
        toSemiMajorAxis: view.getFloat64(152, isLittleEndian),
        toSemiMinorAxis: view.getFloat64(168, isLittleEndian)
    };
}
function $11c5d1275fd03d1e$var$decodeString(view, start, end) {
    return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));
}
function $11c5d1275fd03d1e$var$readSubgrids(view, header, isLittleEndian) {
    var gridOffset = 176;
    var grids = [];
    for(var i = 0; i < header.nSubgrids; i++){
        var subHeader = $11c5d1275fd03d1e$var$readGridHeader(view, gridOffset, isLittleEndian);
        var nodes = $11c5d1275fd03d1e$var$readGridNodes(view, gridOffset, subHeader, isLittleEndian);
        var lngColumnCount = Math.round(1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);
        var latColumnCount = Math.round(1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);
        // Proj4 operates on radians whereas the coordinates are in seconds in the grid
        grids.push({
            ll: [
                $11c5d1275fd03d1e$var$secondsToRadians(subHeader.lowerLongitude),
                $11c5d1275fd03d1e$var$secondsToRadians(subHeader.lowerLatitude)
            ],
            del: [
                $11c5d1275fd03d1e$var$secondsToRadians(subHeader.longitudeInterval),
                $11c5d1275fd03d1e$var$secondsToRadians(subHeader.latitudeInterval)
            ],
            lim: [
                lngColumnCount,
                latColumnCount
            ],
            count: subHeader.gridNodeCount,
            cvs: $11c5d1275fd03d1e$var$mapNodes(nodes)
        });
        gridOffset += 176 + subHeader.gridNodeCount * 16;
    }
    return grids;
}
function $11c5d1275fd03d1e$var$mapNodes(nodes) {
    return nodes.map(function(r) {
        return [
            $11c5d1275fd03d1e$var$secondsToRadians(r.longitudeShift),
            $11c5d1275fd03d1e$var$secondsToRadians(r.latitudeShift)
        ];
    });
}
function $11c5d1275fd03d1e$var$readGridHeader(view, offset, isLittleEndian) {
    return {
        name: $11c5d1275fd03d1e$var$decodeString(view, offset + 8, offset + 16).trim(),
        parent: $11c5d1275fd03d1e$var$decodeString(view, offset + 24, offset + 24 + 8).trim(),
        lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),
        upperLatitude: view.getFloat64(offset + 88, isLittleEndian),
        lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),
        upperLongitude: view.getFloat64(offset + 120, isLittleEndian),
        latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),
        longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),
        gridNodeCount: view.getInt32(offset + 168, isLittleEndian)
    };
}
function $11c5d1275fd03d1e$var$readGridNodes(view, offset, gridHeader, isLittleEndian) {
    var nodesOffset = offset + 176;
    var gridRecordLength = 16;
    var gridShiftRecords = [];
    for(var i = 0; i < gridHeader.gridNodeCount; i++){
        var record = {
            latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),
            longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),
            latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),
            longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian)
        };
        gridShiftRecords.push(record);
    }
    return gridShiftRecords;
}


function $673c8104677fb23d$var$Projection(srsCode, callback) {
    if (!(this instanceof $673c8104677fb23d$var$Projection)) return new $673c8104677fb23d$var$Projection(srsCode);
    callback = callback || function(error) {
        if (error) throw error;
    };
    var json = (0, $ceec90104c01066b$export$2e2bcd8739ae039)(srsCode);
    if (typeof json !== "object") {
        callback("Could not parse to valid json: " + srsCode);
        return;
    }
    var ourProj = $673c8104677fb23d$var$Projection.projections.get(json.projName);
    if (!ourProj) {
        callback("Could not get projection name from: " + srsCode);
        return;
    }
    if (json.datumCode && json.datumCode !== "none") {
        var datumDef = (0, $906e57b8f0ea965b$export$2e2bcd8739ae039)((0, $691fb6ad5e69deed$export$2e2bcd8739ae039), json.datumCode);
        if (datumDef) {
            json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(",") : null);
            json.ellps = datumDef.ellipse;
            json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
        }
    }
    json.k0 = json.k0 || 1.0;
    json.axis = json.axis || "enu";
    json.ellps = json.ellps || "wgs84";
    json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this
    var sphere_ = (0, $887a004fd69f983c$export$b2690196de52b050)(json.a, json.b, json.rf, json.ellps, json.sphere);
    var ecc = (0, $887a004fd69f983c$export$e3d7bf2ed2a7479f)(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
    var nadgrids = (0, $11c5d1275fd03d1e$export$31c4d9288d81329a)(json.nadgrids);
    var datumObj = json.datum || (0, $a8dbaa2f69d6c335$export$2e2bcd8739ae039)(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2, nadgrids);
    (0, $cb046200faa8ce19$export$2e2bcd8739ae039)(this, json); // transfer everything over from the projection because we don't know what we'll need
    (0, $cb046200faa8ce19$export$2e2bcd8739ae039)(this, ourProj); // transfer all the methods from the projection
    // copy the 4 things over we calculated in deriveConstants.sphere
    this.a = sphere_.a;
    this.b = sphere_.b;
    this.rf = sphere_.rf;
    this.sphere = sphere_.sphere;
    // copy the 3 things we calculated in deriveConstants.eccentricity
    this.es = ecc.es;
    this.e = ecc.e;
    this.ep2 = ecc.ep2;
    // add in the datum object
    this.datum = datumObj;
    // init the projection
    this.init();
    // legecy callback from back in the day when it went to spatialreference.org
    callback(null, this);
}
$673c8104677fb23d$var$Projection.projections = (0, $1a58b891b1f8f5fa$export$2e2bcd8739ae039);
$673c8104677fb23d$var$Projection.projections.start();
var $673c8104677fb23d$export$2e2bcd8739ae039 = $673c8104677fb23d$var$Projection;



var $7B7Eg = parcelRequire("7B7Eg");

var $7B7Eg = parcelRequire("7B7Eg");

var $7B7Eg = parcelRequire("7B7Eg");
"use strict";
function $9492081abc6963cf$export$68c8d8590fbb24e4(source, dest) {
    if (source.datum_type !== dest.datum_type) return false; // false, datums are not equal
    else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) // the tolerance for es is to ensure that GRS80 and WGS84
    // are considered identical
    return false;
    else if (source.datum_type === (0, $7B7Eg.PJD_3PARAM)) return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2];
    else if (source.datum_type === (0, $7B7Eg.PJD_7PARAM)) return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6];
    else return true; // datums are equal
} // cs_compare_datums()
function $9492081abc6963cf$export$4a4ae2976f9a808a(p, es, a) {
    var Longitude = p.x;
    var Latitude = p.y;
    var Height = p.z ? p.z : 0; //Z value not always supplied
    var Rn; /*  Earth radius at location  */ 
    var Sin_Lat; /*  Math.sin(Latitude)  */ 
    var Sin2_Lat; /*  Square of Math.sin(Latitude)  */ 
    var Cos_Lat; /*  Math.cos(Latitude)  */ 
    /*
   ** Don't blow up if Latitude is just a little out of the value
   ** range as it may just be a rounding issue.  Also removed longitude
   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.
   */ if (Latitude < -(0, $7B7Eg.HALF_PI) && Latitude > -1.001 * (0, $7B7Eg.HALF_PI)) Latitude = -(0, $7B7Eg.HALF_PI);
    else if (Latitude > (0, $7B7Eg.HALF_PI) && Latitude < 1.001 * (0, $7B7Eg.HALF_PI)) Latitude = (0, $7B7Eg.HALF_PI);
    else if (Latitude < -(0, $7B7Eg.HALF_PI)) /* Latitude out of range */ //..reportError('geocent:lat out of range:' + Latitude);
    return {
        x: -Infinity,
        y: -Infinity,
        z: p.z
    };
    else if (Latitude > (0, $7B7Eg.HALF_PI)) /* Latitude out of range */ return {
        x: Infinity,
        y: Infinity,
        z: p.z
    };
    if (Longitude > Math.PI) Longitude -= 2 * Math.PI;
    Sin_Lat = Math.sin(Latitude);
    Cos_Lat = Math.cos(Latitude);
    Sin2_Lat = Sin_Lat * Sin_Lat;
    Rn = a / Math.sqrt(1.0e0 - es * Sin2_Lat);
    return {
        x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
        y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
        z: (Rn * (1 - es) + Height) * Sin_Lat
    };
} // cs_geodetic_to_geocentric()
function $9492081abc6963cf$export$26210192c8922750(p, es, a, b) {
    /* local defintions and variables */ /* end-criterium of loop, accuracy of sin(Latitude) */ var genau = 1e-12;
    var genau2 = genau * genau;
    var maxiter = 30;
    var P; /* distance between semi-minor axis and location */ 
    var RR; /* distance between center and location */ 
    var CT; /* sin of geocentric latitude */ 
    var ST; /* cos of geocentric latitude */ 
    var RX;
    var RK;
    var RN; /* Earth radius at location */ 
    var CPHI0; /* cos of start or old geodetic latitude in iterations */ 
    var SPHI0; /* sin of start or old geodetic latitude in iterations */ 
    var CPHI; /* cos of searched geodetic latitude */ 
    var SPHI; /* sin of searched geodetic latitude */ 
    var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */ 
    var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */ 
    var X = p.x;
    var Y = p.y;
    var Z = p.z ? p.z : 0.0; //Z value not always supplied
    var Longitude;
    var Latitude;
    var Height;
    P = Math.sqrt(X * X + Y * Y);
    RR = Math.sqrt(X * X + Y * Y + Z * Z);
    /*      special cases for latitude and longitude */ if (P / a < genau) {
        /*  special case, if P=0. (X=0., Y=0.) */ Longitude = 0.0;
        /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis
     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */ if (RR / a < genau) {
            Latitude = (0, $7B7Eg.HALF_PI);
            Height = -b;
            return {
                x: p.x,
                y: p.y,
                z: p.z
            };
        }
    } else /*  ellipsoidal (geodetic) longitude
     *  interval: -PI < Longitude <= +PI */ Longitude = Math.atan2(Y, X);
    /* --------------------------------------------------------------
   * Following iterative algorithm was developped by
   * "Institut for Erdmessung", University of Hannover, July 1988.
   * Internet: www.ife.uni-hannover.de
   * Iterative computation of CPHI,SPHI and Height.
   * Iteration of CPHI and SPHI to 10**-12 radian resp.
   * 2*10**-7 arcsec.
   * --------------------------------------------------------------
   */ CT = Z / RR;
    ST = P / RR;
    RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);
    CPHI0 = ST * (1.0 - es) * RX;
    SPHI0 = CT * RX;
    iter = 0;
    /* loop to find sin(Latitude) resp. Latitude
   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */ do {
        iter++;
        RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);
        /*  ellipsoidal (geodetic) height */ Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);
        RK = es * RN / (RN + Height);
        RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);
        CPHI = ST * (1.0 - RK) * RX;
        SPHI = CT * RX;
        SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
        CPHI0 = CPHI;
        SPHI0 = SPHI;
    }while (SDPHI * SDPHI > genau2 && iter < maxiter);
    /*      ellipsoidal (geodetic) latitude */ Latitude = Math.atan(SPHI / Math.abs(CPHI));
    return {
        x: Longitude,
        y: Latitude,
        z: Height
    };
} // cs_geocentric_to_geodetic()
function $9492081abc6963cf$export$d18952b9ecb47c8f(p, datum_type, datum_params) {
    if (datum_type === (0, $7B7Eg.PJD_3PARAM)) // if( x[io] === HUGE_VAL )
    //    continue;
    return {
        x: p.x + datum_params[0],
        y: p.y + datum_params[1],
        z: p.z + datum_params[2]
    };
    else if (datum_type === (0, $7B7Eg.PJD_7PARAM)) {
        var Dx_BF = datum_params[0];
        var Dy_BF = datum_params[1];
        var Dz_BF = datum_params[2];
        var Rx_BF = datum_params[3];
        var Ry_BF = datum_params[4];
        var Rz_BF = datum_params[5];
        var M_BF = datum_params[6];
        // if( x[io] === HUGE_VAL )
        //    continue;
        return {
            x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
            y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
            z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
        };
    }
} // cs_geocentric_to_wgs84
function $9492081abc6963cf$export$2b744ad521e7ac0b(p, datum_type, datum_params) {
    if (datum_type === (0, $7B7Eg.PJD_3PARAM)) //if( x[io] === HUGE_VAL )
    //    continue;
    return {
        x: p.x - datum_params[0],
        y: p.y - datum_params[1],
        z: p.z - datum_params[2]
    };
    else if (datum_type === (0, $7B7Eg.PJD_7PARAM)) {
        var Dx_BF = datum_params[0];
        var Dy_BF = datum_params[1];
        var Dz_BF = datum_params[2];
        var Rx_BF = datum_params[3];
        var Ry_BF = datum_params[4];
        var Rz_BF = datum_params[5];
        var M_BF = datum_params[6];
        var x_tmp = (p.x - Dx_BF) / M_BF;
        var y_tmp = (p.y - Dy_BF) / M_BF;
        var z_tmp = (p.z - Dz_BF) / M_BF;
        //if( x[io] === HUGE_VAL )
        //    continue;
        return {
            x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
            y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
            z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
        };
    } //cs_geocentric_from_wgs84()
}



var $dbd4D = parcelRequire("dbd4D");
function $5ffe676e8d600cda$var$checkParams(type) {
    return type === (0, $7B7Eg.PJD_3PARAM) || type === (0, $7B7Eg.PJD_7PARAM);
}
function $5ffe676e8d600cda$export$2e2bcd8739ae039(source, dest, point) {
    // Short cut if the datums are identical.
    if ((0, $9492081abc6963cf$export$68c8d8590fbb24e4)(source, dest)) return point; // in this case, zero is sucess,
    // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest
    if (source.datum_type === (0, $7B7Eg.PJD_NODATUM) || dest.datum_type === (0, $7B7Eg.PJD_NODATUM)) return point;
    // If this datum requires grid shifts, then apply it to geodetic coordinates.
    var source_a = source.a;
    var source_es = source.es;
    if (source.datum_type === (0, $7B7Eg.PJD_GRIDSHIFT)) {
        var gridShiftCode = $5ffe676e8d600cda$export$cfa06df23524576a(source, false, point);
        if (gridShiftCode !== 0) return undefined;
        source_a = (0, $7B7Eg.SRS_WGS84_SEMIMAJOR);
        source_es = (0, $7B7Eg.SRS_WGS84_ESQUARED);
    }
    var dest_a = dest.a;
    var dest_b = dest.b;
    var dest_es = dest.es;
    if (dest.datum_type === (0, $7B7Eg.PJD_GRIDSHIFT)) {
        dest_a = (0, $7B7Eg.SRS_WGS84_SEMIMAJOR);
        dest_b = (0, $7B7Eg.SRS_WGS84_SEMIMINOR);
        dest_es = (0, $7B7Eg.SRS_WGS84_ESQUARED);
    }
    // Do we need to go through geocentric coordinates?
    if (source_es === dest_es && source_a === dest_a && !$5ffe676e8d600cda$var$checkParams(source.datum_type) && !$5ffe676e8d600cda$var$checkParams(dest.datum_type)) return point;
    // Convert to geocentric coordinates.
    point = (0, $9492081abc6963cf$export$4a4ae2976f9a808a)(point, source_es, source_a);
    // Convert between datums
    if ($5ffe676e8d600cda$var$checkParams(source.datum_type)) point = (0, $9492081abc6963cf$export$d18952b9ecb47c8f)(point, source.datum_type, source.datum_params);
    if ($5ffe676e8d600cda$var$checkParams(dest.datum_type)) point = (0, $9492081abc6963cf$export$2b744ad521e7ac0b)(point, dest.datum_type, dest.datum_params);
    point = (0, $9492081abc6963cf$export$26210192c8922750)(point, dest_es, dest_a, dest_b);
    if (dest.datum_type === (0, $7B7Eg.PJD_GRIDSHIFT)) {
        var destGridShiftResult = $5ffe676e8d600cda$export$cfa06df23524576a(dest, true, point);
        if (destGridShiftResult !== 0) return undefined;
    }
    return point;
}
function $5ffe676e8d600cda$export$cfa06df23524576a(source, inverse, point) {
    if (source.grids === null || source.grids.length === 0) {
        console.log("Grid shift grids not found");
        return -1;
    }
    var input = {
        x: -point.x,
        y: point.y
    };
    var output = {
        x: Number.NaN,
        y: Number.NaN
    };
    var onlyMandatoryGrids = false;
    var attemptedGrids = [];
    outer: for(var i = 0; i < source.grids.length; i++){
        var grid = source.grids[i];
        attemptedGrids.push(grid.name);
        if (grid.isNull) {
            output = input;
            break;
        }
        onlyMandatoryGrids = grid.mandatory;
        if (grid.grid === null) {
            if (grid.mandatory) {
                console.log("Unable to find mandatory grid '" + grid.name + "'");
                return -1;
            }
            continue;
        }
        var subgrids = grid.grid.subgrids;
        for(var j = 0, jj = subgrids.length; j < jj; j++){
            var subgrid = subgrids[j];
            // skip tables that don't match our point at all
            var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;
            var minX = subgrid.ll[0] - epsilon;
            var minY = subgrid.ll[1] - epsilon;
            var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;
            var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;
            if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x) continue;
            output = $5ffe676e8d600cda$var$applySubgridShift(input, inverse, subgrid);
            if (!isNaN(output.x)) break outer;
        }
    }
    if (isNaN(output.x)) {
        console.log("Failed to find a grid shift table for location '" + -input.x * (0, $7B7Eg.R2D) + " " + input.y * (0, $7B7Eg.R2D) + " tried: '" + attemptedGrids + "'");
        return -1;
    }
    point.x = -output.x;
    point.y = output.y;
    return 0;
}
function $5ffe676e8d600cda$var$applySubgridShift(pin, inverse, ct) {
    var val = {
        x: Number.NaN,
        y: Number.NaN
    };
    if (isNaN(pin.x)) return val;
    var tb = {
        x: pin.x,
        y: pin.y
    };
    tb.x -= ct.ll[0];
    tb.y -= ct.ll[1];
    tb.x = (0, $dbd4D.default)(tb.x - Math.PI) + Math.PI;
    var t = $5ffe676e8d600cda$var$nadInterpolate(tb, ct);
    if (inverse) {
        if (isNaN(t.x)) return val;
        t.x = tb.x - t.x;
        t.y = tb.y - t.y;
        var i = 9, tol = 1e-12;
        var dif, del;
        do {
            del = $5ffe676e8d600cda$var$nadInterpolate(t, ct);
            if (isNaN(del.x)) {
                console.log("Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.");
                break;
            }
            dif = {
                x: tb.x - (del.x + t.x),
                y: tb.y - (del.y + t.y)
            };
            t.x += dif.x;
            t.y += dif.y;
        }while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);
        if (i < 0) {
            console.log("Inverse grid shift iterator failed to converge.");
            return val;
        }
        val.x = (0, $dbd4D.default)(t.x + ct.ll[0]);
        val.y = t.y + ct.ll[1];
    } else if (!isNaN(t.x)) {
        val.x = pin.x + t.x;
        val.y = pin.y + t.y;
    }
    return val;
}
function $5ffe676e8d600cda$var$nadInterpolate(pin, ct) {
    var t = {
        x: pin.x / ct.del[0],
        y: pin.y / ct.del[1]
    };
    var indx = {
        x: Math.floor(t.x),
        y: Math.floor(t.y)
    };
    var frct = {
        x: t.x - 1.0 * indx.x,
        y: t.y - 1.0 * indx.y
    };
    var val = {
        x: Number.NaN,
        y: Number.NaN
    };
    var inx;
    if (indx.x < 0 || indx.x >= ct.lim[0]) return val;
    if (indx.y < 0 || indx.y >= ct.lim[1]) return val;
    inx = indx.y * ct.lim[0] + indx.x;
    var f00 = {
        x: ct.cvs[inx][0],
        y: ct.cvs[inx][1]
    };
    inx++;
    var f10 = {
        x: ct.cvs[inx][0],
        y: ct.cvs[inx][1]
    };
    inx += ct.lim[0];
    var f11 = {
        x: ct.cvs[inx][0],
        y: ct.cvs[inx][1]
    };
    inx--;
    var f01 = {
        x: ct.cvs[inx][0],
        y: ct.cvs[inx][1]
    };
    var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y), m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;
    val.x = m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x;
    val.y = m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y;
    return val;
}


function $87e63c6b511b85b5$export$2e2bcd8739ae039(crs, denorm, point) {
    var xin = point.x, yin = point.y, zin = point.z || 0.0;
    var v, t, i;
    var out = {};
    for(i = 0; i < 3; i++){
        if (denorm && i === 2 && point.z === undefined) continue;
        if (i === 0) {
            v = xin;
            if ("ew".indexOf(crs.axis[i]) !== -1) t = "x";
            else t = "y";
        } else if (i === 1) {
            v = yin;
            if ("ns".indexOf(crs.axis[i]) !== -1) t = "y";
            else t = "x";
        } else {
            v = zin;
            t = "z";
        }
        switch(crs.axis[i]){
            case "e":
                out[t] = v;
                break;
            case "w":
                out[t] = -v;
                break;
            case "n":
                out[t] = v;
                break;
            case "s":
                out[t] = -v;
                break;
            case "u":
                if (point[t] !== undefined) out.z = v;
                break;
            case "d":
                if (point[t] !== undefined) out.z = -v;
                break;
            default:
                //console.log("ERROR: unknow axis ("+crs.axis[i]+") - check definition of "+crs.projName);
                return null;
        }
    }
    return out;
}



function $75c20f164bd887af$export$2e2bcd8739ae039(array) {
    var out = {
        x: array[0],
        y: array[1]
    };
    if (array.length > 2) out.z = array[2];
    if (array.length > 3) out.m = array[3];
    return out;
}


function $9ebb3c02db1122f3$export$2e2bcd8739ae039(point) {
    $9ebb3c02db1122f3$var$checkCoord(point.x);
    $9ebb3c02db1122f3$var$checkCoord(point.y);
}
function $9ebb3c02db1122f3$var$checkCoord(num) {
    if (typeof Number.isFinite === "function") {
        if (Number.isFinite(num)) return;
        throw new TypeError("coordinates must be finite numbers");
    }
    if (typeof num !== "number" || num !== num || !isFinite(num)) throw new TypeError("coordinates must be finite numbers");
}


function $b56b1bf61c7cfac7$var$checkNotWGS(source, dest) {
    return (source.datum.datum_type === (0, $7B7Eg.PJD_3PARAM) || source.datum.datum_type === (0, $7B7Eg.PJD_7PARAM) || source.datum.datum_type === (0, $7B7Eg.PJD_GRIDSHIFT)) && dest.datumCode !== "WGS84" || (dest.datum.datum_type === (0, $7B7Eg.PJD_3PARAM) || dest.datum.datum_type === (0, $7B7Eg.PJD_7PARAM) || dest.datum.datum_type === (0, $7B7Eg.PJD_GRIDSHIFT)) && source.datumCode !== "WGS84";
}
function $b56b1bf61c7cfac7$export$2e2bcd8739ae039(source, dest, point, enforceAxis) {
    var wgs84;
    if (Array.isArray(point)) point = (0, $75c20f164bd887af$export$2e2bcd8739ae039)(point);
    else // Clone the point object so inputs don't get modified
    point = {
        x: point.x,
        y: point.y,
        z: point.z,
        m: point.m
    };
    var hasZ = point.z !== undefined;
    (0, $9ebb3c02db1122f3$export$2e2bcd8739ae039)(point);
    // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84
    if (source.datum && dest.datum && $b56b1bf61c7cfac7$var$checkNotWGS(source, dest)) {
        wgs84 = new (0, $673c8104677fb23d$export$2e2bcd8739ae039)("WGS84");
        point = $b56b1bf61c7cfac7$export$2e2bcd8739ae039(source, wgs84, point, enforceAxis);
        source = wgs84;
    }
    // DGR, 2010/11/12
    if (enforceAxis && source.axis !== "enu") point = (0, $87e63c6b511b85b5$export$2e2bcd8739ae039)(source, false, point);
    // Transform source points to long/lat, if they aren't already.
    if (source.projName === "longlat") point = {
        x: point.x * (0, $7B7Eg.D2R),
        y: point.y * (0, $7B7Eg.D2R),
        z: point.z || 0
    };
    else {
        if (source.to_meter) point = {
            x: point.x * source.to_meter,
            y: point.y * source.to_meter,
            z: point.z || 0
        };
        point = source.inverse(point); // Convert Cartesian to longlat
        if (!point) return;
    }
    // Adjust for the prime meridian if necessary
    if (source.from_greenwich) point.x += source.from_greenwich;
    // Convert datums if needed, and if possible.
    point = (0, $5ffe676e8d600cda$export$2e2bcd8739ae039)(source.datum, dest.datum, point);
    if (!point) return;
    // Adjust for the prime meridian if necessary
    if (dest.from_greenwich) point = {
        x: point.x - dest.from_greenwich,
        y: point.y,
        z: point.z || 0
    };
    if (dest.projName === "longlat") // convert radians to decimal degrees
    point = {
        x: point.x * (0, $7B7Eg.R2D),
        y: point.y * (0, $7B7Eg.R2D),
        z: point.z || 0
    };
    else {
        point = dest.forward(point);
        if (dest.to_meter) point = {
            x: point.x / dest.to_meter,
            y: point.y / dest.to_meter,
            z: point.z || 0
        };
    }
    // DGR, 2010/11/12
    if (enforceAxis && dest.axis !== "enu") return (0, $87e63c6b511b85b5$export$2e2bcd8739ae039)(dest, true, point);
    if (point && !hasZ) delete point.z;
    return point;
}


var $afb9f31c9f432b0c$var$wgs84 = (0, $673c8104677fb23d$export$2e2bcd8739ae039)("WGS84");
function $afb9f31c9f432b0c$var$transformer(from, to, coords, enforceAxis) {
    var transformedArray, out, keys;
    if (Array.isArray(coords)) {
        transformedArray = (0, $b56b1bf61c7cfac7$export$2e2bcd8739ae039)(from, to, coords, enforceAxis) || {
            x: NaN,
            y: NaN
        };
        if (coords.length > 2) {
            if (typeof from.name !== "undefined" && from.name === "geocent" || typeof to.name !== "undefined" && to.name === "geocent") {
                if (typeof transformedArray.z === "number") return [
                    transformedArray.x,
                    transformedArray.y,
                    transformedArray.z
                ].concat(coords.slice(3));
                else return [
                    transformedArray.x,
                    transformedArray.y,
                    coords[2]
                ].concat(coords.slice(3));
            } else return [
                transformedArray.x,
                transformedArray.y
            ].concat(coords.slice(2));
        } else return [
            transformedArray.x,
            transformedArray.y
        ];
    } else {
        out = (0, $b56b1bf61c7cfac7$export$2e2bcd8739ae039)(from, to, coords, enforceAxis);
        keys = Object.keys(coords);
        if (keys.length === 2) return out;
        keys.forEach(function(key) {
            if (typeof from.name !== "undefined" && from.name === "geocent" || typeof to.name !== "undefined" && to.name === "geocent") {
                if (key === "x" || key === "y" || key === "z") return;
            } else {
                if (key === "x" || key === "y") return;
            }
            out[key] = coords[key];
        });
        return out;
    }
}
function $afb9f31c9f432b0c$var$checkProj(item) {
    if (item instanceof (0, $673c8104677fb23d$export$2e2bcd8739ae039)) return item;
    if (item.oProj) return item.oProj;
    return (0, $673c8104677fb23d$export$2e2bcd8739ae039)(item);
}
function $afb9f31c9f432b0c$var$proj4(fromProj, toProj, coord) {
    fromProj = $afb9f31c9f432b0c$var$checkProj(fromProj);
    var single = false;
    var obj;
    if (typeof toProj === "undefined") {
        toProj = fromProj;
        fromProj = $afb9f31c9f432b0c$var$wgs84;
        single = true;
    } else if (typeof toProj.x !== "undefined" || Array.isArray(toProj)) {
        coord = toProj;
        toProj = fromProj;
        fromProj = $afb9f31c9f432b0c$var$wgs84;
        single = true;
    }
    toProj = $afb9f31c9f432b0c$var$checkProj(toProj);
    if (coord) return $afb9f31c9f432b0c$var$transformer(fromProj, toProj, coord);
    else {
        obj = {
            forward: function(coords, enforceAxis) {
                return $afb9f31c9f432b0c$var$transformer(fromProj, toProj, coords, enforceAxis);
            },
            inverse: function(coords, enforceAxis) {
                return $afb9f31c9f432b0c$var$transformer(toProj, fromProj, coords, enforceAxis);
            }
        };
        if (single) obj.oProj = toProj;
        return obj;
    }
}
var $afb9f31c9f432b0c$export$2e2bcd8739ae039 = $afb9f31c9f432b0c$var$proj4;



/**
 * UTM zones are grouped, and assigned to one of a group of 6
 * sets.
 *
 * {int} @private
 */ var $7e782048f8c9ac26$var$NUM_100K_SETS = 6;
/**
 * The column letters (for easting) of the lower left value, per
 * set.
 *
 * {string} @private
 */ var $7e782048f8c9ac26$var$SET_ORIGIN_COLUMN_LETTERS = "AJSAJS";
/**
 * The row letters (for northing) of the lower left value, per
 * set.
 *
 * {string} @private
 */ var $7e782048f8c9ac26$var$SET_ORIGIN_ROW_LETTERS = "AFAFAF";
var $7e782048f8c9ac26$var$A = 65; // A
var $7e782048f8c9ac26$var$I = 73; // I
var $7e782048f8c9ac26$var$O = 79; // O
var $7e782048f8c9ac26$var$V = 86; // V
var $7e782048f8c9ac26$var$Z = 90; // Z
var $7e782048f8c9ac26$export$2e2bcd8739ae039 = {
    forward: $7e782048f8c9ac26$export$174bb771924e7eb1,
    inverse: $7e782048f8c9ac26$export$70ae2c07e401031b,
    toPoint: $7e782048f8c9ac26$export$b63cca88ddc558a9
};
function $7e782048f8c9ac26$export$174bb771924e7eb1(ll, accuracy) {
    accuracy = accuracy || 5; // default accuracy 1m
    return $7e782048f8c9ac26$var$encode($7e782048f8c9ac26$var$LLtoUTM({
        lat: ll[1],
        lon: ll[0]
    }), accuracy);
}
function $7e782048f8c9ac26$export$70ae2c07e401031b(mgrs) {
    var bbox = $7e782048f8c9ac26$var$UTMtoLL($7e782048f8c9ac26$var$decode(mgrs.toUpperCase()));
    if (bbox.lat && bbox.lon) return [
        bbox.lon,
        bbox.lat,
        bbox.lon,
        bbox.lat
    ];
    return [
        bbox.left,
        bbox.bottom,
        bbox.right,
        bbox.top
    ];
}
function $7e782048f8c9ac26$export$b63cca88ddc558a9(mgrs) {
    var bbox = $7e782048f8c9ac26$var$UTMtoLL($7e782048f8c9ac26$var$decode(mgrs.toUpperCase()));
    if (bbox.lat && bbox.lon) return [
        bbox.lon,
        bbox.lat
    ];
    return [
        (bbox.left + bbox.right) / 2,
        (bbox.top + bbox.bottom) / 2
    ];
}
/**
 * Conversion from degrees to radians.
 *
 * @private
 * @param {number} deg the angle in degrees.
 * @return {number} the angle in radians.
 */ function $7e782048f8c9ac26$var$degToRad(deg) {
    return deg * (Math.PI / 180.0);
}
/**
 * Conversion from radians to degrees.
 *
 * @private
 * @param {number} rad the angle in radians.
 * @return {number} the angle in degrees.
 */ function $7e782048f8c9ac26$var$radToDeg(rad) {
    return 180.0 * (rad / Math.PI);
}
/**
 * Converts a set of Longitude and Latitude co-ordinates to UTM
 * using the WGS84 ellipsoid.
 *
 * @private
 * @param {object} ll Object literal with lat and lon properties
 *     representing the WGS84 coordinate to be converted.
 * @return {object} Object literal containing the UTM value with easting,
 *     northing, zoneNumber and zoneLetter properties, and an optional
 *     accuracy property in digits. Returns null if the conversion failed.
 */ function $7e782048f8c9ac26$var$LLtoUTM(ll) {
    var Lat = ll.lat;
    var Long = ll.lon;
    var a = 6378137.0; //ellip.radius;
    var eccSquared = 0.00669438; //ellip.eccsq;
    var k0 = 0.9996;
    var LongOrigin;
    var eccPrimeSquared;
    var N, T, C, A, M;
    var LatRad = $7e782048f8c9ac26$var$degToRad(Lat);
    var LongRad = $7e782048f8c9ac26$var$degToRad(Long);
    var LongOriginRad;
    var ZoneNumber;
    // (int)
    ZoneNumber = Math.floor((Long + 180) / 6) + 1;
    //Make sure the longitude 180.00 is in Zone 60
    if (Long === 180) ZoneNumber = 60;
    // Special zone for Norway
    if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) ZoneNumber = 32;
    // Special zones for Svalbard
    if (Lat >= 72.0 && Lat < 84.0) {
        if (Long >= 0.0 && Long < 9.0) ZoneNumber = 31;
        else if (Long >= 9.0 && Long < 21.0) ZoneNumber = 33;
        else if (Long >= 21.0 && Long < 33.0) ZoneNumber = 35;
        else if (Long >= 33.0 && Long < 42.0) ZoneNumber = 37;
    }
    LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin
    // in middle of
    // zone
    LongOriginRad = $7e782048f8c9ac26$var$degToRad(LongOrigin);
    eccPrimeSquared = eccSquared / (1 - eccSquared);
    N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));
    T = Math.tan(LatRad) * Math.tan(LatRad);
    C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);
    A = Math.cos(LatRad) * (LongRad - LongOriginRad);
    M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - 35 * eccSquared * eccSquared * eccSquared / 3072 * Math.sin(6 * LatRad));
    var UTMEasting = k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0;
    var UTMNorthing = k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0));
    if (Lat < 0.0) UTMNorthing += 10000000.0; //10000000 meter offset for
    return {
        northing: Math.round(UTMNorthing),
        easting: Math.round(UTMEasting),
        zoneNumber: ZoneNumber,
        zoneLetter: $7e782048f8c9ac26$var$getLetterDesignator(Lat)
    };
}
/**
 * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience
 * class where the Zone can be specified as a single string eg."60N" which
 * is then broken down into the ZoneNumber and ZoneLetter.
 *
 * @private
 * @param {object} utm An object literal with northing, easting, zoneNumber
 *     and zoneLetter properties. If an optional accuracy property is
 *     provided (in meters), a bounding box will be returned instead of
 *     latitude and longitude.
 * @return {object} An object literal containing either lat and lon values
 *     (if no accuracy was provided), or top, right, bottom and left values
 *     for the bounding box calculated according to the provided accuracy.
 *     Returns null if the conversion failed.
 */ function $7e782048f8c9ac26$var$UTMtoLL(utm) {
    var UTMNorthing = utm.northing;
    var UTMEasting = utm.easting;
    var zoneLetter = utm.zoneLetter;
    var zoneNumber = utm.zoneNumber;
    // check the ZoneNummber is valid
    if (zoneNumber < 0 || zoneNumber > 60) return null;
    var k0 = 0.9996;
    var a = 6378137.0; //ellip.radius;
    var eccSquared = 0.00669438; //ellip.eccsq;
    var eccPrimeSquared;
    var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
    var N1, T1, C1, R1, D, M;
    var LongOrigin;
    var mu, phi1Rad;
    // remove 500,000 meter offset for longitude
    var x = UTMEasting - 500000.0;
    var y = UTMNorthing;
    // We must know somehow if we are in the Northern or Southern
    // hemisphere, this is the only time we use the letter So even
    // if the Zone letter isn't exactly correct it should indicate
    // the hemisphere correctly
    if (zoneLetter < "N") y -= 10000000.0; // remove 10,000,000 meter offset used
    // There are 60 zones with zone 1 being at West -180 to -174
    LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin
    // in middle of
    // zone
    eccPrimeSquared = eccSquared / (1 - eccSquared);
    M = y / k0;
    mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));
    phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + 151 * e1 * e1 * e1 / 96 * Math.sin(6 * mu);
    // double phi1 = ProjMath.radToDeg(phi1Rad);
    N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
    T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);
    C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
    R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);
    D = x / (N1 * k0);
    var lat = phi1Rad - N1 * Math.tan(phi1Rad) / R1 * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);
    lat = $7e782048f8c9ac26$var$radToDeg(lat);
    var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);
    lon = LongOrigin + $7e782048f8c9ac26$var$radToDeg(lon);
    var result;
    if (utm.accuracy) {
        var topRight = $7e782048f8c9ac26$var$UTMtoLL({
            northing: utm.northing + utm.accuracy,
            easting: utm.easting + utm.accuracy,
            zoneLetter: utm.zoneLetter,
            zoneNumber: utm.zoneNumber
        });
        result = {
            top: topRight.lat,
            right: topRight.lon,
            bottom: lat,
            left: lon
        };
    } else result = {
        lat: lat,
        lon: lon
    };
    return result;
}
/**
 * Calculates the MGRS letter designator for the given latitude.
 *
 * @private
 * @param {number} lat The latitude in WGS84 to get the letter designator
 *     for.
 * @return {char} The letter designator.
 */ function $7e782048f8c9ac26$var$getLetterDesignator(lat) {
    //This is here as an error flag to show that the Latitude is
    //outside MGRS limits
    var LetterDesignator = "Z";
    if (84 >= lat && lat >= 72) LetterDesignator = "X";
    else if (72 > lat && lat >= 64) LetterDesignator = "W";
    else if (64 > lat && lat >= 56) LetterDesignator = "V";
    else if (56 > lat && lat >= 48) LetterDesignator = "U";
    else if (48 > lat && lat >= 40) LetterDesignator = "T";
    else if (40 > lat && lat >= 32) LetterDesignator = "S";
    else if (32 > lat && lat >= 24) LetterDesignator = "R";
    else if (24 > lat && lat >= 16) LetterDesignator = "Q";
    else if (16 > lat && lat >= 8) LetterDesignator = "P";
    else if (8 > lat && lat >= 0) LetterDesignator = "N";
    else if (0 > lat && lat >= -8) LetterDesignator = "M";
    else if (-8 > lat && lat >= -16) LetterDesignator = "L";
    else if (-16 > lat && lat >= -24) LetterDesignator = "K";
    else if (-24 > lat && lat >= -32) LetterDesignator = "J";
    else if (-32 > lat && lat >= -40) LetterDesignator = "H";
    else if (-40 > lat && lat >= -48) LetterDesignator = "G";
    else if (-48 > lat && lat >= -56) LetterDesignator = "F";
    else if (-56 > lat && lat >= -64) LetterDesignator = "E";
    else if (-64 > lat && lat >= -72) LetterDesignator = "D";
    else if (-72 > lat && lat >= -80) LetterDesignator = "C";
    return LetterDesignator;
}
/**
 * Encodes a UTM location as MGRS string.
 *
 * @private
 * @param {object} utm An object literal with easting, northing,
 *     zoneLetter, zoneNumber
 * @param {number} accuracy Accuracy in digits (1-5).
 * @return {string} MGRS string for the given UTM location.
 */ function $7e782048f8c9ac26$var$encode(utm, accuracy) {
    // prepend with leading zeroes
    var seasting = "00000" + utm.easting, snorthing = "00000" + utm.northing;
    return utm.zoneNumber + utm.zoneLetter + $7e782048f8c9ac26$var$get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);
}
/**
 * Get the two letter 100k designator for a given UTM easting,
 * northing and zone number value.
 *
 * @private
 * @param {number} easting
 * @param {number} northing
 * @param {number} zoneNumber
 * @return the two letter 100k designator for the given UTM location.
 */ function $7e782048f8c9ac26$var$get100kID(easting, northing, zoneNumber) {
    var setParm = $7e782048f8c9ac26$var$get100kSetForZone(zoneNumber);
    var setColumn = Math.floor(easting / 100000);
    var setRow = Math.floor(northing / 100000) % 20;
    return $7e782048f8c9ac26$var$getLetter100kID(setColumn, setRow, setParm);
}
/**
 * Given a UTM zone number, figure out the MGRS 100K set it is in.
 *
 * @private
 * @param {number} i An UTM zone number.
 * @return {number} the 100k set the UTM zone is in.
 */ function $7e782048f8c9ac26$var$get100kSetForZone(i) {
    var setParm = i % $7e782048f8c9ac26$var$NUM_100K_SETS;
    if (setParm === 0) setParm = $7e782048f8c9ac26$var$NUM_100K_SETS;
    return setParm;
}
/**
 * Get the two-letter MGRS 100k designator given information
 * translated from the UTM northing, easting and zone number.
 *
 * @private
 * @param {number} column the column index as it relates to the MGRS
 *        100k set spreadsheet, created from the UTM easting.
 *        Values are 1-8.
 * @param {number} row the row index as it relates to the MGRS 100k set
 *        spreadsheet, created from the UTM northing value. Values
 *        are from 0-19.
 * @param {number} parm the set block, as it relates to the MGRS 100k set
 *        spreadsheet, created from the UTM zone. Values are from
 *        1-60.
 * @return two letter MGRS 100k code.
 */ function $7e782048f8c9ac26$var$getLetter100kID(column, row, parm) {
    // colOrigin and rowOrigin are the letters at the origin of the set
    var index = parm - 1;
    var colOrigin = $7e782048f8c9ac26$var$SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);
    var rowOrigin = $7e782048f8c9ac26$var$SET_ORIGIN_ROW_LETTERS.charCodeAt(index);
    // colInt and rowInt are the letters to build to return
    var colInt = colOrigin + column - 1;
    var rowInt = rowOrigin + row;
    var rollover = false;
    if (colInt > $7e782048f8c9ac26$var$Z) {
        colInt = colInt - $7e782048f8c9ac26$var$Z + $7e782048f8c9ac26$var$A - 1;
        rollover = true;
    }
    if (colInt === $7e782048f8c9ac26$var$I || colOrigin < $7e782048f8c9ac26$var$I && colInt > $7e782048f8c9ac26$var$I || (colInt > $7e782048f8c9ac26$var$I || colOrigin < $7e782048f8c9ac26$var$I) && rollover) colInt++;
    if (colInt === $7e782048f8c9ac26$var$O || colOrigin < $7e782048f8c9ac26$var$O && colInt > $7e782048f8c9ac26$var$O || (colInt > $7e782048f8c9ac26$var$O || colOrigin < $7e782048f8c9ac26$var$O) && rollover) {
        colInt++;
        if (colInt === $7e782048f8c9ac26$var$I) colInt++;
    }
    if (colInt > $7e782048f8c9ac26$var$Z) colInt = colInt - $7e782048f8c9ac26$var$Z + $7e782048f8c9ac26$var$A - 1;
    if (rowInt > $7e782048f8c9ac26$var$V) {
        rowInt = rowInt - $7e782048f8c9ac26$var$V + $7e782048f8c9ac26$var$A - 1;
        rollover = true;
    } else rollover = false;
    if (rowInt === $7e782048f8c9ac26$var$I || rowOrigin < $7e782048f8c9ac26$var$I && rowInt > $7e782048f8c9ac26$var$I || (rowInt > $7e782048f8c9ac26$var$I || rowOrigin < $7e782048f8c9ac26$var$I) && rollover) rowInt++;
    if (rowInt === $7e782048f8c9ac26$var$O || rowOrigin < $7e782048f8c9ac26$var$O && rowInt > $7e782048f8c9ac26$var$O || (rowInt > $7e782048f8c9ac26$var$O || rowOrigin < $7e782048f8c9ac26$var$O) && rollover) {
        rowInt++;
        if (rowInt === $7e782048f8c9ac26$var$I) rowInt++;
    }
    if (rowInt > $7e782048f8c9ac26$var$V) rowInt = rowInt - $7e782048f8c9ac26$var$V + $7e782048f8c9ac26$var$A - 1;
    var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);
    return twoLetter;
}
/**
 * Decode the UTM parameters from a MGRS string.
 *
 * @private
 * @param {string} mgrsString an UPPERCASE coordinate string is expected.
 * @return {object} An object literal with easting, northing, zoneLetter,
 *     zoneNumber and accuracy (in meters) properties.
 */ function $7e782048f8c9ac26$var$decode(mgrsString) {
    if (mgrsString && mgrsString.length === 0) throw "MGRSPoint coverting from nothing";
    var length = mgrsString.length;
    var hunK = null;
    var sb = "";
    var testChar;
    var i = 0;
    // get Zone number
    while(!/[A-Z]/.test(testChar = mgrsString.charAt(i))){
        if (i >= 2) throw "MGRSPoint bad conversion from: " + mgrsString;
        sb += testChar;
        i++;
    }
    var zoneNumber = parseInt(sb, 10);
    if (i === 0 || i + 3 > length) // A good MGRS string has to be 4-5 digits long,
    // ##AAA/#AAA at least.
    throw "MGRSPoint bad conversion from: " + mgrsString;
    var zoneLetter = mgrsString.charAt(i++);
    // Should we check the zone letter here? Why not.
    if (zoneLetter <= "A" || zoneLetter === "B" || zoneLetter === "Y" || zoneLetter >= "Z" || zoneLetter === "I" || zoneLetter === "O") throw "MGRSPoint zone letter " + zoneLetter + " not handled: " + mgrsString;
    hunK = mgrsString.substring(i, i += 2);
    var set = $7e782048f8c9ac26$var$get100kSetForZone(zoneNumber);
    var east100k = $7e782048f8c9ac26$var$getEastingFromChar(hunK.charAt(0), set);
    var north100k = $7e782048f8c9ac26$var$getNorthingFromChar(hunK.charAt(1), set);
    // We have a bug where the northing may be 2000000 too low.
    // How
    // do we know when to roll over?
    while(north100k < $7e782048f8c9ac26$var$getMinNorthing(zoneLetter))north100k += 2000000;
    // calculate the char index for easting/northing separator
    var remainder = length - i;
    if (remainder % 2 !== 0) throw "MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString;
    var sep = remainder / 2;
    var sepEasting = 0.0;
    var sepNorthing = 0.0;
    var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;
    if (sep > 0) {
        accuracyBonus = 100000.0 / Math.pow(10, sep);
        sepEastingString = mgrsString.substring(i, i + sep);
        sepEasting = parseFloat(sepEastingString) * accuracyBonus;
        sepNorthingString = mgrsString.substring(i + sep);
        sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;
    }
    easting = sepEasting + east100k;
    northing = sepNorthing + north100k;
    return {
        easting: easting,
        northing: northing,
        zoneLetter: zoneLetter,
        zoneNumber: zoneNumber,
        accuracy: accuracyBonus
    };
}
/**
 * Given the first letter from a two-letter MGRS 100k zone, and given the
 * MGRS table set for the zone number, figure out the easting value that
 * should be added to the other, secondary easting value.
 *
 * @private
 * @param {char} e The first letter from a two-letter MGRS 100´k zone.
 * @param {number} set The MGRS table set for the zone number.
 * @return {number} The easting value for the given letter and set.
 */ function $7e782048f8c9ac26$var$getEastingFromChar(e, set) {
    // colOrigin is the letter at the origin of the set for the
    // column
    var curCol = $7e782048f8c9ac26$var$SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);
    var eastingValue = 100000.0;
    var rewindMarker = false;
    while(curCol !== e.charCodeAt(0)){
        curCol++;
        if (curCol === $7e782048f8c9ac26$var$I) curCol++;
        if (curCol === $7e782048f8c9ac26$var$O) curCol++;
        if (curCol > $7e782048f8c9ac26$var$Z) {
            if (rewindMarker) throw "Bad character: " + e;
            curCol = $7e782048f8c9ac26$var$A;
            rewindMarker = true;
        }
        eastingValue += 100000.0;
    }
    return eastingValue;
}
/**
 * Given the second letter from a two-letter MGRS 100k zone, and given the
 * MGRS table set for the zone number, figure out the northing value that
 * should be added to the other, secondary northing value. You have to
 * remember that Northings are determined from the equator, and the vertical
 * cycle of letters mean a 2000000 additional northing meters. This happens
 * approx. every 18 degrees of latitude. This method does *NOT* count any
 * additional northings. You have to figure out how many 2000000 meters need
 * to be added for the zone letter of the MGRS coordinate.
 *
 * @private
 * @param {char} n Second letter of the MGRS 100k zone
 * @param {number} set The MGRS table set number, which is dependent on the
 *     UTM zone number.
 * @return {number} The northing value for the given letter and set.
 */ function $7e782048f8c9ac26$var$getNorthingFromChar(n, set) {
    if (n > "V") throw "MGRSPoint given invalid Northing " + n;
    // rowOrigin is the letter at the origin of the set for the
    // column
    var curRow = $7e782048f8c9ac26$var$SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);
    var northingValue = 0.0;
    var rewindMarker = false;
    while(curRow !== n.charCodeAt(0)){
        curRow++;
        if (curRow === $7e782048f8c9ac26$var$I) curRow++;
        if (curRow === $7e782048f8c9ac26$var$O) curRow++;
        // fixing a bug making whole application hang in this loop
        // when 'n' is a wrong character
        if (curRow > $7e782048f8c9ac26$var$V) {
            if (rewindMarker) throw "Bad character: " + n;
            curRow = $7e782048f8c9ac26$var$A;
            rewindMarker = true;
        }
        northingValue += 100000.0;
    }
    return northingValue;
}
/**
 * The function getMinNorthing returns the minimum northing value of a MGRS
 * zone.
 *
 * Ported from Geotrans' c Lattitude_Band_Value structure table.
 *
 * @private
 * @param {char} zoneLetter The MGRS zone to get the min northing for.
 * @return {number}
 */ function $7e782048f8c9ac26$var$getMinNorthing(zoneLetter) {
    var northing;
    switch(zoneLetter){
        case "C":
            northing = 1100000.0;
            break;
        case "D":
            northing = 2000000.0;
            break;
        case "E":
            northing = 2800000.0;
            break;
        case "F":
            northing = 3700000.0;
            break;
        case "G":
            northing = 4600000.0;
            break;
        case "H":
            northing = 5500000.0;
            break;
        case "J":
            northing = 6400000.0;
            break;
        case "K":
            northing = 7300000.0;
            break;
        case "L":
            northing = 8200000.0;
            break;
        case "M":
            northing = 9100000.0;
            break;
        case "N":
            northing = 0.0;
            break;
        case "P":
            northing = 800000.0;
            break;
        case "Q":
            northing = 1700000.0;
            break;
        case "R":
            northing = 2600000.0;
            break;
        case "S":
            northing = 3500000.0;
            break;
        case "T":
            northing = 4400000.0;
            break;
        case "U":
            northing = 5300000.0;
            break;
        case "V":
            northing = 6200000.0;
            break;
        case "W":
            northing = 7000000.0;
            break;
        case "X":
            northing = 7900000.0;
            break;
        default:
            northing = -1;
    }
    if (northing >= 0.0) return northing;
    else throw "Invalid zone letter: " + zoneLetter;
}


function $ef4e27688b0ecb61$var$Point(x, y, z) {
    if (!(this instanceof $ef4e27688b0ecb61$var$Point)) return new $ef4e27688b0ecb61$var$Point(x, y, z);
    if (Array.isArray(x)) {
        this.x = x[0];
        this.y = x[1];
        this.z = x[2] || 0.0;
    } else if (typeof x === "object") {
        this.x = x.x;
        this.y = x.y;
        this.z = x.z || 0.0;
    } else if (typeof x === "string" && typeof y === "undefined") {
        var coords = x.split(",");
        this.x = parseFloat(coords[0], 10);
        this.y = parseFloat(coords[1], 10);
        this.z = parseFloat(coords[2], 10) || 0.0;
    } else {
        this.x = x;
        this.y = y;
        this.z = z || 0.0;
    }
    console.warn("proj4.Point will be removed in version 3, use proj4.toPoint");
}
$ef4e27688b0ecb61$var$Point.fromMGRS = function(mgrsStr) {
    return new $ef4e27688b0ecb61$var$Point((0, $7e782048f8c9ac26$export$b63cca88ddc558a9)(mgrsStr));
};
$ef4e27688b0ecb61$var$Point.prototype.toMGRS = function(accuracy) {
    return (0, $7e782048f8c9ac26$export$174bb771924e7eb1)([
        this.x,
        this.y
    ], accuracy);
};
var $ef4e27688b0ecb61$export$2e2bcd8739ae039 = $ef4e27688b0ecb61$var$Point;








var $jEXtl = parcelRequire("jEXtl");

var $5k61a = parcelRequire("5k61a");

var $dbd4D = parcelRequire("dbd4D");
function $fb69036c404539e0$export$2e2bcd8739ae039(zone, lon) {
    if (zone === undefined) {
        zone = Math.floor(((0, $dbd4D.default)(lon) + Math.PI) * 30 / Math.PI) + 1;
        if (zone < 0) return 0;
        else if (zone > 60) return 60;
    }
    return zone;
}



var $5k61a = parcelRequire("5k61a");

var $7B7Eg = parcelRequire("7B7Eg");
var $f909ef571a9af96e$export$3f91ef0e0d0d8bf8 = "etmerc";
function $f909ef571a9af96e$export$2cd8252107eb640b() {
    var zone = (0, $fb69036c404539e0$export$2e2bcd8739ae039)(this.zone, this.long0);
    if (zone === undefined) throw new Error("unknown utm zone");
    this.lat0 = 0;
    this.long0 = (6 * Math.abs(zone) - 183) * (0, $7B7Eg.D2R);
    this.x0 = 500000;
    this.y0 = this.utmSouth ? 10000000 : 0;
    this.k0 = 0.9996;
    (0, $5k61a.default).init.apply(this);
    this.forward = (0, $5k61a.default).forward;
    this.inverse = (0, $5k61a.default).inverse;
}
var $f909ef571a9af96e$export$e4b2ac9215619f8d = [
    "Universal Transverse Mercator System",
    "utm"
];
var $f909ef571a9af96e$export$2e2bcd8739ae039 = {
    init: $f909ef571a9af96e$export$2cd8252107eb640b,
    names: $f909ef571a9af96e$export$e4b2ac9215619f8d,
    dependsOn: $f909ef571a9af96e$export$3f91ef0e0d0d8bf8
};


function $6959e3c0253acf0e$export$2e2bcd8739ae039(esinp, exp) {
    return Math.pow((1 - esinp) / (1 + esinp), exp);
}



var $7B7Eg = parcelRequire("7B7Eg");
var $df572233aa7cc19f$var$MAX_ITER = 20;
function $df572233aa7cc19f$export$2cd8252107eb640b() {
    var sphi = Math.sin(this.lat0);
    var cphi = Math.cos(this.lat0);
    cphi *= cphi;
    this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
    this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
    this.phic0 = Math.asin(sphi / this.C);
    this.ratexp = 0.5 * this.C * this.e;
    this.K = Math.tan(0.5 * this.phic0 + (0, $7B7Eg.FORTPI)) / (Math.pow(Math.tan(0.5 * this.lat0 + (0, $7B7Eg.FORTPI)), this.C) * (0, $6959e3c0253acf0e$export$2e2bcd8739ae039)(this.e * sphi, this.ratexp));
}
function $df572233aa7cc19f$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + (0, $7B7Eg.FORTPI)), this.C) * (0, $6959e3c0253acf0e$export$2e2bcd8739ae039)(this.e * Math.sin(lat), this.ratexp)) - (0, $7B7Eg.HALF_PI);
    p.x = this.C * lon;
    return p;
}
function $df572233aa7cc19f$export$70ae2c07e401031b(p) {
    var DEL_TOL = 1e-14;
    var lon = p.x / this.C;
    var lat = p.y;
    var num = Math.pow(Math.tan(0.5 * lat + (0, $7B7Eg.FORTPI)) / this.K, 1 / this.C);
    for(var i = $df572233aa7cc19f$var$MAX_ITER; i > 0; --i){
        lat = 2 * Math.atan(num * (0, $6959e3c0253acf0e$export$2e2bcd8739ae039)(this.e * Math.sin(p.y), -0.5 * this.e)) - (0, $7B7Eg.HALF_PI);
        if (Math.abs(lat - p.y) < DEL_TOL) break;
        p.y = lat;
    }
    /* convergence failed */ if (!i) return null;
    p.x = lon;
    p.y = lat;
    return p;
}
var $df572233aa7cc19f$export$e4b2ac9215619f8d = [
    "gauss"
];
var $df572233aa7cc19f$export$2e2bcd8739ae039 = {
    init: $df572233aa7cc19f$export$2cd8252107eb640b,
    forward: $df572233aa7cc19f$export$174bb771924e7eb1,
    inverse: $df572233aa7cc19f$export$70ae2c07e401031b,
    names: $df572233aa7cc19f$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");

var $9WCjH = parcelRequire("9WCjH");
function $d6f46490cf42e2dd$export$2cd8252107eb640b() {
    (0, $df572233aa7cc19f$export$2e2bcd8739ae039).init.apply(this);
    if (!this.rc) return;
    this.sinc0 = Math.sin(this.phic0);
    this.cosc0 = Math.cos(this.phic0);
    this.R2 = 2 * this.rc;
    if (!this.title) this.title = "Oblique Stereographic Alternative";
}
function $d6f46490cf42e2dd$export$174bb771924e7eb1(p) {
    var sinc, cosc, cosl, k;
    p.x = (0, $dbd4D.default)(p.x - this.long0);
    (0, $df572233aa7cc19f$export$2e2bcd8739ae039).forward.apply(this, [
        p
    ]);
    sinc = Math.sin(p.y);
    cosc = Math.cos(p.y);
    cosl = Math.cos(p.x);
    k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
    p.x = k * cosc * Math.sin(p.x);
    p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
    p.x = this.a * p.x + this.x0;
    p.y = this.a * p.y + this.y0;
    return p;
}
function $d6f46490cf42e2dd$export$70ae2c07e401031b(p) {
    var sinc, cosc, lon, lat, rho;
    p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;
    p.x /= this.k0;
    p.y /= this.k0;
    if (rho = (0, $9WCjH.default)(p.x, p.y)) {
        var c = 2 * Math.atan2(rho, this.R2);
        sinc = Math.sin(c);
        cosc = Math.cos(c);
        lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
        lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
    } else {
        lat = this.phic0;
        lon = 0;
    }
    p.x = lon;
    p.y = lat;
    (0, $df572233aa7cc19f$export$2e2bcd8739ae039).inverse.apply(this, [
        p
    ]);
    p.x = (0, $dbd4D.default)(p.x + this.long0);
    return p;
}
var $d6f46490cf42e2dd$export$e4b2ac9215619f8d = [
    "Stereographic_North_Pole",
    "Oblique_Stereographic",
    "sterea",
    "Oblique Stereographic Alternative",
    "Double_Stereographic"
];
var $d6f46490cf42e2dd$export$2e2bcd8739ae039 = {
    init: $d6f46490cf42e2dd$export$2cd8252107eb640b,
    forward: $d6f46490cf42e2dd$export$174bb771924e7eb1,
    inverse: $d6f46490cf42e2dd$export$70ae2c07e401031b,
    names: $d6f46490cf42e2dd$export$e4b2ac9215619f8d
};



var $2nJNQ = parcelRequire("2nJNQ");
/*
  references:
    Formules et constantes pour le Calcul pour la
    projection cylindrique conforme à axe oblique et pour la transformation entre
    des systèmes de référence.
    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf
  */ function $3911b393258a5f42$export$2cd8252107eb640b() {
    var phy0 = this.lat0;
    this.lambda0 = this.long0;
    var sinPhy0 = Math.sin(phy0);
    var semiMajorAxis = this.a;
    var invF = this.rf;
    var flattening = 1 / invF;
    var e2 = 2 * flattening - Math.pow(flattening, 2);
    var e = this.e = Math.sqrt(e2);
    this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
    this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
    this.b0 = Math.asin(sinPhy0 / this.alpha);
    var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
    var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
    var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
    this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
}
function $3911b393258a5f42$export$174bb771924e7eb1(p) {
    var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
    var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
    var S = -this.alpha * (Sa1 + Sa2) + this.K;
    // spheric latitude
    var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);
    // spheric longitude
    var I = this.alpha * (p.x - this.lambda0);
    // psoeudo equatorial rotation
    var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));
    var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));
    p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
    p.x = this.R * rotI + this.x0;
    return p;
}
function $3911b393258a5f42$export$70ae2c07e401031b(p) {
    var Y = p.x - this.x0;
    var X = p.y - this.y0;
    var rotI = Y / this.R;
    var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);
    var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
    var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));
    var lambda = this.lambda0 + I / this.alpha;
    var S = 0;
    var phy = b;
    var prevPhy = -1000;
    var iteration = 0;
    while(Math.abs(phy - prevPhy) > 0.0000001){
        if (++iteration > 20) //...reportError("omercFwdInfinity");
        return;
        //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));
        S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
        prevPhy = phy;
        phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
    }
    p.x = lambda;
    p.y = phy;
    return p;
}
var $3911b393258a5f42$export$e4b2ac9215619f8d = [
    "somerc"
];
var $3911b393258a5f42$export$2e2bcd8739ae039 = {
    init: $3911b393258a5f42$export$2cd8252107eb640b,
    forward: $3911b393258a5f42$export$174bb771924e7eb1,
    inverse: $3911b393258a5f42$export$70ae2c07e401031b,
    names: $3911b393258a5f42$export$e4b2ac9215619f8d
};



var $biomK = parcelRequire("biomK");

var $dbd4D = parcelRequire("dbd4D");

var $i2VbV = parcelRequire("i2VbV");

var $7B7Eg = parcelRequire("7B7Eg");
var $fd3fdaaafb1f7d4e$var$TOL = 1e-7;
function $fd3fdaaafb1f7d4e$var$isTypeA(P) {
    var typeAProjections = [
        "Hotine_Oblique_Mercator",
        "Hotine_Oblique_Mercator_Azimuth_Natural_Origin"
    ];
    var projectionName = typeof P.PROJECTION === "object" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;
    return "no_uoff" in P || "no_off" in P || typeAProjections.indexOf(projectionName) !== -1;
}
function $fd3fdaaafb1f7d4e$export$2cd8252107eb640b() {
    var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0, gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;
    // only Type A uses the no_off or no_uoff property
    // https://github.com/OSGeo/proj.4/issues/104
    this.no_off = $fd3fdaaafb1f7d4e$var$isTypeA(this);
    this.no_rot = "no_rot" in this;
    var alp = false;
    if ("alpha" in this) alp = true;
    var gam = false;
    if ("rectified_grid_angle" in this) gam = true;
    if (alp) alpha_c = this.alpha;
    if (gam) gamma = this.rectified_grid_angle * (0, $7B7Eg.D2R);
    if (alp || gam) lamc = this.longc;
    else {
        lam1 = this.long1;
        phi1 = this.lat1;
        lam2 = this.long2;
        phi2 = this.lat2;
        if (Math.abs(phi1 - phi2) <= $fd3fdaaafb1f7d4e$var$TOL || (con = Math.abs(phi1)) <= $fd3fdaaafb1f7d4e$var$TOL || Math.abs(con - (0, $7B7Eg.HALF_PI)) <= $fd3fdaaafb1f7d4e$var$TOL || Math.abs(Math.abs(this.lat0) - (0, $7B7Eg.HALF_PI)) <= $fd3fdaaafb1f7d4e$var$TOL || Math.abs(Math.abs(phi2) - (0, $7B7Eg.HALF_PI)) <= $fd3fdaaafb1f7d4e$var$TOL) throw new Error();
    }
    var one_es = 1.0 - this.es;
    com = Math.sqrt(one_es);
    if (Math.abs(this.lat0) > (0, $7B7Eg.EPSLN)) {
        sinph0 = Math.sin(this.lat0);
        cosph0 = Math.cos(this.lat0);
        con = 1 - this.es * sinph0 * sinph0;
        this.B = cosph0 * cosph0;
        this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);
        this.A = this.B * this.k0 * com / con;
        D = this.B * com / (cosph0 * Math.sqrt(con));
        F = D * D - 1;
        if (F <= 0) F = 0;
        else {
            F = Math.sqrt(F);
            if (this.lat0 < 0) F = -F;
        }
        this.E = F += D;
        this.E *= Math.pow((0, $biomK.default)(this.e, this.lat0, sinph0), this.B);
    } else {
        this.B = 1 / com;
        this.A = this.k0;
        this.E = D = F = 1;
    }
    if (alp || gam) {
        if (alp) {
            gamma0 = Math.asin(Math.sin(alpha_c) / D);
            if (!gam) gamma = alpha_c;
        } else {
            gamma0 = gamma;
            alpha_c = Math.asin(D * Math.sin(gamma0));
        }
        this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;
    } else {
        H = Math.pow((0, $biomK.default)(this.e, phi1, Math.sin(phi1)), this.B);
        L = Math.pow((0, $biomK.default)(this.e, phi2, Math.sin(phi2)), this.B);
        F = this.E / H;
        p = (L - H) / (L + H);
        J = this.E * this.E;
        J = (J - L * H) / (J + L * H);
        con = lam1 - lam2;
        if (con < -Math.pi) lam2 -= (0, $7B7Eg.TWO_PI);
        else if (con > Math.pi) lam2 += (0, $7B7Eg.TWO_PI);
        this.lam0 = (0, $dbd4D.default)(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);
        gamma0 = Math.atan(2 * Math.sin(this.B * (0, $dbd4D.default)(lam1 - this.lam0)) / (F - 1 / F));
        gamma = alpha_c = Math.asin(D * Math.sin(gamma0));
    }
    this.singam = Math.sin(gamma0);
    this.cosgam = Math.cos(gamma0);
    this.sinrot = Math.sin(gamma);
    this.cosrot = Math.cos(gamma);
    this.rB = 1 / this.B;
    this.ArB = this.A * this.rB;
    this.BrA = 1 / this.ArB;
    AB = this.A * this.B;
    if (this.no_off) this.u_0 = 0;
    else {
        this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));
        if (this.lat0 < 0) this.u_0 = -this.u_0;
    }
    F = 0.5 * gamma0;
    this.v_pole_n = this.ArB * Math.log(Math.tan((0, $7B7Eg.FORTPI) - F));
    this.v_pole_s = this.ArB * Math.log(Math.tan((0, $7B7Eg.FORTPI) + F));
}
function $fd3fdaaafb1f7d4e$export$174bb771924e7eb1(p) {
    var coords = {};
    var S, T, U, V, W, temp, u, v;
    p.x = p.x - this.lam0;
    if (Math.abs(Math.abs(p.y) - (0, $7B7Eg.HALF_PI)) > (0, $7B7Eg.EPSLN)) {
        W = this.E / Math.pow((0, $biomK.default)(this.e, p.y, Math.sin(p.y)), this.B);
        temp = 1 / W;
        S = 0.5 * (W - temp);
        T = 0.5 * (W + temp);
        V = Math.sin(this.B * p.x);
        U = (S * this.singam - V * this.cosgam) / T;
        if (Math.abs(Math.abs(U) - 1.0) < (0, $7B7Eg.EPSLN)) throw new Error();
        v = 0.5 * this.ArB * Math.log((1 - U) / (1 + U));
        temp = Math.cos(this.B * p.x);
        if (Math.abs(temp) < $fd3fdaaafb1f7d4e$var$TOL) u = this.A * p.x;
        else u = this.ArB * Math.atan2(S * this.cosgam + V * this.singam, temp);
    } else {
        v = p.y > 0 ? this.v_pole_n : this.v_pole_s;
        u = this.ArB * p.y;
    }
    if (this.no_rot) {
        coords.x = u;
        coords.y = v;
    } else {
        u -= this.u_0;
        coords.x = v * this.cosrot + u * this.sinrot;
        coords.y = u * this.cosrot - v * this.sinrot;
    }
    coords.x = this.a * coords.x + this.x0;
    coords.y = this.a * coords.y + this.y0;
    return coords;
}
function $fd3fdaaafb1f7d4e$export$70ae2c07e401031b(p) {
    var u, v, Qp, Sp, Tp, Vp, Up;
    var coords = {};
    p.x = (p.x - this.x0) * (1.0 / this.a);
    p.y = (p.y - this.y0) * (1.0 / this.a);
    if (this.no_rot) {
        v = p.y;
        u = p.x;
    } else {
        v = p.x * this.cosrot - p.y * this.sinrot;
        u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;
    }
    Qp = Math.exp(-this.BrA * v);
    Sp = 0.5 * (Qp - 1 / Qp);
    Tp = 0.5 * (Qp + 1 / Qp);
    Vp = Math.sin(this.BrA * u);
    Up = (Vp * this.cosgam + Sp * this.singam) / Tp;
    if (Math.abs(Math.abs(Up) - 1) < (0, $7B7Eg.EPSLN)) {
        coords.x = 0;
        coords.y = Up < 0 ? -(0, $7B7Eg.HALF_PI) : (0, $7B7Eg.HALF_PI);
    } else {
        coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));
        coords.y = (0, $i2VbV.default)(this.e, Math.pow(coords.y, 1 / this.B));
        if (coords.y === Infinity) throw new Error();
        coords.x = -this.rB * Math.atan2(Sp * this.cosgam - Vp * this.singam, Math.cos(this.BrA * u));
    }
    coords.x += this.lam0;
    return coords;
}
var $fd3fdaaafb1f7d4e$export$e4b2ac9215619f8d = [
    "Hotine_Oblique_Mercator",
    "Hotine Oblique Mercator",
    "Hotine_Oblique_Mercator_Azimuth_Natural_Origin",
    "Hotine_Oblique_Mercator_Two_Point_Natural_Origin",
    "Hotine_Oblique_Mercator_Azimuth_Center",
    "Oblique_Mercator",
    "omerc"
];
var $fd3fdaaafb1f7d4e$export$2e2bcd8739ae039 = {
    init: $fd3fdaaafb1f7d4e$export$2cd8252107eb640b,
    forward: $fd3fdaaafb1f7d4e$export$174bb771924e7eb1,
    inverse: $fd3fdaaafb1f7d4e$export$70ae2c07e401031b,
    names: $fd3fdaaafb1f7d4e$export$e4b2ac9215619f8d
};



var $4MKOs = parcelRequire("4MKOs");

var $biomK = parcelRequire("biomK");

var $9lchO = parcelRequire("9lchO");

var $dbd4D = parcelRequire("dbd4D");

var $i2VbV = parcelRequire("i2VbV");

var $7B7Eg = parcelRequire("7B7Eg");
function $cb6e788a2c3f7915$export$2cd8252107eb640b() {
    //double lat0;                    /* the reference latitude               */
    //double long0;                   /* the reference longitude              */
    //double lat1;                    /* first standard parallel              */
    //double lat2;                    /* second standard parallel             */
    //double r_maj;                   /* major axis                           */
    //double r_min;                   /* minor axis                           */
    //double false_east;              /* x offset in meters                   */
    //double false_north;             /* y offset in meters                   */
    //the above value can be set with proj4.defs
    //example: proj4.defs("EPSG:2154","+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");
    if (!this.lat2) this.lat2 = this.lat1;
     //if lat2 is not defined
    if (!this.k0) this.k0 = 1;
    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    // Standard Parallels cannot be equal and on opposite sides of the equator
    if (Math.abs(this.lat1 + this.lat2) < (0, $7B7Eg.EPSLN)) return;
    var temp = this.b / this.a;
    this.e = Math.sqrt(1 - temp * temp);
    var sin1 = Math.sin(this.lat1);
    var cos1 = Math.cos(this.lat1);
    var ms1 = (0, $4MKOs.default)(this.e, sin1, cos1);
    var ts1 = (0, $biomK.default)(this.e, this.lat1, sin1);
    var sin2 = Math.sin(this.lat2);
    var cos2 = Math.cos(this.lat2);
    var ms2 = (0, $4MKOs.default)(this.e, sin2, cos2);
    var ts2 = (0, $biomK.default)(this.e, this.lat2, sin2);
    var ts0 = (0, $biomK.default)(this.e, this.lat0, Math.sin(this.lat0));
    if (Math.abs(this.lat1 - this.lat2) > (0, $7B7Eg.EPSLN)) this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
    else this.ns = sin1;
    if (isNaN(this.ns)) this.ns = sin1;
    this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
    this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);
    if (!this.title) this.title = "Lambert Conformal Conic";
}
function $cb6e788a2c3f7915$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    // singular cases :
    if (Math.abs(2 * Math.abs(lat) - Math.PI) <= (0, $7B7Eg.EPSLN)) lat = (0, $9lchO.default)(lat) * ((0, $7B7Eg.HALF_PI) - 2 * (0, $7B7Eg.EPSLN));
    var con = Math.abs(Math.abs(lat) - (0, $7B7Eg.HALF_PI));
    var ts, rh1;
    if (con > (0, $7B7Eg.EPSLN)) {
        ts = (0, $biomK.default)(this.e, lat, Math.sin(lat));
        rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
    } else {
        con = lat * this.ns;
        if (con <= 0) return null;
        rh1 = 0;
    }
    var theta = this.ns * (0, $dbd4D.default)(lon - this.long0);
    p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
    p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;
    return p;
}
function $cb6e788a2c3f7915$export$70ae2c07e401031b(p) {
    var rh1, con, ts;
    var lat, lon;
    var x = (p.x - this.x0) / this.k0;
    var y = this.rh - (p.y - this.y0) / this.k0;
    if (this.ns > 0) {
        rh1 = Math.sqrt(x * x + y * y);
        con = 1;
    } else {
        rh1 = -Math.sqrt(x * x + y * y);
        con = -1;
    }
    var theta = 0;
    if (rh1 !== 0) theta = Math.atan2(con * x, con * y);
    if (rh1 !== 0 || this.ns > 0) {
        con = 1 / this.ns;
        ts = Math.pow(rh1 / (this.a * this.f0), con);
        lat = (0, $i2VbV.default)(this.e, ts);
        if (lat === -9999) return null;
    } else lat = -(0, $7B7Eg.HALF_PI);
    lon = (0, $dbd4D.default)(theta / this.ns + this.long0);
    p.x = lon;
    p.y = lat;
    return p;
}
var $cb6e788a2c3f7915$export$e4b2ac9215619f8d = [
    "Lambert Tangential Conformal Conic Projection",
    "Lambert_Conformal_Conic",
    "Lambert_Conformal_Conic_1SP",
    "Lambert_Conformal_Conic_2SP",
    "lcc",
    "Lambert Conic Conformal (1SP)",
    "Lambert Conic Conformal (2SP)"
];
var $cb6e788a2c3f7915$export$2e2bcd8739ae039 = {
    init: $cb6e788a2c3f7915$export$2cd8252107eb640b,
    forward: $cb6e788a2c3f7915$export$174bb771924e7eb1,
    inverse: $cb6e788a2c3f7915$export$70ae2c07e401031b,
    names: $cb6e788a2c3f7915$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");
function $162e27c6eb9aa4da$export$2cd8252107eb640b() {
    this.a = 6377397.155;
    this.es = 0.006674372230614;
    this.e = Math.sqrt(this.es);
    if (!this.lat0) this.lat0 = 0.863937979737193;
    if (!this.long0) this.long0 = 0.4334234309119251;
    /* if scale not set default to 0.9999 */ if (!this.k0) this.k0 = 0.9999;
    this.s45 = 0.785398163397448; /* 45 */ 
    this.s90 = 2 * this.s45;
    this.fi0 = this.lat0;
    this.e2 = this.es;
    this.e = Math.sqrt(this.e2);
    this.alfa = Math.sqrt(1 + this.e2 * Math.pow(Math.cos(this.fi0), 4) / (1 - this.e2));
    this.uq = 1.04216856380474;
    this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
    this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
    this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
    this.k1 = this.k0;
    this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
    this.s0 = 1.37008346281555;
    this.n = Math.sin(this.s0);
    this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
    this.ad = this.s90 - this.uq;
}
function $162e27c6eb9aa4da$export$174bb771924e7eb1(p) {
    var gfi, u, deltav, s, d, eps, ro;
    var lon = p.x;
    var lat = p.y;
    var delta_lon = (0, $dbd4D.default)(lon - this.long0);
    /* Transformation */ gfi = Math.pow((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat)), this.alfa * this.e / 2);
    u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
    deltav = -delta_lon * this.alfa;
    s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
    d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
    eps = this.n * d;
    ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
    p.y = ro * Math.cos(eps) / 1;
    p.x = ro * Math.sin(eps) / 1;
    if (!this.czech) {
        p.y *= -1;
        p.x *= -1;
    }
    return p;
}
function $162e27c6eb9aa4da$export$70ae2c07e401031b(p) {
    var u, deltav, s, d, eps, ro, fi1;
    var ok;
    /* Transformation */ /* revert y, x*/ var tmp = p.x;
    p.x = p.y;
    p.y = tmp;
    if (!this.czech) {
        p.y *= -1;
        p.x *= -1;
    }
    ro = Math.sqrt(p.x * p.x + p.y * p.y);
    eps = Math.atan2(p.y, p.x);
    d = eps / Math.sin(this.s0);
    s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
    u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
    deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
    p.x = this.long0 - deltav / this.alfa;
    fi1 = u;
    ok = 0;
    var iter = 0;
    do {
        p.y = 2 * (Math.atan(Math.pow(this.k, -1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);
        if (Math.abs(fi1 - p.y) < 0.0000000001) ok = 1;
        fi1 = p.y;
        iter += 1;
    }while (ok === 0 && iter < 15);
    if (iter >= 15) return null;
    return p;
}
var $162e27c6eb9aa4da$export$e4b2ac9215619f8d = [
    "Krovak",
    "krovak"
];
var $162e27c6eb9aa4da$export$2e2bcd8739ae039 = {
    init: $162e27c6eb9aa4da$export$2cd8252107eb640b,
    forward: $162e27c6eb9aa4da$export$174bb771924e7eb1,
    inverse: $162e27c6eb9aa4da$export$70ae2c07e401031b,
    names: $162e27c6eb9aa4da$export$e4b2ac9215619f8d
};


function $d53bef51adc5c7b8$export$2e2bcd8739ae039(e0, e1, e2, e3, phi) {
    return e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi);
}


function $1a13b2496406fa53$export$2e2bcd8739ae039(x) {
    return 1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x));
}


function $2cd33ad30cf5c777$export$2e2bcd8739ae039(x) {
    return 0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x));
}


function $103627984db2c044$export$2e2bcd8739ae039(x) {
    return 0.05859375 * x * x * (1 + 0.75 * x);
}


function $9c2c69739eb169e0$export$2e2bcd8739ae039(x) {
    return x * x * x * (35 / 3072);
}


function $cc929bf1073a4f4a$export$2e2bcd8739ae039(a, e, sinphi) {
    var temp = e * sinphi;
    return a / Math.sqrt(1 - temp * temp);
}



var $dbd4D = parcelRequire("dbd4D");

var $7B7Eg = parcelRequire("7B7Eg");

var $9lchO = parcelRequire("9lchO");
function $568a11f3be43b3f5$export$2e2bcd8739ae039(x) {
    return Math.abs(x) < (0, $7B7Eg.HALF_PI) ? x : x - (0, $9lchO.default)(x) * Math.PI;
}


function $36c01451f23e2b38$export$2e2bcd8739ae039(ml, e0, e1, e2, e3) {
    var phi;
    var dphi;
    phi = ml / e0;
    for(var i = 0; i < 15; i++){
        dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
        phi += dphi;
        if (Math.abs(dphi) <= 0.0000000001) return phi;
    }
    //..reportError("IMLFN-CONV:Latitude failed to converge after 15 iterations");
    return NaN;
}



var $7B7Eg = parcelRequire("7B7Eg");
function $cab6e610f7f26f9c$export$2cd8252107eb640b() {
    if (!this.sphere) {
        this.e0 = (0, $1a13b2496406fa53$export$2e2bcd8739ae039)(this.es);
        this.e1 = (0, $2cd33ad30cf5c777$export$2e2bcd8739ae039)(this.es);
        this.e2 = (0, $103627984db2c044$export$2e2bcd8739ae039)(this.es);
        this.e3 = (0, $9c2c69739eb169e0$export$2e2bcd8739ae039)(this.es);
        this.ml0 = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, this.lat0);
    }
}
function $cab6e610f7f26f9c$export$174bb771924e7eb1(p) {
    /* Forward equations
      -----------------*/ var x, y;
    var lam = p.x;
    var phi = p.y;
    lam = (0, $dbd4D.default)(lam - this.long0);
    if (this.sphere) {
        x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
        y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
    } else {
        //ellipsoid
        var sinphi = Math.sin(phi);
        var cosphi = Math.cos(phi);
        var nl = (0, $cc929bf1073a4f4a$export$2e2bcd8739ae039)(this.a, this.e, sinphi);
        var tl = Math.tan(phi) * Math.tan(phi);
        var al = lam * Math.cos(phi);
        var asq = al * al;
        var cl = this.es * cosphi * cosphi / (1 - this.es);
        var ml = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, phi);
        x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
        y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);
    }
    p.x = x + this.x0;
    p.y = y + this.y0;
    return p;
}
function $cab6e610f7f26f9c$export$70ae2c07e401031b(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var x = p.x / this.a;
    var y = p.y / this.a;
    var phi, lam;
    if (this.sphere) {
        var dd = y + this.lat0;
        phi = Math.asin(Math.sin(dd) * Math.cos(x));
        lam = Math.atan2(Math.tan(x), Math.cos(dd));
    } else {
        /* ellipsoid */ var ml1 = this.ml0 / this.a + y;
        var phi1 = (0, $36c01451f23e2b38$export$2e2bcd8739ae039)(ml1, this.e0, this.e1, this.e2, this.e3);
        if (Math.abs(Math.abs(phi1) - (0, $7B7Eg.HALF_PI)) <= (0, $7B7Eg.EPSLN)) {
            p.x = this.long0;
            p.y = (0, $7B7Eg.HALF_PI);
            if (y < 0) p.y *= -1;
            return p;
        }
        var nl1 = (0, $cc929bf1073a4f4a$export$2e2bcd8739ae039)(this.a, this.e, Math.sin(phi1));
        var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
        var tl1 = Math.pow(Math.tan(phi1), 2);
        var dl = x * this.a / nl1;
        var dsq = dl * dl;
        phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
        lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);
    }
    p.x = (0, $dbd4D.default)(lam + this.long0);
    p.y = (0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(phi);
    return p;
}
var $cab6e610f7f26f9c$export$e4b2ac9215619f8d = [
    "Cassini",
    "Cassini_Soldner",
    "cass"
];
var $cab6e610f7f26f9c$export$2e2bcd8739ae039 = {
    init: $cab6e610f7f26f9c$export$2cd8252107eb640b,
    forward: $cab6e610f7f26f9c$export$174bb771924e7eb1,
    inverse: $cab6e610f7f26f9c$export$70ae2c07e401031b,
    names: $cab6e610f7f26f9c$export$e4b2ac9215619f8d
};



var $1UqH0 = parcelRequire("1UqH0");

var $efQ5V = parcelRequire("efQ5V");

var $dbd4D = parcelRequire("dbd4D");

var $7sb7x = parcelRequire("7sb7x");

var $7B7Eg = parcelRequire("7B7Eg");
function $dc8af4db6ad7738c$export$2cd8252107eb640b() {
    /* Place parameters in static storage for common use
      -------------------------------------------------*/ this.sin_p14 = Math.sin(this.lat0);
    this.cos_p14 = Math.cos(this.lat0);
    // Approximation for projecting points to the horizon (infinity)
    this.infinity_dist = 1000 * this.a;
    this.rc = 1;
}
function $dc8af4db6ad7738c$export$174bb771924e7eb1(p) {
    var sinphi, cosphi; /* sin and cos value        */ 
    var dlon; /* delta longitude value      */ 
    var coslon; /* cos of longitude        */ 
    var ksp; /* scale factor          */ 
    var g;
    var x, y;
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
      -----------------*/ dlon = (0, $dbd4D.default)(lon - this.long0);
    sinphi = Math.sin(lat);
    cosphi = Math.cos(lat);
    coslon = Math.cos(dlon);
    g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
    ksp = 1;
    if (g > 0 || Math.abs(g) <= (0, $7B7Eg.EPSLN)) {
        x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
    } else {
        // Point is in the opposing hemisphere and is unprojectable
        // We still need to return a reasonable point, so we project
        // to infinity, on a bearing
        // equivalent to the northern hemisphere equivalent
        // This is a reasonable approximation for short shapes and lines that
        // straddle the horizon.
        x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
        y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
    }
    p.x = x;
    p.y = y;
    return p;
}
function $dc8af4db6ad7738c$export$70ae2c07e401031b(p) {
    var rh; /* Rho */ 
    var sinc, cosc;
    var c;
    var lon, lat;
    /* Inverse equations
      -----------------*/ p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;
    p.x /= this.k0;
    p.y /= this.k0;
    if (rh = Math.sqrt(p.x * p.x + p.y * p.y)) {
        c = Math.atan2(rh, this.rc);
        sinc = Math.sin(c);
        cosc = Math.cos(c);
        lat = (0, $7sb7x.default)(cosc * this.sin_p14 + p.y * sinc * this.cos_p14 / rh);
        lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
        lon = (0, $dbd4D.default)(this.long0 + lon);
    } else {
        lat = this.phic0;
        lon = 0;
    }
    p.x = lon;
    p.y = lat;
    return p;
}
var $dc8af4db6ad7738c$export$e4b2ac9215619f8d = [
    "gnom"
];
var $dc8af4db6ad7738c$export$2e2bcd8739ae039 = {
    init: $dc8af4db6ad7738c$export$2cd8252107eb640b,
    forward: $dc8af4db6ad7738c$export$174bb771924e7eb1,
    inverse: $dc8af4db6ad7738c$export$70ae2c07e401031b,
    names: $dc8af4db6ad7738c$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");

var $ef5fU = parcelRequire("ef5fU");

var $4MKOs = parcelRequire("4MKOs");

var $7B7Eg = parcelRequire("7B7Eg");
function $107edd792260bfee$export$2e2bcd8739ae039(eccent, q) {
    var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));
    if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {
        if (q < 0) return -1 * (0, $7B7Eg.HALF_PI);
        else return 0, $7B7Eg.HALF_PI;
    }
    //var phi = 0.5* q/(1-eccent*eccent);
    var phi = Math.asin(0.5 * q);
    var dphi;
    var sin_phi;
    var cos_phi;
    var con;
    for(var i = 0; i < 30; i++){
        sin_phi = Math.sin(phi);
        cos_phi = Math.cos(phi);
        con = eccent * sin_phi;
        dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
        phi += dphi;
        if (Math.abs(dphi) <= 0.0000000001) return phi;
    }
    //console.log("IQSFN-CONV:Latitude failed to converge after 30 iterations");
    return NaN;
}


function $d87c835a9bc05532$export$2cd8252107eb640b() {
    //no-op
    if (!this.sphere) this.k0 = (0, $4MKOs.default)(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
}
function $d87c835a9bc05532$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    var x, y;
    /* Forward equations
      -----------------*/ var dlon = (0, $dbd4D.default)(lon - this.long0);
    if (this.sphere) {
        x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
        y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
    } else {
        var qs = (0, $ef5fU.default)(this.e, Math.sin(lat));
        x = this.x0 + this.a * this.k0 * dlon;
        y = this.y0 + this.a * qs * 0.5 / this.k0;
    }
    p.x = x;
    p.y = y;
    return p;
}
function $d87c835a9bc05532$export$70ae2c07e401031b(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var lon, lat;
    if (this.sphere) {
        lon = (0, $dbd4D.default)(this.long0 + p.x / this.a / Math.cos(this.lat_ts));
        lat = Math.asin(p.y / this.a * Math.cos(this.lat_ts));
    } else {
        lat = (0, $107edd792260bfee$export$2e2bcd8739ae039)(this.e, 2 * p.y * this.k0 / this.a);
        lon = (0, $dbd4D.default)(this.long0 + p.x / (this.a * this.k0));
    }
    p.x = lon;
    p.y = lat;
    return p;
}
var $d87c835a9bc05532$export$e4b2ac9215619f8d = [
    "cea"
];
var $d87c835a9bc05532$export$2e2bcd8739ae039 = {
    init: $d87c835a9bc05532$export$2cd8252107eb640b,
    forward: $d87c835a9bc05532$export$174bb771924e7eb1,
    inverse: $d87c835a9bc05532$export$70ae2c07e401031b,
    names: $d87c835a9bc05532$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");

function $2a84ffb934e4751b$export$2cd8252107eb640b() {
    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    this.lat0 = this.lat0 || 0;
    this.long0 = this.long0 || 0;
    this.lat_ts = this.lat_ts || 0;
    this.title = this.title || "Equidistant Cylindrical (Plate Carre)";
    this.rc = Math.cos(this.lat_ts);
}
function $2a84ffb934e4751b$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    var dlon = (0, $dbd4D.default)(lon - this.long0);
    var dlat = (0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(lat - this.lat0);
    p.x = this.x0 + this.a * dlon * this.rc;
    p.y = this.y0 + this.a * dlat;
    return p;
}
function $2a84ffb934e4751b$export$70ae2c07e401031b(p) {
    var x = p.x;
    var y = p.y;
    p.x = (0, $dbd4D.default)(this.long0 + (x - this.x0) / (this.a * this.rc));
    p.y = (0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(this.lat0 + (y - this.y0) / this.a);
    return p;
}
var $2a84ffb934e4751b$export$e4b2ac9215619f8d = [
    "Equirectangular",
    "Equidistant_Cylindrical",
    "eqc"
];
var $2a84ffb934e4751b$export$2e2bcd8739ae039 = {
    init: $2a84ffb934e4751b$export$2cd8252107eb640b,
    forward: $2a84ffb934e4751b$export$174bb771924e7eb1,
    inverse: $2a84ffb934e4751b$export$70ae2c07e401031b,
    names: $2a84ffb934e4751b$export$e4b2ac9215619f8d
};







var $dbd4D = parcelRequire("dbd4D");



var $7B7Eg = parcelRequire("7B7Eg");

var $ac4f3e6465d17722$var$MAX_ITER = 20;
function $ac4f3e6465d17722$export$2cd8252107eb640b() {
    /* Place parameters in static storage for common use
      -------------------------------------------------*/ this.temp = this.b / this.a;
    this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles
    this.e = Math.sqrt(this.es);
    this.e0 = (0, $1a13b2496406fa53$export$2e2bcd8739ae039)(this.es);
    this.e1 = (0, $2cd33ad30cf5c777$export$2e2bcd8739ae039)(this.es);
    this.e2 = (0, $103627984db2c044$export$2e2bcd8739ae039)(this.es);
    this.e3 = (0, $9c2c69739eb169e0$export$2e2bcd8739ae039)(this.es);
    this.ml0 = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas
}
function $ac4f3e6465d17722$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    var x, y, el;
    var dlon = (0, $dbd4D.default)(lon - this.long0);
    el = dlon * Math.sin(lat);
    if (this.sphere) {
        if (Math.abs(lat) <= (0, $7B7Eg.EPSLN)) {
            x = this.a * dlon;
            y = -1 * this.a * this.lat0;
        } else {
            x = this.a * Math.sin(el) / Math.tan(lat);
            y = this.a * ((0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
        }
    } else if (Math.abs(lat) <= (0, $7B7Eg.EPSLN)) {
        x = this.a * dlon;
        y = -1 * this.ml0;
    } else {
        var nl = (0, $cc929bf1073a4f4a$export$2e2bcd8739ae039)(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
        x = nl * Math.sin(el);
        y = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
    }
    p.x = x + this.x0;
    p.y = y + this.y0;
    return p;
}
function $ac4f3e6465d17722$export$70ae2c07e401031b(p) {
    var lon, lat, x, y, i;
    var al, bl;
    var phi, dphi;
    x = p.x - this.x0;
    y = p.y - this.y0;
    if (this.sphere) {
        if (Math.abs(y + this.a * this.lat0) <= (0, $7B7Eg.EPSLN)) {
            lon = (0, $dbd4D.default)(x / this.a + this.long0);
            lat = 0;
        } else {
            al = this.lat0 + y / this.a;
            bl = x * x / this.a / this.a + al * al;
            phi = al;
            var tanphi;
            for(i = $ac4f3e6465d17722$var$MAX_ITER; i; --i){
                tanphi = Math.tan(phi);
                dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
                phi += dphi;
                if (Math.abs(dphi) <= (0, $7B7Eg.EPSLN)) {
                    lat = phi;
                    break;
                }
            }
            lon = (0, $dbd4D.default)(this.long0 + Math.asin(x * Math.tan(phi) / this.a) / Math.sin(lat));
        }
    } else if (Math.abs(y + this.ml0) <= (0, $7B7Eg.EPSLN)) {
        lat = 0;
        lon = (0, $dbd4D.default)(this.long0 + x / this.a);
    } else {
        al = (this.ml0 + y) / this.a;
        bl = x * x / this.a / this.a + al * al;
        phi = al;
        var cl, mln, mlnp, ma;
        var con;
        for(i = $ac4f3e6465d17722$var$MAX_ITER; i; --i){
            con = this.e * Math.sin(phi);
            cl = Math.sqrt(1 - con * con) * Math.tan(phi);
            mln = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, phi);
            mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
            ma = mln / this.a;
            dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
            phi -= dphi;
            if (Math.abs(dphi) <= (0, $7B7Eg.EPSLN)) {
                lat = phi;
                break;
            }
        }
        //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);
        cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
        lon = (0, $dbd4D.default)(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
    }
    p.x = lon;
    p.y = lat;
    return p;
}
var $ac4f3e6465d17722$export$e4b2ac9215619f8d = [
    "Polyconic",
    "poly"
];
var $ac4f3e6465d17722$export$2e2bcd8739ae039 = {
    init: $ac4f3e6465d17722$export$2cd8252107eb640b,
    forward: $ac4f3e6465d17722$export$174bb771924e7eb1,
    inverse: $ac4f3e6465d17722$export$70ae2c07e401031b,
    names: $ac4f3e6465d17722$export$e4b2ac9215619f8d
};



var $9FhcM = parcelRequire("9FhcM");

var $dbd4D = parcelRequire("dbd4D");
function $419dc12f1a350df5$export$2cd8252107eb640b() {
//no-op
}
function $419dc12f1a350df5$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
      -----------------*/ var dlon = (0, $dbd4D.default)(lon - this.long0);
    var x = this.x0 + this.a * dlon;
    var y = this.y0 + this.a * Math.log(Math.tan(Math.PI / 4 + lat / 2.5)) * 1.25;
    p.x = x;
    p.y = y;
    return p;
}
function $419dc12f1a350df5$export$70ae2c07e401031b(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var lon = (0, $dbd4D.default)(this.long0 + p.x / this.a);
    var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);
    p.x = lon;
    p.y = lat;
    return p;
}
var $419dc12f1a350df5$export$e4b2ac9215619f8d = [
    "Miller_Cylindrical",
    "mill"
];
var $419dc12f1a350df5$export$2e2bcd8739ae039 = {
    init: $419dc12f1a350df5$export$2cd8252107eb640b,
    forward: $419dc12f1a350df5$export$174bb771924e7eb1,
    inverse: $419dc12f1a350df5$export$70ae2c07e401031b,
    names: $419dc12f1a350df5$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");


var $dMOv3 = parcelRequire("dMOv3");

var $doDgE = parcelRequire("doDgE");

var $jZzoQ = parcelRequire("jZzoQ");

var $7B7Eg = parcelRequire("7B7Eg");

var $7sb7x = parcelRequire("7sb7x");
var $9bb4cd81347ac975$var$MAX_ITER = 20;
function $9bb4cd81347ac975$export$2cd8252107eb640b() {
    /* Place parameters in static storage for common use
    -------------------------------------------------*/ if (!this.sphere) this.en = (0, $dMOv3.default)(this.es);
    else {
        this.n = 1;
        this.m = 0;
        this.es = 0;
        this.C_y = Math.sqrt((this.m + 1) / this.n);
        this.C_x = this.C_y / (this.m + 1);
    }
}
function $9bb4cd81347ac975$export$174bb771924e7eb1(p) {
    var x, y;
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
    -----------------*/ lon = (0, $dbd4D.default)(lon - this.long0);
    if (this.sphere) {
        if (!this.m) lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
        else {
            var k = this.n * Math.sin(lat);
            for(var i = $9bb4cd81347ac975$var$MAX_ITER; i; --i){
                var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
                lat -= V;
                if (Math.abs(V) < (0, $7B7Eg.EPSLN)) break;
            }
        }
        x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
        y = this.a * this.C_y * lat;
    } else {
        var s = Math.sin(lat);
        var c = Math.cos(lat);
        y = this.a * (0, $doDgE.default)(lat, s, c, this.en);
        x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
    }
    p.x = x;
    p.y = y;
    return p;
}
function $9bb4cd81347ac975$export$70ae2c07e401031b(p) {
    var lat, temp, lon, s;
    p.x -= this.x0;
    lon = p.x / this.a;
    p.y -= this.y0;
    lat = p.y / this.a;
    if (this.sphere) {
        lat /= this.C_y;
        lon = lon / (this.C_x * (this.m + Math.cos(lat)));
        if (this.m) lat = (0, $7sb7x.default)((this.m * lat + Math.sin(lat)) / this.n);
        else if (this.n !== 1) lat = (0, $7sb7x.default)(Math.sin(lat) / this.n);
        lon = (0, $dbd4D.default)(lon + this.long0);
        lat = (0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(lat);
    } else {
        lat = (0, $jZzoQ.default)(p.y / this.a, this.es, this.en);
        s = Math.abs(lat);
        if (s < (0, $7B7Eg.HALF_PI)) {
            s = Math.sin(lat);
            temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));
            //temp = this.long0 + p.x / (this.a * Math.cos(lat));
            lon = (0, $dbd4D.default)(temp);
        } else if (s - (0, $7B7Eg.EPSLN) < (0, $7B7Eg.HALF_PI)) lon = this.long0;
    }
    p.x = lon;
    p.y = lat;
    return p;
}
var $9bb4cd81347ac975$export$e4b2ac9215619f8d = [
    "Sinusoidal",
    "sinu"
];
var $9bb4cd81347ac975$export$2e2bcd8739ae039 = {
    init: $9bb4cd81347ac975$export$2cd8252107eb640b,
    forward: $9bb4cd81347ac975$export$174bb771924e7eb1,
    inverse: $9bb4cd81347ac975$export$70ae2c07e401031b,
    names: $9bb4cd81347ac975$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");

var $7B7Eg = parcelRequire("7B7Eg");
function $5b0704453a45ce0e$export$2cd8252107eb640b() {}
function $5b0704453a45ce0e$export$174bb771924e7eb1(p) {
    /* Forward equations
      -----------------*/ var lon = p.x;
    var lat = p.y;
    var delta_lon = (0, $dbd4D.default)(lon - this.long0);
    var theta = lat;
    var con = Math.PI * Math.sin(lat);
    /* Iterate using the Newton-Raphson method to find theta
      -----------------------------------------------------*/ while(true){
        var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
        theta += delta_theta;
        if (Math.abs(delta_theta) < (0, $7B7Eg.EPSLN)) break;
    }
    theta /= 2;
    /* If the latitude is 90 deg, force the x coordinate to be "0 + false easting"
       this is done here because of precision problems with "cos(theta)"
       --------------------------------------------------------------------------*/ if (Math.PI / 2 - Math.abs(lat) < (0, $7B7Eg.EPSLN)) delta_lon = 0;
    var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
    var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;
    p.x = x;
    p.y = y;
    return p;
}
function $5b0704453a45ce0e$export$70ae2c07e401031b(p) {
    var theta;
    var arg;
    /* Inverse equations
      -----------------*/ p.x -= this.x0;
    p.y -= this.y0;
    arg = p.y / (1.4142135623731 * this.a);
    /* Because of division by zero problems, 'arg' can not be 1.  Therefore
       a number very close to one is used instead.
       -------------------------------------------------------------------*/ if (Math.abs(arg) > 0.999999999999) arg = 0.999999999999;
    theta = Math.asin(arg);
    var lon = (0, $dbd4D.default)(this.long0 + p.x / (0.900316316158 * this.a * Math.cos(theta)));
    if (lon < -Math.PI) lon = -Math.PI;
    if (lon > Math.PI) lon = Math.PI;
    arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;
    if (Math.abs(arg) > 1) arg = 1;
    var lat = Math.asin(arg);
    p.x = lon;
    p.y = lat;
    return p;
}
var $5b0704453a45ce0e$export$e4b2ac9215619f8d = [
    "Mollweide",
    "moll"
];
var $5b0704453a45ce0e$export$2e2bcd8739ae039 = {
    init: $5b0704453a45ce0e$export$2cd8252107eb640b,
    forward: $5b0704453a45ce0e$export$174bb771924e7eb1,
    inverse: $5b0704453a45ce0e$export$70ae2c07e401031b,
    names: $5b0704453a45ce0e$export$e4b2ac9215619f8d
};







var $4MKOs = parcelRequire("4MKOs");


var $dbd4D = parcelRequire("dbd4D");



var $7B7Eg = parcelRequire("7B7Eg");
function $8e1785d1c11b6c16$export$2cd8252107eb640b() {
    /* Place parameters in static storage for common use
      -------------------------------------------------*/ // Standard Parallels cannot be equal and on opposite sides of the equator
    if (Math.abs(this.lat1 + this.lat2) < (0, $7B7Eg.EPSLN)) return;
    this.lat2 = this.lat2 || this.lat1;
    this.temp = this.b / this.a;
    this.es = 1 - Math.pow(this.temp, 2);
    this.e = Math.sqrt(this.es);
    this.e0 = (0, $1a13b2496406fa53$export$2e2bcd8739ae039)(this.es);
    this.e1 = (0, $2cd33ad30cf5c777$export$2e2bcd8739ae039)(this.es);
    this.e2 = (0, $103627984db2c044$export$2e2bcd8739ae039)(this.es);
    this.e3 = (0, $9c2c69739eb169e0$export$2e2bcd8739ae039)(this.es);
    this.sinphi = Math.sin(this.lat1);
    this.cosphi = Math.cos(this.lat1);
    this.ms1 = (0, $4MKOs.default)(this.e, this.sinphi, this.cosphi);
    this.ml1 = (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, this.lat1);
    if (Math.abs(this.lat1 - this.lat2) < (0, $7B7Eg.EPSLN)) this.ns = this.sinphi;
    else {
        this.sinphi = Math.sin(this.lat2);
        this.cosphi = Math.cos(this.lat2);
        this.ms2 = (0, $4MKOs.default)(this.e, this.sinphi, this.cosphi);
        this.ml2 = (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, this.lat2);
        this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
    }
    this.g = this.ml1 + this.ms1 / this.ns;
    this.ml0 = (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, this.lat0);
    this.rh = this.a * (this.g - this.ml0);
}
function $8e1785d1c11b6c16$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    var rh1;
    /* Forward equations
      -----------------*/ if (this.sphere) rh1 = this.a * (this.g - lat);
    else {
        var ml = (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(this.e0, this.e1, this.e2, this.e3, lat);
        rh1 = this.a * (this.g - ml);
    }
    var theta = this.ns * (0, $dbd4D.default)(lon - this.long0);
    var x = this.x0 + rh1 * Math.sin(theta);
    var y = this.y0 + this.rh - rh1 * Math.cos(theta);
    p.x = x;
    p.y = y;
    return p;
}
function $8e1785d1c11b6c16$export$70ae2c07e401031b(p) {
    p.x -= this.x0;
    p.y = this.rh - p.y + this.y0;
    var con, rh1, lat, lon;
    if (this.ns >= 0) {
        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
        con = 1;
    } else {
        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
        con = -1;
    }
    var theta = 0;
    if (rh1 !== 0) theta = Math.atan2(con * p.x, con * p.y);
    if (this.sphere) {
        lon = (0, $dbd4D.default)(this.long0 + theta / this.ns);
        lat = (0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(this.g - rh1 / this.a);
        p.x = lon;
        p.y = lat;
        return p;
    } else {
        var ml = this.g - rh1 / this.a;
        lat = (0, $36c01451f23e2b38$export$2e2bcd8739ae039)(ml, this.e0, this.e1, this.e2, this.e3);
        lon = (0, $dbd4D.default)(this.long0 + theta / this.ns);
        p.x = lon;
        p.y = lat;
        return p;
    }
}
var $8e1785d1c11b6c16$export$e4b2ac9215619f8d = [
    "Equidistant_Conic",
    "eqdc"
];
var $8e1785d1c11b6c16$export$2e2bcd8739ae039 = {
    init: $8e1785d1c11b6c16$export$2cd8252107eb640b,
    forward: $8e1785d1c11b6c16$export$174bb771924e7eb1,
    inverse: $8e1785d1c11b6c16$export$70ae2c07e401031b,
    names: $8e1785d1c11b6c16$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");

var $7B7Eg = parcelRequire("7B7Eg");

var $7sb7x = parcelRequire("7sb7x");
function $da3a30e3ca751984$export$2cd8252107eb640b() {
    //this.R = 6370997; //Radius of earth
    this.R = this.a;
}
function $da3a30e3ca751984$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
    -----------------*/ var dlon = (0, $dbd4D.default)(lon - this.long0);
    var x, y;
    if (Math.abs(lat) <= (0, $7B7Eg.EPSLN)) {
        x = this.x0 + this.R * dlon;
        y = this.y0;
    }
    var theta = (0, $7sb7x.default)(2 * Math.abs(lat / Math.PI));
    if (Math.abs(dlon) <= (0, $7B7Eg.EPSLN) || Math.abs(Math.abs(lat) - (0, $7B7Eg.HALF_PI)) <= (0, $7B7Eg.EPSLN)) {
        x = this.x0;
        if (lat >= 0) y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
        else y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
    //  return(OK);
    }
    var al = 0.5 * Math.abs(Math.PI / dlon - dlon / Math.PI);
    var asq = al * al;
    var sinth = Math.sin(theta);
    var costh = Math.cos(theta);
    var g = costh / (sinth + costh - 1);
    var gsq = g * g;
    var m = g * (2 / sinth - 1);
    var msq = m * m;
    var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);
    if (dlon < 0) con = -con;
    x = this.x0 + con;
    //con = Math.abs(con / (Math.PI * this.R));
    var q = asq + g;
    con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);
    if (lat >= 0) //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
    y = this.y0 + con;
    else //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
    y = this.y0 - con;
    p.x = x;
    p.y = y;
    return p;
}
function $da3a30e3ca751984$export$70ae2c07e401031b(p) {
    var lon, lat;
    var xx, yy, xys, c1, c2, c3;
    var a1;
    var m1;
    var con;
    var th1;
    var d;
    /* inverse equations
    -----------------*/ p.x -= this.x0;
    p.y -= this.y0;
    con = Math.PI * this.R;
    xx = p.x / con;
    yy = p.y / con;
    xys = xx * xx + yy * yy;
    c1 = -Math.abs(yy) * (1 + xys);
    c2 = c1 - 2 * yy * yy + xx * xx;
    c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
    d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
    a1 = (c1 - c2 * c2 / 3 / c3) / c3;
    m1 = 2 * Math.sqrt(-a1 / 3);
    con = 3 * d / a1 / m1;
    if (Math.abs(con) > 1) {
        if (con >= 0) con = 1;
        else con = -1;
    }
    th1 = Math.acos(con) / 3;
    if (p.y >= 0) lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
    else lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
    if (Math.abs(xx) < (0, $7B7Eg.EPSLN)) lon = this.long0;
    else lon = (0, $dbd4D.default)(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
    p.x = lon;
    p.y = lat;
    return p;
}
var $da3a30e3ca751984$export$e4b2ac9215619f8d = [
    "Van_der_Grinten_I",
    "VanDerGrinten",
    "vandg"
];
var $da3a30e3ca751984$export$2e2bcd8739ae039 = {
    init: $da3a30e3ca751984$export$2cd8252107eb640b,
    forward: $da3a30e3ca751984$export$174bb771924e7eb1,
    inverse: $da3a30e3ca751984$export$70ae2c07e401031b,
    names: $da3a30e3ca751984$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");

var $7B7Eg = parcelRequire("7B7Eg");







var $7sb7x = parcelRequire("7sb7x");

function $0d20bac18942304a$export$2cd8252107eb640b() {
    this.sin_p12 = Math.sin(this.lat0);
    this.cos_p12 = Math.cos(this.lat0);
}
function $0d20bac18942304a$export$174bb771924e7eb1(p) {
    var lon = p.x;
    var lat = p.y;
    var sinphi = Math.sin(p.y);
    var cosphi = Math.cos(p.y);
    var dlon = (0, $dbd4D.default)(lon - this.long0);
    var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;
    if (this.sphere) {
        if (Math.abs(this.sin_p12 - 1) <= (0, $7B7Eg.EPSLN)) {
            //North Pole case
            p.x = this.x0 + this.a * ((0, $7B7Eg.HALF_PI) - lat) * Math.sin(dlon);
            p.y = this.y0 - this.a * ((0, $7B7Eg.HALF_PI) - lat) * Math.cos(dlon);
            return p;
        } else if (Math.abs(this.sin_p12 + 1) <= (0, $7B7Eg.EPSLN)) {
            //South Pole case
            p.x = this.x0 + this.a * ((0, $7B7Eg.HALF_PI) + lat) * Math.sin(dlon);
            p.y = this.y0 + this.a * ((0, $7B7Eg.HALF_PI) + lat) * Math.cos(dlon);
            return p;
        } else {
            //default case
            cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
            c = Math.acos(cos_c);
            kp = c ? c / Math.sin(c) : 1;
            p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
            p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
            return p;
        }
    } else {
        e0 = (0, $1a13b2496406fa53$export$2e2bcd8739ae039)(this.es);
        e1 = (0, $2cd33ad30cf5c777$export$2e2bcd8739ae039)(this.es);
        e2 = (0, $103627984db2c044$export$2e2bcd8739ae039)(this.es);
        e3 = (0, $9c2c69739eb169e0$export$2e2bcd8739ae039)(this.es);
        if (Math.abs(this.sin_p12 - 1) <= (0, $7B7Eg.EPSLN)) {
            //North Pole case
            Mlp = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(e0, e1, e2, e3, (0, $7B7Eg.HALF_PI));
            Ml = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(e0, e1, e2, e3, lat);
            p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
            p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
            return p;
        } else if (Math.abs(this.sin_p12 + 1) <= (0, $7B7Eg.EPSLN)) {
            //South Pole case
            Mlp = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(e0, e1, e2, e3, (0, $7B7Eg.HALF_PI));
            Ml = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(e0, e1, e2, e3, lat);
            p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
            p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
            return p;
        } else {
            //Default case
            tanphi = sinphi / cosphi;
            Nl1 = (0, $cc929bf1073a4f4a$export$2e2bcd8739ae039)(this.a, this.e, this.sin_p12);
            Nl = (0, $cc929bf1073a4f4a$export$2e2bcd8739ae039)(this.a, this.e, sinphi);
            psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));
            Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));
            if (Az === 0) s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
            else if (Math.abs(Math.abs(Az) - Math.PI) <= (0, $7B7Eg.EPSLN)) s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
            else s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));
            G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);
            H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);
            GH = G * H;
            Hs = H * H;
            s2 = s * s;
            s3 = s2 * s;
            s4 = s3 * s;
            s5 = s4 * s;
            c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);
            p.x = this.x0 + c * Math.sin(Az);
            p.y = this.y0 + c * Math.cos(Az);
            return p;
        }
    }
}
function $0d20bac18942304a$export$70ae2c07e401031b(p) {
    p.x -= this.x0;
    p.y -= this.y0;
    var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;
    if (this.sphere) {
        rh = Math.sqrt(p.x * p.x + p.y * p.y);
        if (rh > 2 * (0, $7B7Eg.HALF_PI) * this.a) return;
        z = rh / this.a;
        sinz = Math.sin(z);
        cosz = Math.cos(z);
        lon = this.long0;
        if (Math.abs(rh) <= (0, $7B7Eg.EPSLN)) lat = this.lat0;
        else {
            lat = (0, $7sb7x.default)(cosz * this.sin_p12 + p.y * sinz * this.cos_p12 / rh);
            con = Math.abs(this.lat0) - (0, $7B7Eg.HALF_PI);
            if (Math.abs(con) <= (0, $7B7Eg.EPSLN)) {
                if (this.lat0 >= 0) lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x, -p.y));
                else lon = (0, $dbd4D.default)(this.long0 - Math.atan2(-p.x, p.y));
            } else /*con = cosz - this.sin_p12 * Math.sin(lat);
        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {
          //no-op, just keep the lon value as is
        } else {
          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));
          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));
        }*/ lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
        }
        p.x = lon;
        p.y = lat;
        return p;
    } else {
        e0 = (0, $1a13b2496406fa53$export$2e2bcd8739ae039)(this.es);
        e1 = (0, $2cd33ad30cf5c777$export$2e2bcd8739ae039)(this.es);
        e2 = (0, $103627984db2c044$export$2e2bcd8739ae039)(this.es);
        e3 = (0, $9c2c69739eb169e0$export$2e2bcd8739ae039)(this.es);
        if (Math.abs(this.sin_p12 - 1) <= (0, $7B7Eg.EPSLN)) {
            //North pole case
            Mlp = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(e0, e1, e2, e3, (0, $7B7Eg.HALF_PI));
            rh = Math.sqrt(p.x * p.x + p.y * p.y);
            M = Mlp - rh;
            lat = (0, $36c01451f23e2b38$export$2e2bcd8739ae039)(M / this.a, e0, e1, e2, e3);
            lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x, -1 * p.y));
            p.x = lon;
            p.y = lat;
            return p;
        } else if (Math.abs(this.sin_p12 + 1) <= (0, $7B7Eg.EPSLN)) {
            //South pole case
            Mlp = this.a * (0, $d53bef51adc5c7b8$export$2e2bcd8739ae039)(e0, e1, e2, e3, (0, $7B7Eg.HALF_PI));
            rh = Math.sqrt(p.x * p.x + p.y * p.y);
            M = rh - Mlp;
            lat = (0, $36c01451f23e2b38$export$2e2bcd8739ae039)(M / this.a, e0, e1, e2, e3);
            lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x, p.y));
            p.x = lon;
            p.y = lat;
            return p;
        } else {
            //default case
            rh = Math.sqrt(p.x * p.x + p.y * p.y);
            Az = Math.atan2(p.x, p.y);
            N1 = (0, $cc929bf1073a4f4a$export$2e2bcd8739ae039)(this.a, this.e, this.sin_p12);
            cosAz = Math.cos(Az);
            tmp = this.e * this.cos_p12 * cosAz;
            A = -tmp * tmp / (1 - this.es);
            B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);
            D = rh / N1;
            Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;
            F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;
            psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);
            lon = (0, $dbd4D.default)(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));
            sinpsi = Math.sin(psi);
            lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));
            p.x = lon;
            p.y = lat;
            return p;
        }
    }
}
var $0d20bac18942304a$export$e4b2ac9215619f8d = [
    "Azimuthal_Equidistant",
    "aeqd"
];
var $0d20bac18942304a$export$2e2bcd8739ae039 = {
    init: $0d20bac18942304a$export$2cd8252107eb640b,
    forward: $0d20bac18942304a$export$174bb771924e7eb1,
    inverse: $0d20bac18942304a$export$70ae2c07e401031b,
    names: $0d20bac18942304a$export$e4b2ac9215619f8d
};



var $dbd4D = parcelRequire("dbd4D");

var $7sb7x = parcelRequire("7sb7x");

var $7B7Eg = parcelRequire("7B7Eg");
function $7c472ee478505ffb$export$2cd8252107eb640b() {
    //double temp;      /* temporary variable    */
    /* Place parameters in static storage for common use
      -------------------------------------------------*/ this.sin_p14 = Math.sin(this.lat0);
    this.cos_p14 = Math.cos(this.lat0);
}
function $7c472ee478505ffb$export$174bb771924e7eb1(p) {
    var sinphi, cosphi; /* sin and cos value        */ 
    var dlon; /* delta longitude value      */ 
    var coslon; /* cos of longitude        */ 
    var ksp; /* scale factor          */ 
    var g, x, y;
    var lon = p.x;
    var lat = p.y;
    /* Forward equations
      -----------------*/ dlon = (0, $dbd4D.default)(lon - this.long0);
    sinphi = Math.sin(lat);
    cosphi = Math.cos(lat);
    coslon = Math.cos(dlon);
    g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
    ksp = 1;
    if (g > 0 || Math.abs(g) <= (0, $7B7Eg.EPSLN)) {
        x = this.a * ksp * cosphi * Math.sin(dlon);
        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
    }
    p.x = x;
    p.y = y;
    return p;
}
function $7c472ee478505ffb$export$70ae2c07e401031b(p) {
    var rh; /* height above ellipsoid      */ 
    var z; /* angle          */ 
    var sinz, cosz; /* sin of z and cos of z      */ 
    var con;
    var lon, lat;
    /* Inverse equations
      -----------------*/ p.x -= this.x0;
    p.y -= this.y0;
    rh = Math.sqrt(p.x * p.x + p.y * p.y);
    z = (0, $7sb7x.default)(rh / this.a);
    sinz = Math.sin(z);
    cosz = Math.cos(z);
    lon = this.long0;
    if (Math.abs(rh) <= (0, $7B7Eg.EPSLN)) {
        lat = this.lat0;
        p.x = lon;
        p.y = lat;
        return p;
    }
    lat = (0, $7sb7x.default)(cosz * this.sin_p14 + p.y * sinz * this.cos_p14 / rh);
    con = Math.abs(this.lat0) - (0, $7B7Eg.HALF_PI);
    if (Math.abs(con) <= (0, $7B7Eg.EPSLN)) {
        if (this.lat0 >= 0) lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x, -p.y));
        else lon = (0, $dbd4D.default)(this.long0 - Math.atan2(-p.x, p.y));
        p.x = lon;
        p.y = lat;
        return p;
    }
    lon = (0, $dbd4D.default)(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
    p.x = lon;
    p.y = lat;
    return p;
}
var $7c472ee478505ffb$export$e4b2ac9215619f8d = [
    "ortho"
];
var $7c472ee478505ffb$export$2e2bcd8739ae039 = {
    init: $7c472ee478505ffb$export$2cd8252107eb640b,
    forward: $7c472ee478505ffb$export$174bb771924e7eb1,
    inverse: $7c472ee478505ffb$export$70ae2c07e401031b,
    names: $7c472ee478505ffb$export$e4b2ac9215619f8d
};


// QSC projection rewritten from the original PROJ4
// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c

var $7B7Eg = parcelRequire("7B7Eg");
/* constants */ var $e2b671b4af6fb0f4$var$FACE_ENUM = {
    FRONT: 1,
    RIGHT: 2,
    BACK: 3,
    LEFT: 4,
    TOP: 5,
    BOTTOM: 6
};
var $e2b671b4af6fb0f4$var$AREA_ENUM = {
    AREA_0: 1,
    AREA_1: 2,
    AREA_2: 3,
    AREA_3: 4
};
function $e2b671b4af6fb0f4$export$2cd8252107eb640b() {
    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    this.lat0 = this.lat0 || 0;
    this.long0 = this.long0 || 0;
    this.lat_ts = this.lat_ts || 0;
    this.title = this.title || "Quadrilateralized Spherical Cube";
    /* Determine the cube face from the center of projection. */ if (this.lat0 >= (0, $7B7Eg.HALF_PI) - (0, $7B7Eg.FORTPI) / 2.0) this.face = $e2b671b4af6fb0f4$var$FACE_ENUM.TOP;
    else if (this.lat0 <= -((0, $7B7Eg.HALF_PI) - (0, $7B7Eg.FORTPI) / 2.0)) this.face = $e2b671b4af6fb0f4$var$FACE_ENUM.BOTTOM;
    else if (Math.abs(this.long0) <= (0, $7B7Eg.FORTPI)) this.face = $e2b671b4af6fb0f4$var$FACE_ENUM.FRONT;
    else if (Math.abs(this.long0) <= (0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI)) this.face = this.long0 > 0.0 ? $e2b671b4af6fb0f4$var$FACE_ENUM.RIGHT : $e2b671b4af6fb0f4$var$FACE_ENUM.LEFT;
    else this.face = $e2b671b4af6fb0f4$var$FACE_ENUM.BACK;
    /* Fill in useful values for the ellipsoid <-> sphere shift
   * described in [LK12]. */ if (this.es !== 0) {
        this.one_minus_f = 1 - (this.a - this.b) / this.a;
        this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;
    }
}
function $e2b671b4af6fb0f4$export$174bb771924e7eb1(p) {
    var xy = {
        x: 0,
        y: 0
    };
    var lat, lon;
    var theta, phi;
    var t, mu;
    /* nu; */ var area = {
        value: 0
    };
    // move lon according to projection's lon
    p.x -= this.long0;
    /* Convert the geodetic latitude to a geocentric latitude.
   * This corresponds to the shift from the ellipsoid to the sphere
   * described in [LK12]. */ if (this.es !== 0) lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));
    else lat = p.y;
    /* Convert the input lat, lon into theta, phi as used by QSC.
   * This depends on the cube face and the area on it.
   * For the top and bottom face, we can compute theta and phi
   * directly from phi, lam. For the other faces, we must use
   * unit sphere cartesian coordinates as an intermediate step. */ lon = p.x; //lon = lp.lam;
    if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.TOP) {
        phi = (0, $7B7Eg.HALF_PI) - lat;
        if (lon >= (0, $7B7Eg.FORTPI) && lon <= (0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI)) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0;
            theta = lon - (0, $7B7Eg.HALF_PI);
        } else if (lon > (0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI) || lon <= -((0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI))) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1;
            theta = lon > 0.0 ? lon - (0, $7B7Eg.SPI) : lon + (0, $7B7Eg.SPI);
        } else if (lon > -((0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI)) && lon <= -(0, $7B7Eg.FORTPI)) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2;
            theta = lon + (0, $7B7Eg.HALF_PI);
        } else {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_3;
            theta = lon;
        }
    } else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.BOTTOM) {
        phi = (0, $7B7Eg.HALF_PI) + lat;
        if (lon >= (0, $7B7Eg.FORTPI) && lon <= (0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI)) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0;
            theta = -lon + (0, $7B7Eg.HALF_PI);
        } else if (lon < (0, $7B7Eg.FORTPI) && lon >= -(0, $7B7Eg.FORTPI)) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1;
            theta = -lon;
        } else if (lon < -(0, $7B7Eg.FORTPI) && lon >= -((0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI))) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2;
            theta = -lon - (0, $7B7Eg.HALF_PI);
        } else {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_3;
            theta = lon > 0.0 ? -lon + (0, $7B7Eg.SPI) : -lon - (0, $7B7Eg.SPI);
        }
    } else {
        var q, r, s;
        var sinlat, coslat;
        var sinlon, coslon;
        if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.RIGHT) lon = $e2b671b4af6fb0f4$var$qsc_shift_lon_origin(lon, +(0, $7B7Eg.HALF_PI));
        else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.BACK) lon = $e2b671b4af6fb0f4$var$qsc_shift_lon_origin(lon, +(0, $7B7Eg.SPI));
        else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.LEFT) lon = $e2b671b4af6fb0f4$var$qsc_shift_lon_origin(lon, -(0, $7B7Eg.HALF_PI));
        sinlat = Math.sin(lat);
        coslat = Math.cos(lat);
        sinlon = Math.sin(lon);
        coslon = Math.cos(lon);
        q = coslat * coslon;
        r = coslat * sinlon;
        s = sinlat;
        if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.FRONT) {
            phi = Math.acos(q);
            theta = $e2b671b4af6fb0f4$var$qsc_fwd_equat_face_theta(phi, s, r, area);
        } else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.RIGHT) {
            phi = Math.acos(r);
            theta = $e2b671b4af6fb0f4$var$qsc_fwd_equat_face_theta(phi, s, -q, area);
        } else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.BACK) {
            phi = Math.acos(-q);
            theta = $e2b671b4af6fb0f4$var$qsc_fwd_equat_face_theta(phi, s, -r, area);
        } else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.LEFT) {
            phi = Math.acos(-r);
            theta = $e2b671b4af6fb0f4$var$qsc_fwd_equat_face_theta(phi, s, q, area);
        } else {
            /* Impossible */ phi = theta = 0;
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0;
        }
    }
    /* Compute mu and nu for the area of definition.
   * For mu, see Eq. (3-21) in [OL76], but note the typos:
   * compare with Eq. (3-14). For nu, see Eq. (3-38). */ mu = Math.atan(12 / (0, $7B7Eg.SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos((0, $7B7Eg.FORTPI))) - (0, $7B7Eg.HALF_PI)));
    t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));
    /* Apply the result to the real area. */ if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1) mu += (0, $7B7Eg.HALF_PI);
    else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2) mu += (0, $7B7Eg.SPI);
    else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_3) mu += 1.5 * (0, $7B7Eg.SPI);
    /* Now compute x, y from mu and nu */ xy.x = t * Math.cos(mu);
    xy.y = t * Math.sin(mu);
    xy.x = xy.x * this.a + this.x0;
    xy.y = xy.y * this.a + this.y0;
    p.x = xy.x;
    p.y = xy.y;
    return p;
}
function $e2b671b4af6fb0f4$export$70ae2c07e401031b(p) {
    var lp = {
        lam: 0,
        phi: 0
    };
    var mu, nu, cosmu, tannu;
    var tantheta, theta, cosphi, phi;
    var t;
    var area = {
        value: 0
    };
    /* de-offset */ p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;
    /* Convert the input x, y to the mu and nu angles as used by QSC.
   * This depends on the area of the cube face. */ nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));
    mu = Math.atan2(p.y, p.x);
    if (p.x >= 0.0 && p.x >= Math.abs(p.y)) area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0;
    else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {
        area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1;
        mu -= (0, $7B7Eg.HALF_PI);
    } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {
        area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2;
        mu = mu < 0.0 ? mu + (0, $7B7Eg.SPI) : mu - (0, $7B7Eg.SPI);
    } else {
        area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_3;
        mu += (0, $7B7Eg.HALF_PI);
    }
    /* Compute phi and theta for the area of definition.
   * The inverse projection is not described in the original paper, but some
   * good hints can be found here (as of 2011-12-14):
   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302
   * (search for "Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>") */ t = (0, $7B7Eg.SPI) / 12 * Math.tan(mu);
    tantheta = Math.sin(t) / (Math.cos(t) - 1 / Math.sqrt(2));
    theta = Math.atan(tantheta);
    cosmu = Math.cos(mu);
    tannu = Math.tan(nu);
    cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));
    if (cosphi < -1) cosphi = -1;
    else if (cosphi > 1) cosphi = 1;
    /* Apply the result to the real area on the cube face.
   * For the top and bottom face, we can compute phi and lam directly.
   * For the other faces, we must use unit sphere cartesian coordinates
   * as an intermediate step. */ if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.TOP) {
        phi = Math.acos(cosphi);
        lp.phi = (0, $7B7Eg.HALF_PI) - phi;
        if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0) lp.lam = theta + (0, $7B7Eg.HALF_PI);
        else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1) lp.lam = theta < 0.0 ? theta + (0, $7B7Eg.SPI) : theta - (0, $7B7Eg.SPI);
        else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2) lp.lam = theta - (0, $7B7Eg.HALF_PI);
        else lp.lam = theta;
    } else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.BOTTOM) {
        phi = Math.acos(cosphi);
        lp.phi = phi - (0, $7B7Eg.HALF_PI);
        if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0) lp.lam = -theta + (0, $7B7Eg.HALF_PI);
        else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1) lp.lam = -theta;
        else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2) lp.lam = -theta - (0, $7B7Eg.HALF_PI);
        else lp.lam = theta < 0.0 ? -theta - (0, $7B7Eg.SPI) : -theta + (0, $7B7Eg.SPI);
    } else {
        /* Compute phi and lam via cartesian unit sphere coordinates. */ var q, r, s;
        q = cosphi;
        t = q * q;
        if (t >= 1) s = 0;
        else s = Math.sqrt(1 - t) * Math.sin(theta);
        t += s * s;
        if (t >= 1) r = 0;
        else r = Math.sqrt(1 - t);
        /* Rotate q,r,s into the correct area. */ if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1) {
            t = r;
            r = -s;
            s = t;
        } else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2) {
            r = -r;
            s = -s;
        } else if (area.value === $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_3) {
            t = r;
            r = s;
            s = -t;
        }
        /* Rotate q,r,s into the correct cube face. */ if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.RIGHT) {
            t = q;
            q = -r;
            r = t;
        } else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.BACK) {
            q = -q;
            r = -r;
        } else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.LEFT) {
            t = q;
            q = r;
            r = -t;
        }
        /* Now compute phi and lam from the unit sphere coordinates. */ lp.phi = Math.acos(-s) - (0, $7B7Eg.HALF_PI);
        lp.lam = Math.atan2(r, q);
        if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.RIGHT) lp.lam = $e2b671b4af6fb0f4$var$qsc_shift_lon_origin(lp.lam, -(0, $7B7Eg.HALF_PI));
        else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.BACK) lp.lam = $e2b671b4af6fb0f4$var$qsc_shift_lon_origin(lp.lam, -(0, $7B7Eg.SPI));
        else if (this.face === $e2b671b4af6fb0f4$var$FACE_ENUM.LEFT) lp.lam = $e2b671b4af6fb0f4$var$qsc_shift_lon_origin(lp.lam, +(0, $7B7Eg.HALF_PI));
    }
    /* Apply the shift from the sphere to the ellipsoid as described
   * in [LK12]. */ if (this.es !== 0) {
        var invert_sign;
        var tanphi, xa;
        invert_sign = lp.phi < 0 ? 1 : 0;
        tanphi = Math.tan(lp.phi);
        xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);
        lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));
        if (invert_sign) lp.phi = -lp.phi;
    }
    lp.lam += this.long0;
    p.x = lp.lam;
    p.y = lp.phi;
    return p;
}
/* Helper function for forward projection: compute the theta angle
 * and determine the area number. */ function $e2b671b4af6fb0f4$var$qsc_fwd_equat_face_theta(phi, y, x, area) {
    var theta;
    if (phi < (0, $7B7Eg.EPSLN)) {
        area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0;
        theta = 0.0;
    } else {
        theta = Math.atan2(y, x);
        if (Math.abs(theta) <= (0, $7B7Eg.FORTPI)) area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_0;
        else if (theta > (0, $7B7Eg.FORTPI) && theta <= (0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI)) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_1;
            theta -= (0, $7B7Eg.HALF_PI);
        } else if (theta > (0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI) || theta <= -((0, $7B7Eg.HALF_PI) + (0, $7B7Eg.FORTPI))) {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_2;
            theta = theta >= 0.0 ? theta - (0, $7B7Eg.SPI) : theta + (0, $7B7Eg.SPI);
        } else {
            area.value = $e2b671b4af6fb0f4$var$AREA_ENUM.AREA_3;
            theta += (0, $7B7Eg.HALF_PI);
        }
    }
    return theta;
}
/* Helper function: shift the longitude. */ function $e2b671b4af6fb0f4$var$qsc_shift_lon_origin(lon, offset) {
    var slon = lon + offset;
    if (slon < -(0, $7B7Eg.SPI)) slon += (0, $7B7Eg.TWO_PI);
    else if (slon > +(0, $7B7Eg.SPI)) slon -= (0, $7B7Eg.TWO_PI);
    return slon;
}
var $e2b671b4af6fb0f4$export$e4b2ac9215619f8d = [
    "Quadrilateralized Spherical Cube",
    "Quadrilateralized_Spherical_Cube",
    "qsc"
];
var $e2b671b4af6fb0f4$export$2e2bcd8739ae039 = {
    init: $e2b671b4af6fb0f4$export$2cd8252107eb640b,
    forward: $e2b671b4af6fb0f4$export$174bb771924e7eb1,
    inverse: $e2b671b4af6fb0f4$export$70ae2c07e401031b,
    names: $e2b671b4af6fb0f4$export$e4b2ac9215619f8d
};


// Robinson projection
// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c
// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039

var $7B7Eg = parcelRequire("7B7Eg");

var $dbd4D = parcelRequire("dbd4D");
var $3e20f333fd7a6b26$var$COEFS_X = [
    [
        1.0000,
        2.2199e-17,
        -0.0000715515,
        3.1103e-06
    ],
    [
        0.9986,
        -0.000482243,
        -0.000024897,
        -0.0000013309
    ],
    [
        0.9954,
        -0.00083103,
        -0.0000448605,
        -0.000000986701
    ],
    [
        0.9900,
        -0.00135364,
        -0.000059661,
        3.6777e-06
    ],
    [
        0.9822,
        -0.00167442,
        -0.00000449547,
        -0.00000572411
    ],
    [
        0.9730,
        -0.00214868,
        -0.0000903571,
        1.8736e-08
    ],
    [
        0.9600,
        -0.00305085,
        -0.0000900761,
        1.64917e-06
    ],
    [
        0.9427,
        -0.00382792,
        -0.0000653386,
        -0.0000026154
    ],
    [
        0.9216,
        -0.00467746,
        -0.00010457,
        4.81243e-06
    ],
    [
        0.8962,
        -0.00536223,
        -0.0000323831,
        -0.00000543432
    ],
    [
        0.8679,
        -0.00609363,
        -0.000113898,
        3.32484e-06
    ],
    [
        0.8350,
        -0.00698325,
        -0.0000640253,
        9.34959e-07
    ],
    [
        0.7986,
        -0.00755338,
        -0.0000500009,
        9.35324e-07
    ],
    [
        0.7597,
        -0.00798324,
        -0.000035971,
        -0.00000227626
    ],
    [
        0.7186,
        -0.00851367,
        -0.0000701149,
        -0.0000086303
    ],
    [
        0.6732,
        -0.00986209,
        -0.000199569,
        1.91974e-05
    ],
    [
        0.6213,
        -0.010418,
        8.83923e-05,
        6.24051e-06
    ],
    [
        0.5722,
        -0.00906601,
        0.000182,
        6.24051e-06
    ],
    [
        0.5322,
        -0.00677797,
        0.000275608,
        6.24051e-06
    ]
];
var $3e20f333fd7a6b26$var$COEFS_Y = [
    [
        -0.00000000000000000520417,
        0.0124,
        1.21431e-18,
        -0.0000000000845284
    ],
    [
        0.0620,
        0.0124,
        -0.00000000126793,
        4.22642e-10
    ],
    [
        0.1240,
        0.0124,
        5.07171e-09,
        -0.00000000160604
    ],
    [
        0.1860,
        0.0123999,
        -0.0000000190189,
        6.00152e-09
    ],
    [
        0.2480,
        0.0124002,
        7.10039e-08,
        -0.0000000224
    ],
    [
        0.3100,
        0.0123992,
        -0.000000264997,
        8.35986e-08
    ],
    [
        0.3720,
        0.0124029,
        9.88983e-07,
        -0.000000311994
    ],
    [
        0.4340,
        0.0123893,
        -0.00000369093,
        -0.000000435621
    ],
    [
        0.4958,
        0.0123198,
        -0.0000102252,
        -0.000000345523
    ],
    [
        0.5571,
        0.0121916,
        -0.0000154081,
        -0.000000582288
    ],
    [
        0.6176,
        0.0119938,
        -0.0000241424,
        -0.000000525327
    ],
    [
        0.6769,
        0.011713,
        -0.0000320223,
        -0.000000516405
    ],
    [
        0.7346,
        0.0113541,
        -0.0000397684,
        -0.000000609052
    ],
    [
        0.7903,
        0.0109107,
        -0.0000489042,
        -0.00000104739
    ],
    [
        0.8435,
        0.0103431,
        -0.000064615,
        -0.00000000140374
    ],
    [
        0.8936,
        0.00969686,
        -0.000064636,
        -0.000008547
    ],
    [
        0.9394,
        0.00840947,
        -0.000192841,
        -0.0000042106
    ],
    [
        0.9761,
        0.00616527,
        -0.000256,
        -0.0000042106
    ],
    [
        1.0000,
        0.00328947,
        -0.000319159,
        -0.0000042106
    ]
];
var $3e20f333fd7a6b26$var$FXC = 0.8487;
var $3e20f333fd7a6b26$var$FYC = 1.3523;
var $3e20f333fd7a6b26$var$C1 = (0, $7B7Eg.R2D) / 5; // rad to 5-degree interval
var $3e20f333fd7a6b26$var$RC1 = 1 / $3e20f333fd7a6b26$var$C1;
var $3e20f333fd7a6b26$var$NODES = 18;
var $3e20f333fd7a6b26$var$poly3_val = function(coefs, x) {
    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));
};
var $3e20f333fd7a6b26$var$poly3_der = function(coefs, x) {
    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);
};
function $3e20f333fd7a6b26$var$newton_rapshon(f_df, start, max_err, iters) {
    var x = start;
    for(; iters; --iters){
        var upd = f_df(x);
        x -= upd;
        if (Math.abs(upd) < max_err) break;
    }
    return x;
}
function $3e20f333fd7a6b26$export$2cd8252107eb640b() {
    this.x0 = this.x0 || 0;
    this.y0 = this.y0 || 0;
    this.long0 = this.long0 || 0;
    this.es = 0;
    this.title = this.title || "Robinson";
}
function $3e20f333fd7a6b26$export$174bb771924e7eb1(ll) {
    var lon = (0, $dbd4D.default)(ll.x - this.long0);
    var dphi = Math.abs(ll.y);
    var i = Math.floor(dphi * $3e20f333fd7a6b26$var$C1);
    if (i < 0) i = 0;
    else if (i >= $3e20f333fd7a6b26$var$NODES) i = $3e20f333fd7a6b26$var$NODES - 1;
    dphi = (0, $7B7Eg.R2D) * (dphi - $3e20f333fd7a6b26$var$RC1 * i);
    var xy = {
        x: $3e20f333fd7a6b26$var$poly3_val($3e20f333fd7a6b26$var$COEFS_X[i], dphi) * lon,
        y: $3e20f333fd7a6b26$var$poly3_val($3e20f333fd7a6b26$var$COEFS_Y[i], dphi)
    };
    if (ll.y < 0) xy.y = -xy.y;
    xy.x = xy.x * this.a * $3e20f333fd7a6b26$var$FXC + this.x0;
    xy.y = xy.y * this.a * $3e20f333fd7a6b26$var$FYC + this.y0;
    return xy;
}
function $3e20f333fd7a6b26$export$70ae2c07e401031b(xy) {
    var ll = {
        x: (xy.x - this.x0) / (this.a * $3e20f333fd7a6b26$var$FXC),
        y: Math.abs(xy.y - this.y0) / (this.a * $3e20f333fd7a6b26$var$FYC)
    };
    if (ll.y >= 1) {
        ll.x /= $3e20f333fd7a6b26$var$COEFS_X[$3e20f333fd7a6b26$var$NODES][0];
        ll.y = xy.y < 0 ? -(0, $7B7Eg.HALF_PI) : (0, $7B7Eg.HALF_PI);
    } else {
        // find table interval
        var i = Math.floor(ll.y * $3e20f333fd7a6b26$var$NODES);
        if (i < 0) i = 0;
        else if (i >= $3e20f333fd7a6b26$var$NODES) i = $3e20f333fd7a6b26$var$NODES - 1;
        for(;;){
            if ($3e20f333fd7a6b26$var$COEFS_Y[i][0] > ll.y) --i;
            else if ($3e20f333fd7a6b26$var$COEFS_Y[i + 1][0] <= ll.y) ++i;
            else break;
        }
        // linear interpolation in 5 degree interval
        var coefs = $3e20f333fd7a6b26$var$COEFS_Y[i];
        var t = 5 * (ll.y - coefs[0]) / ($3e20f333fd7a6b26$var$COEFS_Y[i + 1][0] - coefs[0]);
        // find t so that poly3_val(coefs, t) = ll.y
        t = $3e20f333fd7a6b26$var$newton_rapshon(function(x) {
            return ($3e20f333fd7a6b26$var$poly3_val(coefs, x) - ll.y) / $3e20f333fd7a6b26$var$poly3_der(coefs, x);
        }, t, (0, $7B7Eg.EPSLN), 100);
        ll.x /= $3e20f333fd7a6b26$var$poly3_val($3e20f333fd7a6b26$var$COEFS_X[i], t);
        ll.y = (5 * i + t) * (0, $7B7Eg.D2R);
        if (xy.y < 0) ll.y = -ll.y;
    }
    ll.x = (0, $dbd4D.default)(ll.x + this.long0);
    return ll;
}
var $3e20f333fd7a6b26$export$e4b2ac9215619f8d = [
    "Robinson",
    "robin"
];
var $3e20f333fd7a6b26$export$2e2bcd8739ae039 = {
    init: $3e20f333fd7a6b26$export$2cd8252107eb640b,
    forward: $3e20f333fd7a6b26$export$174bb771924e7eb1,
    inverse: $3e20f333fd7a6b26$export$70ae2c07e401031b,
    names: $3e20f333fd7a6b26$export$e4b2ac9215619f8d
};



function $502244ea60bce063$export$2cd8252107eb640b() {
    this.name = "geocent";
}
function $502244ea60bce063$export$174bb771924e7eb1(p) {
    var point = (0, $9492081abc6963cf$export$4a4ae2976f9a808a)(p, this.es, this.a);
    return point;
}
function $502244ea60bce063$export$70ae2c07e401031b(p) {
    var point = (0, $9492081abc6963cf$export$26210192c8922750)(p, this.es, this.a, this.b);
    return point;
}
var $502244ea60bce063$export$e4b2ac9215619f8d = [
    "Geocentric",
    "geocentric",
    "geocent",
    "Geocent"
];
var $502244ea60bce063$export$2e2bcd8739ae039 = {
    init: $502244ea60bce063$export$2cd8252107eb640b,
    forward: $502244ea60bce063$export$174bb771924e7eb1,
    inverse: $502244ea60bce063$export$70ae2c07e401031b,
    names: $502244ea60bce063$export$e4b2ac9215619f8d
};



var $7B7Eg = parcelRequire("7B7Eg");

var $9WCjH = parcelRequire("9WCjH");
var $2047387e2590e962$var$mode = {
    N_POLE: 0,
    S_POLE: 1,
    EQUIT: 2,
    OBLIQ: 3
};
var $2047387e2590e962$var$params = {
    h: {
        def: 100000,
        num: true
    },
    azi: {
        def: 0,
        num: true,
        degrees: true
    },
    tilt: {
        def: 0,
        num: true,
        degrees: true
    },
    long0: {
        def: 0,
        num: true
    },
    lat0: {
        def: 0,
        num: true
    } // default is Equator, conversion to rad is automatic
};
function $2047387e2590e962$export$2cd8252107eb640b() {
    Object.keys($2047387e2590e962$var$params).forEach((function(p) {
        if (typeof this[p] === "undefined") this[p] = $2047387e2590e962$var$params[p].def;
        else if ($2047387e2590e962$var$params[p].num && isNaN(this[p])) throw new Error("Invalid parameter value, must be numeric " + p + " = " + this[p]);
        else if ($2047387e2590e962$var$params[p].num) this[p] = parseFloat(this[p]);
        if ($2047387e2590e962$var$params[p].degrees) this[p] = this[p] * (0, $7B7Eg.D2R);
    }).bind(this));
    if (Math.abs(Math.abs(this.lat0) - (0, $7B7Eg.HALF_PI)) < (0, $7B7Eg.EPSLN)) this.mode = this.lat0 < 0 ? $2047387e2590e962$var$mode.S_POLE : $2047387e2590e962$var$mode.N_POLE;
    else if (Math.abs(this.lat0) < (0, $7B7Eg.EPSLN)) this.mode = $2047387e2590e962$var$mode.EQUIT;
    else {
        this.mode = $2047387e2590e962$var$mode.OBLIQ;
        this.sinph0 = Math.sin(this.lat0);
        this.cosph0 = Math.cos(this.lat0);
    }
    this.pn1 = this.h / this.a; // Normalize relative to the Earth's radius
    if (this.pn1 <= 0 || this.pn1 > 1e10) throw new Error("Invalid height");
    this.p = 1 + this.pn1;
    this.rp = 1 / this.p;
    this.h1 = 1 / this.pn1;
    this.pfact = (this.p + 1) * this.h1;
    this.es = 0;
    var omega = this.tilt;
    var gamma = this.azi;
    this.cg = Math.cos(gamma);
    this.sg = Math.sin(gamma);
    this.cw = Math.cos(omega);
    this.sw = Math.sin(omega);
}
function $2047387e2590e962$export$174bb771924e7eb1(p) {
    p.x -= this.long0;
    var sinphi = Math.sin(p.y);
    var cosphi = Math.cos(p.y);
    var coslam = Math.cos(p.x);
    var x, y;
    switch(this.mode){
        case $2047387e2590e962$var$mode.OBLIQ:
            y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
            break;
        case $2047387e2590e962$var$mode.EQUIT:
            y = cosphi * coslam;
            break;
        case $2047387e2590e962$var$mode.S_POLE:
            y = -sinphi;
            break;
        case $2047387e2590e962$var$mode.N_POLE:
            y = sinphi;
            break;
    }
    y = this.pn1 / (this.p - y);
    x = y * cosphi * Math.sin(p.x);
    switch(this.mode){
        case $2047387e2590e962$var$mode.OBLIQ:
            y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
            break;
        case $2047387e2590e962$var$mode.EQUIT:
            y *= sinphi;
            break;
        case $2047387e2590e962$var$mode.N_POLE:
            y *= -(cosphi * coslam);
            break;
        case $2047387e2590e962$var$mode.S_POLE:
            y *= cosphi * coslam;
            break;
    }
    // Tilt 
    var yt, ba;
    yt = y * this.cg + x * this.sg;
    ba = 1 / (yt * this.sw * this.h1 + this.cw);
    x = (x * this.cg - y * this.sg) * this.cw * ba;
    y = yt * ba;
    p.x = x * this.a;
    p.y = y * this.a;
    return p;
}
function $2047387e2590e962$export$70ae2c07e401031b(p) {
    p.x /= this.a;
    p.y /= this.a;
    var r = {
        x: p.x,
        y: p.y
    };
    // Un-Tilt
    var bm, bq, yt;
    yt = 1 / (this.pn1 - p.y * this.sw);
    bm = this.pn1 * p.x * yt;
    bq = this.pn1 * p.y * this.cw * yt;
    p.x = bm * this.cg + bq * this.sg;
    p.y = bq * this.cg - bm * this.sg;
    var rh = (0, $9WCjH.default)(p.x, p.y);
    if (Math.abs(rh) < (0, $7B7Eg.EPSLN)) {
        r.x = 0;
        r.y = p.y;
    } else {
        var cosz, sinz;
        sinz = 1 - rh * rh * this.pfact;
        sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);
        cosz = Math.sqrt(1 - sinz * sinz);
        switch(this.mode){
            case $2047387e2590e962$var$mode.OBLIQ:
                r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);
                p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;
                p.x *= sinz * this.cosph0;
                break;
            case $2047387e2590e962$var$mode.EQUIT:
                r.y = Math.asin(p.y * sinz / rh);
                p.y = cosz * rh;
                p.x *= sinz;
                break;
            case $2047387e2590e962$var$mode.N_POLE:
                r.y = Math.asin(cosz);
                p.y = -p.y;
                break;
            case $2047387e2590e962$var$mode.S_POLE:
                r.y = -Math.asin(cosz);
                break;
        }
        r.x = Math.atan2(p.x, p.y);
    }
    p.x = r.x + this.long0;
    p.y = r.y;
    return p;
}
var $2047387e2590e962$export$e4b2ac9215619f8d = [
    "Tilted_Perspective",
    "tpers"
];
var $2047387e2590e962$export$2e2bcd8739ae039 = {
    init: $2047387e2590e962$export$2cd8252107eb640b,
    forward: $2047387e2590e962$export$174bb771924e7eb1,
    inverse: $2047387e2590e962$export$70ae2c07e401031b,
    names: $2047387e2590e962$export$e4b2ac9215619f8d
};



var $9WCjH = parcelRequire("9WCjH");
function $ea6c4c28823cbc89$export$2cd8252107eb640b() {
    this.flip_axis = this.sweep === "x" ? 1 : 0;
    this.h = Number(this.h);
    this.radius_g_1 = this.h / this.a;
    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) throw new Error();
    this.radius_g = 1.0 + this.radius_g_1;
    this.C = this.radius_g * this.radius_g - 1.0;
    if (this.es !== 0.0) {
        var one_es = 1.0 - this.es;
        var rone_es = 1 / one_es;
        this.radius_p = Math.sqrt(one_es);
        this.radius_p2 = one_es;
        this.radius_p_inv2 = rone_es;
        this.shape = "ellipse"; // Use as a condition in the forward and inverse functions.
    } else {
        this.radius_p = 1.0;
        this.radius_p2 = 1.0;
        this.radius_p_inv2 = 1.0;
        this.shape = "sphere"; // Use as a condition in the forward and inverse functions.
    }
    if (!this.title) this.title = "Geostationary Satellite View";
}
function $ea6c4c28823cbc89$var$forward(p) {
    var lon = p.x;
    var lat = p.y;
    var tmp, v_x, v_y, v_z;
    lon = lon - this.long0;
    if (this.shape === "ellipse") {
        lat = Math.atan(this.radius_p2 * Math.tan(lat));
        var r = this.radius_p / (0, $9WCjH.default)(this.radius_p * Math.cos(lat), Math.sin(lat));
        v_x = r * Math.cos(lon) * Math.cos(lat);
        v_y = r * Math.sin(lon) * Math.cos(lat);
        v_z = r * Math.sin(lat);
        if ((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2 < 0.0) {
            p.x = Number.NaN;
            p.y = Number.NaN;
            return p;
        }
        tmp = this.radius_g - v_x;
        if (this.flip_axis) {
            p.x = this.radius_g_1 * Math.atan(v_y / (0, $9WCjH.default)(v_z, tmp));
            p.y = this.radius_g_1 * Math.atan(v_z / tmp);
        } else {
            p.x = this.radius_g_1 * Math.atan(v_y / tmp);
            p.y = this.radius_g_1 * Math.atan(v_z / (0, $9WCjH.default)(v_y, tmp));
        }
    } else if (this.shape === "sphere") {
        tmp = Math.cos(lat);
        v_x = Math.cos(lon) * tmp;
        v_y = Math.sin(lon) * tmp;
        v_z = Math.sin(lat);
        tmp = this.radius_g - v_x;
        if (this.flip_axis) {
            p.x = this.radius_g_1 * Math.atan(v_y / (0, $9WCjH.default)(v_z, tmp));
            p.y = this.radius_g_1 * Math.atan(v_z / tmp);
        } else {
            p.x = this.radius_g_1 * Math.atan(v_y / tmp);
            p.y = this.radius_g_1 * Math.atan(v_z / (0, $9WCjH.default)(v_y, tmp));
        }
    }
    p.x = p.x * this.a;
    p.y = p.y * this.a;
    return p;
}
function $ea6c4c28823cbc89$var$inverse(p) {
    var v_x = -1;
    var v_y = 0.0;
    var v_z = 0.0;
    var a, b, det, k;
    p.x = p.x / this.a;
    p.y = p.y / this.a;
    if (this.shape === "ellipse") {
        if (this.flip_axis) {
            v_z = Math.tan(p.y / this.radius_g_1);
            v_y = Math.tan(p.x / this.radius_g_1) * (0, $9WCjH.default)(1.0, v_z);
        } else {
            v_y = Math.tan(p.x / this.radius_g_1);
            v_z = Math.tan(p.y / this.radius_g_1) * (0, $9WCjH.default)(1.0, v_y);
        }
        var v_zp = v_z / this.radius_p;
        a = v_y * v_y + v_zp * v_zp + v_x * v_x;
        b = 2 * this.radius_g * v_x;
        det = b * b - 4 * a * this.C;
        if (det < 0.0) {
            p.x = Number.NaN;
            p.y = Number.NaN;
            return p;
        }
        k = (-b - Math.sqrt(det)) / (2.0 * a);
        v_x = this.radius_g + k * v_x;
        v_y *= k;
        v_z *= k;
        p.x = Math.atan2(v_y, v_x);
        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));
    } else if (this.shape === "sphere") {
        if (this.flip_axis) {
            v_z = Math.tan(p.y / this.radius_g_1);
            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);
        } else {
            v_y = Math.tan(p.x / this.radius_g_1);
            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);
        }
        a = v_y * v_y + v_z * v_z + v_x * v_x;
        b = 2 * this.radius_g * v_x;
        det = b * b - 4 * a * this.C;
        if (det < 0.0) {
            p.x = Number.NaN;
            p.y = Number.NaN;
            return p;
        }
        k = (-b - Math.sqrt(det)) / (2.0 * a);
        v_x = this.radius_g + k * v_x;
        v_y *= k;
        v_z *= k;
        p.x = Math.atan2(v_y, v_x);
        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
    }
    p.x = p.x + this.long0;
    return p;
}
var $ea6c4c28823cbc89$export$e4b2ac9215619f8d = [
    "Geostationary Satellite View",
    "Geostationary_Satellite",
    "geos"
];
var $ea6c4c28823cbc89$export$2e2bcd8739ae039 = {
    init: $ea6c4c28823cbc89$export$2cd8252107eb640b,
    forward: $ea6c4c28823cbc89$var$forward,
    inverse: $ea6c4c28823cbc89$var$inverse,
    names: $ea6c4c28823cbc89$export$e4b2ac9215619f8d
};


/**
 * Copyright 2018 Bernie Jenny, Monash University, Melbourne, Australia.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Equal Earth is a projection inspired by the Robinson projection, but unlike
 * the Robinson projection retains the relative size of areas. The projection
 * was designed in 2018 by Bojan Savric, Tom Patterson and Bernhard Jenny.
 *
 * Publication:
 * Bojan Savric, Tom Patterson & Bernhard Jenny (2018). The Equal Earth map
 * projection, International Journal of Geographical Information Science,
 * DOI: 10.1080/13658816.2018.1504949
 *
 * Code released August 2018
 * Ported to JavaScript and adapted for mapshaper-proj by Matthew Bloch August 2018
 * Modified for proj4js by Andreas Hocevar by Andreas Hocevar March 2024
 */ 
var $dbd4D = parcelRequire("dbd4D");
var $78b9c9768fb52350$var$A1 = 1.340264, $78b9c9768fb52350$var$A2 = -0.081106, $78b9c9768fb52350$var$A3 = 0.000893, $78b9c9768fb52350$var$A4 = 0.003796, $78b9c9768fb52350$var$M = Math.sqrt(3) / 2.0;
function $78b9c9768fb52350$export$2cd8252107eb640b() {
    this.es = 0;
    this.long0 = this.long0 !== undefined ? this.long0 : 0;
}
function $78b9c9768fb52350$export$174bb771924e7eb1(p) {
    var lam = (0, $dbd4D.default)(p.x - this.long0);
    var phi = p.y;
    var paramLat = Math.asin($78b9c9768fb52350$var$M * Math.sin(phi)), paramLatSq = paramLat * paramLat, paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
    p.x = lam * Math.cos(paramLat) / ($78b9c9768fb52350$var$M * ($78b9c9768fb52350$var$A1 + 3 * $78b9c9768fb52350$var$A2 * paramLatSq + paramLatPow6 * (7 * $78b9c9768fb52350$var$A3 + 9 * $78b9c9768fb52350$var$A4 * paramLatSq)));
    p.y = paramLat * ($78b9c9768fb52350$var$A1 + $78b9c9768fb52350$var$A2 * paramLatSq + paramLatPow6 * ($78b9c9768fb52350$var$A3 + $78b9c9768fb52350$var$A4 * paramLatSq));
    p.x = this.a * p.x + this.x0;
    p.y = this.a * p.y + this.y0;
    return p;
}
function $78b9c9768fb52350$export$70ae2c07e401031b(p) {
    p.x = (p.x - this.x0) / this.a;
    p.y = (p.y - this.y0) / this.a;
    var EPS = 1e-9, NITER = 12, paramLat = p.y, paramLatSq, paramLatPow6, fy, fpy, dlat, i;
    for(i = 0; i < NITER; ++i){
        paramLatSq = paramLat * paramLat;
        paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
        fy = paramLat * ($78b9c9768fb52350$var$A1 + $78b9c9768fb52350$var$A2 * paramLatSq + paramLatPow6 * ($78b9c9768fb52350$var$A3 + $78b9c9768fb52350$var$A4 * paramLatSq)) - p.y;
        fpy = $78b9c9768fb52350$var$A1 + 3 * $78b9c9768fb52350$var$A2 * paramLatSq + paramLatPow6 * (7 * $78b9c9768fb52350$var$A3 + 9 * $78b9c9768fb52350$var$A4 * paramLatSq);
        paramLat -= dlat = fy / fpy;
        if (Math.abs(dlat) < EPS) break;
    }
    paramLatSq = paramLat * paramLat;
    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
    p.x = $78b9c9768fb52350$var$M * p.x * ($78b9c9768fb52350$var$A1 + 3 * $78b9c9768fb52350$var$A2 * paramLatSq + paramLatPow6 * (7 * $78b9c9768fb52350$var$A3 + 9 * $78b9c9768fb52350$var$A4 * paramLatSq)) / Math.cos(paramLat);
    p.y = Math.asin(Math.sin(paramLat) / $78b9c9768fb52350$var$M);
    p.x = (0, $dbd4D.default)(p.x + this.long0);
    return p;
}
var $78b9c9768fb52350$export$e4b2ac9215619f8d = [
    "eqearth",
    "Equal Earth",
    "Equal_Earth"
];
var $78b9c9768fb52350$export$2e2bcd8739ae039 = {
    init: $78b9c9768fb52350$export$2cd8252107eb640b,
    forward: $78b9c9768fb52350$export$174bb771924e7eb1,
    inverse: $78b9c9768fb52350$export$70ae2c07e401031b,
    names: $78b9c9768fb52350$export$e4b2ac9215619f8d
};




var $dbd4D = parcelRequire("dbd4D");

var $9WCjH = parcelRequire("9WCjH");

var $dMOv3 = parcelRequire("dMOv3");

var $jZzoQ = parcelRequire("jZzoQ");

var $doDgE = parcelRequire("doDgE");

var $7B7Eg = parcelRequire("7B7Eg");
var $50fdeedd8f35a993$var$EPS10 = 1e-10;
function $50fdeedd8f35a993$export$2cd8252107eb640b() {
    var c;
    this.phi1 = this.lat1;
    if (Math.abs(this.phi1) < $50fdeedd8f35a993$var$EPS10) throw new Error();
    if (this.es) {
        this.en = (0, $dMOv3.default)(this.es);
        this.m1 = (0, $doDgE.default)(this.phi1, this.am1 = Math.sin(this.phi1), c = Math.cos(this.phi1), this.en);
        this.am1 = c / (Math.sqrt(1 - this.es * this.am1 * this.am1) * this.am1);
        this.inverse = $50fdeedd8f35a993$var$e_inv;
        this.forward = $50fdeedd8f35a993$var$e_fwd;
    } else {
        if (Math.abs(this.phi1) + $50fdeedd8f35a993$var$EPS10 >= (0, $7B7Eg.HALF_PI)) this.cphi1 = 0;
        else this.cphi1 = 1 / Math.tan(this.phi1);
        this.inverse = $50fdeedd8f35a993$var$s_inv;
        this.forward = $50fdeedd8f35a993$var$s_fwd;
    }
}
function $50fdeedd8f35a993$var$e_fwd(p) {
    var lam = (0, $dbd4D.default)(p.x - (this.long0 || 0));
    var phi = p.y;
    var rh, E, c;
    rh = this.am1 + this.m1 - (0, $doDgE.default)(phi, E = Math.sin(phi), c = Math.cos(phi), this.en);
    E = c * lam / (rh * Math.sqrt(1 - this.es * E * E));
    p.x = rh * Math.sin(E);
    p.y = this.am1 - rh * Math.cos(E);
    p.x = this.a * p.x + (this.x0 || 0);
    p.y = this.a * p.y + (this.y0 || 0);
    return p;
}
function $50fdeedd8f35a993$var$e_inv(p) {
    p.x = (p.x - (this.x0 || 0)) / this.a;
    p.y = (p.y - (this.y0 || 0)) / this.a;
    var s, rh, lam, phi;
    rh = (0, $9WCjH.default)(p.x, p.y = this.am1 - p.y);
    phi = (0, $jZzoQ.default)(this.am1 + this.m1 - rh, this.es, this.en);
    if ((s = Math.abs(phi)) < (0, $7B7Eg.HALF_PI)) {
        s = Math.sin(phi);
        lam = rh * Math.atan2(p.x, p.y) * Math.sqrt(1 - this.es * s * s) / Math.cos(phi);
    } else if (Math.abs(s - (0, $7B7Eg.HALF_PI)) <= $50fdeedd8f35a993$var$EPS10) lam = 0;
    else throw new Error();
    p.x = (0, $dbd4D.default)(lam + (this.long0 || 0));
    p.y = (0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(phi);
    return p;
}
function $50fdeedd8f35a993$var$s_fwd(p) {
    var lam = (0, $dbd4D.default)(p.x - (this.long0 || 0));
    var phi = p.y;
    var E, rh;
    rh = this.cphi1 + this.phi1 - phi;
    if (Math.abs(rh) > $50fdeedd8f35a993$var$EPS10) {
        p.x = rh * Math.sin(E = lam * Math.cos(phi) / rh);
        p.y = this.cphi1 - rh * Math.cos(E);
    } else p.x = p.y = 0;
    p.x = this.a * p.x + (this.x0 || 0);
    p.y = this.a * p.y + (this.y0 || 0);
    return p;
}
function $50fdeedd8f35a993$var$s_inv(p) {
    p.x = (p.x - (this.x0 || 0)) / this.a;
    p.y = (p.y - (this.y0 || 0)) / this.a;
    var lam, phi;
    var rh = (0, $9WCjH.default)(p.x, p.y = this.cphi1 - p.y);
    phi = this.cphi1 + this.phi1 - rh;
    if (Math.abs(phi) > (0, $7B7Eg.HALF_PI)) throw new Error();
    if (Math.abs(Math.abs(phi) - (0, $7B7Eg.HALF_PI)) <= $50fdeedd8f35a993$var$EPS10) lam = 0;
    else lam = rh * Math.atan2(p.x, p.y) / Math.cos(phi);
    p.x = (0, $dbd4D.default)(lam + (this.long0 || 0));
    p.y = (0, $568a11f3be43b3f5$export$2e2bcd8739ae039)(phi);
    return p;
}
var $50fdeedd8f35a993$export$e4b2ac9215619f8d = [
    "bonne",
    "Bonne (Werner lat_1=90)"
];
var $50fdeedd8f35a993$export$2e2bcd8739ae039 = {
    init: $50fdeedd8f35a993$export$2cd8252107eb640b,
    names: $50fdeedd8f35a993$export$e4b2ac9215619f8d
};


function $481b868241c1e8ef$export$2e2bcd8739ae039(proj4) {
    proj4.Proj.projections.add((0, $jEXtl.default));
    proj4.Proj.projections.add((0, $5k61a.default));
    proj4.Proj.projections.add((0, $f909ef571a9af96e$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $d6f46490cf42e2dd$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $2nJNQ.default));
    proj4.Proj.projections.add((0, $3911b393258a5f42$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $fd3fdaaafb1f7d4e$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $cb6e788a2c3f7915$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $162e27c6eb9aa4da$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $cab6e610f7f26f9c$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $1UqH0.default));
    proj4.Proj.projections.add((0, $efQ5V.default));
    proj4.Proj.projections.add((0, $dc8af4db6ad7738c$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $d87c835a9bc05532$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $2a84ffb934e4751b$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $ac4f3e6465d17722$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $9FhcM.default));
    proj4.Proj.projections.add((0, $419dc12f1a350df5$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $9bb4cd81347ac975$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $5b0704453a45ce0e$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $8e1785d1c11b6c16$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $da3a30e3ca751984$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $0d20bac18942304a$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $7c472ee478505ffb$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $e2b671b4af6fb0f4$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $3e20f333fd7a6b26$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $502244ea60bce063$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $2047387e2590e962$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $ea6c4c28823cbc89$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $78b9c9768fb52350$export$2e2bcd8739ae039));
    proj4.Proj.projections.add((0, $50fdeedd8f35a993$export$2e2bcd8739ae039));
}


(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).defaultDatum = "WGS84"; //default datum
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).Proj = (0, $673c8104677fb23d$export$2e2bcd8739ae039);
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).WGS84 = new (0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).Proj("WGS84");
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).Point = (0, $ef4e27688b0ecb61$export$2e2bcd8739ae039);
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).toPoint = (0, $75c20f164bd887af$export$2e2bcd8739ae039);
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).defs = (0, $426e87aa95b0b211$export$2e2bcd8739ae039);
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).nadgrid = (0, $11c5d1275fd03d1e$export$2e2bcd8739ae039);
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).transform = (0, $b56b1bf61c7cfac7$export$2e2bcd8739ae039);
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).mgrs = (0, $7e782048f8c9ac26$export$2e2bcd8739ae039);
(0, $afb9f31c9f432b0c$export$2e2bcd8739ae039).version = "__VERSION__";
(0, $481b868241c1e8ef$export$2e2bcd8739ae039)((0, $afb9f31c9f432b0c$export$2e2bcd8739ae039));
var $95be21a9180ad848$export$2e2bcd8739ae039 = (0, $afb9f31c9f432b0c$export$2e2bcd8739ae039);


const $b251515a8a352057$var$data = {
    "turbo": {
        "interpolate": true,
        "colors": [
            [
                0.19,
                0.0718,
                0.2322
            ],
            [
                0.1948,
                0.0834,
                0.2615
            ],
            [
                0.1996,
                0.095,
                0.2902
            ],
            [
                0.2042,
                0.1065,
                0.3184
            ],
            [
                0.2086,
                0.118,
                0.3461
            ],
            [
                0.2129,
                0.1295,
                0.3731
            ],
            [
                0.2171,
                0.1409,
                0.3996
            ],
            [
                0.2211,
                0.1522,
                0.4256
            ],
            [
                0.225,
                0.1635,
                0.451
            ],
            [
                0.2288,
                0.1748,
                0.4758
            ],
            [
                0.2324,
                0.186,
                0.5
            ],
            [
                0.2358,
                0.1972,
                0.5237
            ],
            [
                0.2392,
                0.2083,
                0.5469
            ],
            [
                0.2423,
                0.2194,
                0.5694
            ],
            [
                0.2454,
                0.2304,
                0.5914
            ],
            [
                0.2483,
                0.2414,
                0.6129
            ],
            [
                0.2511,
                0.2524,
                0.6337
            ],
            [
                0.2537,
                0.2633,
                0.6541
            ],
            [
                0.2562,
                0.2741,
                0.6738
            ],
            [
                0.2585,
                0.2849,
                0.693
            ],
            [
                0.2607,
                0.2957,
                0.7116
            ],
            [
                0.2628,
                0.3064,
                0.7297
            ],
            [
                0.2647,
                0.3171,
                0.7472
            ],
            [
                0.2665,
                0.3277,
                0.7641
            ],
            [
                0.2682,
                0.3382,
                0.7805
            ],
            [
                0.2697,
                0.3488,
                0.7963
            ],
            [
                0.271,
                0.3593,
                0.8116
            ],
            [
                0.2723,
                0.3697,
                0.8262
            ],
            [
                0.2733,
                0.3801,
                0.8404
            ],
            [
                0.2743,
                0.3904,
                0.8539
            ],
            [
                0.2751,
                0.4007,
                0.8669
            ],
            [
                0.2758,
                0.411,
                0.8794
            ],
            [
                0.2763,
                0.4212,
                0.8912
            ],
            [
                0.2767,
                0.4313,
                0.9025
            ],
            [
                0.2769,
                0.4414,
                0.9133
            ],
            [
                0.277,
                0.4515,
                0.9235
            ],
            [
                0.277,
                0.4615,
                0.9331
            ],
            [
                0.2768,
                0.4715,
                0.9421
            ],
            [
                0.2765,
                0.4814,
                0.9506
            ],
            [
                0.276,
                0.4913,
                0.9586
            ],
            [
                0.2754,
                0.5012,
                0.9659
            ],
            [
                0.2747,
                0.5109,
                0.9728
            ],
            [
                0.2738,
                0.5207,
                0.979
            ],
            [
                0.2727,
                0.5304,
                0.9846
            ],
            [
                0.2711,
                0.5402,
                0.9893
            ],
            [
                0.2688,
                0.55,
                0.993
            ],
            [
                0.2659,
                0.5598,
                0.9958
            ],
            [
                0.2625,
                0.5697,
                0.9977
            ],
            [
                0.2586,
                0.5796,
                0.9988
            ],
            [
                0.2542,
                0.5895,
                0.999
            ],
            [
                0.2495,
                0.5994,
                0.9984
            ],
            [
                0.2443,
                0.6094,
                0.997
            ],
            [
                0.2387,
                0.6193,
                0.9948
            ],
            [
                0.2329,
                0.6292,
                0.992
            ],
            [
                0.2268,
                0.6391,
                0.9885
            ],
            [
                0.2204,
                0.649,
                0.9844
            ],
            [
                0.2138,
                0.6589,
                0.9796
            ],
            [
                0.2071,
                0.6687,
                0.9742
            ],
            [
                0.2002,
                0.6784,
                0.9683
            ],
            [
                0.1933,
                0.6881,
                0.9619
            ],
            [
                0.1862,
                0.6978,
                0.955
            ],
            [
                0.1792,
                0.7073,
                0.9476
            ],
            [
                0.1722,
                0.7168,
                0.9398
            ],
            [
                0.1653,
                0.7262,
                0.9316
            ],
            [
                0.1584,
                0.7355,
                0.923
            ],
            [
                0.1517,
                0.7447,
                0.9142
            ],
            [
                0.1452,
                0.7538,
                0.905
            ],
            [
                0.1389,
                0.7628,
                0.8955
            ],
            [
                0.1328,
                0.7716,
                0.8858
            ],
            [
                0.127,
                0.7804,
                0.8759
            ],
            [
                0.1215,
                0.789,
                0.8658
            ],
            [
                0.1164,
                0.7974,
                0.8556
            ],
            [
                0.1117,
                0.8057,
                0.8452
            ],
            [
                0.1074,
                0.8138,
                0.8348
            ],
            [
                0.1036,
                0.8218,
                0.8244
            ],
            [
                0.1003,
                0.8296,
                0.8139
            ],
            [
                0.0975,
                0.8371,
                0.8034
            ],
            [
                0.0953,
                0.8446,
                0.793
            ],
            [
                0.0938,
                0.8518,
                0.7826
            ],
            [
                0.0929,
                0.8588,
                0.7724
            ],
            [
                0.0927,
                0.8655,
                0.7623
            ],
            [
                0.0932,
                0.8721,
                0.7524
            ],
            [
                0.0945,
                0.8784,
                0.7426
            ],
            [
                0.0966,
                0.8845,
                0.7332
            ],
            [
                0.0996,
                0.8904,
                0.7239
            ],
            [
                0.1034,
                0.896,
                0.715
            ],
            [
                0.1082,
                0.9014,
                0.706
            ],
            [
                0.1137,
                0.9067,
                0.6965
            ],
            [
                0.1201,
                0.9119,
                0.6866
            ],
            [
                0.1273,
                0.917,
                0.6763
            ],
            [
                0.1353,
                0.922,
                0.6656
            ],
            [
                0.1439,
                0.9268,
                0.6545
            ],
            [
                0.1532,
                0.9315,
                0.6431
            ],
            [
                0.1632,
                0.9361,
                0.6314
            ],
            [
                0.1738,
                0.9405,
                0.6194
            ],
            [
                0.1849,
                0.9448,
                0.6071
            ],
            [
                0.1966,
                0.949,
                0.5947
            ],
            [
                0.2088,
                0.953,
                0.582
            ],
            [
                0.2214,
                0.9569,
                0.5691
            ],
            [
                0.2345,
                0.9606,
                0.5561
            ],
            [
                0.248,
                0.9642,
                0.543
            ],
            [
                0.2618,
                0.9676,
                0.5298
            ],
            [
                0.276,
                0.9709,
                0.5165
            ],
            [
                0.2904,
                0.974,
                0.5032
            ],
            [
                0.3051,
                0.977,
                0.4899
            ],
            [
                0.3201,
                0.9797,
                0.4765
            ],
            [
                0.3352,
                0.9823,
                0.4632
            ],
            [
                0.3504,
                0.9848,
                0.45
            ],
            [
                0.3658,
                0.987,
                0.4369
            ],
            [
                0.3813,
                0.9891,
                0.4239
            ],
            [
                0.3968,
                0.991,
                0.411
            ],
            [
                0.4123,
                0.9927,
                0.3983
            ],
            [
                0.4278,
                0.9942,
                0.3858
            ],
            [
                0.4432,
                0.9955,
                0.3734
            ],
            [
                0.4585,
                0.9966,
                0.3614
            ],
            [
                0.4738,
                0.9976,
                0.3496
            ],
            [
                0.4888,
                0.9983,
                0.3382
            ],
            [
                0.5036,
                0.9988,
                0.327
            ],
            [
                0.5182,
                0.9991,
                0.3162
            ],
            [
                0.5326,
                0.9992,
                0.3058
            ],
            [
                0.5466,
                0.9991,
                0.2958
            ],
            [
                0.5603,
                0.9987,
                0.2862
            ],
            [
                0.5736,
                0.9982,
                0.2771
            ],
            [
                0.5865,
                0.9974,
                0.2685
            ],
            [
                0.5989,
                0.9964,
                0.2604
            ],
            [
                0.6109,
                0.9951,
                0.2528
            ],
            [
                0.6223,
                0.9937,
                0.2458
            ],
            [
                0.6332,
                0.992,
                0.2394
            ],
            [
                0.6436,
                0.99,
                0.2336
            ],
            [
                0.6539,
                0.9878,
                0.2284
            ],
            [
                0.6643,
                0.9852,
                0.2237
            ],
            [
                0.6746,
                0.9825,
                0.2196
            ],
            [
                0.6849,
                0.9794,
                0.216
            ],
            [
                0.6952,
                0.9761,
                0.2129
            ],
            [
                0.7055,
                0.9726,
                0.2103
            ],
            [
                0.7158,
                0.9688,
                0.2082
            ],
            [
                0.726,
                0.9647,
                0.2064
            ],
            [
                0.7361,
                0.9604,
                0.205
            ],
            [
                0.7462,
                0.9559,
                0.2041
            ],
            [
                0.7562,
                0.9512,
                0.2034
            ],
            [
                0.7661,
                0.9463,
                0.2031
            ],
            [
                0.7759,
                0.9411,
                0.2031
            ],
            [
                0.7856,
                0.9358,
                0.2034
            ],
            [
                0.7952,
                0.9302,
                0.2039
            ],
            [
                0.8047,
                0.9245,
                0.2046
            ],
            [
                0.8141,
                0.9186,
                0.2055
            ],
            [
                0.8233,
                0.9125,
                0.2066
            ],
            [
                0.8324,
                0.9063,
                0.2079
            ],
            [
                0.8413,
                0.8999,
                0.2093
            ],
            [
                0.8501,
                0.8933,
                0.2107
            ],
            [
                0.8587,
                0.8866,
                0.2123
            ],
            [
                0.8671,
                0.8797,
                0.2139
            ],
            [
                0.8753,
                0.8727,
                0.2156
            ],
            [
                0.8833,
                0.8655,
                0.2172
            ],
            [
                0.8911,
                0.8583,
                0.2188
            ],
            [
                0.8987,
                0.8509,
                0.2204
            ],
            [
                0.906,
                0.8434,
                0.2219
            ],
            [
                0.9132,
                0.8358,
                0.2233
            ],
            [
                0.92,
                0.8281,
                0.2246
            ],
            [
                0.9267,
                0.8202,
                0.2257
            ],
            [
                0.933,
                0.8124,
                0.2267
            ],
            [
                0.9391,
                0.8044,
                0.2274
            ],
            [
                0.9449,
                0.7963,
                0.228
            ],
            [
                0.9504,
                0.7882,
                0.2283
            ],
            [
                0.9556,
                0.78,
                0.2284
            ],
            [
                0.9605,
                0.7718,
                0.2281
            ],
            [
                0.9651,
                0.7635,
                0.2275
            ],
            [
                0.9693,
                0.7552,
                0.2266
            ],
            [
                0.9732,
                0.7468,
                0.2254
            ],
            [
                0.9768,
                0.7384,
                0.2237
            ],
            [
                0.98,
                0.73,
                0.2216
            ],
            [
                0.9829,
                0.7214,
                0.2192
            ],
            [
                0.9855,
                0.7125,
                0.2165
            ],
            [
                0.9878,
                0.7033,
                0.2136
            ],
            [
                0.9899,
                0.6938,
                0.2104
            ],
            [
                0.9916,
                0.6841,
                0.2071
            ],
            [
                0.9931,
                0.6741,
                0.2035
            ],
            [
                0.9944,
                0.6639,
                0.1997
            ],
            [
                0.9954,
                0.6534,
                0.1958
            ],
            [
                0.9961,
                0.6428,
                0.1916
            ],
            [
                0.9965,
                0.6319,
                0.1874
            ],
            [
                0.9968,
                0.6209,
                0.183
            ],
            [
                0.9967,
                0.6098,
                0.1784
            ],
            [
                0.9964,
                0.5985,
                0.1738
            ],
            [
                0.9959,
                0.587,
                0.169
            ],
            [
                0.9952,
                0.5755,
                0.1641
            ],
            [
                0.9942,
                0.5639,
                0.1592
            ],
            [
                0.993,
                0.5521,
                0.1542
            ],
            [
                0.9915,
                0.5404,
                0.1491
            ],
            [
                0.9899,
                0.5285,
                0.144
            ],
            [
                0.988,
                0.5167,
                0.1388
            ],
            [
                0.9859,
                0.5048,
                0.1337
            ],
            [
                0.9836,
                0.4929,
                0.1285
            ],
            [
                0.9811,
                0.481,
                0.1233
            ],
            [
                0.9784,
                0.4692,
                0.1182
            ],
            [
                0.9754,
                0.4574,
                0.113
            ],
            [
                0.9723,
                0.4456,
                0.108
            ],
            [
                0.969,
                0.434,
                0.1029
            ],
            [
                0.9656,
                0.4224,
                0.098
            ],
            [
                0.9619,
                0.4109,
                0.0931
            ],
            [
                0.958,
                0.3996,
                0.0883
            ],
            [
                0.954,
                0.3884,
                0.0836
            ],
            [
                0.9498,
                0.3773,
                0.079
            ],
            [
                0.9454,
                0.3664,
                0.0746
            ],
            [
                0.9408,
                0.3557,
                0.0703
            ],
            [
                0.9361,
                0.3451,
                0.0662
            ],
            [
                0.9312,
                0.3348,
                0.0622
            ],
            [
                0.9262,
                0.3247,
                0.0584
            ],
            [
                0.921,
                0.3149,
                0.0548
            ],
            [
                0.9157,
                0.3053,
                0.0513
            ],
            [
                0.9102,
                0.296,
                0.0481
            ],
            [
                0.9046,
                0.287,
                0.0452
            ],
            [
                0.8989,
                0.2782,
                0.0424
            ],
            [
                0.893,
                0.2698,
                0.0399
            ],
            [
                0.8869,
                0.2615,
                0.0375
            ],
            [
                0.8807,
                0.2533,
                0.0352
            ],
            [
                0.8742,
                0.2453,
                0.033
            ],
            [
                0.8676,
                0.2373,
                0.0308
            ],
            [
                0.8608,
                0.2294,
                0.0288
            ],
            [
                0.8538,
                0.2217,
                0.0268
            ],
            [
                0.8466,
                0.2141,
                0.0249
            ],
            [
                0.8393,
                0.2065,
                0.023
            ],
            [
                0.8317,
                0.1991,
                0.0213
            ],
            [
                0.824,
                0.1918,
                0.0197
            ],
            [
                0.8161,
                0.1846,
                0.0181
            ],
            [
                0.808,
                0.1775,
                0.0166
            ],
            [
                0.7997,
                0.1706,
                0.0152
            ],
            [
                0.7912,
                0.1637,
                0.0139
            ],
            [
                0.7826,
                0.1569,
                0.0126
            ],
            [
                0.7738,
                0.1503,
                0.0115
            ],
            [
                0.7648,
                0.1437,
                0.0104
            ],
            [
                0.7556,
                0.1373,
                0.0094
            ],
            [
                0.7462,
                0.131,
                0.0085
            ],
            [
                0.7366,
                0.1248,
                0.0077
            ],
            [
                0.7269,
                0.1187,
                0.007
            ],
            [
                0.7169,
                0.1127,
                0.0063
            ],
            [
                0.7068,
                0.1068,
                0.0057
            ],
            [
                0.6965,
                0.101,
                0.0052
            ],
            [
                0.686,
                0.0954,
                0.0048
            ],
            [
                0.6754,
                0.0898,
                0.0045
            ],
            [
                0.6645,
                0.0844,
                0.0042
            ],
            [
                0.6534,
                0.079,
                0.0041
            ],
            [
                0.6422,
                0.0738,
                0.004
            ],
            [
                0.6308,
                0.0687,
                0.004
            ],
            [
                0.6192,
                0.0637,
                0.0041
            ],
            [
                0.6075,
                0.0588,
                0.0043
            ],
            [
                0.5955,
                0.054,
                0.0045
            ],
            [
                0.5834,
                0.0493,
                0.0049
            ],
            [
                0.571,
                0.0447,
                0.0053
            ],
            [
                0.5585,
                0.0403,
                0.0058
            ],
            [
                0.5458,
                0.0359,
                0.0064
            ],
            [
                0.533,
                0.0317,
                0.007
            ],
            [
                0.5199,
                0.0276,
                0.0078
            ],
            [
                0.5066,
                0.0235,
                0.0086
            ],
            [
                0.4932,
                0.0196,
                0.0096
            ],
            [
                0.4796,
                0.0158,
                0.0106
            ]
        ]
    }
};
const $b251515a8a352057$export$71fe30d513ffc90b = $b251515a8a352057$var$partial("turbo");
const $b251515a8a352057$export$37e229ac698df558 = $b251515a8a352057$var$partial("turbo_r");
/*
Define auxiliary functions for evaluating colormaps
 */ function $b251515a8a352057$var$evaluate_cmap(x, name, reverse) {
    /**
     * Evaluate colormap `name` at some value `x`.
     * @param {number} x - The value (between 0 and 1) at which to evaluate the colormap.
     * @param {string} name - The name of the colormap (see matplotlib documentation).
     * @reverse {boolean} reverse - Whether or not to reverse the colormap.
     * @return {list} - A 3-tuple (R, G, B) containing the color assigned to `x`.
     */ // Ensure that the value of `x` is valid (i.e., 0 <= x <= 1)
    if (!(0 <= x <= 1)) alert("Illegal value for x! Must be in [0, 1].");
    // Ensure that `name` is a valid colormap
    if (!(name in $b251515a8a352057$var$data)) alert("Colormap " + name + "does not exist!");
    // We can get the reverse colormap by evaluating colormap(1-x)
    if (reverse === true) x = 1 - x;
    // Get the colors and whether or not we need to interpolate
    let colors = $b251515a8a352057$var$data[name]["colors"];
    let interpolate = $b251515a8a352057$var$data[name]["interpolate"];
    if (interpolate === true) return $b251515a8a352057$var$interpolated(x, colors);
    else return $b251515a8a352057$var$qualitative(x, colors);
}
function $b251515a8a352057$var$interpolated(x, colors) {
    let lo = Math.floor(x * (colors.length - 1));
    let hi = Math.ceil(x * (colors.length - 1));
    let r = Math.round((colors[lo][0] + colors[hi][0]) / 2 * 255);
    let g = Math.round((colors[lo][1] + colors[hi][1]) / 2 * 255);
    let b = Math.round((colors[lo][2] + colors[hi][2]) / 2 * 255);
    return [
        r,
        g,
        b
    ];
}
function $b251515a8a352057$var$qualitative(x, colors) {
    let idx = 0;
    while(x > (idx + 1) / (colors.length - 0))idx++;
    let r = Math.round(colors[idx][0] * 255);
    let g = Math.round(colors[idx][1] * 255);
    let b = Math.round(colors[idx][2] * 255);
    return [
        r,
        g,
        b
    ];
}
function $b251515a8a352057$var$partial(name) {
    if (name.endsWith("_r")) return function(x) {
        return $b251515a8a352057$var$evaluate_cmap(x, name.substring(0, name.length - 2), true);
    };
    else return function(x) {
        return $b251515a8a352057$var$evaluate_cmap(x, name, false);
    };
}


const $ab189090502049a5$var$gridProjection = "DE1200";
const $ab189090502049a5$var$gridProjStr = "+proj=stere +lat_0=90 +lat_ts=60 +lon_0=10 +a=6378137 +b=6356752.3142451802 +no_defs +x_0=543196.83521776402 +y_0=3622588.8619310018";
class $ab189090502049a5$var$FrameControl extends (0, $073a42a03e127bc6$export$2e2bcd8739ae039) {
    constructor(layer, frames){
        const slider = document.createElement("input");
        slider.type = "range";
        const label = document.createElement("h3");
        const toggle = document.createElement("img");
        toggle.src = new URL("pause.svg", import.meta.url).toString();
        const element = document.createElement("div");
        element.className = "frame-selector ol-unselectable ol-control";
        element.appendChild(label);
        element.appendChild(toggle);
        element.appendChild(slider);
        super({
            element: element
        });
        this.frames = frames;
        this.layer = layer;
        this.slider = slider;
        this.label = label;
        this.toggle = toggle;
        this.autoplayIntervalId = null;
        slider.addEventListener("input", ()=>{
            this.stopAutoplay();
            this.setFrame();
        }, false);
        toggle.addEventListener("click", ()=>this.toggleAutoplay(), false);
    }
    setFrames(frames) {
        this.frames = frames;
        this.slider.min = "0";
        this.slider.max = (frames.length - 1).toString();
        this.slider.value = "0";
        this.setFrame();
    }
    setFrame(idx) {
        idx = typeof idx !== "undefined" ? idx : this.slider.value;
        this.label.textContent = this.frames[idx].label;
        this.layer.setSource(this.frames[idx].source);
    }
    nextFrame() {
        if (this.slider.value == this.slider.max) this.slider.value = "0";
        else this.slider.stepUp();
        this.setFrame();
    }
    startAutoplay() {
        this.autoplayIntervalId = setInterval(this.nextFrame.bind(this), 500);
        this.toggle.src = new URL("pause.svg", import.meta.url).toString();
    }
    stopAutoplay() {
        clearInterval(this.autoplayIntervalId);
        this.autoplayIntervalId = null;
        this.toggle.src = new URL("play.svg", import.meta.url).toString();
    }
    toggleAutoplay() {
        if (this.autoplayIntervalId !== null) this.stopAutoplay();
        else this.startAutoplay();
    }
}
function $ab189090502049a5$var$decompress(raw) {
    // Get raw (zlib-encoded) bytes from base64 string
    const compressed = Uint8Array.from(atob(raw), (c)=>c.charCodeAt(0));
    // Decompress zlib-encoded bytes into original bytes
    const rawBytes = (0, $b0e71325728b7a56$export$cae1ce83fe4a1782)(compressed).buffer;
    // Interpret decompressed bytes as 2-byte integers
    return new Uint16Array(rawBytes);
}
function $ab189090502049a5$var$precipitation_to_rgba(precip) {
    // Normalize, using 2.5 mm in 5 minutes as maximum
    const val = Math.min(precip, 250) / 250;
    // Convert to color using js-colormap's turbo colormap
    const rgb = (0, $b251515a8a352057$export$71fe30d513ffc90b)(val);
    // Make no rain fully transparent, use 50 - 204 alpha range (~0.2 - 0.8 opacity) for other values
    const alpha = Math.max(Math.min(val * 10, .8) * 255, precip ? 50 : 0);
    return [
        ...rgb,
        alpha
    ];
}
function $ab189090502049a5$var$makeSource(record, width, height, projection, extent) {
    // Create an OpenLayers source with PNG data URL from a given radar record
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true; // Enable image smoothing
    canvas.width = width;
    canvas.height = height;
    const imageData = ctx.createImageData(width, height);
    for (const [idx, precip] of $ab189090502049a5$var$decompress(record.precipitation_5).entries()){
        let rgba = $ab189090502049a5$var$precipitation_to_rgba(precip);
        imageData.data[idx * 4] = rgba[0];
        imageData.data[idx * 4 + 1] = rgba[1];
        imageData.data[idx * 4 + 2] = rgba[2];
        imageData.data[idx * 4 + 3] = rgba[3];
    }
    ctx.putImageData(imageData, 0, 0);
    const url = canvas.toDataURL();
    const source = new (0, $07c09f4f67d0a817$export$2e2bcd8739ae039)({
        url: url,
        projection: projection,
        imageExtent: extent,
        interpolate: true,
        attributions: '\xa9 <a href="https://www.dwd.de/">DWD</a>'
    });
    return {
        label: record.timestamp.substring(11, 16),
        source: source
    };
}
class $ab189090502049a5$export$b531eec335465587 extends (0, $19fe8e3abedf4df0$export$c7c07a37856565d) {
    connectedCallback() {
        super.connectedCallback();
        console.log("connected", this.lat, this.lon, this.zoom);
        this._loadMap();
    /*
        this._attachObserver();*/ }
    disconnectedCallback() {
        super.disconnectedCallback();
        if (this.map) {
            this.map.dispose();
            this.map = undefined;
        }
        if (this.interval) clearInterval(this.interval);
        this._loaded = false;
    /*
        if (this._resizeObserver) {
            this._resizeObserver.unobserve(this);
        }*/ }
    async _loadMap() {
        if (this._loading) return;
        let map = this.shadowRoot.getElementById("map");
        if (!map) {
            map = document.createElement("div");
            map.id = "map";
            this.shadowRoot.append(map);
        }
        this._loading = true;
        try {
            const imageLayer = new (0, $793e8314e637c0a8$export$2e2bcd8739ae039)();
            this.frameControl = new $ab189090502049a5$var$FrameControl(imageLayer);
            (0, $95be21a9180ad848$export$2e2bcd8739ae039).defs($ab189090502049a5$var$gridProjection, $ab189090502049a5$var$gridProjStr);
            (0, $6012a9789a43a621$export$6503ec6e8aabbaf)((0, $95be21a9180ad848$export$2e2bcd8739ae039));
            this.map = new (0, $905d64a7b91bb632$export$2e2bcd8739ae039)({
                target: map,
                layers: [
                    new (0, $da4918b2f77ef6de$export$2e2bcd8739ae039)({
                        source: new (0, $25838c5bce8055ee$export$2e2bcd8739ae039)()
                    }),
                    imageLayer
                ],
                view: new (0, $5c065e8fdff88e40$export$2e2bcd8739ae039)({
                    center: (0, $983289ae1d13cd2a$export$b15d9668511529b9)([
                        this.lon,
                        this.lat
                    ]),
                    //center: ol.proj.transform(ol.extent.getCenter(gridExtent), gridProjection, 'EPSG:3857'),
                    zoom: this.zoom
                }),
                controls: (0, $ca89b5468da2f709$export$ebe90cb607ad99e)().extend([
                    this.frameControl
                ])
            });
            // home marker
            const marker = new (0, $488541e07685eb37$export$2e2bcd8739ae039)({
                geometry: new (0, $de620c8161ba008b$export$2e2bcd8739ae039)((0, $983289ae1d13cd2a$export$b15d9668511529b9)([
                    this.lon,
                    this.lat
                ]))
            });
            const iconStyle = new (0, $0e8e066c6965c811$export$2e2bcd8739ae039)({
                image: new (0, $4dd3b6f7e2acb5b2$export$2e2bcd8739ae039)({
                    anchor: [
                        0.5,
                        46
                    ],
                    anchorXUnits: "fraction",
                    anchorYUnits: "pixels",
                    src: new URL("home.png", import.meta.url).toString(),
                    scale: 0.1
                })
            });
            marker.setStyle(iconStyle);
            // Step 3: Add the marker to a vector source
            const vectorSource = new (0, $3b942f73954bd0a6$export$2e2bcd8739ae039)({
                features: [
                    marker
                ]
            });
            // Step 4: Create a vector layer with the vector source
            const vectorLayer = new (0, $fef14e10fb9831ec$export$2e2bcd8739ae039)({
                source: vectorSource
            });
            // Step 5: Add the vector layer to the map
            this.map.addLayer(vectorLayer);
            this.updateData(true);
            this.interval = setInterval(()=>this.updateData(), 900000); // Update every 15 minutes
            this._loaded = true;
        } finally{
            this._loading = false;
        }
    }
    update(changedProps) {
        super.update(changedProps);
        if (!this._loaded) return;
        console.log("update", changedProps);
        let autoFitRequired = false;
        const oldHass = changedProps.get("hass");
        if (changedProps.has("_loaded") || changedProps.has("latitude") || changedProps.has("longitude")) {
            this._draw();
            autoFitRequired = true;
        }
    }
    static get styles() {
        return [
            (0, $def2de46b9306e8a$export$8d80f9cac07cdb3)($cf6a3c38f3310fd7$exports),
            (0, $def2de46b9306e8a$export$dbf350e5966cf602)`
            
            :host {
                display: block;
                height: 300px;
            }

            #map {
                height: 100%;
            }
            @keyframes spinner {
                to {
                    transform: rotate(360deg);
                }
            }

            .spinner {
                opacity: .5;
            }

            .spinner:after {
                content: "";
                box-sizing: border-box;
                position: absolute;
                top: 50%;
                left: 50%;
                width: 80px;
                height: 80px;
                margin-top: -40px;
                margin-left: -40px;
                border-radius: 50%;
                border: 10px solid rgba(180, 180, 180, 1);
                border-top-color: rgba(0, 0, 0, 1);
                animation: spinner 0.6s linear infinite;
            }

            .frame-selector {
                left: 25px;
                bottom: 25px;
                background-color: #000000aa;
                padding: 6px;
            }

            .frame-selector h3 {
                color: #eeeeee;
                font-size: 24px;
                font-family: system-ui, sans-serif;
                margin: 0;
                margin-top: .125rem;
                margin-bottom: .25rem;
                text-align: center;
            }

            .frame-selector img {
                height: 24px;
                margin-right: .5rem;
                margin-left: .25rem;
            }
        `
        ];
    }
    _draw() {}
    updateData(first = false) {
        const start = new Date();
        const endDate = new Date(start.getTime() + 10800000);
        fetch(`https://api.brightsky.dev/radar?tz=Europe/Berlin&lat=${this.lat}&lon=${this.lon}&distance=100000&date=${start.toISOString()}&last_date=${endDate.toISOString()}`).then((resp)=>resp.json()).then((data)=>{
            const topLeft = (0, $983289ae1d13cd2a$export$51186ad6e864892a)(data.geometry.coordinates[0], "EPSG:4326", "DE1200");
            const bottomRight = (0, $983289ae1d13cd2a$export$51186ad6e864892a)(data.geometry.coordinates[2], "EPSG:4326", "DE1200");
            const gridExtent = [
                Math.round(topLeft[0]),
                Math.round(bottomRight[1]),
                Math.round(bottomRight[0]),
                Math.round(topLeft[1])
            ];
            const [top, left, bottom, right] = data.bbox;
            const gridWidth = right + 1 - left;
            const gridHeight = bottom + 1 - top;
            const frames = data.radar.map((record)=>$ab189090502049a5$var$makeSource(record, gridWidth, gridHeight, $ab189090502049a5$var$gridProjection, gridExtent));
            this.frameControl.setFrames(frames);
            if (first) {
                this.frameControl.startAutoplay();
                this.map.getTargetElement().classList.remove("spinner");
            }
        });
    }
    constructor(...args){
        super(...args);
        this._loaded = false;
        this.lat = 0;
        this.lon = 0;
        this.zoom = 9;
        this._loading = false;
    }
}
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $04c21ea1ce1f6057$export$ca000e230c0caa3e)()
], $ab189090502049a5$export$b531eec335465587.prototype, "_loaded", void 0);
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $9cd908ed2625c047$export$d541bacb2bda4494)({
        attribute: false,
        type: Number
    })
], $ab189090502049a5$export$b531eec335465587.prototype, "lat", void 0);
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $9cd908ed2625c047$export$d541bacb2bda4494)({
        attribute: false,
        type: Number
    })
], $ab189090502049a5$export$b531eec335465587.prototype, "lon", void 0);
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $9cd908ed2625c047$export$d541bacb2bda4494)({
        type: Number
    })
], $ab189090502049a5$export$b531eec335465587.prototype, "zoom", void 0);
$ab189090502049a5$export$b531eec335465587 = (0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $14742f68afc766d6$export$da64fc29f17f9d0e)("regenradar-card-map")
], $ab189090502049a5$export$b531eec335465587);


class $a399cc6bbb0eb26a$export$9eee6fffd22320a0 extends (0, $ab210b2da7b39b9d$export$3f2f9f5909897157) {
    setConfig(config) {
        this._header = config.header === "" ? (0, $f58f44579a4747ac$export$45b790e32b2810ee) : config.header;
        this._lat = config.lat;
        this._lon = config.lon;
        // call set hass() to immediately adjust to a changed entity
        // while editing the entity in the card editor
        if (this._hass) this.hass = this._hass;
    }
    set hass(hass) {
        this._hass = hass;
    }
    static{
        // declarative part
        this.styles = (0, $120c5a859c012378$export$9dd6ff9ea0189349);
    }
    render() {
        let content;
        return (0, $f58f44579a4747ac$export$c0bb0b647f701bb5)`
      <ha-card>
        <div class="card-content">
          <regenradar-card-map
              .lat=${this._lat} 
              .lon=${this._lon}>
            
          </regenradar-card-map>
        </div>
      </ha-card>
    `;
    }
    // event handling
    doToggle() {
        this._hass.callService("input_boolean", "toggle", {
            entity_id: this._entity
        });
    }
    // card configuration
    static getConfigElement() {
        return document.createElement("regenradar-card-editor");
    }
    static getStubConfig() {
        return {
            lat: 1.123,
            lon: 2.345,
            zoom: 9
        };
    }
}
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $04c21ea1ce1f6057$export$ca000e230c0caa3e)()
], $a399cc6bbb0eb26a$export$9eee6fffd22320a0.prototype, "_header", void 0);
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $04c21ea1ce1f6057$export$ca000e230c0caa3e)()
], $a399cc6bbb0eb26a$export$9eee6fffd22320a0.prototype, "_entity", void 0);
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $04c21ea1ce1f6057$export$ca000e230c0caa3e)()
], $a399cc6bbb0eb26a$export$9eee6fffd22320a0.prototype, "_name", void 0);
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $04c21ea1ce1f6057$export$ca000e230c0caa3e)()
], $a399cc6bbb0eb26a$export$9eee6fffd22320a0.prototype, "_state", void 0);
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $04c21ea1ce1f6057$export$ca000e230c0caa3e)()
], $a399cc6bbb0eb26a$export$9eee6fffd22320a0.prototype, "_status", void 0);





class $d067581fc0d59830$export$ea0cbdc8711f2274 extends (0, $ab210b2da7b39b9d$export$3f2f9f5909897157) {
    setConfig(config) {
        this._config = config;
    }
    static{
        this.styles = (0, $def2de46b9306e8a$export$dbf350e5966cf602)`
    .table {
      display: table;
    }
    .row {
      display: table-row;
    }
    .cell {
      display: table-cell;
      padding: 0.5em;
    }
  `;
    }
    render() {
        return (0, $f58f44579a4747ac$export$c0bb0b647f701bb5)`
            <form class="table">
                <div class="row">
                    <label class="label cell" for="header">Latitude:</label>
                    <input
                        @change="${this.handleChangedEvent}"
                        class="value cell" id="lat" value="${this._config.lat}"></input>
                </div>
                <div class="row">
                    <label class="label cell" for="entity">Longitude:</label>
                    <input
                        @change="${this.handleChangedEvent}"
                        class="value cell" id="lon" value="${this._config.lon}"></input>
                </div>
            </form>
        `;
    }
    handleChangedEvent(changedEvent) {
        const target = changedEvent.target;
        // this._config is readonly, copy needed
        const newConfig = Object.assign({}, this._config);
        if (target.id == "lat") newConfig.lat = parseFloat(target.value);
        else if (target.id == "lon") newConfig.lon = parseFloat(target.value);
        const messageEvent = new CustomEvent("config-changed", {
            detail: {
                config: newConfig
            },
            bubbles: true,
            composed: true
        });
        this.dispatchEvent(messageEvent);
    }
}
(0, $24c52f343453d62d$export$29e00dfd3077644b)([
    (0, $04c21ea1ce1f6057$export$ca000e230c0caa3e)()
], $d067581fc0d59830$export$ea0cbdc8711f2274.prototype, "_config", void 0);


customElements.define("regenradar-card", (0, $a399cc6bbb0eb26a$export$9eee6fffd22320a0));
customElements.define("regenradar-card-editor", (0, $d067581fc0d59830$export$ea0cbdc8711f2274));
window.customCards = window.customCards || [];
window.customCards.push({
    type: "regenradar-card",
    name: "Regen Radar",
    description: "Regen Radar card"
});


//# sourceMappingURL=card.js.map
